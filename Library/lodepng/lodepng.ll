; ModuleID = 'lodepng.o.bc'
source_filename = "llvm-link"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.LodePNGCompressSettings = type { i32, i32, i32, i32, i32, i32, {}*, {}*, i8* }
%struct.LodePNGDecompressSettings = type { i32, i32, i64, {}*, {}*, i8* }
%"class.lodepng::State" = type { %struct.LodePNGState }
%struct.LodePNGState = type { %struct.LodePNGDecoderSettings, %struct.LodePNGEncoderSettings, %struct.LodePNGColorMode, %struct.LodePNGInfo, i32 }
%struct.LodePNGDecoderSettings = type { %struct.LodePNGDecompressSettings, i32, i32, i32, i32, i32, i32, i64, i64 }
%struct.LodePNGEncoderSettings = type { %struct.LodePNGCompressSettings, i32, i32, i32, i8*, i32, i32, i32 }
%struct.LodePNGColorMode = type { i32, i32, i8*, i64, i32, i32, i32, i32 }
%struct.LodePNGInfo = type { i32, i32, i32, %struct.LodePNGColorMode, i32, i32, i32, i32, i64, i8**, i8**, i64, i8**, i8**, i8**, i8**, i32, %struct.LodePNGTime, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8*, i8*, i32, i32, i32, i32, i32, i32, [3 x i8*], [3 x i64] }
%struct.LodePNGTime = type { i32, i32, i32, i32, i32, i32 }
%struct._IO_FILE = type { i32, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, %struct._IO_marker*, %struct._IO_FILE*, i32, i32, i64, i16, i8, [1 x i8], i8*, i64, %struct._IO_codecvt*, %struct._IO_wide_data*, %struct._IO_FILE*, i8*, i64, i32, [20 x i8] }
%struct._IO_marker = type opaque
%struct._IO_codecvt = type opaque
%struct._IO_wide_data = type opaque
%struct.BPMLists = type { i32, %struct.BPMNode*, i32, i32, %struct.BPMNode**, i32, %struct.BPMNode**, %struct.BPMNode** }
%struct.BPMNode = type { i32, i32, %struct.BPMNode*, i32 }
%struct.ucvector = type { i8*, i64, i64 }
%struct.HuffmanTree = type { i32*, i32*, i32, i32, i8*, i16* }
%struct.uivector = type { i32*, i64, i64 }
%struct.Hash = type { i32*, i16*, i32*, i32*, i16*, i16* }
%struct.LodePNGBitWriter = type { %struct.ucvector*, i8 }
%struct.ColorTree = type { [16 x %struct.ColorTree*], i32 }
%struct.LodePNGColorStats = type { i32, i32, i16, i16, i16, i32, i32, [1024 x i8], i32, i64, i32, i32 }
%"class.std::vector" = type { %"struct.std::_Vector_base" }
%"struct.std::_Vector_base" = type { %"struct.std::_Vector_base<unsigned char, std::allocator<unsigned char> >::_Vector_impl" }
%"struct.std::_Vector_base<unsigned char, std::allocator<unsigned char> >::_Vector_impl" = type { %"struct.std::_Vector_base<unsigned char, std::allocator<unsigned char> >::_Vector_impl_data" }
%"struct.std::_Vector_base<unsigned char, std::allocator<unsigned char> >::_Vector_impl_data" = type { i8*, i8*, i8* }
%"class.std::__cxx11::basic_string" = type { %"struct.std::__cxx11::basic_string<char>::_Alloc_hider", i64, %union.anon }
%"struct.std::__cxx11::basic_string<char>::_Alloc_hider" = type { i8* }
%union.anon = type { i64, [8 x i8] }

$_ZNSt6vectorIhSaIhEE14_M_fill_insertEN9__gnu_cxx17__normal_iteratorIPhS1_EEmRKh = comdat any

$_ZNSt6vectorIhSaIhEE15_M_range_insertIPhEEvN9__gnu_cxx17__normal_iteratorIS3_S1_EET_S7_St20forward_iterator_tag = comdat any

@.str = private unnamed_addr constant [9 x i8] c"20230410\00", align 1
@LODEPNG_VERSION_STRING = dso_local local_unnamed_addr global i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i64 0, i64 0), align 8
@.str.1 = private unnamed_addr constant [3 x i8] c"wb\00", align 1
@lodepng_default_compress_settings = dso_local local_unnamed_addr constant { i32, i32, i32, i32, i32, i32, i32 (i8**, i64*, i8*, i64, %struct.LodePNGCompressSettings*)*, i32 (i8**, i64*, i8*, i64, %struct.LodePNGCompressSettings*)*, i8* } { i32 2, i32 1, i32 2048, i32 3, i32 128, i32 1, i32 (i8**, i64*, i8*, i64, %struct.LodePNGCompressSettings*)* null, i32 (i8**, i64*, i8*, i64, %struct.LodePNGCompressSettings*)* null, i8* null }, align 8
@lodepng_default_decompress_settings = dso_local local_unnamed_addr constant { i32, i32, i64, i32 (i8**, i64*, i8*, i64, %struct.LodePNGDecompressSettings*)*, i32 (i8**, i64*, i8*, i64, %struct.LodePNGDecompressSettings*)*, i8* } zeroinitializer, align 8
@_ZL20lodepng_crc32_table7 = internal unnamed_addr constant [256 x i32] [i32 0, i32 -861273954, i32 1109723005, i32 -1903228957, i32 -2075521286, i32 1222643300, i32 -965801593, i32 180685081, i32 -739959883, i32 525277995, i32 -1849680696, i32 1567235158, i32 1471092047, i32 -1694165551, i32 361370162, i32 -652209492, i32 2092642603, i32 -1341050443, i32 1050555990, i32 -231459128, i32 -118407215, i32 878395215, i32 -1160496980, i32 1987983410, i32 -1352783202, i32 1676945920, i32 -310694429, i32 567356797, i32 722740324, i32 -406969094, i32 1764827929, i32 -1516559481, i32 -109682090, i32 903635656, i32 -1152162517, i32 2012833205, i32 2101111980, i32 -1315541966, i32 1058630609, i32 -206345393, i32 714308067, i32 -432440963, i32 1756790430, i32 -1541636608, i32 -1361479911, i32 1651734407, i32 -319000476, i32 542535930, i32 -2050141315, i32 1231508451, i32 -941075456, i32 188896414, i32 25648519, i32 -852665063, i32 1134713594, i32 -1895277980, i32 1445480648, i32 -1702737834, i32 336416693, i32 -660123861, i32 -765311438, i32 516441772, i32 -1874378417, i32 1559052753, i32 698204909, i32 -449330573, i32 1807271312, i32 -1491942130, i32 -1378366441, i32 1635634313, i32 -269300886, i32 593021940, i32 -92743336, i32 919787974, i32 -1201807835, i32 1962401467, i32 2117261218, i32 -1298606276, i32 1008193759, i32 -255995839, i32 1428616134, i32 -1718815912, i32 386135227, i32 -609618907, i32 -781386436, i32 499580322, i32 -1823868351, i32 1608776415, i32 -2033981325, i32 1248454893, i32 -991498482, i32 139259792, i32 42591881, i32 -836508137, i32 1085071860, i32 -1945706134, i32 -789864261, i32 474062885, i32 -1831950394, i32 1583654744, i32 1419882049, i32 -1744064801, i32 377792828, i32 -634476126, i32 51297038, i32 -811287664, i32 1093385331, i32 -1920877331, i32 -2025540108, i32 1273935210, i32 -983453047, i32 164344343, i32 -1404006000, i32 1627033870, i32 -294283539, i32 585078387, i32 672833386, i32 -458186764, i32 1782552599, i32 -1500145527, i32 2142603813, i32 -1289778501, i32 1032883544, i32 -247820858, i32 -67140385, i32 928351297, i32 -1176861790, i32 1970307900, i32 1396409818, i32 -1617853116, i32 287212199, i32 -575372743, i32 -680424672, i32 467372990, i32 -1789621155, i32 1509854403, i32 -2132894097, i32 1282711281, i32 -1023698670, i32 240228748, i32 76845205, i32 -935423989, i32 1186043880, i32 -1977903242, i32 796964081, i32 -483740561, i32 1839575948, i32 -1592806638, i32 -1412777461, i32 1734392469, i32 -370164362, i32 625327592, i32 -60444860, i32 818917338, i32 -1103058887, i32 1927981223, i32 2016387518, i32 -1266310880, i32 973776579, i32 -157243811, i32 -1437735028, i32 1726474002, i32 -395779855, i32 616751215, i32 772270454, i32 -491918872, i32 1814228491, i32 -1601638763, i32 2041117753, i32 -1258095449, i32 999160644, i32 -148374566, i32 -35458365, i32 826864221, i32 -1077414466, i32 1936586016, i32 -688466265, i32 442291769, i32 -1798057510, i32 1484378436, i32 1388107869, i32 -1642669885, i32 278519584, i32 -600580162, i32 85183762, i32 -910570100, i32 1194773103, i32 -1952658703, i32 -2124823576, i32 1307820918, i32 -1015233387, i32 265733131, i32 2057717559, i32 -1240709207, i32 948125770, i32 -198623020, i32 -18069043, i32 843467091, i32 -1127657808, i32 1885556270, i32 -1455203198, i32 1709792284, i32 -345613313, i32 667704161, i32 755585656, i32 -509390106, i32 1865176325, i32 -1551477349, i32 102594076, i32 -893946238, i32 1144549729, i32 -2003668481, i32 -2108196634, i32 1325234296, i32 -1066238053, i32 215514885, i32 -705139287, i32 424832311, i32 -1747096876, i32 1534552650, i32 1370645331, i32 -1659345971, i32 328688686, i32 -549624656, i32 -2083510943, i32 1333405183, i32 -1040899556, i32 224338562, i32 127544219, i32 -886035707, i32 1170156774, i32 -1995101064, i32 1345666772, i32 -1667285430, i32 303053225, i32 -558221001, i32 -729862098, i32 416624816, i32 -1772472493, i32 1525692365, i32 -9759670, i32 868291796, i32 -1118956745, i32 1910772649, i32 2065767088, i32 -1215620562, i32 956571085, i32 -173138605, i32 747507711, i32 -534507679, i32 1856702594, i32 -1576990692, i32 -1463549691, i32 1684930971, i32 -354351496, i32 642451174], align 16
@_ZL20lodepng_crc32_table6 = internal unnamed_addr constant [256 x i32] [i32 0, i32 -1502147660, i32 -1751183063, i32 837294749, i32 -196140013, i32 1379413927, i32 1674589498, i32 -978895218, i32 871321191, i32 -1785182765, i32 -1536139442, i32 34034938, i32 -945788300, i32 1641505216, i32 1346337629, i32 -163024663, i32 1742642382, i32 -1045850246, i32 -264139289, i32 1446413907, i32 -1819166499, i32 904311657, i32 68069876, i32 -1569086912, i32 1412551337, i32 -230237923, i32 -1011956864, i32 1708771380, i32 -1602292038, i32 101317902, i32 937551763, i32 -1852380121, i32 -809682532, i32 1774858792, i32 1478633653, i32 -27974911, i32 1005723023, i32 -1652222405, i32 -1402139482, i32 169477906, i32 -61704197, i32 1512406095, i32 1808623314, i32 -843420314, i32 136139752, i32 -1368762276, i32 -1618853183, i32 972376437, i32 -1469864622, i32 236236518, i32 1073525883, i32 -1718894641, i32 1546420545, i32 -94663947, i32 -877424536, i32 1841601500, i32 -1685263563, i32 1039917185, i32 202635804, i32 -1436225112, i32 1875103526, i32 -910900078, i32 -128131569, i32 1579931067, i32 1141601657, i32 -495157555, i32 -745249712, i32 1977839588, i32 -1337699990, i32 372464350, i32 668680259, i32 -2119414793, i32 2011446046, i32 -778882902, i32 -528799177, i32 1175200131, i32 -2085937395, i32 635180217, i32 338955812, i32 -1304230512, i32 601221559, i32 -2052922877, i32 -1270155106, i32 306049834, i32 -677720668, i32 1911408144, i32 1074125965, i32 -428681415, i32 272279504, i32 -1236423580, i32 -2019182855, i32 567459149, i32 -462060605, i32 1107462263, i32 1944752874, i32 -711091874, i32 -1950987035, i32 767641425, i32 472473036, i32 -1168222600, i32 2147051766, i32 -644979902, i32 -395937313, i32 1309766251, i32 -1202126206, i32 506333494, i32 801510315, i32 -1984882657, i32 1276520081, i32 -362730203, i32 -611764296, i32 2113813516, i32 -328675285, i32 1243601823, i32 2079834370, i32 -578762058, i32 405271608, i32 -1101987956, i32 -1883708143, i32 701492901, i32 -544760244, i32 2045810168, i32 1209569125, i32 -294681391, i32 734575199, i32 -1916816917, i32 -1135105162, i32 438345922, i32 -2011763982, i32 778166598, i32 529136603, i32 -1174474641, i32 2086260449, i32 -634469035, i32 -339288120, i32 1303499900, i32 -1141267307, i32 495890209, i32 744928700, i32 -1978548728, i32 1337360518, i32 -373191886, i32 -668364369, i32 2120129051, i32 -272075204, i32 1237286280, i32 2018993941, i32 -568300383, i32 461853231, i32 -1108321893, i32 -1944567034, i32 711936178, i32 -601409445, i32 2052076527, i32 1270360434, i32 -305192250, i32 677911624, i32 -1910564868, i32 -1074328223, i32 427820757, i32 1202443118, i32 -505620262, i32 -801848761, i32 1984154099, i32 -1276840067, i32 362020041, i32 612099668, i32 -2113081888, i32 1950653705, i32 -768371011, i32 -472151008, i32 1168934804, i32 -2146715366, i32 645706414, i32 395618355, i32 -1310481529, i32 544559008, i32 -2046671852, i32 -1209377143, i32 295523645, i32 -734368845, i32 1917673479, i32 1134918298, i32 -439193298, i32 328860103, i32 -1242756493, i32 -2080042770, i32 577903450, i32 -405461548, i32 1101147744, i32 1883911421, i32 -700629175, i32 -870473845, i32 1785369663, i32 1535282850, i32 -34241258, i32 944946072, i32 -1641697236, i32 -1345475919, i32 163225861, i32 -863764, i32 1501944408, i32 1752023237, i32 -837104783, i32 196998655, i32 -1379205557, i32 -1675434794, i32 978710370, i32 -1413283003, i32 229902577, i32 1012666988, i32 -1708451368, i32 1603020630, i32 -100979486, i32 -938264961, i32 1852063179, i32 -1741927134, i32 1046169238, i32 263412747, i32 -1446750273, i32 1818454321, i32 -904633723, i32 -67340264, i32 1569420204, i32 60859927, i32 -1512591965, i32 -1807763650, i32 843627658, i32 -135298556, i32 1368951216, i32 1617990445, i32 -972580711, i32 810543216, i32 -1774656572, i32 -1479476903, i32 27783917, i32 -1006580637, i32 1652017111, i32 1402985802, i32 -169289986, i32 1685994201, i32 -1039584915, i32 -203346960, i32 1435902020, i32 -1875829046, i32 910562686, i32 128847843, i32 -1579613097, i32 1469150398, i32 -236552438, i32 -1072798313, i32 1719234083, i32 -1545711443, i32 94984985, i32 876691844, i32 -1841935824], align 16
@_ZL20lodepng_crc32_table5 = internal unnamed_addr constant [256 x i32] [i32 0, i32 -883108955, i32 1304994059, i32 -2037091666, i32 -1684979178, i32 1355649459, i32 -698752227, i32 486879416, i32 -330071443, i32 655315400, i32 -1583668378, i32 1791488195, i32 2009251963, i32 -1130490914, i32 973758832, i32 -245976363, i32 64357019, i32 -930426562, i32 1310630800, i32 -2059243467, i32 -1740160883, i32 1394316072, i32 -711990906, i32 517157411, i32 -276463370, i32 618222419, i32 -1572003331, i32 1762783832, i32 1947517664, i32 -1085796027, i32 970744811, i32 -226447282, i32 128714038, i32 -856631661, i32 1248109629, i32 -2127005800, i32 -1673705696, i32 1466012805, i32 -772413909, i32 447296910, i32 -335575205, i32 547575038, i32 -1506335152, i32 1835791861, i32 1886307661, i32 -1154345240, i32 1034314822, i32 -151341085, i32 75106221, i32 -819538936, i32 1236444838, i32 -2098301693, i32 -1611971141, i32 1421317662, i32 -769399632, i32 427767573, i32 -399931968, i32 594892389, i32 -1511971637, i32 1857943406, i32 1941489622, i32 -1193012109, i32 1047553757, i32 -181619336, i32 257428076, i32 -1006315063, i32 1116777319, i32 -1983088446, i32 -1798748038, i32 1603640287, i32 -654186127, i32 308099796, i32 -485783551, i32 676813732, i32 -1362941686, i32 1704983215, i32 2023410199, i32 -1278862926, i32 894593820, i32 -32589639, i32 210634999, i32 -942482606, i32 1095150076, i32 -1977976231, i32 -1759556895, i32 1547934020, i32 -623383574, i32 294336591, i32 -522351974, i32 729897279, i32 -1391121519, i32 1716123700, i32 2068629644, i32 -1341121751, i32 914647431, i32 -36128222, i32 150212442, i32 -1012343553, i32 1161604689, i32 -1906278924, i32 -1822077620, i32 1480171241, i32 -559027129, i32 368132066, i32 -458781385, i32 805002898, i32 -1452331972, i32 1647574937, i32 2134298401, i32 -1268114300, i32 855535146, i32 -106775153, i32 186781121, i32 -1065427356, i32 1189784778, i32 -1917419665, i32 -1867296809, i32 1542429810, i32 -579080484, i32 371670393, i32 -411988052, i32 741170185, i32 -1430704473, i32 1642462466, i32 2095107514, i32 -1212408289, i32 824732849, i32 -93012204, i32 514856152, i32 -705902723, i32 1400419795, i32 -1742444938, i32 -2061412658, i32 1316849003, i32 -924190779, i32 62202976, i32 -219965771, i32 968836368, i32 -1087686722, i32 1954014235, i32 1769133219, i32 -1574041850, i32 616199592, i32 -270096883, i32 493229635, i32 -700791322, i32 1353627464, i32 -1678613267, i32 -2030611371, i32 1303087088, i32 -885000866, i32 6498043, i32 -248146898, i32 979978123, i32 -1124256475, i32 2007099008, i32 1789187640, i32 -1577581155, i32 661419827, i32 -332356458, i32 421269998, i32 -767507893, i32 1423225061, i32 -1618451648, i32 -2104667144, i32 1238466653, i32 -817499405, i32 68755798, i32 -179334269, i32 1041448998, i32 -1199099256, i32 1943789869, i32 1860096405, i32 -1518206416, i32 588673182, i32 -397761733, i32 449450869, i32 -778649392, i32 1459794558, i32 -1671536165, i32 -2124721821, i32 1242006214, i32 -862719896, i32 131015629, i32 -157708008, i32 1036337853, i32 -1152307181, i32 1879958454, i32 1829294862, i32 -1504444245, i32 549483013, i32 -342056544, i32 300424884, i32 -625685231, i32 1545650111, i32 -1753453542, i32 -1971757918, i32 1092980487, i32 -944636503, i32 216870412, i32 -38036263, i32 921128828, i32 -1334624814, i32 2066738807, i32 1714085583, i32 -1384772246, i32 736264132, i32 -524374943, i32 306060335, i32 -647835766, i32 1610005796, i32 -1800769919, i32 -1984995783, i32 1123257756, i32 -999817422, i32 255536279, i32 -26370494, i32 892423655, i32 -1281015991, i32 2029645036, i32 1711070292, i32 -1365241871, i32 674528607, i32 -479678726, i32 373562242, i32 -585578457, i32 1535949449, i32 -1865389780, i32 -1915397740, i32 1183418929, i32 -1071777633, i32 188820282, i32 -99116561, i32 827017802, i32 -1210107676, i32 2089020225, i32 1636228089, i32 -1428551588, i32 743340786, i32 -418207401, i32 361896217, i32 -556873028, i32 1482340370, i32 -1828295753, i32 -1912382705, i32 1163888810, i32 -1010042364, i32 144124321, i32 -104752268, i32 849168593, i32 -1274463617, i32 2136336858, i32 1649465698, i32 -1458828601, i32 798521449, i32 -456873012], align 16
@_ZL20lodepng_crc32_table4 = internal unnamed_addr constant [256 x i32] [i32 0, i32 1029712304, i32 2059424608, i32 1201699536, i32 -176118080, i32 -924807312, i32 -1891568224, i32 -1306469360, i32 812665793, i32 219177585, i32 1253054625, i32 2010132753, i32 -974066431, i32 -124730191, i32 -1087324575, i32 -2108647471, i32 1625331586, i32 1568718386, i32 438355170, i32 658566482, i32 -1788858046, i32 -1476388622, i32 -274701790, i32 -759149678, i32 1351670851, i32 1844508147, i32 709922595, i32 389064339, i32 -1525646717, i32 -1737469133, i32 -540005917, i32 -491782061, i32 -1044304124, i32 -56555852, i32 -1157530524, i32 -2040441388, i32 876710340, i32 153198708, i32 1317132964, i32 1944187668, i32 -240032571, i32 -858698379, i32 -1955514459, i32 -1240392171, i32 70369797, i32 961670069, i32 2129760613, i32 1133623509, i32 -1591625594, i32 -1673424586, i32 -605951002, i32 -427703722, i32 1419845190, i32 1774270454, i32 778128678, i32 318858390, i32 -1856900281, i32 -1406018825, i32 -342777817, i32 -688813673, i32 1691440519, i32 1504803895, i32 504432359, i32 594620247, i32 1492342857, i32 1704161785, i32 573770537, i32 525542041, i32 -1384907127, i32 -1877747911, i32 -676090391, i32 -355236775, i32 1753420680, i32 1440954936, i32 306397416, i32 790849880, i32 -1660701368, i32 -1604084488, i32 -406591960, i32 -626798696, i32 940822475, i32 91481723, i32 1121164459, i32 2142483739, i32 -845977333, i32 -252493637, i32 -1219282325, i32 -1976364069, i32 140739594, i32 889433530, i32 1923340138, i32 1338244826, i32 -35446070, i32 -1065153670, i32 -2027720278, i32 -1169991654, i32 -1724745907, i32 -1538105603, i32 -470670291, i32 -560853603, i32 1823658381, i32 1372780605, i32 376603373, i32 722643805, i32 -1455276916, i32 -1809705668, i32 -746426388, i32 -287160740, i32 1556257356, i32 1638052860, i32 637716780, i32 459464860, i32 -103620401, i32 -994915969, i32 -2095926353, i32 -1099785697, i32 206718479, i32 825388991, i32 1989285231, i32 1274166495, i32 -912086258, i32 -188579138, i32 -1285359506, i32 -1912417826, i32 1008864718, i32 21111934, i32 1189240494, i32 2072147742, i32 -1310281582, i32 -1937336030, i32 -886643726, i32 -163132862, i32 1147541074, i32 2030452706, i32 1051084082, i32 63335554, i32 -2120811693, i32 -1124674845, i32 -78206925, i32 -969506429, i32 1947622803, i32 1232499747, i32 248909555, i32 867575619, i32 -788125936, i32 -328855904, i32 -1413057424, i32 -1767481920, i32 612794832, i32 434546784, i32 1581699760, i32 1663499008, i32 -512332591, i32 -602520223, i32 -1682554959, i32 -1495919103, i32 351717905, i32 697754529, i32 1849071985, i32 1398190273, i32 1881644950, i32 1296545318, i32 182963446, i32 931652934, i32 -2052638378, i32 -1194913562, i32 -9999818, i32 -1039711354, i32 1079497815, i32 2100821479, i32 983009079, i32 133672583, i32 -1244171625, i32 -2001249497, i32 -820567561, i32 -227080121, i32 281479188, i32 765927844, i32 1778867060, i32 1466397380, i32 -448287020, i32 -668498076, i32 -1618477644, i32 -1561865212, i32 548881365, i32 500656741, i32 1517752501, i32 1729575173, i32 -717757163, i32 -396899163, i32 -1342720395, i32 -1835556923, i32 -384440101, i32 -730480277, i32 -1814709317, i32 -1363832309, i32 479546907, i32 569730987, i32 1716854139, i32 1530213579, i32 -647650534, i32 -469398870, i32 -1549406086, i32 -1631200822, i32 753206746, i32 293940330, i32 1445287610, i32 1799716618, i32 -1980399783, i32 -1265281303, i32 -214619079, i32 -833288823, i32 2088098201, i32 1091956777, i32 112560889, i32 1003856713, i32 -1182452584, i32 -2065359576, i32 -1018861576, i32 -31109560, i32 1275433560, i32 1902492648, i32 918929720, i32 195422344, i32 685033439, i32 364179055, i32 1377080511, i32 1869921551, i32 -581672673, i32 -533444433, i32 -1483459969, i32 -1695278129, i32 413436958, i32 633644462, i32 1650777982, i32 1594160846, i32 -316396834, i32 -800849042, i32 -1746634306, i32 -1434169330, i32 1211387997, i32 1968470509, i32 854852413, i32 261368461, i32 -1112213859, i32 -2133532883, i32 -948656643, i32 -99316659, i32 2017729436, i32 1160000044, i32 42223868, i32 1071931724, i32 -1916486308, i32 -1331391252, i32 -150671812, i32 -899364980], align 16
@_ZL20lodepng_crc32_table3 = internal unnamed_addr constant [256 x i32] [i32 0, i32 -1195612315, i32 -1442199413, i32 313896942, i32 -1889364137, i32 937357362, i32 627793884, i32 -1646839623, i32 -978048785, i32 2097696650, i32 1874714724, i32 -687765759, i32 1255587768, i32 -227878691, i32 -522225869, i32 1482887254, i32 1343838111, i32 -391827206, i32 -99573996, i32 1118632049, i32 -545537848, i32 1741137837, i32 1970407491, i32 -842109146, i32 -1783791760, i32 756094997, i32 1067759611, i32 -2028416866, i32 449832999, i32 -1569484990, i32 -1329192788, i32 142231497, i32 -1607291074, i32 412010587, i32 171665333, i32 -1299775280, i32 793786473, i32 -1746116852, i32 -2057703198, i32 1038456711, i32 1703315409, i32 -583343948, i32 -812691622, i32 1999841343, i32 -354152314, i32 1381529571, i32 1089329165, i32 -128860312, i32 -265553759, i32 1217896388, i32 1512189994, i32 -492939441, i32 2135519222, i32 -940242797, i32 -717183107, i32 1845280792, i32 899665998, i32 -1927039189, i32 -1617553211, i32 657096608, i32 -1157806311, i32 37822588, i32 284462994, i32 -1471616777, i32 -1693165507, i32 598228824, i32 824021174, i32 -1985873965, i32 343330666, i32 -1396004849, i32 -1098971167, i32 113467524, i32 1587572946, i32 -434366537, i32 -190203815, i32 1276501820, i32 -775755899, i32 1769898208, i32 2076913422, i32 -1015592853, i32 -888336478, i32 1941006535, i32 1627703081, i32 -642211764, i32 1148164341, i32 -53215344, i32 -295284610, i32 1457141531, i32 247015245, i32 -1241169880, i32 -1531908154, i32 470583459, i32 -2116308966, i32 963106687, i32 735213713, i32 -1821499404, i32 992409347, i32 -2087022490, i32 -1859174520, i32 697522413, i32 -1270587308, i32 217581361, i32 508405983, i32 -1494102086, i32 -23928852, i32 1177467017, i32 1419450215, i32 -332959742, i32 1911572667, i32 -917753890, i32 -604405712, i32 1665525589, i32 1799331996, i32 -746338311, i32 -1053399017, i32 2039091058, i32 -463652917, i32 1558270126, i32 1314193216, i32 -152528859, i32 -1366587277, i32 372764438, i32 75645176, i32 -1136777315, i32 568925988, i32 -1722451903, i32 -1948198993, i32 861712586, i32 -312887749, i32 1441124702, i32 1196457648, i32 -1304107, i32 1648042348, i32 -628668919, i32 -936187417, i32 1888390786, i32 686661332, i32 -1873675855, i32 -2098964897, i32 978858298, i32 -1483798141, i32 523464422, i32 226935048, i32 -1254447507, i32 -1119821404, i32 100435649, i32 390670639, i32 -1342878134, i32 841119475, i32 -1969352298, i32 -1741963656, i32 546822429, i32 2029308235, i32 -1068978642, i32 -755170880, i32 1782671013, i32 -141140452, i32 1328167289, i32 1570739863, i32 -450629134, i32 1298864389, i32 -170426784, i32 -412954226, i32 1608431339, i32 -1039561134, i32 2058742071, i32 1744848601, i32 -792976964, i32 -1998638614, i32 811816591, i32 584513889, i32 -1704288764, i32 129869501, i32 -1090403880, i32 -1380684234, i32 352848211, i32 494030490, i32 -1513215489, i32 -1216641519, i32 264757620, i32 -1844389427, i32 715964072, i32 941166918, i32 -2136639965, i32 -658086283, i32 1618608400, i32 1926213374, i32 -898381413, i32 1470427426, i32 -283601337, i32 -38979159, i32 1158766284, i32 1984818694, i32 -823031453, i32 -599513459, i32 1693991400, i32 -114329263, i32 1100160564, i32 1395044826, i32 -342174017, i32 -1275476247, i32 189112716, i32 435162722, i32 -1588827897, i32 1016811966, i32 -2077804837, i32 -1768777419, i32 774831696, i32 643086745, i32 -1628905732, i32 -1940033262, i32 887166583, i32 -1456066866, i32 294275499, i32 54519365, i32 -1149009632, i32 -471821962, i32 1532818963, i32 1240029693, i32 -246071656, i32 1820460577, i32 -734109372, i32 -963916118, i32 2117577167, i32 -696303304, i32 1858283101, i32 2088143283, i32 -993333546, i32 1495127663, i32 -509497078, i32 -216785180, i32 1269332353, i32 332098007, i32 -1418260814, i32 -1178427044, i32 25085497, i32 -1666580864, i32 605395429, i32 916469259, i32 -1910746770, i32 -2040129881, i32 1054503362, i32 745528876, i32 -1798063799, i32 151290352, i32 -1313282411, i32 -1559410309, i32 464596510, i32 1137851976, i32 -76654291, i32 -371460413, i32 1365741990, i32 -860837601, i32 1946996346, i32 1723425172, i32 -570095887], align 16
@_ZL20lodepng_crc32_table2 = internal unnamed_addr constant [256 x i32] [i32 0, i32 29518391, i32 59036782, i32 38190681, i32 118073564, i32 114017003, i32 76381362, i32 89069189, i32 236147128, i32 265370511, i32 228034006, i32 206958561, i32 152762724, i32 148411219, i32 178138378, i32 190596925, i32 472294256, i32 501532999, i32 530741022, i32 509615401, i32 456068012, i32 451764635, i32 413917122, i32 426358261, i32 305525448, i32 334993663, i32 296822438, i32 275991697, i32 356276756, i32 352202787, i32 381193850, i32 393929805, i32 944588512, i32 965684439, i32 1003065998, i32 973863097, i32 1061482044, i32 1049003019, i32 1019230802, i32 1023561829, i32 912136024, i32 933002607, i32 903529270, i32 874031361, i32 827834244, i32 815125939, i32 852716522, i32 856752605, i32 611050896, i32 631869351, i32 669987326, i32 640506825, i32 593644876, i32 580921211, i32 551983394, i32 556069653, i32 712553512, i32 733666847, i32 704405574, i32 675154545, i32 762387700, i32 749958851, i32 787859610, i32 792175277, i32 1889177024, i32 1901651959, i32 1931368878, i32 1927033753, i32 2006131996, i32 1985040171, i32 1947726194, i32 1976933189, i32 2122964088, i32 2135668303, i32 2098006038, i32 2093965857, i32 2038461604, i32 2017599123, i32 2047123658, i32 2076625661, i32 1824272048, i32 1836991623, i32 1866005214, i32 1861914857, i32 1807058540, i32 1786244187, i32 1748062722, i32 1777547317, i32 1655668488, i32 1668093247, i32 1630251878, i32 1625932113, i32 1705433044, i32 1684323811, i32 1713505210, i32 1742760333, i32 1222101792, i32 1226154263, i32 1263738702, i32 1251046777, i32 1339974652, i32 1310460363, i32 1281013650, i32 1301863845, i32 1187289752, i32 1191637167, i32 1161842422, i32 1149379777, i32 1103966788, i32 1074747507, i32 1112139306, i32 1133218845, i32 1425107024, i32 1429406311, i32 1467333694, i32 1454888457, i32 1408811148, i32 1379576507, i32 1350309090, i32 1371438805, i32 1524775400, i32 1528845279, i32 1499917702, i32 1487177649, i32 1575719220, i32 1546255107, i32 1584350554, i32 1605185389, i32 -516613248, i32 -520654409, i32 -491663378, i32 -478960167, i32 -432229540, i32 -402728597, i32 -440899790, i32 -461763323, i32 -282703304, i32 -287039473, i32 -324886954, i32 -312413087, i32 -399514908, i32 -370308909, i32 -341100918, i32 -362193731, i32 -49039120, i32 -53357881, i32 -23630690, i32 -11204951, i32 -98955220, i32 -69699045, i32 -107035582, i32 -128143755, i32 -218044088, i32 -222133377, i32 -259769050, i32 -247048431, i32 -200719980, i32 -171234397, i32 -141715974, i32 -162529331, i32 -646423200, i32 -658884777, i32 -620984050, i32 -616635591, i32 -562956868, i32 -541876341, i32 -571137582, i32 -600355867, i32 -680850216, i32 -693541137, i32 -722478922, i32 -718425471, i32 -798841852, i32 -777990605, i32 -739872662, i32 -769385891, i32 -983630320, i32 -996371417, i32 -958780802, i32 -954711991, i32 -1034463540, i32 -1013629701, i32 -1043103070, i32 -1072568171, i32 -884101208, i32 -896547425, i32 -926319674, i32 -922021391, i32 -867956876, i32 -846828221, i32 -809446630, i32 -838682323, i32 -1850763712, i32 -1871840137, i32 -1842658770, i32 -1813436391, i32 -1767489892, i32 -1755032405, i32 -1792873742, i32 -1797226299, i32 -1615017992, i32 -1635865137, i32 -1674046570, i32 -1644529247, i32 -1732939996, i32 -1720253165, i32 -1691239606, i32 -1695297155, i32 -1920387792, i32 -1941217529, i32 -1911692962, i32 -1882223767, i32 -1971282452, i32 -1958545445, i32 -1996207742, i32 -2000280651, i32 -2087033720, i32 -2108158273, i32 -2145472282, i32 -2116232495, i32 -2070688684, i32 -2058246557, i32 -2028529606, i32 -2032831987, i32 -1444753248, i32 -1474250089, i32 -1436154674, i32 -1415287047, i32 -1360299908, i32 -1356262837, i32 -1385190382, i32 -1397897691, i32 -1477345000, i32 -1506546897, i32 -1535814282, i32 -1514717375, i32 -1594349116, i32 -1590017037, i32 -1552089686, i32 -1564567651, i32 -1245416496, i32 -1274668569, i32 -1237276738, i32 -1216164471, i32 -1295131892, i32 -1290817221, i32 -1320611998, i32 -1333041835, i32 -1143528856, i32 -1173010337, i32 -1202457082, i32 -1181639631, i32 -1126266188, i32 -1122180989, i32 -1084596518, i32 -1097321235], align 16
@_ZL20lodepng_crc32_table1 = internal unnamed_addr constant [256 x i32] [i32 0, i32 421212481, i32 842424962, i32 724390851, i32 1684849924, i32 2105013317, i32 1448781702, i32 1329698503, i32 -925267448, i32 -775767223, i32 -84940662, i32 -470492725, i32 -1397403892, i32 -1246855603, i32 -1635570290, i32 -2020074289, i32 1254232657, i32 1406739216, i32 2029285587, i32 1643069842, i32 783210325, i32 934667796, i32 479770071, i32 92505238, i32 -2112120743, i32 -1694455528, i32 -1339163941, i32 -1456026726, i32 -428384931, i32 -9671652, i32 -733921313, i32 -849736034, i32 -1786501982, i32 -1935731229, i32 -1481488864, i32 -1096190111, i32 -236396122, i32 -386674457, i32 -1008827612, i32 -624577947, i32 1566420650, i32 1145479147, i32 1869335592, i32 1987116393, i32 959540142, i32 539646703, i32 185010476, i32 303839341, i32 -549046541, i32 -966981710, i32 -311405455, i32 -194288336, i32 -1154812937, i32 -1573797194, i32 -1994616459, i32 -1878548428, i32 396344571, i32 243568058, i32 631889529, i32 1018359608, i32 1945336319, i32 1793607870, i32 1103436669, i32 1490954812, i32 -260485371, i32 -379421116, i32 -1034998393, i32 -615244602, i32 -1810527743, i32 -1928414400, i32 -1507596157, i32 -1086793278, i32 950060301, i32 565965900, i32 177645455, i32 328046286, i32 1556873225, i32 1171730760, i32 1861902987, i32 2011255754, i32 -1162125996, i32 -1549767659, i32 -2004009002, i32 -1852436841, i32 -556296112, i32 -942888687, i32 -320734510, i32 -168113261, i32 1919080284, i32 1803150877, i32 1079293406, i32 1498383519, i32 370020952, i32 253043481, i32 607678682, i32 1025720731, i32 1711106983, i32 2095471334, i32 1472923941, i32 1322268772, i32 26324643, i32 411738082, i32 866634785, i32 717028704, i32 -1390091857, i32 -1270886162, i32 -1626176723, i32 -2046184852, i32 -918018901, i32 -799861270, i32 -75610583, i32 -496666776, i32 792689142, i32 908347575, i32 487136116, i32 68299317, i32 1263779058, i32 1380486579, i32 2036719216, i32 1618931505, i32 -404294658, i32 -16923969, i32 -707751556, i32 -859070403, i32 -2088093958, i32 -1701771333, i32 -1313057672, i32 -1465424583, i32 998479947, i32 580430090, i32 162921161, i32 279890824, i32 1609522511, i32 1190423566, i32 1842954189, i32 1958874764, i32 -212200893, i32 -364829950, i32 -1049857855, i32 -663273088, i32 -1758013625, i32 -1909594618, i32 -1526680123, i32 -1139047292, i32 1900120602, i32 1750776667, i32 1131931800, i32 1517083097, i32 355290910, i32 204897887, i32 656092572, i32 1040194781, i32 -1181220846, i32 -1602014893, i32 -1951505776, i32 -1833610287, i32 -571161322, i32 -990907305, i32 -272455788, i32 -153512235, i32 -1375224599, i32 -1222865496, i32 -1674453397, i32 -2060783830, i32 -898926099, i32 -747616084, i32 -128115857, i32 -515495378, i32 1725839073, i32 2143618976, i32 1424512099, i32 1307796770, i32 45282277, i32 464110244, i32 813994343, i32 698327078, i32 -456806728, i32 -35741703, i32 -688665542, i32 -806814341, i32 -2136380484, i32 -1716364547, i32 -1298200258, i32 -1417398145, i32 740041904, i32 889656817, i32 506086962, i32 120682355, i32 1215357364, i32 1366020341, i32 2051441462, i32 1667084919, i32 -872753330, i32 -756947441, i32 -104024628, i32 -522746739, i32 -1349119414, i32 -1232264437, i32 -1650429752, i32 -2068102775, i32 52649286, i32 439905287, i32 823476164, i32 672009861, i32 1733269570, i32 2119477507, i32 1434057408, i32 1281543041, i32 -2126985953, i32 -1742474146, i32 -1290885219, i32 -1441425700, i32 -447479781, i32 -61918886, i32 -681418087, i32 -830909480, i32 1239502615, i32 1358593622, i32 2077699477, i32 1657543892, i32 764250643, i32 882293586, i32 532408465, i32 111204816, i32 1585378284, i32 1197851309, i32 1816695150, i32 1968414767, i32 974272232, i32 587794345, i32 136598634, i32 289367339, i32 -1767409180, i32 -1883486043, i32 -1533994138, i32 -1115018713, i32 -221528864, i32 -338653791, i32 -1057104286, i32 -639176925, i32 347922877, i32 229101820, i32 646611775, i32 1066513022, i32 1892689081, i32 1774917112, i32 1122387515, i32 1543337850, i32 -597333067, i32 -981574924, i32 -296548041, i32 -146261898, i32 -1207325007, i32 -1592614928, i32 -1975530445, i32 -1826292366], align 16
@_ZL20lodepng_crc32_table0 = internal unnamed_addr constant [256 x i32] [i32 0, i32 1996959894, i32 -301047508, i32 -1727442502, i32 124634137, i32 1886057615, i32 -379345611, i32 -1637575261, i32 249268274, i32 2044508324, i32 -522852066, i32 -1747789432, i32 162941995, i32 2125561021, i32 -407360249, i32 -1866523247, i32 498536548, i32 1789927666, i32 -205950648, i32 -2067906082, i32 450548861, i32 1843258603, i32 -187386543, i32 -2083289657, i32 325883990, i32 1684777152, i32 -43845254, i32 -1973040660, i32 335633487, i32 1661365465, i32 -99664541, i32 -1928851979, i32 997073096, i32 1281953886, i32 -715111964, i32 -1570279054, i32 1006888145, i32 1258607687, i32 -770865667, i32 -1526024853, i32 901097722, i32 1119000684, i32 -608450090, i32 -1396901568, i32 853044451, i32 1172266101, i32 -589951537, i32 -1412350631, i32 651767980, i32 1373503546, i32 -925412992, i32 -1076862698, i32 565507253, i32 1454621731, i32 -809855591, i32 -1195530993, i32 671266974, i32 1594198024, i32 -972236366, i32 -1324619484, i32 795835527, i32 1483230225, i32 -1050600021, i32 -1234817731, i32 1994146192, i32 31158534, i32 -1731059524, i32 -271249366, i32 1907459465, i32 112637215, i32 -1614814043, i32 -390540237, i32 2013776290, i32 251722036, i32 -1777751922, i32 -519137256, i32 2137656763, i32 141376813, i32 -1855689577, i32 -429695999, i32 1802195444, i32 476864866, i32 -2056965928, i32 -228458418, i32 1812370925, i32 453092731, i32 -2113342271, i32 -183516073, i32 1706088902, i32 314042704, i32 -1950435094, i32 -54949764, i32 1658658271, i32 366619977, i32 -1932296973, i32 -69972891, i32 1303535960, i32 984961486, i32 -1547960204, i32 -725929758, i32 1256170817, i32 1037604311, i32 -1529756563, i32 -740887301, i32 1131014506, i32 879679996, i32 -1385723834, i32 -631195440, i32 1141124467, i32 855842277, i32 -1442165665, i32 -586318647, i32 1342533948, i32 654459306, i32 -1106571248, i32 -921952122, i32 1466479909, i32 544179635, i32 -1184443383, i32 -832445281, i32 1591671054, i32 702138776, i32 -1328506846, i32 -942167884, i32 1504918807, i32 783551873, i32 -1212326853, i32 -1061524307, i32 -306674912, i32 -1698712650, i32 62317068, i32 1957810842, i32 -355121351, i32 -1647151185, i32 81470997, i32 1943803523, i32 -480048366, i32 -1805370492, i32 225274430, i32 2053790376, i32 -468791541, i32 -1828061283, i32 167816743, i32 2097651377, i32 -267414716, i32 -2029476910, i32 503444072, i32 1762050814, i32 -144550051, i32 -2140837941, i32 426522225, i32 1852507879, i32 -19653770, i32 -1982649376, i32 282753626, i32 1742555852, i32 -105259153, i32 -1900089351, i32 397917763, i32 1622183637, i32 -690576408, i32 -1580100738, i32 953729732, i32 1340076626, i32 -776247311, i32 -1497606297, i32 1068828381, i32 1219638859, i32 -670225446, i32 -1358292148, i32 906185462, i32 1090812512, i32 -547295293, i32 -1469587627, i32 829329135, i32 1181335161, i32 -882789492, i32 -1134132454, i32 628085408, i32 1382605366, i32 -871598187, i32 -1156888829, i32 570562233, i32 1426400815, i32 -977650754, i32 -1296233688, i32 733239954, i32 1555261956, i32 -1026031705, i32 -1244606671, i32 752459403, i32 1541320221, i32 -1687895376, i32 -328994266, i32 1969922972, i32 40735498, i32 -1677130071, i32 -351390145, i32 1913087877, i32 83908371, i32 -1782625662, i32 -491226604, i32 2075208622, i32 213261112, i32 -1831694693, i32 -438977011, i32 2094854071, i32 198958881, i32 -2032938284, i32 -237706686, i32 1759359992, i32 534414190, i32 -2118248755, i32 -155638181, i32 1873836001, i32 414664567, i32 -2012718362, i32 -15766928, i32 1711684554, i32 285281116, i32 -1889165569, i32 -127750551, i32 1634467795, i32 376229701, i32 -1609899400, i32 -686959890, i32 1308918612, i32 956543938, i32 -1486412191, i32 -799009033, i32 1231636301, i32 1047427035, i32 -1362007478, i32 -640263460, i32 1088359270, i32 936918000, i32 -1447252397, i32 -558129467, i32 1202900863, i32 817233897, i32 -1111625188, i32 -893730166, i32 1404277552, i32 615818150, i32 -1160759803, i32 -841546093, i32 1423857449, i32 601450431, i32 -1285129682, i32 -1000256840, i32 1567103746, i32 711928724, i32 -1274298825, i32 -1022587231, i32 1510334235, i32 755167117], align 16
@.str.2 = private unnamed_addr constant [5 x i8] c"IHDR\00", align 1
@.str.6 = private unnamed_addr constant [5 x i8] c"tEXt\00", align 1
@.str.7 = private unnamed_addr constant [5 x i8] c"zTXt\00", align 1
@.str.8 = private unnamed_addr constant [5 x i8] c"iTXt\00", align 1
@.str.9 = private unnamed_addr constant [5 x i8] c"tIME\00", align 1
@.str.10 = private unnamed_addr constant [5 x i8] c"pHYs\00", align 1
@.str.11 = private unnamed_addr constant [5 x i8] c"gAMA\00", align 1
@.str.12 = private unnamed_addr constant [5 x i8] c"cHRM\00", align 1
@.str.13 = private unnamed_addr constant [5 x i8] c"sRGB\00", align 1
@.str.14 = private unnamed_addr constant [5 x i8] c"iCCP\00", align 1
@.str.15 = private unnamed_addr constant [5 x i8] c"sBIT\00", align 1
@.str.16 = private unnamed_addr constant [8 x i8] c"LodePNG\00", align 1
@.str.17 = private unnamed_addr constant [29 x i8] c"no error, everything went ok\00", align 1
@.str.18 = private unnamed_addr constant [17 x i8] c"nothing done yet\00", align 1
@.str.19 = private unnamed_addr constant [53 x i8] c"end of input memory reached without huffman end code\00", align 1
@.str.20 = private unnamed_addr constant [56 x i8] c"error in code tree made it jump outside of huffman tree\00", align 1
@.str.21 = private unnamed_addr constant [47 x i8] c"problem while processing dynamic deflate block\00", align 1
@.str.22 = private unnamed_addr constant [52 x i8] c"invalid code while processing dynamic deflate block\00", align 1
@.str.23 = private unnamed_addr constant [49 x i8] c"end of out buffer memory reached while inflating\00", align 1
@.str.24 = private unnamed_addr constant [38 x i8] c"invalid distance code while inflating\00", align 1
@.str.25 = private unnamed_addr constant [55 x i8] c"invalid deflate block BTYPE encountered while decoding\00", align 1
@.str.26 = private unnamed_addr constant [54 x i8] c"NLEN is not ones complement of LEN in a deflate block\00", align 1
@.str.27 = private unnamed_addr constant [48 x i8] c"end of in buffer memory reached while inflating\00", align 1
@.str.28 = private unnamed_addr constant [30 x i8] c"invalid FCHECK in zlib header\00", align 1
@.str.29 = private unnamed_addr constant [42 x i8] c"invalid compression method in zlib header\00", align 1
@.str.30 = private unnamed_addr constant [61 x i8] c"FDICT encountered in zlib header while it's not used for PNG\00", align 1
@.str.31 = private unnamed_addr constant [38 x i8] c"PNG file is smaller than a PNG header\00", align 1
@.str.32 = private unnamed_addr constant [50 x i8] c"incorrect PNG signature, it's no PNG or corrupted\00", align 1
@.str.33 = private unnamed_addr constant [36 x i8] c"first chunk is not the header chunk\00", align 1
@.str.34 = private unnamed_addr constant [56 x i8] c"chunk length too large, chunk broken off at end of file\00", align 1
@.str.35 = private unnamed_addr constant [30 x i8] c"illegal PNG color type or bpp\00", align 1
@.str.36 = private unnamed_addr constant [31 x i8] c"illegal PNG compression method\00", align 1
@.str.37 = private unnamed_addr constant [26 x i8] c"illegal PNG filter method\00", align 1
@.str.38 = private unnamed_addr constant [29 x i8] c"illegal PNG interlace method\00", align 1
@.str.39 = private unnamed_addr constant [60 x i8] c"chunk length of a chunk is too large or the chunk too small\00", align 1
@.str.40 = private unnamed_addr constant [36 x i8] c"illegal PNG filter type encountered\00", align 1
@.str.41 = private unnamed_addr constant [44 x i8] c"illegal bit depth for this color type given\00", align 1
@.str.42 = private unnamed_addr constant [36 x i8] c"the palette is too small or too big\00", align 1
@.str.43 = private unnamed_addr constant [61 x i8] c"tRNS chunk before PLTE or has more entries than palette size\00", align 1
@.str.44 = private unnamed_addr constant [46 x i8] c"tRNS chunk has wrong size for grayscale image\00", align 1
@.str.45 = private unnamed_addr constant [40 x i8] c"tRNS chunk has wrong size for RGB image\00", align 1
@.str.46 = private unnamed_addr constant [65 x i8] c"tRNS chunk appeared while it was not allowed for this color type\00", align 1
@.str.47 = private unnamed_addr constant [44 x i8] c"bKGD chunk has wrong size for palette image\00", align 1
@.str.48 = private unnamed_addr constant [46 x i8] c"bKGD chunk has wrong size for grayscale image\00", align 1
@.str.49 = private unnamed_addr constant [40 x i8] c"bKGD chunk has wrong size for RGB image\00", align 1
@.str.50 = private unnamed_addr constant [72 x i8] c"empty input buffer given to decoder. Maybe caused by non-existing file?\00", align 1
@.str.51 = private unnamed_addr constant [57 x i8] c"jumped past memory while generating dynamic huffman tree\00", align 1
@.str.52 = private unnamed_addr constant [49 x i8] c"jumped past memory while inflating huffman block\00", align 1
@.str.53 = private unnamed_addr constant [35 x i8] c"jumped past memory while inflating\00", align 1
@.str.54 = private unnamed_addr constant [28 x i8] c"size of zlib data too small\00", align 1
@.str.55 = private unnamed_addr constant [58 x i8] c"repeat symbol in tree while there was no value symbol yet\00", align 1
@.str.56 = private unnamed_addr constant [47 x i8] c"jumped past tree while generating huffman tree\00", align 1
@.str.57 = private unnamed_addr constant [76 x i8] c"given output image colortype or bitdepth not supported for color conversion\00", align 1
@.str.58 = private unnamed_addr constant [55 x i8] c"invalid CRC encountered (checking CRC can be disabled)\00", align 1
@.str.59 = private unnamed_addr constant [63 x i8] c"invalid ADLER32 encountered (checking ADLER32 can be disabled)\00", align 1
@.str.60 = private unnamed_addr constant [41 x i8] c"requested color conversion not supported\00", align 1
@.str.61 = private unnamed_addr constant [75 x i8] c"invalid window size given in the settings of the encoder (must be 0-32768)\00", align 1
@.str.62 = private unnamed_addr constant [81 x i8] c"invalid BTYPE given in the settings of the encoder (only 0, 1 and 2 are allowed)\00", align 1
@.str.63 = private unnamed_addr constant [49 x i8] c"conversion from color to grayscale not supported\00", align 1
@.str.64 = private unnamed_addr constant [78 x i8] c"length of a chunk too long, max allowed for PNG is 2147483647 bytes per chunk\00", align 1
@.str.65 = private unnamed_addr constant [58 x i8] c"the length of the END symbol 256 in the Huffman tree is 0\00", align 1
@.str.66 = private unnamed_addr constant [95 x i8] c"the length of a text chunk keyword given to the encoder is longer than the maximum of 79 bytes\00", align 1
@.str.67 = private unnamed_addr constant [94 x i8] c"the length of a text chunk keyword given to the encoder is smaller than the minimum of 1 byte\00", align 1
@.str.68 = private unnamed_addr constant [89 x i8] c"tried to encode a PLTE chunk with a palette that has less than 1 or more than 256 colors\00", align 1
@.str.69 = private unnamed_addr constant [67 x i8] c"unknown chunk type with 'critical' flag encountered by the decoder\00", align 1
@.str.70 = private unnamed_addr constant [57 x i8] c"invalid interlace mode given to encoder (must be 0 or 1)\00", align 1
@.str.71 = private unnamed_addr constant [93 x i8] c"while decoding, invalid compression method encountering in zTXt or iTXt chunk (it must be 0)\00", align 1
@.str.72 = private unnamed_addr constant [24 x i8] c"invalid tIME chunk size\00", align 1
@.str.73 = private unnamed_addr constant [24 x i8] c"invalid pHYs chunk size\00", align 1
@.str.74 = private unnamed_addr constant [57 x i8] c"no null termination char found while decoding text chunk\00", align 1
@.str.75 = private unnamed_addr constant [47 x i8] c"iTXt chunk too short to contain required bytes\00", align 1
@.str.76 = private unnamed_addr constant [32 x i8] c"integer overflow in buffer size\00", align 1
@.str.77 = private unnamed_addr constant [32 x i8] c"failed to open file for reading\00", align 1
@.str.78 = private unnamed_addr constant [32 x i8] c"failed to open file for writing\00", align 1
@.str.79 = private unnamed_addr constant [35 x i8] c"tried creating a tree of 0 symbols\00", align 1
@.str.80 = private unnamed_addr constant [37 x i8] c"lazy matching at pos 0 is impossible\00", align 1
@.str.81 = private unnamed_addr constant [93 x i8] c"color conversion to palette requested while a color isn't in palette, or index out of bounds\00", align 1
@.str.82 = private unnamed_addr constant [25 x i8] c"memory allocation failed\00", align 1
@.str.83 = private unnamed_addr constant [58 x i8] c"given image too small to contain all pixels to be encoded\00", align 1
@.str.84 = private unnamed_addr constant [50 x i8] c"impossible offset in lz77 encoding (internal bug)\00", align 1
@.str.85 = private unnamed_addr constant [81 x i8] c"must provide custom zlib function pointer if LODEPNG_COMPILE_ZLIB is not defined\00", align 1
@.str.86 = private unnamed_addr constant [73 x i8] c"invalid filter strategy given for LodePNGEncoderSettings.filter_strategy\00", align 1
@.str.87 = private unnamed_addr constant [58 x i8] c"text chunk keyword too short or long: must have size 1-79\00", align 1
@.str.88 = private unnamed_addr constant [34 x i8] c"windowsize must be a power of two\00", align 1
@.str.89 = private unnamed_addr constant [31 x i8] c"invalid decompressed idat size\00", align 1
@.str.90 = private unnamed_addr constant [40 x i8] c"integer overflow due to too many pixels\00", align 1
@.str.91 = private unnamed_addr constant [32 x i8] c"zero width or height is invalid\00", align 1
@.str.92 = private unnamed_addr constant [42 x i8] c"header chunk must have a size of 13 bytes\00", align 1
@.str.93 = private unnamed_addr constant [47 x i8] c"integer overflow with combined idat chunk size\00", align 1
@.str.94 = private unnamed_addr constant [24 x i8] c"invalid gAMA chunk size\00", align 1
@.str.95 = private unnamed_addr constant [24 x i8] c"invalid cHRM chunk size\00", align 1
@.str.96 = private unnamed_addr constant [24 x i8] c"invalid sRGB chunk size\00", align 1
@.str.97 = private unnamed_addr constant [30 x i8] c"invalid sRGB rendering intent\00", align 1
@.str.98 = private unnamed_addr constant [78 x i8] c"invalid ICC profile color type, the PNG specification only allows RGB or GRAY\00", align 1
@.str.99 = private unnamed_addr constant [84 x i8] c"PNG specification does not allow RGB ICC profile on gray color types and vice versa\00", align 1
@.str.100 = private unnamed_addr constant [82 x i8] c"not allowed to set grayscale ICC profile with colored pixels by PNG specification\00", align 1
@.str.101 = private unnamed_addr constant [70 x i8] c"invalid palette index in bKGD chunk. Maybe it came before PLTE chunk?\00", align 1
@.str.102 = private unnamed_addr constant [68 x i8] c"invalid bKGD color while encoding (e.g. palette index out of range)\00", align 1
@.str.103 = private unnamed_addr constant [28 x i8] c"integer overflow of bitsize\00", align 1
@.str.104 = private unnamed_addr constant [55 x i8] c"PNG file must have PLTE chunk if color type is palette\00", align 1
@.str.105 = private unnamed_addr constant [81 x i8] c"color convert from palette mode requested without setting the palette data in it\00", align 1
@.str.106 = private unnamed_addr constant [47 x i8] c"tried to add more than 256 values to a palette\00", align 1
@.str.107 = private unnamed_addr constant [77 x i8] c"tried to decompress zlib or deflate data larger than desired max_output_size\00", align 1
@.str.108 = private unnamed_addr constant [44 x i8] c"custom zlib or inflate decompression failed\00", align 1
@.str.109 = private unnamed_addr constant [42 x i8] c"custom zlib or deflate compression failed\00", align 1
@.str.110 = private unnamed_addr constant [35 x i8] c"compressed text unreasonably large\00", align 1
@.str.111 = private unnamed_addr constant [31 x i8] c"ICC profile unreasonably large\00", align 1
@.str.112 = private unnamed_addr constant [58 x i8] c"sBIT chunk has wrong size for the color type of the image\00", align 1
@.str.113 = private unnamed_addr constant [24 x i8] c"sBIT value out of range\00", align 1
@.str.114 = private unnamed_addr constant [19 x i8] c"unknown error code\00", align 1
@.str.115 = private unnamed_addr constant [3 x i8] c"rb\00", align 1
@_ZL10LENGTHBASE = internal unnamed_addr constant [29 x i32] [i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 13, i32 15, i32 17, i32 19, i32 23, i32 27, i32 31, i32 35, i32 43, i32 51, i32 59, i32 67, i32 83, i32 99, i32 115, i32 131, i32 163, i32 195, i32 227, i32 258], align 16
@_ZL11LENGTHEXTRA = internal unnamed_addr constant [29 x i32] [i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 1, i32 1, i32 1, i32 2, i32 2, i32 2, i32 2, i32 3, i32 3, i32 3, i32 3, i32 4, i32 4, i32 4, i32 4, i32 5, i32 5, i32 5, i32 5, i32 0], align 16
@_ZL12DISTANCEBASE = internal unnamed_addr constant [30 x i32] [i32 1, i32 2, i32 3, i32 4, i32 5, i32 7, i32 9, i32 13, i32 17, i32 25, i32 33, i32 49, i32 65, i32 97, i32 129, i32 193, i32 257, i32 385, i32 513, i32 769, i32 1025, i32 1537, i32 2049, i32 3073, i32 4097, i32 6145, i32 8193, i32 12289, i32 16385, i32 24577], align 16
@_ZL13DISTANCEEXTRA = internal unnamed_addr constant [30 x i32] [i32 0, i32 0, i32 0, i32 0, i32 1, i32 1, i32 2, i32 2, i32 3, i32 3, i32 4, i32 4, i32 5, i32 5, i32 6, i32 6, i32 7, i32 7, i32 8, i32 8, i32 9, i32 9, i32 10, i32 10, i32 11, i32 11, i32 12, i32 12, i32 13, i32 13], align 16
@_ZL10CLCL_ORDER = internal unnamed_addr constant [19 x i32] [i32 16, i32 17, i32 18, i32 0, i32 8, i32 7, i32 9, i32 6, i32 10, i32 5, i32 11, i32 4, i32 12, i32 3, i32 13, i32 2, i32 14, i32 1, i32 15], align 16
@_ZL8ADAM7_DX = internal unnamed_addr constant [7 x i32] [i32 8, i32 8, i32 4, i32 4, i32 2, i32 2, i32 1], align 16
@_ZL8ADAM7_IX = internal unnamed_addr constant [7 x i32] [i32 0, i32 4, i32 0, i32 2, i32 0, i32 1, i32 0], align 16
@_ZL8ADAM7_DY = internal unnamed_addr constant [7 x i32] [i32 8, i32 8, i32 8, i32 4, i32 4, i32 2, i32 2], align 16
@_ZL8ADAM7_IY = internal unnamed_addr constant [7 x i32] [i32 0, i32 0, i32 4, i32 0, i32 2, i32 0, i32 1], align 16
@.str.118 = private unnamed_addr constant [23 x i8] c"vector::_M_fill_insert\00", align 1
@.str.119 = private unnamed_addr constant [24 x i8] c"vector::_M_range_insert\00", align 1
@switch.table._ZL18checkColorValidity16LodePNGColorTypej = private unnamed_addr constant [8 x i32] [i32 0, i32 0, i32 37, i32 0, i32 37, i32 37, i32 37, i32 0], align 4
@switch.table._Z18lodepng_error_textj = private unnamed_addr constant [116 x i8*] [i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.17, i64 0, i64 0), i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.18, i64 0, i64 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.114, i64 0, i64 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.114, i64 0, i64 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.114, i64 0, i64 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.114, i64 0, i64 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.114, i64 0, i64 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.114, i64 0, i64 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.114, i64 0, i64 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.114, i64 0, i64 0), i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.19, i64 0, i64 0), i8* getelementptr inbounds ([56 x i8], [56 x i8]* @.str.20, i64 0, i64 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.114, i64 0, i64 0), i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.21, i64 0, i64 0), i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.21, i64 0, i64 0), i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.21, i64 0, i64 0), i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.22, i64 0, i64 0), i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.23, i64 0, i64 0), i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.24, i64 0, i64 0), i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.23, i64 0, i64 0), i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.25, i64 0, i64 0), i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.26, i64 0, i64 0), i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.23, i64 0, i64 0), i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.27, i64 0, i64 0), i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.28, i64 0, i64 0), i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.29, i64 0, i64 0), i8* getelementptr inbounds ([61 x i8], [61 x i8]* @.str.30, i64 0, i64 0), i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.31, i64 0, i64 0), i8* getelementptr inbounds ([50 x i8], [50 x i8]* @.str.32, i64 0, i64 0), i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.33, i64 0, i64 0), i8* getelementptr inbounds ([56 x i8], [56 x i8]* @.str.34, i64 0, i64 0), i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.35, i64 0, i64 0), i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.36, i64 0, i64 0), i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.37, i64 0, i64 0), i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.38, i64 0, i64 0), i8* getelementptr inbounds ([60 x i8], [60 x i8]* @.str.39, i64 0, i64 0), i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.40, i64 0, i64 0), i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.41, i64 0, i64 0), i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.42, i64 0, i64 0), i8* getelementptr inbounds ([61 x i8], [61 x i8]* @.str.43, i64 0, i64 0), i8* getelementptr inbounds ([46 x i8], [46 x i8]* @.str.44, i64 0, i64 0), i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.45, i64 0, i64 0), i8* getelementptr inbounds ([65 x i8], [65 x i8]* @.str.46, i64 0, i64 0), i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.47, i64 0, i64 0), i8* getelementptr inbounds ([46 x i8], [46 x i8]* @.str.48, i64 0, i64 0), i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.49, i64 0, i64 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.114, i64 0, i64 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.114, i64 0, i64 0), i8* getelementptr inbounds ([72 x i8], [72 x i8]* @.str.50, i64 0, i64 0), i8* getelementptr inbounds ([57 x i8], [57 x i8]* @.str.51, i64 0, i64 0), i8* getelementptr inbounds ([57 x i8], [57 x i8]* @.str.51, i64 0, i64 0), i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.52, i64 0, i64 0), i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.53, i64 0, i64 0), i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.54, i64 0, i64 0), i8* getelementptr inbounds ([58 x i8], [58 x i8]* @.str.55, i64 0, i64 0), i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.56, i64 0, i64 0), i8* getelementptr inbounds ([76 x i8], [76 x i8]* @.str.57, i64 0, i64 0), i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.58, i64 0, i64 0), i8* getelementptr inbounds ([63 x i8], [63 x i8]* @.str.59, i64 0, i64 0), i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.60, i64 0, i64 0), i8* getelementptr inbounds ([75 x i8], [75 x i8]* @.str.61, i64 0, i64 0), i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.62, i64 0, i64 0), i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.63, i64 0, i64 0), i8* getelementptr inbounds ([78 x i8], [78 x i8]* @.str.64, i64 0, i64 0), i8* getelementptr inbounds ([58 x i8], [58 x i8]* @.str.65, i64 0, i64 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.114, i64 0, i64 0), i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.66, i64 0, i64 0), i8* getelementptr inbounds ([94 x i8], [94 x i8]* @.str.67, i64 0, i64 0), i8* getelementptr inbounds ([89 x i8], [89 x i8]* @.str.68, i64 0, i64 0), i8* getelementptr inbounds ([67 x i8], [67 x i8]* @.str.69, i64 0, i64 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.114, i64 0, i64 0), i8* getelementptr inbounds ([57 x i8], [57 x i8]* @.str.70, i64 0, i64 0), i8* getelementptr inbounds ([93 x i8], [93 x i8]* @.str.71, i64 0, i64 0), i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.72, i64 0, i64 0), i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.73, i64 0, i64 0), i8* getelementptr inbounds ([57 x i8], [57 x i8]* @.str.74, i64 0, i64 0), i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.75, i64 0, i64 0), i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.76, i64 0, i64 0), i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.77, i64 0, i64 0), i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.78, i64 0, i64 0), i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.79, i64 0, i64 0), i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.80, i64 0, i64 0), i8* getelementptr inbounds ([93 x i8], [93 x i8]* @.str.81, i64 0, i64 0), i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.82, i64 0, i64 0), i8* getelementptr inbounds ([58 x i8], [58 x i8]* @.str.83, i64 0, i64 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.114, i64 0, i64 0), i8* getelementptr inbounds ([50 x i8], [50 x i8]* @.str.84, i64 0, i64 0), i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.85, i64 0, i64 0), i8* getelementptr inbounds ([73 x i8], [73 x i8]* @.str.86, i64 0, i64 0), i8* getelementptr inbounds ([58 x i8], [58 x i8]* @.str.87, i64 0, i64 0), i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.88, i64 0, i64 0), i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.89, i64 0, i64 0), i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.90, i64 0, i64 0), i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.91, i64 0, i64 0), i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.92, i64 0, i64 0), i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.93, i64 0, i64 0), i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.94, i64 0, i64 0), i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.95, i64 0, i64 0), i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.96, i64 0, i64 0), i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.97, i64 0, i64 0), i8* getelementptr inbounds ([78 x i8], [78 x i8]* @.str.98, i64 0, i64 0), i8* getelementptr inbounds ([84 x i8], [84 x i8]* @.str.99, i64 0, i64 0), i8* getelementptr inbounds ([82 x i8], [82 x i8]* @.str.100, i64 0, i64 0), i8* getelementptr inbounds ([70 x i8], [70 x i8]* @.str.101, i64 0, i64 0), i8* getelementptr inbounds ([68 x i8], [68 x i8]* @.str.102, i64 0, i64 0), i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.103, i64 0, i64 0), i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.104, i64 0, i64 0), i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.105, i64 0, i64 0), i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.106, i64 0, i64 0), i8* getelementptr inbounds ([77 x i8], [77 x i8]* @.str.107, i64 0, i64 0), i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.108, i64 0, i64 0), i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.109, i64 0, i64 0), i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.110, i64 0, i64 0), i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.111, i64 0, i64 0), i8* getelementptr inbounds ([58 x i8], [58 x i8]* @.str.112, i64 0, i64 0), i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.113, i64 0, i64 0)], align 8

@_ZN7lodepng5StateC1Ev = dso_local unnamed_addr alias void (%"class.lodepng::State"*), void (%"class.lodepng::State"*)* @_ZN7lodepng5StateC2Ev
@_ZN7lodepng5StateC1ERKS0_ = dso_local unnamed_addr alias void (%"class.lodepng::State"*, %"class.lodepng::State"*), void (%"class.lodepng::State"*, %"class.lodepng::State"*)* @_ZN7lodepng5StateC2ERKS0_
@_ZN7lodepng5StateD1Ev = dso_local unnamed_addr alias void (%"class.lodepng::State"*), void (%"class.lodepng::State"*)* @_ZN7lodepng5StateD2Ev

; Function Attrs: nofree nounwind uwtable
define dso_local noundef i32 @_Z17lodepng_load_filePPhPmPKc(i8** nocapture noundef writeonly %0, i64* nocapture noundef writeonly %1, i8* nocapture noundef readonly %2) local_unnamed_addr #0 {
  %4 = tail call noalias %struct._IO_FILE* @fopen(i8* noundef %2, i8* noundef getelementptr inbounds ([3 x i8], [3 x i8]* @.str.115, i64 0, i64 0)) #25
  %5 = icmp eq %struct._IO_FILE* %4, null
  br i1 %5, label %30, label %6

6:                                                ; preds = %3
  %7 = tail call i32 @fseek(%struct._IO_FILE* noundef nonnull %4, i64 noundef 0, i32 noundef 2) #25
  %8 = icmp eq i32 %7, 0
  br i1 %8, label %9, label %12

9:                                                ; preds = %6
  %10 = tail call i64 @ftell(%struct._IO_FILE* noundef nonnull %4) #25
  %11 = icmp eq i64 %10, 9223372036854775807
  br i1 %11, label %12, label %14

12:                                               ; preds = %6, %9
  %13 = tail call i32 @fclose(%struct._IO_FILE* noundef nonnull %4) #25
  br label %30

14:                                               ; preds = %9
  %15 = tail call i32 @fclose(%struct._IO_FILE* noundef nonnull %4) #25
  %16 = icmp slt i64 %10, 0
  br i1 %16, label %30, label %17

17:                                               ; preds = %14
  store i64 %10, i64* %1, align 8, !tbaa !3
  %18 = tail call noalias i8* @malloc(i64 noundef %10) #25
  store i8* %18, i8** %0, align 8, !tbaa !7
  %19 = icmp eq i8* %18, null
  %20 = icmp ne i64 %10, 0
  %21 = and i1 %20, %19
  br i1 %21, label %30, label %22

22:                                               ; preds = %17
  %23 = tail call noalias %struct._IO_FILE* @fopen(i8* noundef %2, i8* noundef getelementptr inbounds ([3 x i8], [3 x i8]* @.str.115, i64 0, i64 0)) #25
  %24 = icmp eq %struct._IO_FILE* %23, null
  br i1 %24, label %30, label %25

25:                                               ; preds = %22
  %26 = tail call i64 @fread(i8* noundef %18, i64 noundef 1, i64 noundef %10, %struct._IO_FILE* noundef nonnull %23) #25
  %27 = tail call i32 @fclose(%struct._IO_FILE* noundef nonnull %23) #25
  %28 = icmp eq i64 %26, %10
  %29 = select i1 %28, i32 0, i32 78
  br label %30

30:                                               ; preds = %3, %25, %22, %12, %17, %14
  %31 = phi i32 [ 78, %14 ], [ 83, %17 ], [ 78, %12 ], [ 78, %22 ], [ %29, %25 ], [ 78, %3 ]
  ret i32 %31
}

; Function Attrs: nofree nounwind
declare dso_local noalias noundef %struct._IO_FILE* @fopen(i8* nocapture noundef readonly, i8* nocapture noundef readonly) local_unnamed_addr #1

; Function Attrs: nofree nounwind
declare dso_local noundef i32 @fseek(%struct._IO_FILE* nocapture noundef, i64 noundef, i32 noundef) local_unnamed_addr #1

; Function Attrs: nofree nounwind
declare dso_local noundef i64 @ftell(%struct._IO_FILE* nocapture noundef) local_unnamed_addr #1

; Function Attrs: nofree nounwind
declare dso_local noundef i32 @fclose(%struct._IO_FILE* nocapture noundef) local_unnamed_addr #1

; Function Attrs: inaccessiblememonly mustprogress nofree nounwind willreturn
declare dso_local noalias noundef i8* @malloc(i64 noundef) local_unnamed_addr #2

; Function Attrs: nofree nounwind
declare dso_local noundef i64 @fread(i8* nocapture noundef, i64 noundef, i64 noundef, %struct._IO_FILE* nocapture noundef) local_unnamed_addr #1

; Function Attrs: nofree nounwind uwtable
define dso_local noundef i32 @_Z17lodepng_save_filePKhmPKc(i8* nocapture noundef %0, i64 noundef %1, i8* nocapture noundef readonly %2) local_unnamed_addr #0 {
  %4 = tail call noalias %struct._IO_FILE* @fopen(i8* noundef %2, i8* noundef getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0))
  %5 = icmp eq %struct._IO_FILE* %4, null
  br i1 %5, label %9, label %6

6:                                                ; preds = %3
  %7 = tail call i64 @fwrite(i8* noundef %0, i64 noundef 1, i64 noundef %1, %struct._IO_FILE* noundef nonnull %4)
  %8 = tail call i32 @fclose(%struct._IO_FILE* noundef nonnull %4)
  br label %9

9:                                                ; preds = %3, %6
  %10 = phi i32 [ 0, %6 ], [ 79, %3 ]
  ret i32 %10
}

; Function Attrs: nofree nounwind
declare dso_local noundef i64 @fwrite(i8* nocapture noundef, i64 noundef, i64 noundef, %struct._IO_FILE* nocapture noundef) local_unnamed_addr #1

; Function Attrs: nounwind uwtable
define dso_local noundef i32 @_Z28lodepng_huffman_code_lengthsPjPKjmj(i32* nocapture noundef %0, i32* nocapture noundef readonly %1, i64 noundef %2, i32 noundef %3) local_unnamed_addr #3 {
  %5 = alloca %struct.BPMLists, align 8
  %6 = icmp eq i64 %2, 0
  %7 = shl nuw i32 1, %3
  %8 = trunc i64 %2 to i32
  %9 = icmp ult i32 %7, %8
  %10 = select i1 %6, i1 true, i1 %9
  br i1 %10, label %426, label %11

11:                                               ; preds = %4
  %12 = mul i64 %2, 24
  %13 = tail call noalias i8* @malloc(i64 noundef %12) #25
  %14 = bitcast i8* %13 to %struct.BPMNode*
  %15 = icmp eq i8* %13, null
  br i1 %15, label %426, label %16

16:                                               ; preds = %11, %27
  %17 = phi i64 [ %30, %27 ], [ 0, %11 ]
  %18 = phi i64 [ %28, %27 ], [ 0, %11 ]
  %19 = getelementptr inbounds i32, i32* %1, i64 %17
  %20 = load i32, i32* %19, align 4, !tbaa !9
  %21 = icmp eq i32 %20, 0
  br i1 %21, label %27, label %22

22:                                               ; preds = %16
  %23 = trunc i64 %17 to i32
  %24 = getelementptr inbounds %struct.BPMNode, %struct.BPMNode* %14, i64 %18, i32 0
  store i32 %20, i32* %24, align 8, !tbaa !11
  %25 = getelementptr inbounds %struct.BPMNode, %struct.BPMNode* %14, i64 %18, i32 1
  store i32 %23, i32* %25, align 4, !tbaa !13
  %26 = add i64 %18, 1
  br label %27

27:                                               ; preds = %16, %22
  %28 = phi i64 [ %26, %22 ], [ %18, %16 ]
  %29 = add nuw nsw i64 %17, 1
  %30 = and i64 %29, 4294967295
  %31 = icmp eq i64 %30, %2
  br i1 %31, label %32, label %16

32:                                               ; preds = %27
  %33 = shl i64 %2, 2
  %34 = icmp eq i64 %33, 0
  br i1 %34, label %37, label %35

35:                                               ; preds = %32
  %36 = bitcast i32* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %36, i8 0, i64 %33, i1 false) #25, !tbaa !14, !alias.scope !15
  br label %37

37:                                               ; preds = %32, %35
  switch i64 %28, label %49 [
    i64 0, label %38
    i64 1, label %40
  ]

38:                                               ; preds = %37
  %39 = getelementptr inbounds i32, i32* %0, i64 1
  store i32 1, i32* %39, align 4, !tbaa !9
  store i32 1, i32* %0, align 4, !tbaa !9
  br label %424

40:                                               ; preds = %37
  %41 = getelementptr inbounds i8, i8* %13, i64 4
  %42 = bitcast i8* %41 to i32*
  %43 = load i32, i32* %42, align 4, !tbaa !13
  %44 = zext i32 %43 to i64
  %45 = getelementptr inbounds i32, i32* %0, i64 %44
  store i32 1, i32* %45, align 4, !tbaa !9
  %46 = icmp eq i32 %43, 0
  %47 = zext i1 %46 to i64
  %48 = getelementptr inbounds i32, i32* %0, i64 %47
  store i32 1, i32* %48, align 4, !tbaa !9
  br label %424

49:                                               ; preds = %37
  %50 = bitcast %struct.BPMLists* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 56, i8* nonnull %50) #25
  %51 = mul i64 %28, 24
  %52 = tail call noalias i8* @malloc(i64 noundef %51) #25
  %53 = bitcast i8* %52 to %struct.BPMNode*
  br label %54

54:                                               ; preds = %49, %100
  %55 = phi i64 [ %61, %100 ], [ 1, %49 ]
  %56 = phi i64 [ %101, %100 ], [ 0, %49 ]
  %57 = and i64 %56, 1
  %58 = icmp eq i64 %57, 0
  %59 = select i1 %58, %struct.BPMNode* %14, %struct.BPMNode* %53
  %60 = select i1 %58, %struct.BPMNode* %53, %struct.BPMNode* %14
  %61 = shl i64 %55, 1
  br label %64

62:                                               ; preds = %90, %64
  %63 = icmp ult i64 %69, %28
  br i1 %63, label %64, label %100

64:                                               ; preds = %62, %54
  %65 = phi i64 [ 0, %54 ], [ %69, %62 ]
  %66 = add i64 %65, %55
  %67 = icmp ugt i64 %66, %28
  %68 = select i1 %67, i64 %28, i64 %66
  %69 = add i64 %65, %61
  %70 = icmp ugt i64 %69, %28
  %71 = select i1 %70, i64 %28, i64 %69
  %72 = icmp ult i64 %65, %71
  br i1 %72, label %73, label %62

73:                                               ; preds = %64, %90
  %74 = phi i64 [ %98, %90 ], [ %65, %64 ]
  %75 = phi i64 [ %93, %90 ], [ %68, %64 ]
  %76 = phi i64 [ %92, %90 ], [ %65, %64 ]
  %77 = icmp ult i64 %76, %68
  br i1 %77, label %78, label %88

78:                                               ; preds = %73
  %79 = icmp ult i64 %75, %71
  br i1 %79, label %80, label %86

80:                                               ; preds = %78
  %81 = getelementptr inbounds %struct.BPMNode, %struct.BPMNode* %59, i64 %76, i32 0
  %82 = load i32, i32* %81, align 8, !tbaa !11
  %83 = getelementptr inbounds %struct.BPMNode, %struct.BPMNode* %59, i64 %75, i32 0
  %84 = load i32, i32* %83, align 8, !tbaa !11
  %85 = icmp sgt i32 %82, %84
  br i1 %85, label %88, label %86

86:                                               ; preds = %80, %78
  %87 = add nuw i64 %76, 1
  br label %90

88:                                               ; preds = %80, %73
  %89 = add i64 %75, 1
  br label %90

90:                                               ; preds = %88, %86
  %91 = phi i64 [ %76, %86 ], [ %75, %88 ]
  %92 = phi i64 [ %87, %86 ], [ %76, %88 ]
  %93 = phi i64 [ %75, %86 ], [ %89, %88 ]
  %94 = getelementptr inbounds %struct.BPMNode, %struct.BPMNode* %59, i64 %91
  %95 = getelementptr inbounds %struct.BPMNode, %struct.BPMNode* %60, i64 %74
  %96 = bitcast %struct.BPMNode* %95 to i8*
  %97 = bitcast %struct.BPMNode* %94 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(24) %96, i8* noundef nonnull align 8 dereferenceable(24) %97, i64 24, i1 false) #25
  %98 = add nuw i64 %74, 1
  %99 = icmp ult i64 %98, %71
  br i1 %99, label %73, label %62

100:                                              ; preds = %62
  %101 = add i64 %56, 1
  %102 = icmp ult i64 %61, %28
  br i1 %102, label %54, label %103

103:                                              ; preds = %100
  %104 = and i64 %101, 1
  %105 = icmp eq i64 %104, 0
  %106 = icmp eq i64 %51, 0
  %107 = or i1 %106, %105
  br i1 %107, label %109, label %108

108:                                              ; preds = %103
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %13, i8* align 1 %52, i64 %51, i1 false) #25, !tbaa !14, !alias.scope !18
  br label %109

109:                                              ; preds = %103, %108
  tail call void @free(i8* noundef %52) #25
  %110 = getelementptr inbounds %struct.BPMLists, %struct.BPMLists* %5, i64 0, i32 5
  store i32 %3, i32* %110, align 8, !tbaa !22
  %111 = shl i32 %3, 1
  %112 = add i32 %3, 1
  %113 = mul i32 %111, %112
  %114 = getelementptr inbounds %struct.BPMLists, %struct.BPMLists* %5, i64 0, i32 0
  store i32 %113, i32* %114, align 8, !tbaa !24
  %115 = getelementptr inbounds %struct.BPMLists, %struct.BPMLists* %5, i64 0, i32 3
  store i32 0, i32* %115, align 4, !tbaa !25
  %116 = getelementptr inbounds %struct.BPMLists, %struct.BPMLists* %5, i64 0, i32 2
  store i32 %113, i32* %116, align 8, !tbaa !26
  %117 = zext i32 %113 to i64
  %118 = mul nuw nsw i64 %117, 24
  %119 = tail call noalias i8* @malloc(i64 noundef %118) #25
  %120 = getelementptr inbounds %struct.BPMLists, %struct.BPMLists* %5, i64 0, i32 1
  %121 = bitcast %struct.BPMNode** %120 to i8**
  store i8* %119, i8** %121, align 8, !tbaa !27
  %122 = shl nuw nsw i64 %117, 3
  %123 = tail call noalias i8* @malloc(i64 noundef %122) #25
  %124 = getelementptr inbounds %struct.BPMLists, %struct.BPMLists* %5, i64 0, i32 4
  %125 = bitcast %struct.BPMNode*** %124 to i8**
  store i8* %123, i8** %125, align 8, !tbaa !28
  %126 = zext i32 %3 to i64
  %127 = shl nuw nsw i64 %126, 3
  %128 = tail call noalias i8* @malloc(i64 noundef %127) #25
  %129 = getelementptr inbounds %struct.BPMLists, %struct.BPMLists* %5, i64 0, i32 6
  %130 = bitcast %struct.BPMNode*** %129 to i8**
  store i8* %128, i8** %130, align 8, !tbaa !29
  %131 = tail call noalias i8* @malloc(i64 noundef %127) #25
  %132 = getelementptr inbounds %struct.BPMLists, %struct.BPMLists* %5, i64 0, i32 7
  %133 = bitcast %struct.BPMNode*** %132 to i8**
  store i8* %131, i8** %133, align 8, !tbaa !30
  %134 = icmp ne i8* %119, null
  %135 = icmp ne i8* %123, null
  %136 = and i1 %134, %135
  %137 = icmp ne i8* %128, null
  %138 = and i1 %136, %137
  %139 = icmp ne i8* %131, null
  %140 = and i1 %139, %138
  %141 = select i1 %140, i32 0, i32 83
  br i1 %140, label %142, label %419

142:                                              ; preds = %109
  %143 = icmp eq i32 %113, 0
  br i1 %143, label %152, label %144

144:                                              ; preds = %142
  %145 = bitcast i8* %123 to i8**
  store i8* %119, i8** %145, align 8, !tbaa !7
  %146 = add nsw i64 %117, -1
  %147 = add nsw i64 %117, -2
  %148 = and i64 %146, 3
  %149 = icmp ult i64 %147, 3
  br i1 %149, label %180, label %150

150:                                              ; preds = %144
  %151 = and i64 %146, -4
  br label %155

152:                                              ; preds = %142
  %153 = bitcast i8* %13 to i32*
  %154 = load i32, i32* %153, align 8, !tbaa !11
  br label %195

155:                                              ; preds = %155, %150
  %156 = phi i64 [ 1, %150 ], [ %177, %155 ]
  %157 = phi i64 [ 0, %150 ], [ %178, %155 ]
  %158 = load %struct.BPMNode*, %struct.BPMNode** %120, align 8, !tbaa !27
  %159 = load %struct.BPMNode**, %struct.BPMNode*** %124, align 8, !tbaa !28
  %160 = getelementptr inbounds %struct.BPMNode, %struct.BPMNode* %158, i64 %156
  %161 = getelementptr inbounds %struct.BPMNode*, %struct.BPMNode** %159, i64 %156
  store %struct.BPMNode* %160, %struct.BPMNode** %161, align 8, !tbaa !7
  %162 = add nuw nsw i64 %156, 1
  %163 = load %struct.BPMNode*, %struct.BPMNode** %120, align 8, !tbaa !27
  %164 = load %struct.BPMNode**, %struct.BPMNode*** %124, align 8, !tbaa !28
  %165 = getelementptr inbounds %struct.BPMNode, %struct.BPMNode* %163, i64 %162
  %166 = getelementptr inbounds %struct.BPMNode*, %struct.BPMNode** %164, i64 %162
  store %struct.BPMNode* %165, %struct.BPMNode** %166, align 8, !tbaa !7
  %167 = add nuw nsw i64 %156, 2
  %168 = load %struct.BPMNode*, %struct.BPMNode** %120, align 8, !tbaa !27
  %169 = load %struct.BPMNode**, %struct.BPMNode*** %124, align 8, !tbaa !28
  %170 = getelementptr inbounds %struct.BPMNode, %struct.BPMNode* %168, i64 %167
  %171 = getelementptr inbounds %struct.BPMNode*, %struct.BPMNode** %169, i64 %167
  store %struct.BPMNode* %170, %struct.BPMNode** %171, align 8, !tbaa !7
  %172 = add nuw nsw i64 %156, 3
  %173 = load %struct.BPMNode*, %struct.BPMNode** %120, align 8, !tbaa !27
  %174 = load %struct.BPMNode**, %struct.BPMNode*** %124, align 8, !tbaa !28
  %175 = getelementptr inbounds %struct.BPMNode, %struct.BPMNode* %173, i64 %172
  %176 = getelementptr inbounds %struct.BPMNode*, %struct.BPMNode** %174, i64 %172
  store %struct.BPMNode* %175, %struct.BPMNode** %176, align 8, !tbaa !7
  %177 = add nuw nsw i64 %156, 4
  %178 = add i64 %157, 4
  %179 = icmp eq i64 %178, %151
  br i1 %179, label %180, label %155

180:                                              ; preds = %144, %155
  %181 = phi i64 [ 1, %144 ], [ %177, %155 ]
  br label %182

182:                                              ; preds = %182, %180
  %183 = phi i64 [ %181, %180 ], [ %189, %182 ]
  %184 = phi i64 [ 0, %180 ], [ %190, %182 ]
  %185 = load %struct.BPMNode*, %struct.BPMNode** %120, align 8, !tbaa !27
  %186 = load %struct.BPMNode**, %struct.BPMNode*** %124, align 8, !tbaa !28
  %187 = getelementptr inbounds %struct.BPMNode, %struct.BPMNode* %185, i64 %183
  %188 = getelementptr inbounds %struct.BPMNode*, %struct.BPMNode** %186, i64 %183
  store %struct.BPMNode* %187, %struct.BPMNode** %188, align 8, !tbaa !7
  %189 = add nuw nsw i64 %183, 1
  %190 = add i64 %184, 1
  %191 = icmp eq i64 %190, %148
  br i1 %191, label %192, label %182, !llvm.loop !31

192:                                              ; preds = %182
  %193 = bitcast i8* %13 to i32*
  %194 = load i32, i32* %193, align 8, !tbaa !11
  br i1 %143, label %195, label %226

195:                                              ; preds = %152, %192
  %196 = phi i32 [ %154, %152 ], [ %194, %192 ]
  %197 = icmp eq i32 %3, 0
  br i1 %197, label %225, label %198

198:                                              ; preds = %195
  %199 = load %struct.BPMNode**, %struct.BPMNode*** %129, align 8, !tbaa !29
  %200 = load %struct.BPMNode**, %struct.BPMNode*** %132, align 8, !tbaa !30
  br label %201

201:                                              ; preds = %222, %198
  %202 = phi i64 [ 0, %198 ], [ %223, %222 ]
  %203 = getelementptr inbounds %struct.BPMNode*, %struct.BPMNode** %199, i64 %202
  %204 = load %struct.BPMNode*, %struct.BPMNode** %203, align 8, !tbaa !7
  %205 = icmp eq %struct.BPMNode* %204, null
  br i1 %205, label %212, label %206

206:                                              ; preds = %201, %206
  %207 = phi %struct.BPMNode* [ %210, %206 ], [ %204, %201 ]
  %208 = getelementptr inbounds %struct.BPMNode, %struct.BPMNode* %207, i64 0, i32 3
  store i32 1, i32* %208, align 8, !tbaa !33
  %209 = getelementptr inbounds %struct.BPMNode, %struct.BPMNode* %207, i64 0, i32 2
  %210 = load %struct.BPMNode*, %struct.BPMNode** %209, align 8, !tbaa !7
  %211 = icmp eq %struct.BPMNode* %210, null
  br i1 %211, label %212, label %206

212:                                              ; preds = %206, %201
  %213 = getelementptr inbounds %struct.BPMNode*, %struct.BPMNode** %200, i64 %202
  %214 = load %struct.BPMNode*, %struct.BPMNode** %213, align 8, !tbaa !7
  %215 = icmp eq %struct.BPMNode* %214, null
  br i1 %215, label %222, label %216

216:                                              ; preds = %212, %216
  %217 = phi %struct.BPMNode* [ %220, %216 ], [ %214, %212 ]
  %218 = getelementptr inbounds %struct.BPMNode, %struct.BPMNode* %217, i64 0, i32 3
  store i32 1, i32* %218, align 8, !tbaa !33
  %219 = getelementptr inbounds %struct.BPMNode, %struct.BPMNode* %217, i64 0, i32 2
  %220 = load %struct.BPMNode*, %struct.BPMNode** %219, align 8, !tbaa !7
  %221 = icmp eq %struct.BPMNode* %220, null
  br i1 %221, label %222, label %216

222:                                              ; preds = %216, %212
  %223 = add nuw nsw i64 %202, 1
  %224 = icmp eq i64 %223, %126
  br i1 %224, label %225, label %201

225:                                              ; preds = %222, %195
  store i32 0, i32* %116, align 8, !tbaa !26
  br label %226

226:                                              ; preds = %225, %192
  %227 = phi i32 [ %196, %225 ], [ %194, %192 ]
  %228 = phi i32 [ 0, %225 ], [ %113, %192 ]
  %229 = load %struct.BPMNode**, %struct.BPMNode*** %124, align 8, !tbaa !28
  %230 = load %struct.BPMNode*, %struct.BPMNode** %229, align 8, !tbaa !7
  %231 = getelementptr inbounds %struct.BPMNode, %struct.BPMNode* %230, i64 0, i32 0
  store i32 %227, i32* %231, align 8, !tbaa !11
  %232 = getelementptr inbounds %struct.BPMNode, %struct.BPMNode* %230, i64 0, i32 1
  store i32 1, i32* %232, align 4, !tbaa !13
  %233 = getelementptr inbounds %struct.BPMNode, %struct.BPMNode* %230, i64 0, i32 2
  store %struct.BPMNode* null, %struct.BPMNode** %233, align 8, !tbaa !34
  %234 = getelementptr inbounds i8, i8* %13, i64 24
  %235 = bitcast i8* %234 to i32*
  %236 = load i32, i32* %235, align 8, !tbaa !11
  %237 = icmp ugt i32 %228, 1
  br i1 %237, label %334, label %238

238:                                              ; preds = %226
  br i1 %143, label %256, label %239

239:                                              ; preds = %238
  %240 = load %struct.BPMNode*, %struct.BPMNode** %120, align 8, !tbaa !27
  %241 = add nsw i64 %117, -1
  %242 = and i64 %117, 2
  %243 = icmp ult i64 %241, 3
  br i1 %243, label %246, label %244

244:                                              ; preds = %239
  %245 = and i64 %117, 4294967292
  br label %261

246:                                              ; preds = %261, %239
  %247 = phi i64 [ 0, %239 ], [ %271, %261 ]
  %248 = icmp eq i64 %242, 0
  br i1 %248, label %256, label %249

249:                                              ; preds = %246, %249
  %250 = phi i64 [ %253, %249 ], [ %247, %246 ]
  %251 = phi i64 [ %254, %249 ], [ 0, %246 ]
  %252 = getelementptr inbounds %struct.BPMNode, %struct.BPMNode* %240, i64 %250, i32 3
  store i32 0, i32* %252, align 8, !tbaa !33
  %253 = add nuw nsw i64 %250, 1
  %254 = add i64 %251, 1
  %255 = icmp eq i64 %254, %242
  br i1 %255, label %256, label %249, !llvm.loop !35

256:                                              ; preds = %246, %249, %238
  %257 = icmp eq i32 %3, 0
  br i1 %257, label %298, label %258

258:                                              ; preds = %256
  %259 = load %struct.BPMNode**, %struct.BPMNode*** %129, align 8, !tbaa !29
  %260 = load %struct.BPMNode**, %struct.BPMNode*** %132, align 8, !tbaa !30
  br label %274

261:                                              ; preds = %261, %244
  %262 = phi i64 [ 0, %244 ], [ %271, %261 ]
  %263 = phi i64 [ 0, %244 ], [ %272, %261 ]
  %264 = getelementptr inbounds %struct.BPMNode, %struct.BPMNode* %240, i64 %262, i32 3
  store i32 0, i32* %264, align 8, !tbaa !33
  %265 = or i64 %262, 1
  %266 = getelementptr inbounds %struct.BPMNode, %struct.BPMNode* %240, i64 %265, i32 3
  store i32 0, i32* %266, align 8, !tbaa !33
  %267 = or i64 %262, 2
  %268 = getelementptr inbounds %struct.BPMNode, %struct.BPMNode* %240, i64 %267, i32 3
  store i32 0, i32* %268, align 8, !tbaa !33
  %269 = or i64 %262, 3
  %270 = getelementptr inbounds %struct.BPMNode, %struct.BPMNode* %240, i64 %269, i32 3
  store i32 0, i32* %270, align 8, !tbaa !33
  %271 = add nuw nsw i64 %262, 4
  %272 = add i64 %263, 4
  %273 = icmp eq i64 %272, %245
  br i1 %273, label %246, label %261

274:                                              ; preds = %295, %258
  %275 = phi i64 [ 0, %258 ], [ %296, %295 ]
  %276 = getelementptr inbounds %struct.BPMNode*, %struct.BPMNode** %259, i64 %275
  %277 = load %struct.BPMNode*, %struct.BPMNode** %276, align 8, !tbaa !7
  %278 = icmp eq %struct.BPMNode* %277, null
  br i1 %278, label %285, label %279

279:                                              ; preds = %274, %279
  %280 = phi %struct.BPMNode* [ %283, %279 ], [ %277, %274 ]
  %281 = getelementptr inbounds %struct.BPMNode, %struct.BPMNode* %280, i64 0, i32 3
  store i32 1, i32* %281, align 8, !tbaa !33
  %282 = getelementptr inbounds %struct.BPMNode, %struct.BPMNode* %280, i64 0, i32 2
  %283 = load %struct.BPMNode*, %struct.BPMNode** %282, align 8, !tbaa !7
  %284 = icmp eq %struct.BPMNode* %283, null
  br i1 %284, label %285, label %279

285:                                              ; preds = %279, %274
  %286 = getelementptr inbounds %struct.BPMNode*, %struct.BPMNode** %260, i64 %275
  %287 = load %struct.BPMNode*, %struct.BPMNode** %286, align 8, !tbaa !7
  %288 = icmp eq %struct.BPMNode* %287, null
  br i1 %288, label %295, label %289

289:                                              ; preds = %285, %289
  %290 = phi %struct.BPMNode* [ %293, %289 ], [ %287, %285 ]
  %291 = getelementptr inbounds %struct.BPMNode, %struct.BPMNode* %290, i64 0, i32 3
  store i32 1, i32* %291, align 8, !tbaa !33
  %292 = getelementptr inbounds %struct.BPMNode, %struct.BPMNode* %290, i64 0, i32 2
  %293 = load %struct.BPMNode*, %struct.BPMNode** %292, align 8, !tbaa !7
  %294 = icmp eq %struct.BPMNode* %293, null
  br i1 %294, label %295, label %289

295:                                              ; preds = %289, %285
  %296 = add nuw nsw i64 %275, 1
  %297 = icmp eq i64 %296, %126
  br i1 %297, label %298, label %274

298:                                              ; preds = %295, %256
  store i32 0, i32* %116, align 8, !tbaa !26
  br i1 %143, label %334, label %299

299:                                              ; preds = %298, %327
  %300 = phi i32 [ %328, %327 ], [ 0, %298 ]
  %301 = phi i32 [ %329, %327 ], [ 0, %298 ]
  %302 = phi i64 [ %330, %327 ], [ 0, %298 ]
  %303 = load %struct.BPMNode*, %struct.BPMNode** %120, align 8, !tbaa !27
  %304 = getelementptr inbounds %struct.BPMNode, %struct.BPMNode* %303, i64 %302, i32 3
  %305 = load i32, i32* %304, align 8, !tbaa !33
  %306 = icmp eq i32 %305, 0
  br i1 %306, label %307, label %313

307:                                              ; preds = %299
  %308 = getelementptr inbounds %struct.BPMNode, %struct.BPMNode* %303, i64 %302
  %309 = load %struct.BPMNode**, %struct.BPMNode*** %124, align 8, !tbaa !28
  %310 = add i32 %301, 1
  %311 = zext i32 %301 to i64
  %312 = getelementptr inbounds %struct.BPMNode*, %struct.BPMNode** %309, i64 %311
  store %struct.BPMNode* %308, %struct.BPMNode** %312, align 8, !tbaa !7
  br label %313

313:                                              ; preds = %307, %299
  %314 = phi i32 [ %300, %299 ], [ %310, %307 ]
  %315 = phi i32 [ %301, %299 ], [ %310, %307 ]
  %316 = or i64 %302, 1
  %317 = load %struct.BPMNode*, %struct.BPMNode** %120, align 8, !tbaa !27
  %318 = getelementptr inbounds %struct.BPMNode, %struct.BPMNode* %317, i64 %316, i32 3
  %319 = load i32, i32* %318, align 8, !tbaa !33
  %320 = icmp eq i32 %319, 0
  br i1 %320, label %321, label %327

321:                                              ; preds = %313
  %322 = getelementptr inbounds %struct.BPMNode, %struct.BPMNode* %317, i64 %316
  %323 = load %struct.BPMNode**, %struct.BPMNode*** %124, align 8, !tbaa !28
  %324 = add i32 %315, 1
  %325 = zext i32 %315 to i64
  %326 = getelementptr inbounds %struct.BPMNode*, %struct.BPMNode** %323, i64 %325
  store %struct.BPMNode* %322, %struct.BPMNode** %326, align 8, !tbaa !7
  br label %327

327:                                              ; preds = %321, %313
  %328 = phi i32 [ %314, %313 ], [ %324, %321 ]
  %329 = phi i32 [ %315, %313 ], [ %324, %321 ]
  %330 = add nuw nsw i64 %302, 2
  %331 = icmp eq i64 %330, %117
  br i1 %331, label %332, label %299

332:                                              ; preds = %327
  store i32 %328, i32* %116, align 8, !tbaa !26
  %333 = load %struct.BPMNode**, %struct.BPMNode*** %124, align 8, !tbaa !28
  br label %334

334:                                              ; preds = %332, %226, %298
  %335 = phi %struct.BPMNode** [ %229, %226 ], [ %229, %298 ], [ %333, %332 ]
  %336 = phi i32 [ 1, %226 ], [ 0, %298 ], [ 0, %332 ]
  %337 = add nuw nsw i32 %336, 1
  store i32 %337, i32* %115, align 4, !tbaa !25
  %338 = zext i32 %336 to i64
  %339 = getelementptr inbounds %struct.BPMNode*, %struct.BPMNode** %335, i64 %338
  %340 = load %struct.BPMNode*, %struct.BPMNode** %339, align 8, !tbaa !7
  %341 = getelementptr inbounds %struct.BPMNode, %struct.BPMNode* %340, i64 0, i32 0
  store i32 %236, i32* %341, align 8, !tbaa !11
  %342 = getelementptr inbounds %struct.BPMNode, %struct.BPMNode* %340, i64 0, i32 1
  store i32 2, i32* %342, align 4, !tbaa !13
  %343 = getelementptr inbounds %struct.BPMNode, %struct.BPMNode* %340, i64 0, i32 2
  store %struct.BPMNode* null, %struct.BPMNode** %343, align 8, !tbaa !34
  %344 = icmp eq i32 %3, 0
  br i1 %344, label %361, label %345

345:                                              ; preds = %334
  %346 = and i64 %126, 1
  %347 = icmp eq i32 %3, 1
  br i1 %347, label %350, label %348

348:                                              ; preds = %345
  %349 = and i64 %126, 4294967294
  br label %366

350:                                              ; preds = %366, %345
  %351 = phi i64 [ 0, %345 ], [ %384, %366 ]
  %352 = icmp eq i64 %346, 0
  br i1 %352, label %361, label %353

353:                                              ; preds = %350
  %354 = load %struct.BPMNode*, %struct.BPMNode** %120, align 8, !tbaa !27
  %355 = load %struct.BPMNode**, %struct.BPMNode*** %129, align 8, !tbaa !29
  %356 = getelementptr inbounds %struct.BPMNode*, %struct.BPMNode** %355, i64 %351
  store %struct.BPMNode* %354, %struct.BPMNode** %356, align 8, !tbaa !7
  %357 = load %struct.BPMNode*, %struct.BPMNode** %120, align 8, !tbaa !27
  %358 = getelementptr inbounds %struct.BPMNode, %struct.BPMNode* %357, i64 1
  %359 = load %struct.BPMNode**, %struct.BPMNode*** %132, align 8, !tbaa !30
  %360 = getelementptr inbounds %struct.BPMNode*, %struct.BPMNode** %359, i64 %351
  store %struct.BPMNode* %358, %struct.BPMNode** %360, align 8, !tbaa !7
  br label %361

361:                                              ; preds = %353, %350, %334
  %362 = shl i64 %28, 1
  %363 = add i64 %362, -2
  %364 = icmp eq i64 %363, 2
  %365 = add i32 %3, -1
  br i1 %364, label %392, label %387

366:                                              ; preds = %366, %348
  %367 = phi i64 [ 0, %348 ], [ %384, %366 ]
  %368 = phi i64 [ 0, %348 ], [ %385, %366 ]
  %369 = load %struct.BPMNode*, %struct.BPMNode** %120, align 8, !tbaa !27
  %370 = load %struct.BPMNode**, %struct.BPMNode*** %129, align 8, !tbaa !29
  %371 = getelementptr inbounds %struct.BPMNode*, %struct.BPMNode** %370, i64 %367
  store %struct.BPMNode* %369, %struct.BPMNode** %371, align 8, !tbaa !7
  %372 = load %struct.BPMNode*, %struct.BPMNode** %120, align 8, !tbaa !27
  %373 = getelementptr inbounds %struct.BPMNode, %struct.BPMNode* %372, i64 1
  %374 = load %struct.BPMNode**, %struct.BPMNode*** %132, align 8, !tbaa !30
  %375 = getelementptr inbounds %struct.BPMNode*, %struct.BPMNode** %374, i64 %367
  store %struct.BPMNode* %373, %struct.BPMNode** %375, align 8, !tbaa !7
  %376 = or i64 %367, 1
  %377 = load %struct.BPMNode*, %struct.BPMNode** %120, align 8, !tbaa !27
  %378 = load %struct.BPMNode**, %struct.BPMNode*** %129, align 8, !tbaa !29
  %379 = getelementptr inbounds %struct.BPMNode*, %struct.BPMNode** %378, i64 %376
  store %struct.BPMNode* %377, %struct.BPMNode** %379, align 8, !tbaa !7
  %380 = load %struct.BPMNode*, %struct.BPMNode** %120, align 8, !tbaa !27
  %381 = getelementptr inbounds %struct.BPMNode, %struct.BPMNode* %380, i64 1
  %382 = load %struct.BPMNode**, %struct.BPMNode*** %132, align 8, !tbaa !30
  %383 = getelementptr inbounds %struct.BPMNode*, %struct.BPMNode** %382, i64 %376
  store %struct.BPMNode* %381, %struct.BPMNode** %383, align 8, !tbaa !7
  %384 = add nuw nsw i64 %367, 2
  %385 = add i64 %368, 2
  %386 = icmp eq i64 %385, %349
  br i1 %386, label %350, label %366

387:                                              ; preds = %361, %387
  %388 = phi i32 [ %389, %387 ], [ 2, %361 ]
  call fastcc void @_ZL10boundaryPMP8BPMListsP7BPMNodemii(%struct.BPMLists* noundef nonnull %5, %struct.BPMNode* noundef nonnull %14, i64 noundef %28, i32 noundef %365, i32 noundef %388)
  %389 = add i32 %388, 1
  %390 = zext i32 %389 to i64
  %391 = icmp eq i64 %363, %390
  br i1 %391, label %392, label %387

392:                                              ; preds = %387, %361
  %393 = load %struct.BPMNode**, %struct.BPMNode*** %132, align 8, !tbaa !30
  %394 = zext i32 %365 to i64
  %395 = getelementptr inbounds %struct.BPMNode*, %struct.BPMNode** %393, i64 %394
  %396 = load %struct.BPMNode*, %struct.BPMNode** %395, align 8, !tbaa !7
  %397 = icmp eq %struct.BPMNode* %396, null
  br i1 %397, label %419, label %398

398:                                              ; preds = %392, %415
  %399 = phi %struct.BPMNode* [ %417, %415 ], [ %396, %392 ]
  %400 = getelementptr inbounds %struct.BPMNode, %struct.BPMNode* %399, i64 0, i32 1
  %401 = load i32, i32* %400, align 4, !tbaa !13
  %402 = icmp eq i32 %401, 0
  br i1 %402, label %415, label %403

403:                                              ; preds = %398, %403
  %404 = phi i32 [ %412, %403 ], [ 0, %398 ]
  %405 = zext i32 %404 to i64
  %406 = getelementptr inbounds %struct.BPMNode, %struct.BPMNode* %14, i64 %405, i32 1
  %407 = load i32, i32* %406, align 4, !tbaa !13
  %408 = zext i32 %407 to i64
  %409 = getelementptr inbounds i32, i32* %0, i64 %408
  %410 = load i32, i32* %409, align 4, !tbaa !9
  %411 = add i32 %410, 1
  store i32 %411, i32* %409, align 4, !tbaa !9
  %412 = add i32 %404, 1
  %413 = load i32, i32* %400, align 4, !tbaa !13
  %414 = icmp eq i32 %412, %413
  br i1 %414, label %415, label %403

415:                                              ; preds = %403, %398
  %416 = getelementptr inbounds %struct.BPMNode, %struct.BPMNode* %399, i64 0, i32 2
  %417 = load %struct.BPMNode*, %struct.BPMNode** %416, align 8, !tbaa !7
  %418 = icmp eq %struct.BPMNode* %417, null
  br i1 %418, label %419, label %398

419:                                              ; preds = %415, %392, %109
  %420 = load i8*, i8** %121, align 8, !tbaa !27
  call void @free(i8* noundef %420) #25
  %421 = load i8*, i8** %125, align 8, !tbaa !28
  call void @free(i8* noundef %421) #25
  %422 = load i8*, i8** %130, align 8, !tbaa !29
  call void @free(i8* noundef %422) #25
  %423 = load i8*, i8** %133, align 8, !tbaa !30
  call void @free(i8* noundef %423) #25
  call void @llvm.lifetime.end.p0i8(i64 56, i8* nonnull %50) #25
  br label %424

424:                                              ; preds = %40, %419, %38
  %425 = phi i32 [ 0, %38 ], [ 0, %40 ], [ %141, %419 ]
  call void @free(i8* noundef %13) #25
  br label %426

426:                                              ; preds = %11, %4, %424
  %427 = phi i32 [ %425, %424 ], [ 80, %4 ], [ 83, %11 ]
  ret i32 %427
}

; Function Attrs: argmemonly nofree nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #4

; Function Attrs: argmemonly nofree nosync nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #5

; Function Attrs: argmemonly nofree nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #6

; Function Attrs: inaccessiblemem_or_argmemonly mustprogress nounwind willreturn
declare dso_local void @free(i8* nocapture noundef) local_unnamed_addr #7

; Function Attrs: nofree nosync nounwind uwtable
define internal fastcc void @_ZL10boundaryPMP8BPMListsP7BPMNodemii(%struct.BPMLists* noundef %0, %struct.BPMNode* noundef %1, i64 noundef %2, i32 noundef %3, i32 noundef %4) unnamed_addr #8 {
  %6 = getelementptr inbounds %struct.BPMLists, %struct.BPMLists* %0, i64 0, i32 7
  %7 = load %struct.BPMNode**, %struct.BPMNode*** %6, align 8, !tbaa !30
  %8 = sext i32 %3 to i64
  %9 = getelementptr inbounds %struct.BPMNode*, %struct.BPMNode** %7, i64 %8
  %10 = load %struct.BPMNode*, %struct.BPMNode** %9, align 8, !tbaa !7
  %11 = getelementptr inbounds %struct.BPMNode, %struct.BPMNode* %10, i64 0, i32 1
  %12 = load i32, i32* %11, align 4, !tbaa !13
  %13 = icmp eq i32 %3, 0
  br i1 %13, label %27, label %14

14:                                               ; preds = %5
  %15 = getelementptr inbounds %struct.BPMLists, %struct.BPMLists* %0, i64 0, i32 6
  %16 = getelementptr inbounds %struct.BPMLists, %struct.BPMLists* %0, i64 0, i32 3
  %17 = getelementptr inbounds %struct.BPMLists, %struct.BPMLists* %0, i64 0, i32 2
  %18 = getelementptr inbounds %struct.BPMLists, %struct.BPMLists* %0, i64 0, i32 0
  %19 = getelementptr inbounds %struct.BPMLists, %struct.BPMLists* %0, i64 0, i32 1
  %20 = getelementptr inbounds %struct.BPMLists, %struct.BPMLists* %0, i64 0, i32 5
  %21 = getelementptr inbounds %struct.BPMLists, %struct.BPMLists* %0, i64 0, i32 4
  %22 = add nsw i32 %4, 1
  %23 = trunc i64 %2 to i32
  %24 = shl i32 %23, 1
  %25 = add i32 %24, -2
  %26 = icmp slt i32 %22, %25
  br label %182

27:                                               ; preds = %486, %5
  %28 = phi i64 [ 0, %5 ], [ %188, %486 ]
  %29 = phi %struct.BPMNode* [ %10, %5 ], [ %490, %486 ]
  %30 = phi i32 [ %12, %5 ], [ %492, %486 ]
  %31 = zext i32 %30 to i64
  %32 = icmp ult i64 %31, %2
  br i1 %32, label %33, label %494

33:                                               ; preds = %27
  %34 = getelementptr inbounds %struct.BPMLists, %struct.BPMLists* %0, i64 0, i32 6
  %35 = load %struct.BPMNode**, %struct.BPMNode*** %34, align 8, !tbaa !29
  %36 = getelementptr inbounds %struct.BPMNode*, %struct.BPMNode** %35, i64 %28
  store %struct.BPMNode* %29, %struct.BPMNode** %36, align 8, !tbaa !7
  %37 = getelementptr inbounds %struct.BPMNode, %struct.BPMNode* %1, i64 %31, i32 0
  %38 = load i32, i32* %37, align 8, !tbaa !11
  %39 = add i32 %30, 1
  %40 = getelementptr inbounds %struct.BPMLists, %struct.BPMLists* %0, i64 0, i32 3
  %41 = load i32, i32* %40, align 4, !tbaa !25
  %42 = getelementptr inbounds %struct.BPMLists, %struct.BPMLists* %0, i64 0, i32 2
  %43 = load i32, i32* %42, align 8, !tbaa !26
  %44 = icmp ult i32 %41, %43
  br i1 %44, label %169, label %45

45:                                               ; preds = %33
  %46 = getelementptr inbounds %struct.BPMLists, %struct.BPMLists* %0, i64 0, i32 0
  %47 = load i32, i32* %46, align 8, !tbaa !24
  %48 = icmp eq i32 %47, 0
  br i1 %48, label %68, label %49

49:                                               ; preds = %45
  %50 = getelementptr inbounds %struct.BPMLists, %struct.BPMLists* %0, i64 0, i32 1
  %51 = load %struct.BPMNode*, %struct.BPMNode** %50, align 8, !tbaa !27
  %52 = zext i32 %47 to i64
  %53 = add nsw i64 %52, -1
  %54 = and i64 %52, 3
  %55 = icmp ult i64 %53, 3
  br i1 %55, label %58, label %56

56:                                               ; preds = %49
  %57 = and i64 %52, 4294967292
  br label %76

58:                                               ; preds = %76, %49
  %59 = phi i64 [ 0, %49 ], [ %86, %76 ]
  %60 = icmp eq i64 %54, 0
  br i1 %60, label %68, label %61

61:                                               ; preds = %58, %61
  %62 = phi i64 [ %65, %61 ], [ %59, %58 ]
  %63 = phi i64 [ %66, %61 ], [ 0, %58 ]
  %64 = getelementptr inbounds %struct.BPMNode, %struct.BPMNode* %51, i64 %62, i32 3
  store i32 0, i32* %64, align 8, !tbaa !33
  %65 = add nuw nsw i64 %62, 1
  %66 = add i64 %63, 1
  %67 = icmp eq i64 %66, %54
  br i1 %67, label %68, label %61, !llvm.loop !36

68:                                               ; preds = %58, %61, %45
  %69 = getelementptr inbounds %struct.BPMLists, %struct.BPMLists* %0, i64 0, i32 5
  %70 = load i32, i32* %69, align 8, !tbaa !22
  %71 = icmp eq i32 %70, 0
  br i1 %71, label %113, label %72

72:                                               ; preds = %68
  %73 = load %struct.BPMNode**, %struct.BPMNode*** %34, align 8, !tbaa !29
  %74 = load %struct.BPMNode**, %struct.BPMNode*** %6, align 8, !tbaa !30
  %75 = zext i32 %70 to i64
  br label %89

76:                                               ; preds = %76, %56
  %77 = phi i64 [ 0, %56 ], [ %86, %76 ]
  %78 = phi i64 [ 0, %56 ], [ %87, %76 ]
  %79 = getelementptr inbounds %struct.BPMNode, %struct.BPMNode* %51, i64 %77, i32 3
  store i32 0, i32* %79, align 8, !tbaa !33
  %80 = or i64 %77, 1
  %81 = getelementptr inbounds %struct.BPMNode, %struct.BPMNode* %51, i64 %80, i32 3
  store i32 0, i32* %81, align 8, !tbaa !33
  %82 = or i64 %77, 2
  %83 = getelementptr inbounds %struct.BPMNode, %struct.BPMNode* %51, i64 %82, i32 3
  store i32 0, i32* %83, align 8, !tbaa !33
  %84 = or i64 %77, 3
  %85 = getelementptr inbounds %struct.BPMNode, %struct.BPMNode* %51, i64 %84, i32 3
  store i32 0, i32* %85, align 8, !tbaa !33
  %86 = add nuw nsw i64 %77, 4
  %87 = add i64 %78, 4
  %88 = icmp eq i64 %87, %57
  br i1 %88, label %58, label %76

89:                                               ; preds = %110, %72
  %90 = phi i64 [ 0, %72 ], [ %111, %110 ]
  %91 = getelementptr inbounds %struct.BPMNode*, %struct.BPMNode** %73, i64 %90
  %92 = load %struct.BPMNode*, %struct.BPMNode** %91, align 8, !tbaa !7
  %93 = icmp eq %struct.BPMNode* %92, null
  br i1 %93, label %100, label %94

94:                                               ; preds = %89, %94
  %95 = phi %struct.BPMNode* [ %98, %94 ], [ %92, %89 ]
  %96 = getelementptr inbounds %struct.BPMNode, %struct.BPMNode* %95, i64 0, i32 3
  store i32 1, i32* %96, align 8, !tbaa !33
  %97 = getelementptr inbounds %struct.BPMNode, %struct.BPMNode* %95, i64 0, i32 2
  %98 = load %struct.BPMNode*, %struct.BPMNode** %97, align 8, !tbaa !7
  %99 = icmp eq %struct.BPMNode* %98, null
  br i1 %99, label %100, label %94

100:                                              ; preds = %94, %89
  %101 = getelementptr inbounds %struct.BPMNode*, %struct.BPMNode** %74, i64 %90
  %102 = load %struct.BPMNode*, %struct.BPMNode** %101, align 8, !tbaa !7
  %103 = icmp eq %struct.BPMNode* %102, null
  br i1 %103, label %110, label %104

104:                                              ; preds = %100, %104
  %105 = phi %struct.BPMNode* [ %108, %104 ], [ %102, %100 ]
  %106 = getelementptr inbounds %struct.BPMNode, %struct.BPMNode* %105, i64 0, i32 3
  store i32 1, i32* %106, align 8, !tbaa !33
  %107 = getelementptr inbounds %struct.BPMNode, %struct.BPMNode* %105, i64 0, i32 2
  %108 = load %struct.BPMNode*, %struct.BPMNode** %107, align 8, !tbaa !7
  %109 = icmp eq %struct.BPMNode* %108, null
  br i1 %109, label %110, label %104

110:                                              ; preds = %104, %100
  %111 = add nuw nsw i64 %90, 1
  %112 = icmp eq i64 %111, %75
  br i1 %112, label %113, label %89

113:                                              ; preds = %110, %68
  store i32 0, i32* %42, align 8, !tbaa !26
  br i1 %48, label %169, label %114

114:                                              ; preds = %113
  %115 = getelementptr inbounds %struct.BPMLists, %struct.BPMLists* %0, i64 0, i32 1
  %116 = getelementptr inbounds %struct.BPMLists, %struct.BPMLists* %0, i64 0, i32 4
  %117 = zext i32 %47 to i64
  %118 = and i64 %117, 1
  %119 = icmp eq i32 %47, 1
  br i1 %119, label %154, label %120

120:                                              ; preds = %114
  %121 = and i64 %117, 4294967294
  br label %122

122:                                              ; preds = %149, %120
  %123 = phi i32 [ 0, %120 ], [ %150, %149 ]
  %124 = phi i64 [ 0, %120 ], [ %151, %149 ]
  %125 = phi i64 [ 0, %120 ], [ %152, %149 ]
  %126 = load %struct.BPMNode*, %struct.BPMNode** %115, align 8, !tbaa !27
  %127 = getelementptr inbounds %struct.BPMNode, %struct.BPMNode* %126, i64 %124, i32 3
  %128 = load i32, i32* %127, align 8, !tbaa !33
  %129 = icmp eq i32 %128, 0
  br i1 %129, label %130, label %136

130:                                              ; preds = %122
  %131 = getelementptr inbounds %struct.BPMNode, %struct.BPMNode* %126, i64 %124
  %132 = load %struct.BPMNode**, %struct.BPMNode*** %116, align 8, !tbaa !28
  %133 = add i32 %123, 1
  store i32 %133, i32* %42, align 8, !tbaa !26
  %134 = zext i32 %123 to i64
  %135 = getelementptr inbounds %struct.BPMNode*, %struct.BPMNode** %132, i64 %134
  store %struct.BPMNode* %131, %struct.BPMNode** %135, align 8, !tbaa !7
  br label %136

136:                                              ; preds = %130, %122
  %137 = phi i32 [ %123, %122 ], [ %133, %130 ]
  %138 = or i64 %124, 1
  %139 = load %struct.BPMNode*, %struct.BPMNode** %115, align 8, !tbaa !27
  %140 = getelementptr inbounds %struct.BPMNode, %struct.BPMNode* %139, i64 %138, i32 3
  %141 = load i32, i32* %140, align 8, !tbaa !33
  %142 = icmp eq i32 %141, 0
  br i1 %142, label %143, label %149

143:                                              ; preds = %136
  %144 = getelementptr inbounds %struct.BPMNode, %struct.BPMNode* %139, i64 %138
  %145 = load %struct.BPMNode**, %struct.BPMNode*** %116, align 8, !tbaa !28
  %146 = add i32 %137, 1
  store i32 %146, i32* %42, align 8, !tbaa !26
  %147 = zext i32 %137 to i64
  %148 = getelementptr inbounds %struct.BPMNode*, %struct.BPMNode** %145, i64 %147
  store %struct.BPMNode* %144, %struct.BPMNode** %148, align 8, !tbaa !7
  br label %149

149:                                              ; preds = %143, %136
  %150 = phi i32 [ %137, %136 ], [ %146, %143 ]
  %151 = add nuw nsw i64 %124, 2
  %152 = add i64 %125, 2
  %153 = icmp eq i64 %152, %121
  br i1 %153, label %154, label %122

154:                                              ; preds = %149, %114
  %155 = phi i32 [ 0, %114 ], [ %150, %149 ]
  %156 = phi i64 [ 0, %114 ], [ %151, %149 ]
  %157 = icmp eq i64 %118, 0
  br i1 %157, label %169, label %158

158:                                              ; preds = %154
  %159 = load %struct.BPMNode*, %struct.BPMNode** %115, align 8, !tbaa !27
  %160 = getelementptr inbounds %struct.BPMNode, %struct.BPMNode* %159, i64 %156, i32 3
  %161 = load i32, i32* %160, align 8, !tbaa !33
  %162 = icmp eq i32 %161, 0
  br i1 %162, label %163, label %169

163:                                              ; preds = %158
  %164 = getelementptr inbounds %struct.BPMNode, %struct.BPMNode* %159, i64 %156
  %165 = load %struct.BPMNode**, %struct.BPMNode*** %116, align 8, !tbaa !28
  %166 = add i32 %155, 1
  store i32 %166, i32* %42, align 8, !tbaa !26
  %167 = zext i32 %155 to i64
  %168 = getelementptr inbounds %struct.BPMNode*, %struct.BPMNode** %165, i64 %167
  store %struct.BPMNode* %164, %struct.BPMNode** %168, align 8, !tbaa !7
  br label %169

169:                                              ; preds = %154, %163, %158, %33, %113
  %170 = phi i32 [ %41, %33 ], [ 0, %113 ], [ 0, %158 ], [ 0, %163 ], [ 0, %154 ]
  %171 = getelementptr inbounds %struct.BPMLists, %struct.BPMLists* %0, i64 0, i32 4
  %172 = load %struct.BPMNode**, %struct.BPMNode*** %171, align 8, !tbaa !28
  %173 = add nuw i32 %170, 1
  store i32 %173, i32* %40, align 4, !tbaa !25
  %174 = zext i32 %170 to i64
  %175 = getelementptr inbounds %struct.BPMNode*, %struct.BPMNode** %172, i64 %174
  %176 = load %struct.BPMNode*, %struct.BPMNode** %175, align 8, !tbaa !7
  %177 = getelementptr inbounds %struct.BPMNode, %struct.BPMNode* %176, i64 0, i32 0
  store i32 %38, i32* %177, align 8, !tbaa !11
  %178 = getelementptr inbounds %struct.BPMNode, %struct.BPMNode* %176, i64 0, i32 1
  store i32 %39, i32* %178, align 4, !tbaa !13
  %179 = getelementptr inbounds %struct.BPMNode, %struct.BPMNode* %176, i64 0, i32 2
  store %struct.BPMNode* null, %struct.BPMNode** %179, align 8, !tbaa !34
  %180 = load %struct.BPMNode**, %struct.BPMNode*** %6, align 8, !tbaa !30
  %181 = getelementptr inbounds %struct.BPMNode*, %struct.BPMNode** %180, i64 %28
  store %struct.BPMNode* %176, %struct.BPMNode** %181, align 8, !tbaa !7
  br label %494

182:                                              ; preds = %14, %486
  %183 = phi i64 [ %8, %14 ], [ %188, %486 ]
  %184 = phi i32 [ %12, %14 ], [ %492, %486 ]
  %185 = phi %struct.BPMNode* [ %10, %14 ], [ %490, %486 ]
  %186 = phi %struct.BPMNode** [ %7, %14 ], [ %488, %486 ]
  %187 = load %struct.BPMNode**, %struct.BPMNode*** %15, align 8, !tbaa !29
  %188 = add nsw i64 %183, -1
  %189 = getelementptr inbounds %struct.BPMNode*, %struct.BPMNode** %187, i64 %188
  %190 = load %struct.BPMNode*, %struct.BPMNode** %189, align 8, !tbaa !7
  %191 = getelementptr inbounds %struct.BPMNode, %struct.BPMNode* %190, i64 0, i32 0
  %192 = load i32, i32* %191, align 8, !tbaa !11
  %193 = getelementptr inbounds %struct.BPMNode*, %struct.BPMNode** %186, i64 %188
  %194 = load %struct.BPMNode*, %struct.BPMNode** %193, align 8, !tbaa !7
  %195 = getelementptr inbounds %struct.BPMNode, %struct.BPMNode* %194, i64 0, i32 0
  %196 = load i32, i32* %195, align 8, !tbaa !11
  %197 = add nsw i32 %196, %192
  %198 = getelementptr inbounds %struct.BPMNode*, %struct.BPMNode** %187, i64 %183
  store %struct.BPMNode* %185, %struct.BPMNode** %198, align 8, !tbaa !7
  %199 = zext i32 %184 to i64
  %200 = icmp ult i64 %199, %2
  br i1 %200, label %201, label %347

201:                                              ; preds = %182
  %202 = getelementptr inbounds %struct.BPMNode, %struct.BPMNode* %1, i64 %199, i32 0
  %203 = load i32, i32* %202, align 8, !tbaa !11
  %204 = icmp sgt i32 %197, %203
  br i1 %204, label %205, label %347

205:                                              ; preds = %201
  %206 = add i32 %184, 1
  %207 = load %struct.BPMNode**, %struct.BPMNode*** %6, align 8, !tbaa !30
  %208 = getelementptr inbounds %struct.BPMNode*, %struct.BPMNode** %207, i64 %183
  %209 = load %struct.BPMNode*, %struct.BPMNode** %208, align 8, !tbaa !7
  %210 = getelementptr inbounds %struct.BPMNode, %struct.BPMNode* %209, i64 0, i32 2
  %211 = load %struct.BPMNode*, %struct.BPMNode** %210, align 8, !tbaa !34
  %212 = load i32, i32* %16, align 4, !tbaa !25
  %213 = load i32, i32* %17, align 8, !tbaa !26
  %214 = icmp ult i32 %212, %213
  br i1 %214, label %335, label %215

215:                                              ; preds = %205
  %216 = load i32, i32* %18, align 8, !tbaa !24
  %217 = icmp eq i32 %216, 0
  br i1 %217, label %236, label %218

218:                                              ; preds = %215
  %219 = load %struct.BPMNode*, %struct.BPMNode** %19, align 8, !tbaa !27
  %220 = zext i32 %216 to i64
  %221 = add nsw i64 %220, -1
  %222 = and i64 %220, 3
  %223 = icmp ult i64 %221, 3
  br i1 %223, label %226, label %224

224:                                              ; preds = %218
  %225 = and i64 %220, 4294967292
  br label %242

226:                                              ; preds = %242, %218
  %227 = phi i64 [ 0, %218 ], [ %252, %242 ]
  %228 = icmp eq i64 %222, 0
  br i1 %228, label %236, label %229

229:                                              ; preds = %226, %229
  %230 = phi i64 [ %233, %229 ], [ %227, %226 ]
  %231 = phi i64 [ %234, %229 ], [ 0, %226 ]
  %232 = getelementptr inbounds %struct.BPMNode, %struct.BPMNode* %219, i64 %230, i32 3
  store i32 0, i32* %232, align 8, !tbaa !33
  %233 = add nuw nsw i64 %230, 1
  %234 = add i64 %231, 1
  %235 = icmp eq i64 %234, %222
  br i1 %235, label %236, label %229, !llvm.loop !37

236:                                              ; preds = %226, %229, %215
  %237 = load i32, i32* %20, align 8, !tbaa !22
  %238 = icmp eq i32 %237, 0
  br i1 %238, label %279, label %239

239:                                              ; preds = %236
  %240 = load %struct.BPMNode**, %struct.BPMNode*** %15, align 8, !tbaa !29
  %241 = zext i32 %237 to i64
  br label %255

242:                                              ; preds = %242, %224
  %243 = phi i64 [ 0, %224 ], [ %252, %242 ]
  %244 = phi i64 [ 0, %224 ], [ %253, %242 ]
  %245 = getelementptr inbounds %struct.BPMNode, %struct.BPMNode* %219, i64 %243, i32 3
  store i32 0, i32* %245, align 8, !tbaa !33
  %246 = or i64 %243, 1
  %247 = getelementptr inbounds %struct.BPMNode, %struct.BPMNode* %219, i64 %246, i32 3
  store i32 0, i32* %247, align 8, !tbaa !33
  %248 = or i64 %243, 2
  %249 = getelementptr inbounds %struct.BPMNode, %struct.BPMNode* %219, i64 %248, i32 3
  store i32 0, i32* %249, align 8, !tbaa !33
  %250 = or i64 %243, 3
  %251 = getelementptr inbounds %struct.BPMNode, %struct.BPMNode* %219, i64 %250, i32 3
  store i32 0, i32* %251, align 8, !tbaa !33
  %252 = add nuw nsw i64 %243, 4
  %253 = add i64 %244, 4
  %254 = icmp eq i64 %253, %225
  br i1 %254, label %226, label %242

255:                                              ; preds = %276, %239
  %256 = phi i64 [ 0, %239 ], [ %277, %276 ]
  %257 = getelementptr inbounds %struct.BPMNode*, %struct.BPMNode** %240, i64 %256
  %258 = load %struct.BPMNode*, %struct.BPMNode** %257, align 8, !tbaa !7
  %259 = icmp eq %struct.BPMNode* %258, null
  br i1 %259, label %266, label %260

260:                                              ; preds = %255, %260
  %261 = phi %struct.BPMNode* [ %264, %260 ], [ %258, %255 ]
  %262 = getelementptr inbounds %struct.BPMNode, %struct.BPMNode* %261, i64 0, i32 3
  store i32 1, i32* %262, align 8, !tbaa !33
  %263 = getelementptr inbounds %struct.BPMNode, %struct.BPMNode* %261, i64 0, i32 2
  %264 = load %struct.BPMNode*, %struct.BPMNode** %263, align 8, !tbaa !7
  %265 = icmp eq %struct.BPMNode* %264, null
  br i1 %265, label %266, label %260

266:                                              ; preds = %260, %255
  %267 = getelementptr inbounds %struct.BPMNode*, %struct.BPMNode** %207, i64 %256
  %268 = load %struct.BPMNode*, %struct.BPMNode** %267, align 8, !tbaa !7
  %269 = icmp eq %struct.BPMNode* %268, null
  br i1 %269, label %276, label %270

270:                                              ; preds = %266, %270
  %271 = phi %struct.BPMNode* [ %274, %270 ], [ %268, %266 ]
  %272 = getelementptr inbounds %struct.BPMNode, %struct.BPMNode* %271, i64 0, i32 3
  store i32 1, i32* %272, align 8, !tbaa !33
  %273 = getelementptr inbounds %struct.BPMNode, %struct.BPMNode* %271, i64 0, i32 2
  %274 = load %struct.BPMNode*, %struct.BPMNode** %273, align 8, !tbaa !7
  %275 = icmp eq %struct.BPMNode* %274, null
  br i1 %275, label %276, label %270

276:                                              ; preds = %270, %266
  %277 = add nuw nsw i64 %256, 1
  %278 = icmp eq i64 %277, %241
  br i1 %278, label %279, label %255

279:                                              ; preds = %276, %236
  store i32 0, i32* %17, align 8, !tbaa !26
  br i1 %217, label %335, label %280

280:                                              ; preds = %279
  %281 = zext i32 %216 to i64
  %282 = and i64 %281, 1
  %283 = icmp eq i32 %216, 1
  br i1 %283, label %318, label %284

284:                                              ; preds = %280
  %285 = and i64 %281, 4294967294
  br label %286

286:                                              ; preds = %313, %284
  %287 = phi i32 [ 0, %284 ], [ %314, %313 ]
  %288 = phi i64 [ 0, %284 ], [ %315, %313 ]
  %289 = phi i64 [ 0, %284 ], [ %316, %313 ]
  %290 = load %struct.BPMNode*, %struct.BPMNode** %19, align 8, !tbaa !27
  %291 = getelementptr inbounds %struct.BPMNode, %struct.BPMNode* %290, i64 %288, i32 3
  %292 = load i32, i32* %291, align 8, !tbaa !33
  %293 = icmp eq i32 %292, 0
  br i1 %293, label %294, label %300

294:                                              ; preds = %286
  %295 = getelementptr inbounds %struct.BPMNode, %struct.BPMNode* %290, i64 %288
  %296 = load %struct.BPMNode**, %struct.BPMNode*** %21, align 8, !tbaa !28
  %297 = add i32 %287, 1
  store i32 %297, i32* %17, align 8, !tbaa !26
  %298 = zext i32 %287 to i64
  %299 = getelementptr inbounds %struct.BPMNode*, %struct.BPMNode** %296, i64 %298
  store %struct.BPMNode* %295, %struct.BPMNode** %299, align 8, !tbaa !7
  br label %300

300:                                              ; preds = %294, %286
  %301 = phi i32 [ %287, %286 ], [ %297, %294 ]
  %302 = or i64 %288, 1
  %303 = load %struct.BPMNode*, %struct.BPMNode** %19, align 8, !tbaa !27
  %304 = getelementptr inbounds %struct.BPMNode, %struct.BPMNode* %303, i64 %302, i32 3
  %305 = load i32, i32* %304, align 8, !tbaa !33
  %306 = icmp eq i32 %305, 0
  br i1 %306, label %307, label %313

307:                                              ; preds = %300
  %308 = getelementptr inbounds %struct.BPMNode, %struct.BPMNode* %303, i64 %302
  %309 = load %struct.BPMNode**, %struct.BPMNode*** %21, align 8, !tbaa !28
  %310 = add i32 %301, 1
  store i32 %310, i32* %17, align 8, !tbaa !26
  %311 = zext i32 %301 to i64
  %312 = getelementptr inbounds %struct.BPMNode*, %struct.BPMNode** %309, i64 %311
  store %struct.BPMNode* %308, %struct.BPMNode** %312, align 8, !tbaa !7
  br label %313

313:                                              ; preds = %307, %300
  %314 = phi i32 [ %301, %300 ], [ %310, %307 ]
  %315 = add nuw nsw i64 %288, 2
  %316 = add i64 %289, 2
  %317 = icmp eq i64 %316, %285
  br i1 %317, label %318, label %286

318:                                              ; preds = %313, %280
  %319 = phi i32 [ 0, %280 ], [ %314, %313 ]
  %320 = phi i64 [ 0, %280 ], [ %315, %313 ]
  %321 = icmp eq i64 %282, 0
  br i1 %321, label %333, label %322

322:                                              ; preds = %318
  %323 = load %struct.BPMNode*, %struct.BPMNode** %19, align 8, !tbaa !27
  %324 = getelementptr inbounds %struct.BPMNode, %struct.BPMNode* %323, i64 %320, i32 3
  %325 = load i32, i32* %324, align 8, !tbaa !33
  %326 = icmp eq i32 %325, 0
  br i1 %326, label %327, label %333

327:                                              ; preds = %322
  %328 = getelementptr inbounds %struct.BPMNode, %struct.BPMNode* %323, i64 %320
  %329 = load %struct.BPMNode**, %struct.BPMNode*** %21, align 8, !tbaa !28
  %330 = add i32 %319, 1
  store i32 %330, i32* %17, align 8, !tbaa !26
  %331 = zext i32 %319 to i64
  %332 = getelementptr inbounds %struct.BPMNode*, %struct.BPMNode** %329, i64 %331
  store %struct.BPMNode* %328, %struct.BPMNode** %332, align 8, !tbaa !7
  br label %333

333:                                              ; preds = %322, %327, %318
  %334 = load %struct.BPMNode**, %struct.BPMNode*** %6, align 8, !tbaa !30
  br label %335

335:                                              ; preds = %333, %205, %279
  %336 = phi %struct.BPMNode** [ %207, %205 ], [ %207, %279 ], [ %334, %333 ]
  %337 = phi i32 [ %212, %205 ], [ 0, %279 ], [ 0, %333 ]
  %338 = load %struct.BPMNode**, %struct.BPMNode*** %21, align 8, !tbaa !28
  %339 = add nuw i32 %337, 1
  store i32 %339, i32* %16, align 4, !tbaa !25
  %340 = zext i32 %337 to i64
  %341 = getelementptr inbounds %struct.BPMNode*, %struct.BPMNode** %338, i64 %340
  %342 = load %struct.BPMNode*, %struct.BPMNode** %341, align 8, !tbaa !7
  %343 = getelementptr inbounds %struct.BPMNode, %struct.BPMNode* %342, i64 0, i32 0
  store i32 %203, i32* %343, align 8, !tbaa !11
  %344 = getelementptr inbounds %struct.BPMNode, %struct.BPMNode* %342, i64 0, i32 1
  store i32 %206, i32* %344, align 4, !tbaa !13
  %345 = getelementptr inbounds %struct.BPMNode, %struct.BPMNode* %342, i64 0, i32 2
  store %struct.BPMNode* %211, %struct.BPMNode** %345, align 8, !tbaa !34
  %346 = getelementptr inbounds %struct.BPMNode*, %struct.BPMNode** %336, i64 %183
  store %struct.BPMNode* %342, %struct.BPMNode** %346, align 8, !tbaa !7
  br label %494

347:                                              ; preds = %201, %182
  %348 = load %struct.BPMNode**, %struct.BPMNode*** %6, align 8, !tbaa !30
  %349 = getelementptr inbounds %struct.BPMNode*, %struct.BPMNode** %348, i64 %188
  %350 = load %struct.BPMNode*, %struct.BPMNode** %349, align 8, !tbaa !7
  %351 = load i32, i32* %16, align 4, !tbaa !25
  %352 = load i32, i32* %17, align 8, !tbaa !26
  %353 = icmp ult i32 %351, %352
  br i1 %353, label %474, label %354

354:                                              ; preds = %347
  %355 = load i32, i32* %18, align 8, !tbaa !24
  %356 = icmp eq i32 %355, 0
  br i1 %356, label %375, label %357

357:                                              ; preds = %354
  %358 = load %struct.BPMNode*, %struct.BPMNode** %19, align 8, !tbaa !27
  %359 = zext i32 %355 to i64
  %360 = add nsw i64 %359, -1
  %361 = and i64 %359, 3
  %362 = icmp ult i64 %360, 3
  br i1 %362, label %365, label %363

363:                                              ; preds = %357
  %364 = and i64 %359, 4294967292
  br label %381

365:                                              ; preds = %381, %357
  %366 = phi i64 [ 0, %357 ], [ %391, %381 ]
  %367 = icmp eq i64 %361, 0
  br i1 %367, label %375, label %368

368:                                              ; preds = %365, %368
  %369 = phi i64 [ %372, %368 ], [ %366, %365 ]
  %370 = phi i64 [ %373, %368 ], [ 0, %365 ]
  %371 = getelementptr inbounds %struct.BPMNode, %struct.BPMNode* %358, i64 %369, i32 3
  store i32 0, i32* %371, align 8, !tbaa !33
  %372 = add nuw nsw i64 %369, 1
  %373 = add i64 %370, 1
  %374 = icmp eq i64 %373, %361
  br i1 %374, label %375, label %368, !llvm.loop !38

375:                                              ; preds = %365, %368, %354
  %376 = load i32, i32* %20, align 8, !tbaa !22
  %377 = icmp eq i32 %376, 0
  br i1 %377, label %418, label %378

378:                                              ; preds = %375
  %379 = load %struct.BPMNode**, %struct.BPMNode*** %15, align 8, !tbaa !29
  %380 = zext i32 %376 to i64
  br label %394

381:                                              ; preds = %381, %363
  %382 = phi i64 [ 0, %363 ], [ %391, %381 ]
  %383 = phi i64 [ 0, %363 ], [ %392, %381 ]
  %384 = getelementptr inbounds %struct.BPMNode, %struct.BPMNode* %358, i64 %382, i32 3
  store i32 0, i32* %384, align 8, !tbaa !33
  %385 = or i64 %382, 1
  %386 = getelementptr inbounds %struct.BPMNode, %struct.BPMNode* %358, i64 %385, i32 3
  store i32 0, i32* %386, align 8, !tbaa !33
  %387 = or i64 %382, 2
  %388 = getelementptr inbounds %struct.BPMNode, %struct.BPMNode* %358, i64 %387, i32 3
  store i32 0, i32* %388, align 8, !tbaa !33
  %389 = or i64 %382, 3
  %390 = getelementptr inbounds %struct.BPMNode, %struct.BPMNode* %358, i64 %389, i32 3
  store i32 0, i32* %390, align 8, !tbaa !33
  %391 = add nuw nsw i64 %382, 4
  %392 = add i64 %383, 4
  %393 = icmp eq i64 %392, %364
  br i1 %393, label %365, label %381

394:                                              ; preds = %415, %378
  %395 = phi i64 [ 0, %378 ], [ %416, %415 ]
  %396 = getelementptr inbounds %struct.BPMNode*, %struct.BPMNode** %379, i64 %395
  %397 = load %struct.BPMNode*, %struct.BPMNode** %396, align 8, !tbaa !7
  %398 = icmp eq %struct.BPMNode* %397, null
  br i1 %398, label %405, label %399

399:                                              ; preds = %394, %399
  %400 = phi %struct.BPMNode* [ %403, %399 ], [ %397, %394 ]
  %401 = getelementptr inbounds %struct.BPMNode, %struct.BPMNode* %400, i64 0, i32 3
  store i32 1, i32* %401, align 8, !tbaa !33
  %402 = getelementptr inbounds %struct.BPMNode, %struct.BPMNode* %400, i64 0, i32 2
  %403 = load %struct.BPMNode*, %struct.BPMNode** %402, align 8, !tbaa !7
  %404 = icmp eq %struct.BPMNode* %403, null
  br i1 %404, label %405, label %399

405:                                              ; preds = %399, %394
  %406 = getelementptr inbounds %struct.BPMNode*, %struct.BPMNode** %348, i64 %395
  %407 = load %struct.BPMNode*, %struct.BPMNode** %406, align 8, !tbaa !7
  %408 = icmp eq %struct.BPMNode* %407, null
  br i1 %408, label %415, label %409

409:                                              ; preds = %405, %409
  %410 = phi %struct.BPMNode* [ %413, %409 ], [ %407, %405 ]
  %411 = getelementptr inbounds %struct.BPMNode, %struct.BPMNode* %410, i64 0, i32 3
  store i32 1, i32* %411, align 8, !tbaa !33
  %412 = getelementptr inbounds %struct.BPMNode, %struct.BPMNode* %410, i64 0, i32 2
  %413 = load %struct.BPMNode*, %struct.BPMNode** %412, align 8, !tbaa !7
  %414 = icmp eq %struct.BPMNode* %413, null
  br i1 %414, label %415, label %409

415:                                              ; preds = %409, %405
  %416 = add nuw nsw i64 %395, 1
  %417 = icmp eq i64 %416, %380
  br i1 %417, label %418, label %394

418:                                              ; preds = %415, %375
  store i32 0, i32* %17, align 8, !tbaa !26
  br i1 %356, label %474, label %419

419:                                              ; preds = %418
  %420 = zext i32 %355 to i64
  %421 = and i64 %420, 1
  %422 = icmp eq i32 %355, 1
  br i1 %422, label %457, label %423

423:                                              ; preds = %419
  %424 = and i64 %420, 4294967294
  br label %425

425:                                              ; preds = %452, %423
  %426 = phi i32 [ 0, %423 ], [ %453, %452 ]
  %427 = phi i64 [ 0, %423 ], [ %454, %452 ]
  %428 = phi i64 [ 0, %423 ], [ %455, %452 ]
  %429 = load %struct.BPMNode*, %struct.BPMNode** %19, align 8, !tbaa !27
  %430 = getelementptr inbounds %struct.BPMNode, %struct.BPMNode* %429, i64 %427, i32 3
  %431 = load i32, i32* %430, align 8, !tbaa !33
  %432 = icmp eq i32 %431, 0
  br i1 %432, label %433, label %439

433:                                              ; preds = %425
  %434 = getelementptr inbounds %struct.BPMNode, %struct.BPMNode* %429, i64 %427
  %435 = load %struct.BPMNode**, %struct.BPMNode*** %21, align 8, !tbaa !28
  %436 = add i32 %426, 1
  store i32 %436, i32* %17, align 8, !tbaa !26
  %437 = zext i32 %426 to i64
  %438 = getelementptr inbounds %struct.BPMNode*, %struct.BPMNode** %435, i64 %437
  store %struct.BPMNode* %434, %struct.BPMNode** %438, align 8, !tbaa !7
  br label %439

439:                                              ; preds = %433, %425
  %440 = phi i32 [ %426, %425 ], [ %436, %433 ]
  %441 = or i64 %427, 1
  %442 = load %struct.BPMNode*, %struct.BPMNode** %19, align 8, !tbaa !27
  %443 = getelementptr inbounds %struct.BPMNode, %struct.BPMNode* %442, i64 %441, i32 3
  %444 = load i32, i32* %443, align 8, !tbaa !33
  %445 = icmp eq i32 %444, 0
  br i1 %445, label %446, label %452

446:                                              ; preds = %439
  %447 = getelementptr inbounds %struct.BPMNode, %struct.BPMNode* %442, i64 %441
  %448 = load %struct.BPMNode**, %struct.BPMNode*** %21, align 8, !tbaa !28
  %449 = add i32 %440, 1
  store i32 %449, i32* %17, align 8, !tbaa !26
  %450 = zext i32 %440 to i64
  %451 = getelementptr inbounds %struct.BPMNode*, %struct.BPMNode** %448, i64 %450
  store %struct.BPMNode* %447, %struct.BPMNode** %451, align 8, !tbaa !7
  br label %452

452:                                              ; preds = %446, %439
  %453 = phi i32 [ %440, %439 ], [ %449, %446 ]
  %454 = add nuw nsw i64 %427, 2
  %455 = add i64 %428, 2
  %456 = icmp eq i64 %455, %424
  br i1 %456, label %457, label %425

457:                                              ; preds = %452, %419
  %458 = phi i32 [ 0, %419 ], [ %453, %452 ]
  %459 = phi i64 [ 0, %419 ], [ %454, %452 ]
  %460 = icmp eq i64 %421, 0
  br i1 %460, label %472, label %461

461:                                              ; preds = %457
  %462 = load %struct.BPMNode*, %struct.BPMNode** %19, align 8, !tbaa !27
  %463 = getelementptr inbounds %struct.BPMNode, %struct.BPMNode* %462, i64 %459, i32 3
  %464 = load i32, i32* %463, align 8, !tbaa !33
  %465 = icmp eq i32 %464, 0
  br i1 %465, label %466, label %472

466:                                              ; preds = %461
  %467 = getelementptr inbounds %struct.BPMNode, %struct.BPMNode* %462, i64 %459
  %468 = load %struct.BPMNode**, %struct.BPMNode*** %21, align 8, !tbaa !28
  %469 = add i32 %458, 1
  store i32 %469, i32* %17, align 8, !tbaa !26
  %470 = zext i32 %458 to i64
  %471 = getelementptr inbounds %struct.BPMNode*, %struct.BPMNode** %468, i64 %470
  store %struct.BPMNode* %467, %struct.BPMNode** %471, align 8, !tbaa !7
  br label %472

472:                                              ; preds = %461, %466, %457
  %473 = load %struct.BPMNode**, %struct.BPMNode*** %6, align 8, !tbaa !30
  br label %474

474:                                              ; preds = %472, %347, %418
  %475 = phi %struct.BPMNode** [ %348, %347 ], [ %348, %418 ], [ %473, %472 ]
  %476 = phi i32 [ %351, %347 ], [ 0, %418 ], [ 0, %472 ]
  %477 = load %struct.BPMNode**, %struct.BPMNode*** %21, align 8, !tbaa !28
  %478 = add nuw i32 %476, 1
  store i32 %478, i32* %16, align 4, !tbaa !25
  %479 = zext i32 %476 to i64
  %480 = getelementptr inbounds %struct.BPMNode*, %struct.BPMNode** %477, i64 %479
  %481 = load %struct.BPMNode*, %struct.BPMNode** %480, align 8, !tbaa !7
  %482 = getelementptr inbounds %struct.BPMNode, %struct.BPMNode* %481, i64 0, i32 0
  store i32 %197, i32* %482, align 8, !tbaa !11
  %483 = getelementptr inbounds %struct.BPMNode, %struct.BPMNode* %481, i64 0, i32 1
  store i32 %184, i32* %483, align 4, !tbaa !13
  %484 = getelementptr inbounds %struct.BPMNode, %struct.BPMNode* %481, i64 0, i32 2
  store %struct.BPMNode* %350, %struct.BPMNode** %484, align 8, !tbaa !34
  %485 = getelementptr inbounds %struct.BPMNode*, %struct.BPMNode** %475, i64 %183
  store %struct.BPMNode* %481, %struct.BPMNode** %485, align 8, !tbaa !7
  br i1 %26, label %486, label %494

486:                                              ; preds = %474
  %487 = trunc i64 %188 to i32
  tail call fastcc void @_ZL10boundaryPMP8BPMListsP7BPMNodemii(%struct.BPMLists* noundef nonnull %0, %struct.BPMNode* noundef %1, i64 noundef %2, i32 noundef %487, i32 noundef %4)
  %488 = load %struct.BPMNode**, %struct.BPMNode*** %6, align 8, !tbaa !30
  %489 = getelementptr inbounds %struct.BPMNode*, %struct.BPMNode** %488, i64 %188
  %490 = load %struct.BPMNode*, %struct.BPMNode** %489, align 8, !tbaa !7
  %491 = getelementptr inbounds %struct.BPMNode, %struct.BPMNode* %490, i64 0, i32 1
  %492 = load i32, i32* %491, align 4, !tbaa !13
  %493 = icmp eq i32 %487, 0
  br i1 %493, label %27, label %182

494:                                              ; preds = %474, %169, %335, %27
  ret void
}

; Function Attrs: argmemonly nofree nosync nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #5

; Function Attrs: nounwind uwtable
define dso_local noundef i32 @_Z15lodepng_inflatePPhPmPKhmPK25LodePNGDecompressSettings(i8** nocapture noundef %0, i64* nocapture noundef %1, i8* noundef %2, i64 noundef %3, %struct.LodePNGDecompressSettings* nocapture noundef readonly %4) local_unnamed_addr #3 {
  %6 = alloca %struct.ucvector, align 8
  %7 = bitcast %struct.ucvector* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %7) #25
  %8 = load i8*, i8** %0, align 8, !tbaa !7
  %9 = load i64, i64* %1, align 8, !tbaa !3
  %10 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %6, i64 0, i32 0
  store i8* %8, i8** %10, align 8, !tbaa !39, !alias.scope !41
  %11 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %6, i64 0, i32 1
  store i64 %9, i64* %11, align 8, !tbaa !44, !alias.scope !41
  %12 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %6, i64 0, i32 2
  store i64 %9, i64* %12, align 8, !tbaa !45, !alias.scope !41
  %13 = call fastcc noundef i32 @_ZL16lodepng_inflatevP8ucvectorPKhmPK25LodePNGDecompressSettings(%struct.ucvector* noundef nonnull %6, i8* noundef %2, i64 noundef %3, %struct.LodePNGDecompressSettings* noundef %4)
  %14 = load i8*, i8** %10, align 8, !tbaa !39
  store i8* %14, i8** %0, align 8, !tbaa !7
  %15 = load i64, i64* %11, align 8, !tbaa !44
  store i64 %15, i64* %1, align 8, !tbaa !3
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %7) #25
  ret i32 %13
}

; Function Attrs: nounwind uwtable
define internal fastcc noundef i32 @_ZL16lodepng_inflatevP8ucvectorPKhmPK25LodePNGDecompressSettings(%struct.ucvector* nocapture noundef %0, i8* noundef %1, i64 noundef %2, %struct.LodePNGDecompressSettings* nocapture noundef readonly %3) unnamed_addr #3 {
  %5 = alloca %struct.HuffmanTree, align 8
  %6 = alloca %struct.HuffmanTree, align 8
  %7 = alloca %struct.HuffmanTree, align 8
  %8 = tail call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %2, i64 8) #25
  %9 = extractvalue { i64, i1 } %8, 0
  %10 = extractvalue { i64, i1 } %8, 1
  %11 = icmp ugt i64 %9, -65
  %12 = or i1 %10, %11
  br i1 %12, label %1219, label %13

13:                                               ; preds = %4
  %14 = getelementptr inbounds %struct.LodePNGDecompressSettings, %struct.LodePNGDecompressSettings* %3, i64 0, i32 1
  %15 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %0, i64 0, i32 1
  %16 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %0, i64 0, i32 2
  %17 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %0, i64 0, i32 0
  %18 = getelementptr inbounds %struct.LodePNGDecompressSettings, %struct.LodePNGDecompressSettings* %3, i64 0, i32 2
  %19 = bitcast %struct.HuffmanTree* %6 to i8*
  %20 = bitcast %struct.HuffmanTree* %7 to i8*
  %21 = getelementptr inbounds %struct.HuffmanTree, %struct.HuffmanTree* %6, i64 0, i32 4
  %22 = bitcast i8** %21 to i8*
  %23 = getelementptr inbounds %struct.HuffmanTree, %struct.HuffmanTree* %7, i64 0, i32 4
  %24 = bitcast i8** %23 to i8*
  %25 = bitcast %struct.HuffmanTree* %5 to i8*
  %26 = getelementptr inbounds %struct.HuffmanTree, %struct.HuffmanTree* %5, i64 0, i32 4
  %27 = bitcast i8** %26 to i8*
  %28 = getelementptr inbounds %struct.HuffmanTree, %struct.HuffmanTree* %5, i64 0, i32 1
  %29 = bitcast i32** %28 to i8**
  %30 = getelementptr inbounds %struct.HuffmanTree, %struct.HuffmanTree* %5, i64 0, i32 3
  %31 = getelementptr inbounds %struct.HuffmanTree, %struct.HuffmanTree* %5, i64 0, i32 2
  %32 = getelementptr inbounds %struct.HuffmanTree, %struct.HuffmanTree* %5, i64 0, i32 5
  %33 = getelementptr inbounds %struct.HuffmanTree, %struct.HuffmanTree* %6, i64 0, i32 1
  %34 = bitcast i32** %33 to i8**
  %35 = getelementptr inbounds %struct.HuffmanTree, %struct.HuffmanTree* %6, i64 0, i32 3
  %36 = getelementptr inbounds %struct.HuffmanTree, %struct.HuffmanTree* %6, i64 0, i32 2
  %37 = getelementptr inbounds %struct.HuffmanTree, %struct.HuffmanTree* %7, i64 0, i32 1
  %38 = bitcast i32** %37 to i8**
  %39 = getelementptr inbounds %struct.HuffmanTree, %struct.HuffmanTree* %7, i64 0, i32 3
  %40 = getelementptr inbounds %struct.HuffmanTree, %struct.HuffmanTree* %7, i64 0, i32 2
  %41 = bitcast %struct.HuffmanTree* %5 to i8**
  %42 = bitcast i16** %32 to i8**
  %43 = getelementptr inbounds %struct.HuffmanTree, %struct.HuffmanTree* %6, i64 0, i32 5
  %44 = getelementptr inbounds %struct.HuffmanTree, %struct.HuffmanTree* %7, i64 0, i32 5
  %45 = bitcast i16** %43 to i8**
  %46 = bitcast i16** %44 to i8**
  %47 = bitcast %struct.HuffmanTree* %6 to i8**
  %48 = bitcast %struct.HuffmanTree* %7 to i8**
  br label %49

49:                                               ; preds = %13, %1217
  %50 = phi i64 [ 0, %13 ], [ %1211, %1217 ]
  %51 = sub i64 %9, %50
  %52 = icmp ult i64 %51, 3
  br i1 %52, label %1219, label %53

53:                                               ; preds = %49
  %54 = lshr i64 %50, 3
  %55 = add nuw nsw i64 %54, 1
  %56 = icmp ult i64 %55, %2
  br i1 %56, label %57, label %66

57:                                               ; preds = %53
  %58 = getelementptr inbounds i8, i8* %1, i64 %54
  %59 = load i8, i8* %58, align 1, !tbaa !14
  %60 = zext i8 %59 to i32
  %61 = getelementptr inbounds i8, i8* %1, i64 %55
  %62 = load i8, i8* %61, align 1, !tbaa !14
  %63 = zext i8 %62 to i32
  %64 = shl nuw nsw i32 %63, 8
  %65 = or i32 %64, %60
  br label %72

66:                                               ; preds = %53
  %67 = icmp ult i64 %54, %2
  br i1 %67, label %68, label %72

68:                                               ; preds = %66
  %69 = getelementptr inbounds i8, i8* %1, i64 %54
  %70 = load i8, i8* %69, align 1, !tbaa !14
  %71 = zext i8 %70 to i32
  br label %72

72:                                               ; preds = %57, %66, %68
  %73 = phi i32 [ %65, %57 ], [ %71, %68 ], [ 0, %66 ]
  %74 = trunc i64 %50 to i32
  %75 = and i32 %74, 7
  %76 = lshr i32 %73, %75
  %77 = and i32 %76, 1
  %78 = lshr i32 %76, 1
  %79 = and i32 %78, 3
  %80 = add i64 %50, 3
  switch i32 %79, label %139 [
    i32 3, label %1219
    i32 0, label %81
  ]

81:                                               ; preds = %72
  %82 = add i64 %50, 10
  %83 = lshr i64 %82, 3
  %84 = add nuw nsw i64 %83, 4
  %85 = icmp ult i64 %84, %2
  br i1 %85, label %86, label %1219

86:                                               ; preds = %81
  %87 = getelementptr inbounds i8, i8* %1, i64 %83
  %88 = load i8, i8* %87, align 1, !tbaa !14
  %89 = zext i8 %88 to i32
  %90 = add nuw nsw i64 %83, 1
  %91 = getelementptr inbounds i8, i8* %1, i64 %90
  %92 = load i8, i8* %91, align 1, !tbaa !14
  %93 = zext i8 %92 to i32
  %94 = shl nuw nsw i32 %93, 8
  %95 = or i32 %94, %89
  %96 = load i32, i32* %14, align 4, !tbaa !46
  %97 = icmp eq i32 %96, 0
  br i1 %97, label %98, label %111

98:                                               ; preds = %86
  %99 = add nuw nsw i64 %83, 2
  %100 = getelementptr inbounds i8, i8* %1, i64 %99
  %101 = load i8, i8* %100, align 1, !tbaa !14
  %102 = zext i8 %101 to i32
  %103 = add nuw nsw i64 %83, 3
  %104 = getelementptr inbounds i8, i8* %1, i64 %103
  %105 = load i8, i8* %104, align 1, !tbaa !14
  %106 = zext i8 %105 to i32
  %107 = shl nuw nsw i32 %106, 8
  %108 = or i32 %107, %102
  %109 = add nuw nsw i32 %108, %95
  %110 = icmp eq i32 %109, 65535
  br i1 %110, label %111, label %1219

111:                                              ; preds = %98, %86
  %112 = load i64, i64* %15, align 8, !tbaa !44
  %113 = zext i32 %95 to i64
  %114 = add i64 %112, %113
  store i64 %114, i64* %15, align 8, !tbaa !44
  %115 = load i64, i64* %16, align 8, !tbaa !45
  %116 = icmp ult i64 %115, %114
  br i1 %116, label %117, label %124

117:                                              ; preds = %111
  %118 = lshr i64 %115, 1
  %119 = add i64 %118, %114
  %120 = load i8*, i8** %17, align 8, !tbaa !39
  %121 = tail call i8* @realloc(i8* noundef %120, i64 noundef %119) #25
  %122 = icmp eq i8* %121, null
  br i1 %122, label %1219, label %123

123:                                              ; preds = %117
  store i64 %119, i64* %16, align 8, !tbaa !45
  store i8* %121, i8** %17, align 8, !tbaa !39
  br label %124

124:                                              ; preds = %123, %111
  %125 = add nuw nsw i64 %84, %113
  %126 = icmp ugt i64 %125, %2
  br i1 %126, label %1219, label %127

127:                                              ; preds = %124
  %128 = icmp eq i32 %95, 0
  br i1 %128, label %136, label %129

129:                                              ; preds = %127
  %130 = load i8*, i8** %17, align 8, !tbaa !39
  %131 = load i64, i64* %15, align 8, !tbaa !44
  %132 = getelementptr inbounds i8, i8* %130, i64 %131
  %133 = sub nsw i64 0, %113
  %134 = getelementptr inbounds i8, i8* %132, i64 %133
  %135 = getelementptr inbounds i8, i8* %1, i64 %84
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %134, i8* nonnull align 1 %135, i64 %113, i1 false) #25, !tbaa !14, !alias.scope !48
  br label %136

136:                                              ; preds = %127, %129
  %137 = phi i64 [ %125, %129 ], [ %84, %127 ]
  %138 = shl i64 %137, 3
  br label %1210

139:                                              ; preds = %72
  %140 = load i64, i64* %18, align 8, !tbaa !52
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %19) #25
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %20) #25
  %141 = load i64, i64* %15, align 8, !tbaa !44
  %142 = add i64 %141, 260
  %143 = load i64, i64* %16, align 8, !tbaa !45
  %144 = icmp ult i64 %143, %142
  br i1 %144, label %145, label %153

145:                                              ; preds = %139
  %146 = lshr i64 %143, 1
  %147 = add i64 %146, %142
  %148 = load i8*, i8** %17, align 8, !tbaa !39
  %149 = tail call i8* @realloc(i8* noundef %148, i64 noundef %147) #25
  %150 = icmp eq i8* %149, null
  br i1 %150, label %151, label %152

151:                                              ; preds = %145
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %20) #25
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %19) #25
  br label %1219

152:                                              ; preds = %145
  store i64 %147, i64* %16, align 8, !tbaa !45
  store i8* %149, i8** %17, align 8, !tbaa !39
  br label %153

153:                                              ; preds = %152, %139
  call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(16) %19, i8 0, i64 16, i1 false) #25
  call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(16) %22, i8 0, i64 16, i1 false) #25
  call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(16) %20, i8 0, i64 16, i1 false) #25
  call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(16) %24, i8 0, i64 16, i1 false) #25
  %154 = icmp eq i32 %79, 1
  br i1 %154, label %155, label %179

155:                                              ; preds = %153
  %156 = call fastcc noundef i32 @_ZL23generateFixedLitLenTreeP11HuffmanTree(%struct.HuffmanTree* noundef nonnull %6) #25
  %157 = icmp eq i32 %156, 0
  br i1 %157, label %158, label %713

158:                                              ; preds = %155
  %159 = tail call noalias dereferenceable_or_null(128) i8* @malloc(i64 noundef 128) #25
  store i8* %159, i8** %38, align 8, !tbaa !53
  %160 = icmp eq i8* %159, null
  %161 = bitcast i8* %159 to i32*
  br i1 %160, label %713, label %162

162:                                              ; preds = %158
  %163 = bitcast i8* %159 to <4 x i32>*
  store <4 x i32> <i32 5, i32 5, i32 5, i32 5>, <4 x i32>* %163, align 4, !tbaa !9
  %164 = getelementptr inbounds i32, i32* %161, i64 4
  %165 = bitcast i32* %164 to <4 x i32>*
  store <4 x i32> <i32 5, i32 5, i32 5, i32 5>, <4 x i32>* %165, align 4, !tbaa !9
  %166 = getelementptr inbounds i32, i32* %161, i64 8
  %167 = bitcast i32* %166 to <4 x i32>*
  store <4 x i32> <i32 5, i32 5, i32 5, i32 5>, <4 x i32>* %167, align 4, !tbaa !9
  %168 = getelementptr inbounds i32, i32* %161, i64 12
  %169 = bitcast i32* %168 to <4 x i32>*
  store <4 x i32> <i32 5, i32 5, i32 5, i32 5>, <4 x i32>* %169, align 4, !tbaa !9
  %170 = getelementptr inbounds i32, i32* %161, i64 16
  %171 = bitcast i32* %170 to <4 x i32>*
  store <4 x i32> <i32 5, i32 5, i32 5, i32 5>, <4 x i32>* %171, align 4, !tbaa !9
  %172 = getelementptr inbounds i32, i32* %161, i64 20
  %173 = bitcast i32* %172 to <4 x i32>*
  store <4 x i32> <i32 5, i32 5, i32 5, i32 5>, <4 x i32>* %173, align 4, !tbaa !9
  %174 = getelementptr inbounds i32, i32* %161, i64 24
  %175 = bitcast i32* %174 to <4 x i32>*
  store <4 x i32> <i32 5, i32 5, i32 5, i32 5>, <4 x i32>* %175, align 4, !tbaa !9
  %176 = getelementptr inbounds i32, i32* %161, i64 28
  %177 = bitcast i32* %176 to <4 x i32>*
  store <4 x i32> <i32 5, i32 5, i32 5, i32 5>, <4 x i32>* %177, align 4, !tbaa !9
  store i32 32, i32* %39, align 4, !tbaa !55
  store i32 15, i32* %40, align 8, !tbaa !56
  %178 = call fastcc noundef i32 @_ZL28HuffmanTree_makeFromLengths2P11HuffmanTree(%struct.HuffmanTree* noundef nonnull %7) #25
  br label %706

179:                                              ; preds = %153
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %25) #25
  %180 = sub i64 %9, %80
  %181 = icmp ult i64 %180, 14
  br i1 %181, label %703, label %182

182:                                              ; preds = %179
  %183 = lshr i64 %80, 3
  %184 = add nuw nsw i64 %183, 2
  %185 = icmp ult i64 %184, %2
  br i1 %185, label %186, label %200

186:                                              ; preds = %182
  %187 = getelementptr inbounds i8, i8* %1, i64 %183
  %188 = load i8, i8* %187, align 1, !tbaa !14
  %189 = zext i8 %188 to i32
  %190 = add nuw nsw i64 %183, 1
  %191 = getelementptr inbounds i8, i8* %1, i64 %190
  %192 = load i8, i8* %191, align 1, !tbaa !14
  %193 = zext i8 %192 to i32
  %194 = shl nuw nsw i32 %193, 8
  %195 = or i32 %194, %189
  %196 = getelementptr inbounds i8, i8* %1, i64 %184
  %197 = load i8, i8* %196, align 1, !tbaa !14
  %198 = zext i8 %197 to i32
  %199 = shl nuw nsw i32 %198, 16
  br label %215

200:                                              ; preds = %182
  %201 = icmp ult i64 %183, %2
  br i1 %201, label %202, label %206

202:                                              ; preds = %200
  %203 = getelementptr inbounds i8, i8* %1, i64 %183
  %204 = load i8, i8* %203, align 1, !tbaa !14
  %205 = zext i8 %204 to i32
  br label %206

206:                                              ; preds = %202, %200
  %207 = phi i32 [ %205, %202 ], [ 0, %200 ]
  %208 = add nuw nsw i64 %183, 1
  %209 = icmp ult i64 %208, %2
  br i1 %209, label %210, label %219

210:                                              ; preds = %206
  %211 = getelementptr inbounds i8, i8* %1, i64 %208
  %212 = load i8, i8* %211, align 1, !tbaa !14
  %213 = zext i8 %212 to i32
  %214 = shl nuw nsw i32 %213, 8
  br label %215

215:                                              ; preds = %210, %186
  %216 = phi i32 [ %199, %186 ], [ %207, %210 ]
  %217 = phi i32 [ %195, %186 ], [ %214, %210 ]
  %218 = or i32 %217, %216
  br label %219

219:                                              ; preds = %215, %206
  %220 = phi i32 [ %207, %206 ], [ %218, %215 ]
  %221 = trunc i64 %80 to i32
  %222 = and i32 %221, 7
  %223 = lshr i32 %220, %222
  %224 = and i32 %223, 31
  %225 = lshr i32 %223, 5
  %226 = add nuw nsw i32 %224, 257
  %227 = and i32 %225, 31
  %228 = lshr i32 %223, 10
  %229 = add nuw nsw i32 %227, 1
  %230 = and i32 %228, 15
  %231 = add i64 %50, 17
  %232 = add nuw nsw i32 %230, 4
  %233 = tail call noalias dereferenceable_or_null(76) i8* @malloc(i64 noundef 76) #25
  %234 = bitcast i8* %233 to i32*
  %235 = icmp eq i8* %233, null
  br i1 %235, label %703, label %236

236:                                              ; preds = %219
  call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(16) %25, i8 0, i64 16, i1 false) #25
  call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(16) %27, i8 0, i64 16, i1 false) #25
  %237 = mul nuw nsw i32 %232, 3
  %238 = zext i32 %237 to i64
  %239 = add i64 %231, %238
  %240 = icmp uge i64 %239, %231
  %241 = icmp ule i64 %239, %9
  %242 = and i1 %240, %241
  br i1 %242, label %243, label %694

243:                                              ; preds = %236
  %244 = zext i32 %232 to i64
  br label %266

245:                                              ; preds = %287
  %246 = icmp eq i32 %232, 19
  br i1 %246, label %327, label %247

247:                                              ; preds = %245
  %248 = and i32 %228, 3
  %249 = xor i32 %248, 3
  %250 = icmp eq i32 %249, 0
  br i1 %250, label %262, label %251

251:                                              ; preds = %247, %251
  %252 = phi i32 [ %259, %251 ], [ %232, %247 ]
  %253 = phi i32 [ %260, %251 ], [ 0, %247 ]
  %254 = zext i32 %252 to i64
  %255 = getelementptr inbounds [19 x i32], [19 x i32]* @_ZL10CLCL_ORDER, i64 0, i64 %254
  %256 = load i32, i32* %255, align 4, !tbaa !9
  %257 = zext i32 %256 to i64
  %258 = getelementptr inbounds i32, i32* %234, i64 %257
  store i32 0, i32* %258, align 4, !tbaa !9
  %259 = add i32 %252, 1
  %260 = add i32 %253, 1
  %261 = icmp eq i32 %260, %249
  br i1 %261, label %262, label %251, !llvm.loop !57

262:                                              ; preds = %251, %247
  %263 = phi i32 [ %232, %247 ], [ %259, %251 ]
  %264 = add nsw i32 %230, -12
  %265 = icmp ult i32 %264, 3
  br i1 %265, label %327, label %300

266:                                              ; preds = %287, %243
  %267 = phi i64 [ %231, %243 ], [ %293, %287 ]
  %268 = phi i64 [ 0, %243 ], [ %298, %287 ]
  %269 = lshr i64 %267, 3
  %270 = add nuw nsw i64 %269, 1
  %271 = icmp ult i64 %270, %2
  br i1 %271, label %272, label %281

272:                                              ; preds = %266
  %273 = getelementptr inbounds i8, i8* %1, i64 %269
  %274 = load i8, i8* %273, align 1, !tbaa !14
  %275 = zext i8 %274 to i32
  %276 = getelementptr inbounds i8, i8* %1, i64 %270
  %277 = load i8, i8* %276, align 1, !tbaa !14
  %278 = zext i8 %277 to i32
  %279 = shl nuw nsw i32 %278, 8
  %280 = or i32 %279, %275
  br label %287

281:                                              ; preds = %266
  %282 = icmp ult i64 %269, %2
  br i1 %282, label %283, label %287

283:                                              ; preds = %281
  %284 = getelementptr inbounds i8, i8* %1, i64 %269
  %285 = load i8, i8* %284, align 1, !tbaa !14
  %286 = zext i8 %285 to i32
  br label %287

287:                                              ; preds = %283, %281, %272
  %288 = phi i32 [ %280, %272 ], [ %286, %283 ], [ 0, %281 ]
  %289 = trunc i64 %267 to i32
  %290 = and i32 %289, 7
  %291 = lshr i32 %288, %290
  %292 = and i32 %291, 7
  %293 = add i64 %267, 3
  %294 = getelementptr inbounds [19 x i32], [19 x i32]* @_ZL10CLCL_ORDER, i64 0, i64 %268
  %295 = load i32, i32* %294, align 4, !tbaa !9
  %296 = zext i32 %295 to i64
  %297 = getelementptr inbounds i32, i32* %234, i64 %296
  store i32 %292, i32* %297, align 4, !tbaa !9
  %298 = add nuw nsw i64 %268, 1
  %299 = icmp eq i64 %298, %244
  br i1 %299, label %245, label %266

300:                                              ; preds = %262, %300
  %301 = phi i32 [ %325, %300 ], [ %263, %262 ]
  %302 = zext i32 %301 to i64
  %303 = getelementptr inbounds [19 x i32], [19 x i32]* @_ZL10CLCL_ORDER, i64 0, i64 %302
  %304 = load i32, i32* %303, align 4, !tbaa !9
  %305 = zext i32 %304 to i64
  %306 = getelementptr inbounds i32, i32* %234, i64 %305
  store i32 0, i32* %306, align 4, !tbaa !9
  %307 = add i32 %301, 1
  %308 = zext i32 %307 to i64
  %309 = getelementptr inbounds [19 x i32], [19 x i32]* @_ZL10CLCL_ORDER, i64 0, i64 %308
  %310 = load i32, i32* %309, align 4, !tbaa !9
  %311 = zext i32 %310 to i64
  %312 = getelementptr inbounds i32, i32* %234, i64 %311
  store i32 0, i32* %312, align 4, !tbaa !9
  %313 = add i32 %301, 2
  %314 = zext i32 %313 to i64
  %315 = getelementptr inbounds [19 x i32], [19 x i32]* @_ZL10CLCL_ORDER, i64 0, i64 %314
  %316 = load i32, i32* %315, align 4, !tbaa !9
  %317 = zext i32 %316 to i64
  %318 = getelementptr inbounds i32, i32* %234, i64 %317
  store i32 0, i32* %318, align 4, !tbaa !9
  %319 = add i32 %301, 3
  %320 = zext i32 %319 to i64
  %321 = getelementptr inbounds [19 x i32], [19 x i32]* @_ZL10CLCL_ORDER, i64 0, i64 %320
  %322 = load i32, i32* %321, align 4, !tbaa !9
  %323 = zext i32 %322 to i64
  %324 = getelementptr inbounds i32, i32* %234, i64 %323
  store i32 0, i32* %324, align 4, !tbaa !9
  %325 = add i32 %301, 4
  %326 = icmp eq i32 %325, 19
  br i1 %326, label %327, label %300

327:                                              ; preds = %262, %300, %245
  %328 = tail call noalias dereferenceable_or_null(76) i8* @malloc(i64 noundef 76) #25
  store i8* %328, i8** %29, align 8, !tbaa !53
  %329 = icmp eq i8* %328, null
  %330 = bitcast i8* %328 to i32*
  br i1 %329, label %694, label %331

331:                                              ; preds = %327
  %332 = bitcast i8* %233 to <4 x i32>*
  %333 = load <4 x i32>, <4 x i32>* %332, align 4, !tbaa !9
  %334 = bitcast i8* %328 to <4 x i32>*
  store <4 x i32> %333, <4 x i32>* %334, align 4, !tbaa !9
  %335 = getelementptr inbounds i32, i32* %234, i64 4
  %336 = getelementptr inbounds i32, i32* %330, i64 4
  %337 = bitcast i32* %335 to <4 x i32>*
  %338 = load <4 x i32>, <4 x i32>* %337, align 4, !tbaa !9
  %339 = bitcast i32* %336 to <4 x i32>*
  store <4 x i32> %338, <4 x i32>* %339, align 4, !tbaa !9
  %340 = getelementptr inbounds i32, i32* %234, i64 8
  %341 = getelementptr inbounds i32, i32* %330, i64 8
  %342 = bitcast i32* %340 to <4 x i32>*
  %343 = load <4 x i32>, <4 x i32>* %342, align 4, !tbaa !9
  %344 = bitcast i32* %341 to <4 x i32>*
  store <4 x i32> %343, <4 x i32>* %344, align 4, !tbaa !9
  %345 = getelementptr inbounds i32, i32* %234, i64 12
  %346 = getelementptr inbounds i32, i32* %330, i64 12
  %347 = bitcast i32* %345 to <4 x i32>*
  %348 = load <4 x i32>, <4 x i32>* %347, align 4, !tbaa !9
  %349 = bitcast i32* %346 to <4 x i32>*
  store <4 x i32> %348, <4 x i32>* %349, align 4, !tbaa !9
  %350 = getelementptr inbounds i32, i32* %234, i64 16
  %351 = load i32, i32* %350, align 4, !tbaa !9
  %352 = getelementptr inbounds i32, i32* %330, i64 16
  store i32 %351, i32* %352, align 4, !tbaa !9
  %353 = getelementptr inbounds i32, i32* %234, i64 17
  %354 = load i32, i32* %353, align 4, !tbaa !9
  %355 = getelementptr inbounds i32, i32* %330, i64 17
  store i32 %354, i32* %355, align 4, !tbaa !9
  %356 = getelementptr inbounds i32, i32* %234, i64 18
  %357 = load i32, i32* %356, align 4, !tbaa !9
  %358 = getelementptr inbounds i32, i32* %330, i64 18
  store i32 %357, i32* %358, align 4, !tbaa !9
  store i32 19, i32* %30, align 4, !tbaa !55
  store i32 7, i32* %31, align 8, !tbaa !56
  %359 = call fastcc noundef i32 @_ZL28HuffmanTree_makeFromLengths2P11HuffmanTree(%struct.HuffmanTree* noundef nonnull %5) #25
  %360 = icmp eq i32 %359, 0
  br i1 %360, label %361, label %694

361:                                              ; preds = %331
  %362 = tail call noalias dereferenceable_or_null(1152) i8* @malloc(i64 noundef 1152) #25
  %363 = bitcast i8* %362 to i32*
  %364 = tail call noalias dereferenceable_or_null(128) i8* @malloc(i64 noundef 128) #25
  %365 = bitcast i8* %364 to i32*
  %366 = icmp ne i8* %362, null
  %367 = icmp ne i8* %364, null
  %368 = and i1 %366, %367
  br i1 %368, label %369, label %694

369:                                              ; preds = %361
  tail call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 1 dereferenceable(1152) %362, i8 0, i64 1152, i1 false) #25, !tbaa !14, !alias.scope !58
  tail call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 1 dereferenceable(128) %364, i8 0, i64 128, i1 false) #25, !tbaa !14, !alias.scope !61
  %370 = add nuw nsw i32 %229, %226
  %371 = load i8*, i8** %26, align 8, !tbaa !64
  %372 = load i16*, i16** %32, align 8, !tbaa !65
  %373 = add nuw nsw i32 %224, 258
  %374 = sub nuw nsw i32 -258, %224
  %375 = zext i32 %226 to i64
  br label %376

376:                                              ; preds = %626, %369
  %377 = phi i64 [ %293, %369 ], [ %622, %626 ]
  %378 = phi i32 [ 0, %369 ], [ %624, %626 ]
  %379 = phi i32 [ 0, %369 ], [ %623, %626 ]
  %380 = lshr i64 %377, 3
  %381 = add nuw nsw i64 %380, 3
  %382 = icmp ult i64 %381, %2
  br i1 %382, label %383, label %403

383:                                              ; preds = %376
  %384 = getelementptr inbounds i8, i8* %1, i64 %380
  %385 = load i8, i8* %384, align 1, !tbaa !14
  %386 = zext i8 %385 to i32
  %387 = add nuw nsw i64 %380, 1
  %388 = getelementptr inbounds i8, i8* %1, i64 %387
  %389 = load i8, i8* %388, align 1, !tbaa !14
  %390 = zext i8 %389 to i32
  %391 = shl nuw nsw i32 %390, 8
  %392 = or i32 %391, %386
  %393 = add nuw nsw i64 %380, 2
  %394 = getelementptr inbounds i8, i8* %1, i64 %393
  %395 = load i8, i8* %394, align 1, !tbaa !14
  %396 = zext i8 %395 to i32
  %397 = shl nuw nsw i32 %396, 16
  %398 = or i32 %392, %397
  %399 = getelementptr inbounds i8, i8* %1, i64 %381
  %400 = load i8, i8* %399, align 1, !tbaa !14
  %401 = zext i8 %400 to i32
  %402 = shl nuw i32 %401, 24
  br label %428

403:                                              ; preds = %376
  %404 = icmp ult i64 %380, %2
  br i1 %404, label %405, label %409

405:                                              ; preds = %403
  %406 = getelementptr inbounds i8, i8* %1, i64 %380
  %407 = load i8, i8* %406, align 1, !tbaa !14
  %408 = zext i8 %407 to i32
  br label %409

409:                                              ; preds = %405, %403
  %410 = phi i32 [ %408, %405 ], [ 0, %403 ]
  %411 = add nuw nsw i64 %380, 1
  %412 = icmp ult i64 %411, %2
  br i1 %412, label %413, label %419

413:                                              ; preds = %409
  %414 = getelementptr inbounds i8, i8* %1, i64 %411
  %415 = load i8, i8* %414, align 1, !tbaa !14
  %416 = zext i8 %415 to i32
  %417 = shl nuw nsw i32 %416, 8
  %418 = or i32 %417, %410
  br label %419

419:                                              ; preds = %413, %409
  %420 = phi i32 [ %418, %413 ], [ %410, %409 ]
  %421 = add nuw nsw i64 %380, 2
  %422 = icmp ult i64 %421, %2
  br i1 %422, label %423, label %432

423:                                              ; preds = %419
  %424 = getelementptr inbounds i8, i8* %1, i64 %421
  %425 = load i8, i8* %424, align 1, !tbaa !14
  %426 = zext i8 %425 to i32
  %427 = shl nuw nsw i32 %426, 16
  br label %428

428:                                              ; preds = %423, %383
  %429 = phi i32 [ %402, %383 ], [ %420, %423 ]
  %430 = phi i32 [ %398, %383 ], [ %427, %423 ]
  %431 = or i32 %430, %429
  br label %432

432:                                              ; preds = %428, %419
  %433 = phi i32 [ %420, %419 ], [ %431, %428 ]
  %434 = trunc i64 %377 to i32
  %435 = and i32 %434, 7
  %436 = lshr i32 %433, %435
  %437 = and i32 %436, 511
  %438 = zext i32 %437 to i64
  %439 = getelementptr inbounds i8, i8* %371, i64 %438
  %440 = load i8, i8* %439, align 1, !tbaa !14
  %441 = getelementptr inbounds i16, i16* %372, i64 %438
  %442 = load i16, i16* %441, align 2, !tbaa !66
  %443 = icmp ult i8 %440, 10
  br i1 %443, label %444, label %449

444:                                              ; preds = %432
  %445 = zext i8 %440 to i64
  %446 = zext i8 %440 to i32
  %447 = lshr i32 %436, %446
  %448 = add i64 %377, %445
  br label %470

449:                                              ; preds = %432
  %450 = zext i8 %440 to i32
  %451 = lshr i32 %436, 9
  %452 = add i64 %377, 9
  %453 = add nsw i32 %450, -9
  %454 = shl nsw i32 -1, %453
  %455 = xor i32 %454, -1
  %456 = and i32 %451, %455
  %457 = trunc i32 %456 to i16
  %458 = add i16 %442, %457
  %459 = zext i16 %458 to i64
  %460 = getelementptr inbounds i8, i8* %371, i64 %459
  %461 = load i8, i8* %460, align 1, !tbaa !14
  %462 = zext i8 %461 to i64
  %463 = add nuw nsw i64 %462, 4294967287
  %464 = and i64 %463, 4294967295
  %465 = trunc i64 %463 to i32
  %466 = lshr i32 %451, %465
  %467 = add i64 %452, %464
  %468 = getelementptr inbounds i16, i16* %372, i64 %459
  %469 = load i16, i16* %468, align 2, !tbaa !66
  br label %470

470:                                              ; preds = %449, %444
  %471 = phi i64 [ %448, %444 ], [ %467, %449 ]
  %472 = phi i32 [ %447, %444 ], [ %466, %449 ]
  %473 = phi i16 [ %442, %444 ], [ %469, %449 ]
  %474 = icmp ult i16 %473, 16
  br i1 %474, label %475, label %484

475:                                              ; preds = %470
  %476 = zext i16 %473 to i32
  %477 = icmp ult i32 %378, %226
  %478 = select i1 %477, i32 0, i32 %226
  %479 = sub i32 %378, %478
  %480 = select i1 %477, i32* %363, i32* %365
  %481 = zext i32 %479 to i64
  %482 = getelementptr inbounds i32, i32* %480, i64 %481
  store i32 %476, i32* %482, align 4, !tbaa !9
  %483 = add i32 %378, 1
  br label %621

484:                                              ; preds = %470
  switch i16 %473, label %694 [
    i16 16, label %485
    i16 17, label %567
    i16 18, label %588
  ]

485:                                              ; preds = %484
  %486 = icmp eq i32 %378, 0
  br i1 %486, label %694, label %487

487:                                              ; preds = %485
  %488 = and i32 %472, 3
  %489 = add i64 %471, 2
  %490 = icmp ult i32 %378, %373
  %491 = add i32 %378, -1
  %492 = zext i32 %491 to i64
  %493 = getelementptr inbounds i32, i32* %363, i64 %492
  %494 = add i32 %374, %378
  %495 = zext i32 %494 to i64
  %496 = getelementptr inbounds i32, i32* %365, i64 %495
  %497 = select i1 %490, i32* %493, i32* %496
  %498 = load i32, i32* %497, align 4, !tbaa !9
  %499 = zext i32 %378 to i64
  %500 = tail call i32 @llvm.usub.sat.i32(i32 %370, i32 %378) #25
  %501 = add nuw nsw i32 %488, 2
  %502 = icmp ugt i32 %370, %378
  br i1 %502, label %503, label %609

503:                                              ; preds = %487
  %504 = icmp ult i32 %378, %226
  %505 = sub i32 %378, %226
  %506 = zext i32 %505 to i64
  %507 = getelementptr inbounds i32, i32* %365, i64 %506
  %508 = getelementptr inbounds i32, i32* %363, i64 %499
  %509 = select i1 %504, i32* %508, i32* %507
  store i32 %498, i32* %509, align 4, !tbaa !9
  %510 = add nuw nsw i64 %499, 1
  %511 = icmp eq i32 %500, 1
  br i1 %511, label %609, label %512

512:                                              ; preds = %503
  %513 = trunc i64 %510 to i32
  %514 = icmp ult i64 %510, %375
  %515 = sub i32 %513, %226
  %516 = zext i32 %515 to i64
  %517 = getelementptr inbounds i32, i32* %365, i64 %516
  %518 = getelementptr inbounds i32, i32* %363, i64 %510
  %519 = select i1 %514, i32* %518, i32* %517
  store i32 %498, i32* %519, align 4, !tbaa !9
  %520 = add nuw nsw i64 %499, 2
  %521 = icmp eq i32 %500, 2
  br i1 %521, label %609, label %522

522:                                              ; preds = %512
  %523 = trunc i64 %520 to i32
  %524 = icmp ult i64 %520, %375
  %525 = sub i32 %523, %226
  %526 = zext i32 %525 to i64
  %527 = getelementptr inbounds i32, i32* %365, i64 %526
  %528 = getelementptr inbounds i32, i32* %363, i64 %520
  %529 = select i1 %524, i32* %528, i32* %527
  store i32 %498, i32* %529, align 4, !tbaa !9
  %530 = add nuw nsw i64 %499, 3
  %531 = icmp eq i32 %488, 0
  br i1 %531, label %609, label %532

532:                                              ; preds = %522
  %533 = icmp eq i32 %500, 3
  br i1 %533, label %609, label %534

534:                                              ; preds = %532
  %535 = trunc i64 %530 to i32
  %536 = icmp ult i64 %530, %375
  %537 = sub i32 %535, %226
  %538 = zext i32 %537 to i64
  %539 = getelementptr inbounds i32, i32* %365, i64 %538
  %540 = getelementptr inbounds i32, i32* %363, i64 %530
  %541 = select i1 %536, i32* %540, i32* %539
  store i32 %498, i32* %541, align 4, !tbaa !9
  %542 = add nuw nsw i64 %499, 4
  %543 = icmp eq i32 %501, 3
  br i1 %543, label %609, label %544

544:                                              ; preds = %534
  %545 = icmp eq i32 %500, 4
  br i1 %545, label %609, label %546

546:                                              ; preds = %544
  %547 = trunc i64 %542 to i32
  %548 = icmp ult i64 %542, %375
  %549 = sub i32 %547, %226
  %550 = zext i32 %549 to i64
  %551 = getelementptr inbounds i32, i32* %365, i64 %550
  %552 = getelementptr inbounds i32, i32* %363, i64 %542
  %553 = select i1 %548, i32* %552, i32* %551
  store i32 %498, i32* %553, align 4, !tbaa !9
  %554 = add nuw nsw i64 %499, 5
  %555 = icmp eq i32 %501, 4
  br i1 %555, label %609, label %556

556:                                              ; preds = %546
  %557 = icmp eq i32 %500, 5
  br i1 %557, label %609, label %558

558:                                              ; preds = %556
  %559 = trunc i64 %554 to i32
  %560 = icmp ult i64 %554, %375
  %561 = sub i32 %559, %226
  %562 = zext i32 %561 to i64
  %563 = getelementptr inbounds i32, i32* %365, i64 %562
  %564 = getelementptr inbounds i32, i32* %363, i64 %554
  %565 = select i1 %560, i32* %564, i32* %563
  store i32 %498, i32* %565, align 4, !tbaa !9
  %566 = add nuw nsw i64 %499, 6
  br label %609

567:                                              ; preds = %484
  %568 = and i32 %472, 7
  %569 = add i64 %471, 3
  %570 = zext i32 %378 to i64
  %571 = tail call i32 @llvm.usub.sat.i32(i32 %370, i32 %378) #25
  %572 = add nuw nsw i32 %568, 2
  br label %573

573:                                              ; preds = %577, %567
  %574 = phi i64 [ %570, %567 ], [ %585, %577 ]
  %575 = phi i32 [ 0, %567 ], [ %586, %577 ]
  %576 = icmp eq i32 %575, %571
  br i1 %576, label %613, label %577

577:                                              ; preds = %573
  %578 = trunc i64 %574 to i32
  %579 = icmp ult i64 %574, %375
  %580 = sub i32 %578, %226
  %581 = zext i32 %580 to i64
  %582 = getelementptr inbounds i32, i32* %365, i64 %581
  %583 = getelementptr inbounds i32, i32* %363, i64 %574
  %584 = select i1 %579, i32* %583, i32* %582
  store i32 0, i32* %584, align 4, !tbaa !9
  %585 = add nuw nsw i64 %574, 1
  %586 = add nuw nsw i32 %575, 1
  %587 = icmp eq i32 %575, %572
  br i1 %587, label %613, label %573

588:                                              ; preds = %484
  %589 = and i32 %472, 127
  %590 = add i64 %471, 7
  %591 = zext i32 %378 to i64
  %592 = tail call i32 @llvm.usub.sat.i32(i32 %370, i32 %378) #25
  %593 = add nuw nsw i32 %589, 10
  br label %594

594:                                              ; preds = %598, %588
  %595 = phi i64 [ %591, %588 ], [ %606, %598 ]
  %596 = phi i32 [ 0, %588 ], [ %607, %598 ]
  %597 = icmp eq i32 %596, %592
  br i1 %597, label %617, label %598

598:                                              ; preds = %594
  %599 = trunc i64 %595 to i32
  %600 = icmp ult i64 %595, %375
  %601 = sub i32 %599, %226
  %602 = zext i32 %601 to i64
  %603 = getelementptr inbounds i32, i32* %365, i64 %602
  %604 = getelementptr inbounds i32, i32* %363, i64 %595
  %605 = select i1 %600, i32* %604, i32* %603
  store i32 0, i32* %605, align 4, !tbaa !9
  %606 = add nuw nsw i64 %595, 1
  %607 = add nuw nsw i32 %596, 1
  %608 = icmp eq i32 %596, %593
  br i1 %608, label %617, label %594

609:                                              ; preds = %558, %556, %546, %544, %534, %532, %522, %512, %503, %487
  %610 = phi i64 [ %499, %487 ], [ %510, %503 ], [ %520, %512 ], [ %530, %522 ], [ %530, %532 ], [ %542, %534 ], [ %542, %544 ], [ %554, %546 ], [ %554, %556 ], [ %566, %558 ]
  %611 = phi i32 [ 13, %487 ], [ 13, %503 ], [ 13, %512 ], [ %379, %522 ], [ 13, %532 ], [ %379, %534 ], [ 13, %544 ], [ %379, %546 ], [ 13, %556 ], [ %379, %558 ]
  %612 = trunc i64 %610 to i32
  br label %621

613:                                              ; preds = %577, %573
  %614 = phi i64 [ %574, %573 ], [ %585, %577 ]
  %615 = phi i32 [ 14, %573 ], [ %379, %577 ]
  %616 = trunc i64 %614 to i32
  br label %621

617:                                              ; preds = %598, %594
  %618 = phi i64 [ %595, %594 ], [ %606, %598 ]
  %619 = phi i32 [ 15, %594 ], [ %379, %598 ]
  %620 = trunc i64 %618 to i32
  br label %621

621:                                              ; preds = %617, %613, %609, %475
  %622 = phi i64 [ %471, %475 ], [ %590, %617 ], [ %569, %613 ], [ %489, %609 ]
  %623 = phi i32 [ %379, %475 ], [ %619, %617 ], [ %615, %613 ], [ %611, %609 ]
  %624 = phi i32 [ %483, %475 ], [ %620, %617 ], [ %616, %613 ], [ %612, %609 ]
  %625 = icmp ugt i64 %622, %9
  br i1 %625, label %694, label %626

626:                                              ; preds = %621
  %627 = icmp ult i32 %624, %370
  br i1 %627, label %376, label %628

628:                                              ; preds = %626
  %629 = icmp eq i32 %623, 0
  br i1 %629, label %630, label %694

630:                                              ; preds = %628
  %631 = getelementptr inbounds i8, i8* %362, i64 1024
  %632 = bitcast i8* %631 to i32*
  %633 = load i32, i32* %632, align 4, !tbaa !9
  %634 = icmp eq i32 %633, 0
  br i1 %634, label %694, label %635

635:                                              ; preds = %630
  %636 = tail call noalias dereferenceable_or_null(1152) i8* @malloc(i64 noundef 1152) #25
  store i8* %636, i8** %34, align 8, !tbaa !53
  %637 = icmp eq i8* %636, null
  %638 = bitcast i8* %636 to i32*
  br i1 %637, label %694, label %639

639:                                              ; preds = %635, %639
  %640 = phi i64 [ %645, %639 ], [ 0, %635 ]
  %641 = getelementptr inbounds i32, i32* %363, i64 %640
  %642 = load i32, i32* %641, align 4, !tbaa !9
  %643 = getelementptr inbounds i32, i32* %638, i64 %640
  store i32 %642, i32* %643, align 4, !tbaa !9
  %644 = add nuw nsw i64 %640, 1
  %645 = and i64 %644, 4294967295
  %646 = icmp eq i64 %645, 288
  br i1 %646, label %647, label %639

647:                                              ; preds = %639
  store i32 288, i32* %35, align 4, !tbaa !55
  store i32 15, i32* %36, align 8, !tbaa !56
  %648 = call fastcc noundef i32 @_ZL28HuffmanTree_makeFromLengths2P11HuffmanTree(%struct.HuffmanTree* noundef nonnull %6) #25
  %649 = icmp eq i32 %648, 0
  br i1 %649, label %650, label %694

650:                                              ; preds = %647
  %651 = tail call noalias dereferenceable_or_null(128) i8* @malloc(i64 noundef 128) #25
  store i8* %651, i8** %38, align 8, !tbaa !53
  %652 = icmp eq i8* %651, null
  %653 = bitcast i8* %651 to i32*
  br i1 %652, label %694, label %654

654:                                              ; preds = %650
  %655 = bitcast i8* %364 to <4 x i32>*
  %656 = load <4 x i32>, <4 x i32>* %655, align 4, !tbaa !9
  %657 = bitcast i8* %651 to <4 x i32>*
  store <4 x i32> %656, <4 x i32>* %657, align 4, !tbaa !9
  %658 = getelementptr inbounds i32, i32* %365, i64 4
  %659 = getelementptr inbounds i32, i32* %653, i64 4
  %660 = bitcast i32* %658 to <4 x i32>*
  %661 = load <4 x i32>, <4 x i32>* %660, align 4, !tbaa !9
  %662 = bitcast i32* %659 to <4 x i32>*
  store <4 x i32> %661, <4 x i32>* %662, align 4, !tbaa !9
  %663 = getelementptr inbounds i32, i32* %365, i64 8
  %664 = getelementptr inbounds i32, i32* %653, i64 8
  %665 = bitcast i32* %663 to <4 x i32>*
  %666 = load <4 x i32>, <4 x i32>* %665, align 4, !tbaa !9
  %667 = bitcast i32* %664 to <4 x i32>*
  store <4 x i32> %666, <4 x i32>* %667, align 4, !tbaa !9
  %668 = getelementptr inbounds i32, i32* %365, i64 12
  %669 = getelementptr inbounds i32, i32* %653, i64 12
  %670 = bitcast i32* %668 to <4 x i32>*
  %671 = load <4 x i32>, <4 x i32>* %670, align 4, !tbaa !9
  %672 = bitcast i32* %669 to <4 x i32>*
  store <4 x i32> %671, <4 x i32>* %672, align 4, !tbaa !9
  %673 = getelementptr inbounds i32, i32* %365, i64 16
  %674 = getelementptr inbounds i32, i32* %653, i64 16
  %675 = bitcast i32* %673 to <4 x i32>*
  %676 = load <4 x i32>, <4 x i32>* %675, align 4, !tbaa !9
  %677 = bitcast i32* %674 to <4 x i32>*
  store <4 x i32> %676, <4 x i32>* %677, align 4, !tbaa !9
  %678 = getelementptr inbounds i32, i32* %365, i64 20
  %679 = getelementptr inbounds i32, i32* %653, i64 20
  %680 = bitcast i32* %678 to <4 x i32>*
  %681 = load <4 x i32>, <4 x i32>* %680, align 4, !tbaa !9
  %682 = bitcast i32* %679 to <4 x i32>*
  store <4 x i32> %681, <4 x i32>* %682, align 4, !tbaa !9
  %683 = getelementptr inbounds i32, i32* %365, i64 24
  %684 = getelementptr inbounds i32, i32* %653, i64 24
  %685 = bitcast i32* %683 to <4 x i32>*
  %686 = load <4 x i32>, <4 x i32>* %685, align 4, !tbaa !9
  %687 = bitcast i32* %684 to <4 x i32>*
  store <4 x i32> %686, <4 x i32>* %687, align 4, !tbaa !9
  %688 = getelementptr inbounds i32, i32* %365, i64 28
  %689 = getelementptr inbounds i32, i32* %653, i64 28
  %690 = bitcast i32* %688 to <4 x i32>*
  %691 = load <4 x i32>, <4 x i32>* %690, align 4, !tbaa !9
  %692 = bitcast i32* %689 to <4 x i32>*
  store <4 x i32> %691, <4 x i32>* %692, align 4, !tbaa !9
  store i32 32, i32* %39, align 4, !tbaa !55
  store i32 15, i32* %40, align 8, !tbaa !56
  %693 = call fastcc noundef i32 @_ZL28HuffmanTree_makeFromLengths2P11HuffmanTree(%struct.HuffmanTree* noundef nonnull %7) #25
  br label %694

694:                                              ; preds = %621, %485, %484, %654, %650, %647, %635, %630, %628, %361, %331, %327, %236
  %695 = phi i64 [ %293, %327 ], [ %622, %630 ], [ %622, %635 ], [ %622, %650 ], [ %622, %654 ], [ %622, %647 ], [ %622, %628 ], [ %293, %361 ], [ %293, %331 ], [ %231, %236 ], [ %471, %485 ], [ %471, %484 ], [ %622, %621 ]
  %696 = phi i32 [ 83, %327 ], [ 64, %630 ], [ 83, %635 ], [ 83, %650 ], [ %693, %654 ], [ %648, %647 ], [ %623, %628 ], [ 83, %361 ], [ %359, %331 ], [ 50, %236 ], [ 54, %485 ], [ 16, %484 ], [ 50, %621 ]
  %697 = phi i8* [ null, %327 ], [ %362, %630 ], [ %362, %635 ], [ %362, %650 ], [ %362, %654 ], [ %362, %647 ], [ %362, %628 ], [ %362, %361 ], [ null, %331 ], [ null, %236 ], [ %362, %484 ], [ %362, %485 ], [ %362, %621 ]
  %698 = phi i8* [ null, %327 ], [ %364, %630 ], [ %364, %635 ], [ %364, %650 ], [ %364, %654 ], [ %364, %647 ], [ %364, %628 ], [ %364, %361 ], [ null, %331 ], [ null, %236 ], [ %364, %484 ], [ %364, %485 ], [ %364, %621 ]
  tail call void @free(i8* noundef %233) #25
  tail call void @free(i8* noundef %697) #25
  tail call void @free(i8* noundef %698) #25
  %699 = load i8*, i8** %41, align 8, !tbaa !68
  tail call void @free(i8* noundef %699) #25
  %700 = load i8*, i8** %29, align 8, !tbaa !53
  tail call void @free(i8* noundef %700) #25
  %701 = load i8*, i8** %26, align 8, !tbaa !64
  tail call void @free(i8* noundef %701) #25
  %702 = load i8*, i8** %42, align 8, !tbaa !65
  tail call void @free(i8* noundef %702) #25
  br label %703

703:                                              ; preds = %694, %219, %179
  %704 = phi i64 [ %80, %179 ], [ %231, %219 ], [ %695, %694 ]
  %705 = phi i32 [ 49, %179 ], [ 83, %219 ], [ %696, %694 ]
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %25) #25
  br label %706

706:                                              ; preds = %703, %162
  %707 = phi i64 [ %80, %162 ], [ %704, %703 ]
  %708 = phi i32 [ %178, %162 ], [ %705, %703 ]
  %709 = icmp eq i32 %708, 0
  br i1 %709, label %720, label %710

710:                                              ; preds = %706
  %711 = load i8*, i8** %23, align 8, !tbaa !64
  %712 = load i8*, i8** %46, align 8, !tbaa !65
  br label %713

713:                                              ; preds = %710, %158, %155
  %714 = phi i8* [ null, %158 ], [ %712, %710 ], [ null, %155 ]
  %715 = phi i8* [ null, %158 ], [ %711, %710 ], [ null, %155 ]
  %716 = phi i64 [ %80, %158 ], [ %707, %710 ], [ %80, %155 ]
  %717 = phi i32 [ 83, %158 ], [ %708, %710 ], [ %156, %155 ]
  %718 = load i8*, i8** %21, align 8, !tbaa !64
  %719 = load i8*, i8** %45, align 8, !tbaa !65
  br label %1198

720:                                              ; preds = %706
  %721 = load i8*, i8** %21, align 8, !tbaa !64
  %722 = load i16*, i16** %43, align 8, !tbaa !65
  %723 = load i8*, i8** %23, align 8
  %724 = load i16*, i16** %44, align 8
  %725 = icmp eq i64 %140, 0
  %726 = bitcast i16* %722 to i8*
  %727 = bitcast i16* %724 to i8*
  br label %728

728:                                              ; preds = %1194, %720
  %729 = phi i64 [ %707, %720 ], [ %1170, %1194 ]
  %730 = lshr i64 %729, 3
  %731 = add nuw nsw i64 %730, 4
  %732 = icmp ult i64 %731, %2
  br i1 %732, label %733, label %765

733:                                              ; preds = %728
  %734 = getelementptr inbounds i8, i8* %1, i64 %730
  %735 = load i8, i8* %734, align 1, !tbaa !14
  %736 = zext i8 %735 to i32
  %737 = add nuw nsw i64 %730, 1
  %738 = getelementptr inbounds i8, i8* %1, i64 %737
  %739 = load i8, i8* %738, align 1, !tbaa !14
  %740 = zext i8 %739 to i32
  %741 = shl nuw nsw i32 %740, 8
  %742 = or i32 %741, %736
  %743 = add nuw nsw i64 %730, 2
  %744 = getelementptr inbounds i8, i8* %1, i64 %743
  %745 = load i8, i8* %744, align 1, !tbaa !14
  %746 = zext i8 %745 to i32
  %747 = shl nuw nsw i32 %746, 16
  %748 = or i32 %742, %747
  %749 = add nuw nsw i64 %730, 3
  %750 = getelementptr inbounds i8, i8* %1, i64 %749
  %751 = load i8, i8* %750, align 1, !tbaa !14
  %752 = zext i8 %751 to i32
  %753 = shl nuw i32 %752, 24
  %754 = or i32 %748, %753
  %755 = trunc i64 %729 to i32
  %756 = and i32 %755, 7
  %757 = lshr i32 %754, %756
  %758 = getelementptr inbounds i8, i8* %1, i64 %731
  %759 = load i8, i8* %758, align 1, !tbaa !14
  %760 = zext i8 %759 to i32
  %761 = shl nuw i32 %760, 24
  %762 = sub nuw nsw i32 8, %756
  %763 = shl i32 %761, %762
  %764 = or i32 %763, %757
  br label %806

765:                                              ; preds = %728
  %766 = icmp ult i64 %730, %2
  br i1 %766, label %767, label %771

767:                                              ; preds = %765
  %768 = getelementptr inbounds i8, i8* %1, i64 %730
  %769 = load i8, i8* %768, align 1, !tbaa !14
  %770 = zext i8 %769 to i32
  br label %771

771:                                              ; preds = %767, %765
  %772 = phi i32 [ %770, %767 ], [ 0, %765 ]
  %773 = add nuw nsw i64 %730, 1
  %774 = icmp ult i64 %773, %2
  br i1 %774, label %775, label %781

775:                                              ; preds = %771
  %776 = getelementptr inbounds i8, i8* %1, i64 %773
  %777 = load i8, i8* %776, align 1, !tbaa !14
  %778 = zext i8 %777 to i32
  %779 = shl nuw nsw i32 %778, 8
  %780 = or i32 %779, %772
  br label %781

781:                                              ; preds = %775, %771
  %782 = phi i32 [ %780, %775 ], [ %772, %771 ]
  %783 = add nuw nsw i64 %730, 2
  %784 = icmp ult i64 %783, %2
  br i1 %784, label %785, label %791

785:                                              ; preds = %781
  %786 = getelementptr inbounds i8, i8* %1, i64 %783
  %787 = load i8, i8* %786, align 1, !tbaa !14
  %788 = zext i8 %787 to i32
  %789 = shl nuw nsw i32 %788, 16
  %790 = or i32 %789, %782
  br label %791

791:                                              ; preds = %785, %781
  %792 = phi i32 [ %790, %785 ], [ %782, %781 ]
  %793 = add nuw nsw i64 %730, 3
  %794 = icmp ult i64 %793, %2
  br i1 %794, label %795, label %801

795:                                              ; preds = %791
  %796 = getelementptr inbounds i8, i8* %1, i64 %793
  %797 = load i8, i8* %796, align 1, !tbaa !14
  %798 = zext i8 %797 to i32
  %799 = shl nuw i32 %798, 24
  %800 = or i32 %799, %792
  br label %801

801:                                              ; preds = %795, %791
  %802 = phi i32 [ %800, %795 ], [ %792, %791 ]
  %803 = trunc i64 %729 to i32
  %804 = and i32 %803, 7
  %805 = lshr i32 %802, %804
  br label %806

806:                                              ; preds = %801, %733
  %807 = phi i32 [ %805, %801 ], [ %764, %733 ]
  %808 = and i32 %807, 511
  %809 = zext i32 %808 to i64
  %810 = getelementptr inbounds i8, i8* %721, i64 %809
  %811 = load i8, i8* %810, align 1, !tbaa !14
  %812 = getelementptr inbounds i16, i16* %722, i64 %809
  %813 = load i16, i16* %812, align 2, !tbaa !66
  %814 = icmp ult i8 %811, 10
  br i1 %814, label %815, label %820

815:                                              ; preds = %806
  %816 = zext i8 %811 to i64
  %817 = zext i8 %811 to i32
  %818 = lshr i32 %807, %817
  %819 = add i64 %729, %816
  br label %841

820:                                              ; preds = %806
  %821 = zext i8 %811 to i32
  %822 = lshr i32 %807, 9
  %823 = add i64 %729, 9
  %824 = add nsw i32 %821, -9
  %825 = shl nsw i32 -1, %824
  %826 = xor i32 %825, -1
  %827 = and i32 %822, %826
  %828 = trunc i32 %827 to i16
  %829 = add i16 %813, %828
  %830 = zext i16 %829 to i64
  %831 = getelementptr inbounds i8, i8* %721, i64 %830
  %832 = load i8, i8* %831, align 1, !tbaa !14
  %833 = zext i8 %832 to i64
  %834 = add nuw nsw i64 %833, 4294967287
  %835 = and i64 %834, 4294967295
  %836 = trunc i64 %834 to i32
  %837 = lshr i32 %822, %836
  %838 = add i64 %823, %835
  %839 = getelementptr inbounds i16, i16* %722, i64 %830
  %840 = load i16, i16* %839, align 2, !tbaa !66
  br label %841

841:                                              ; preds = %820, %815
  %842 = phi i64 [ %819, %815 ], [ %838, %820 ]
  %843 = phi i32 [ %818, %815 ], [ %837, %820 ]
  %844 = phi i16 [ %813, %815 ], [ %840, %820 ]
  %845 = icmp ult i16 %844, 256
  br i1 %845, label %846, label %891

846:                                              ; preds = %841
  %847 = trunc i16 %844 to i8
  %848 = load i8*, i8** %17, align 8, !tbaa !39
  %849 = load i64, i64* %15, align 8, !tbaa !44
  %850 = add i64 %849, 1
  store i64 %850, i64* %15, align 8, !tbaa !44
  %851 = getelementptr inbounds i8, i8* %848, i64 %849
  store i8 %847, i8* %851, align 1, !tbaa !14
  %852 = and i32 %843, 511
  %853 = zext i32 %852 to i64
  %854 = getelementptr inbounds i8, i8* %721, i64 %853
  %855 = load i8, i8* %854, align 1, !tbaa !14
  %856 = getelementptr inbounds i16, i16* %722, i64 %853
  %857 = load i16, i16* %856, align 2, !tbaa !66
  %858 = icmp ult i8 %855, 10
  br i1 %858, label %859, label %862

859:                                              ; preds = %846
  %860 = zext i8 %855 to i64
  %861 = add i64 %842, %860
  br label %881

862:                                              ; preds = %846
  %863 = zext i8 %855 to i32
  %864 = lshr i32 %843, 9
  %865 = add i64 %842, 9
  %866 = add nsw i32 %863, -9
  %867 = shl nsw i32 -1, %866
  %868 = xor i32 %867, -1
  %869 = and i32 %864, %868
  %870 = trunc i32 %869 to i16
  %871 = add i16 %857, %870
  %872 = zext i16 %871 to i64
  %873 = getelementptr inbounds i8, i8* %721, i64 %872
  %874 = load i8, i8* %873, align 1, !tbaa !14
  %875 = zext i8 %874 to i64
  %876 = add nuw nsw i64 %875, 4294967287
  %877 = and i64 %876, 4294967295
  %878 = add i64 %865, %877
  %879 = getelementptr inbounds i16, i16* %722, i64 %872
  %880 = load i16, i16* %879, align 2, !tbaa !66
  br label %881

881:                                              ; preds = %862, %859
  %882 = phi i64 [ %861, %859 ], [ %878, %862 ]
  %883 = phi i16 [ %857, %859 ], [ %880, %862 ]
  %884 = icmp ult i16 %883, 256
  br i1 %884, label %885, label %891

885:                                              ; preds = %881
  %886 = trunc i16 %883 to i8
  %887 = load i8*, i8** %17, align 8, !tbaa !39
  %888 = load i64, i64* %15, align 8, !tbaa !44
  %889 = add i64 %888, 1
  store i64 %889, i64* %15, align 8, !tbaa !44
  %890 = getelementptr inbounds i8, i8* %887, i64 %888
  store i8 %886, i8* %890, align 1, !tbaa !14
  br label %1169

891:                                              ; preds = %881, %841
  %892 = phi i64 [ %882, %881 ], [ %842, %841 ]
  %893 = phi i16 [ %883, %881 ], [ %844, %841 ]
  %894 = icmp ne i16 %893, 256
  %895 = icmp ult i16 %893, 286
  %896 = and i1 %894, %895
  br i1 %896, label %897, label %1167

897:                                              ; preds = %891
  %898 = zext i16 %893 to i64
  %899 = add nuw nsw i64 %898, 4294967039
  %900 = and i64 %899, 4294967295
  %901 = getelementptr inbounds [29 x i32], [29 x i32]* @_ZL10LENGTHBASE, i64 0, i64 %900
  %902 = load i32, i32* %901, align 4, !tbaa !9
  %903 = zext i32 %902 to i64
  %904 = add nsw i64 %900, -28
  %905 = icmp ult i64 %904, -20
  br i1 %905, label %973, label %906

906:                                              ; preds = %897
  %907 = getelementptr inbounds [29 x i32], [29 x i32]* @_ZL11LENGTHEXTRA, i64 0, i64 %900
  %908 = load i32, i32* %907, align 4, !tbaa !9
  %909 = lshr i64 %892, 3
  %910 = add nuw nsw i64 %909, 3
  %911 = icmp ult i64 %910, %2
  br i1 %911, label %912, label %932

912:                                              ; preds = %906
  %913 = getelementptr inbounds i8, i8* %1, i64 %909
  %914 = load i8, i8* %913, align 1, !tbaa !14
  %915 = zext i8 %914 to i32
  %916 = add nuw nsw i64 %909, 1
  %917 = getelementptr inbounds i8, i8* %1, i64 %916
  %918 = load i8, i8* %917, align 1, !tbaa !14
  %919 = zext i8 %918 to i32
  %920 = shl nuw nsw i32 %919, 8
  %921 = or i32 %920, %915
  %922 = add nuw nsw i64 %909, 2
  %923 = getelementptr inbounds i8, i8* %1, i64 %922
  %924 = load i8, i8* %923, align 1, !tbaa !14
  %925 = zext i8 %924 to i32
  %926 = shl nuw nsw i32 %925, 16
  %927 = or i32 %921, %926
  %928 = getelementptr inbounds i8, i8* %1, i64 %910
  %929 = load i8, i8* %928, align 1, !tbaa !14
  %930 = zext i8 %929 to i32
  %931 = shl nuw i32 %930, 24
  br label %957

932:                                              ; preds = %906
  %933 = icmp ult i64 %909, %2
  br i1 %933, label %934, label %938

934:                                              ; preds = %932
  %935 = getelementptr inbounds i8, i8* %1, i64 %909
  %936 = load i8, i8* %935, align 1, !tbaa !14
  %937 = zext i8 %936 to i32
  br label %938

938:                                              ; preds = %934, %932
  %939 = phi i32 [ %937, %934 ], [ 0, %932 ]
  %940 = add nuw nsw i64 %909, 1
  %941 = icmp ult i64 %940, %2
  br i1 %941, label %942, label %948

942:                                              ; preds = %938
  %943 = getelementptr inbounds i8, i8* %1, i64 %940
  %944 = load i8, i8* %943, align 1, !tbaa !14
  %945 = zext i8 %944 to i32
  %946 = shl nuw nsw i32 %945, 8
  %947 = or i32 %946, %939
  br label %948

948:                                              ; preds = %942, %938
  %949 = phi i32 [ %947, %942 ], [ %939, %938 ]
  %950 = add nuw nsw i64 %909, 2
  %951 = icmp ult i64 %950, %2
  br i1 %951, label %952, label %961

952:                                              ; preds = %948
  %953 = getelementptr inbounds i8, i8* %1, i64 %950
  %954 = load i8, i8* %953, align 1, !tbaa !14
  %955 = zext i8 %954 to i32
  %956 = shl nuw nsw i32 %955, 16
  br label %957

957:                                              ; preds = %952, %912
  %958 = phi i32 [ %931, %912 ], [ %949, %952 ]
  %959 = phi i32 [ %927, %912 ], [ %956, %952 ]
  %960 = or i32 %959, %958
  br label %961

961:                                              ; preds = %957, %948
  %962 = phi i32 [ %949, %948 ], [ %960, %957 ]
  %963 = trunc i64 %892 to i32
  %964 = and i32 %963, 7
  %965 = lshr i32 %962, %964
  %966 = zext i32 %908 to i64
  %967 = shl nsw i32 -1, %908
  %968 = xor i32 %967, -1
  %969 = and i32 %965, %968
  %970 = add i64 %892, %966
  %971 = zext i32 %969 to i64
  %972 = add nuw nsw i64 %971, %903
  br label %973

973:                                              ; preds = %897, %961
  %974 = phi i64 [ %970, %961 ], [ %892, %897 ]
  %975 = phi i64 [ %972, %961 ], [ %903, %897 ]
  %976 = lshr i64 %974, 3
  %977 = add nuw nsw i64 %976, 4
  %978 = icmp ult i64 %977, %2
  br i1 %978, label %979, label %1011

979:                                              ; preds = %973
  %980 = getelementptr inbounds i8, i8* %1, i64 %976
  %981 = load i8, i8* %980, align 1, !tbaa !14
  %982 = zext i8 %981 to i32
  %983 = add nuw nsw i64 %976, 1
  %984 = getelementptr inbounds i8, i8* %1, i64 %983
  %985 = load i8, i8* %984, align 1, !tbaa !14
  %986 = zext i8 %985 to i32
  %987 = shl nuw nsw i32 %986, 8
  %988 = or i32 %987, %982
  %989 = add nuw nsw i64 %976, 2
  %990 = getelementptr inbounds i8, i8* %1, i64 %989
  %991 = load i8, i8* %990, align 1, !tbaa !14
  %992 = zext i8 %991 to i32
  %993 = shl nuw nsw i32 %992, 16
  %994 = or i32 %988, %993
  %995 = add nuw nsw i64 %976, 3
  %996 = getelementptr inbounds i8, i8* %1, i64 %995
  %997 = load i8, i8* %996, align 1, !tbaa !14
  %998 = zext i8 %997 to i32
  %999 = shl nuw i32 %998, 24
  %1000 = or i32 %994, %999
  %1001 = trunc i64 %974 to i32
  %1002 = and i32 %1001, 7
  %1003 = lshr i32 %1000, %1002
  %1004 = getelementptr inbounds i8, i8* %1, i64 %977
  %1005 = load i8, i8* %1004, align 1, !tbaa !14
  %1006 = zext i8 %1005 to i32
  %1007 = shl nuw i32 %1006, 24
  %1008 = sub nuw nsw i32 8, %1002
  %1009 = shl i32 %1007, %1008
  %1010 = or i32 %1009, %1003
  br label %1052

1011:                                             ; preds = %973
  %1012 = icmp ult i64 %976, %2
  br i1 %1012, label %1013, label %1017

1013:                                             ; preds = %1011
  %1014 = getelementptr inbounds i8, i8* %1, i64 %976
  %1015 = load i8, i8* %1014, align 1, !tbaa !14
  %1016 = zext i8 %1015 to i32
  br label %1017

1017:                                             ; preds = %1013, %1011
  %1018 = phi i32 [ %1016, %1013 ], [ 0, %1011 ]
  %1019 = add nuw nsw i64 %976, 1
  %1020 = icmp ult i64 %1019, %2
  br i1 %1020, label %1021, label %1027

1021:                                             ; preds = %1017
  %1022 = getelementptr inbounds i8, i8* %1, i64 %1019
  %1023 = load i8, i8* %1022, align 1, !tbaa !14
  %1024 = zext i8 %1023 to i32
  %1025 = shl nuw nsw i32 %1024, 8
  %1026 = or i32 %1025, %1018
  br label %1027

1027:                                             ; preds = %1021, %1017
  %1028 = phi i32 [ %1026, %1021 ], [ %1018, %1017 ]
  %1029 = add nuw nsw i64 %976, 2
  %1030 = icmp ult i64 %1029, %2
  br i1 %1030, label %1031, label %1037

1031:                                             ; preds = %1027
  %1032 = getelementptr inbounds i8, i8* %1, i64 %1029
  %1033 = load i8, i8* %1032, align 1, !tbaa !14
  %1034 = zext i8 %1033 to i32
  %1035 = shl nuw nsw i32 %1034, 16
  %1036 = or i32 %1035, %1028
  br label %1037

1037:                                             ; preds = %1031, %1027
  %1038 = phi i32 [ %1036, %1031 ], [ %1028, %1027 ]
  %1039 = add nuw nsw i64 %976, 3
  %1040 = icmp ult i64 %1039, %2
  br i1 %1040, label %1041, label %1047

1041:                                             ; preds = %1037
  %1042 = getelementptr inbounds i8, i8* %1, i64 %1039
  %1043 = load i8, i8* %1042, align 1, !tbaa !14
  %1044 = zext i8 %1043 to i32
  %1045 = shl nuw i32 %1044, 24
  %1046 = or i32 %1045, %1038
  br label %1047

1047:                                             ; preds = %1041, %1037
  %1048 = phi i32 [ %1046, %1041 ], [ %1038, %1037 ]
  %1049 = trunc i64 %974 to i32
  %1050 = and i32 %1049, 7
  %1051 = lshr i32 %1048, %1050
  br label %1052

1052:                                             ; preds = %1047, %979
  %1053 = phi i32 [ %1051, %1047 ], [ %1010, %979 ]
  %1054 = and i32 %1053, 511
  %1055 = zext i32 %1054 to i64
  %1056 = getelementptr inbounds i8, i8* %723, i64 %1055
  %1057 = load i8, i8* %1056, align 1, !tbaa !14
  %1058 = getelementptr inbounds i16, i16* %724, i64 %1055
  %1059 = load i16, i16* %1058, align 2, !tbaa !66
  %1060 = icmp ult i8 %1057, 10
  br i1 %1060, label %1061, label %1066

1061:                                             ; preds = %1052
  %1062 = zext i8 %1057 to i64
  %1063 = zext i8 %1057 to i32
  %1064 = lshr i32 %1053, %1063
  %1065 = add i64 %974, %1062
  br label %1087

1066:                                             ; preds = %1052
  %1067 = zext i8 %1057 to i32
  %1068 = lshr i32 %1053, 9
  %1069 = add i64 %974, 9
  %1070 = add nsw i32 %1067, -9
  %1071 = shl nsw i32 -1, %1070
  %1072 = xor i32 %1071, -1
  %1073 = and i32 %1068, %1072
  %1074 = trunc i32 %1073 to i16
  %1075 = add i16 %1059, %1074
  %1076 = zext i16 %1075 to i64
  %1077 = getelementptr inbounds i8, i8* %723, i64 %1076
  %1078 = load i8, i8* %1077, align 1, !tbaa !14
  %1079 = zext i8 %1078 to i64
  %1080 = add nuw nsw i64 %1079, 4294967287
  %1081 = and i64 %1080, 4294967295
  %1082 = trunc i64 %1080 to i32
  %1083 = lshr i32 %1068, %1082
  %1084 = add i64 %1069, %1081
  %1085 = getelementptr inbounds i16, i16* %724, i64 %1076
  %1086 = load i16, i16* %1085, align 2, !tbaa !66
  br label %1087

1087:                                             ; preds = %1066, %1061
  %1088 = phi i64 [ %1065, %1061 ], [ %1084, %1066 ]
  %1089 = phi i32 [ %1064, %1061 ], [ %1083, %1066 ]
  %1090 = phi i16 [ %1059, %1061 ], [ %1086, %1066 ]
  %1091 = icmp ugt i16 %1090, 29
  br i1 %1091, label %1092, label %1095

1092:                                             ; preds = %1087
  %1093 = icmp ult i16 %1090, 32
  %1094 = select i1 %1093, i32 18, i32 16
  br label %1198

1095:                                             ; preds = %1087
  %1096 = zext i16 %1090 to i64
  %1097 = getelementptr inbounds [30 x i32], [30 x i32]* @_ZL12DISTANCEBASE, i64 0, i64 %1096
  %1098 = load i32, i32* %1097, align 4, !tbaa !9
  %1099 = icmp ult i16 %1090, 4
  br i1 %1099, label %1109, label %1100

1100:                                             ; preds = %1095
  %1101 = getelementptr inbounds [30 x i32], [30 x i32]* @_ZL13DISTANCEEXTRA, i64 0, i64 %1096
  %1102 = load i32, i32* %1101, align 4, !tbaa !9
  %1103 = zext i32 %1102 to i64
  %1104 = shl nsw i32 -1, %1102
  %1105 = xor i32 %1104, -1
  %1106 = and i32 %1089, %1105
  %1107 = add i64 %1088, %1103
  %1108 = add i32 %1106, %1098
  br label %1109

1109:                                             ; preds = %1100, %1095
  %1110 = phi i64 [ %1088, %1095 ], [ %1107, %1100 ]
  %1111 = phi i32 [ %1098, %1095 ], [ %1108, %1100 ]
  %1112 = load i64, i64* %15, align 8, !tbaa !44
  %1113 = zext i32 %1111 to i64
  %1114 = icmp ult i64 %1112, %1113
  br i1 %1114, label %1198, label %1115

1115:                                             ; preds = %1109
  %1116 = sub i64 %1112, %1113
  %1117 = add i64 %1112, %975
  store i64 %1117, i64* %15, align 8, !tbaa !44
  %1118 = icmp ugt i64 %975, %1113
  %1119 = load i8*, i8** %17, align 8, !tbaa !39
  br i1 %1118, label %1120, label %1162

1120:                                             ; preds = %1115
  %1121 = icmp eq i32 %1111, 0
  br i1 %1121, label %1125, label %1122

1122:                                             ; preds = %1120
  %1123 = getelementptr inbounds i8, i8* %1119, i64 %1116
  %1124 = getelementptr inbounds i8, i8* %1119, i64 %1112
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %1124, i8* align 1 %1123, i64 %1113, i1 false) #25, !tbaa !14, !alias.scope !69
  br label %1125

1125:                                             ; preds = %1122, %1120
  %1126 = add i64 %1112, %1113
  %1127 = sub nsw i64 %975, %1113
  %1128 = add nuw nsw i64 %1113, 1
  %1129 = and i64 %1127, 1
  %1130 = icmp eq i64 %1129, 0
  br i1 %1130, label %1139, label %1131

1131:                                             ; preds = %1125
  %1132 = load i8*, i8** %17, align 8, !tbaa !39
  %1133 = add i64 %1116, 1
  %1134 = getelementptr inbounds i8, i8* %1132, i64 %1116
  %1135 = load i8, i8* %1134, align 1, !tbaa !14
  %1136 = add i64 %1126, 1
  %1137 = getelementptr inbounds i8, i8* %1132, i64 %1126
  store i8 %1135, i8* %1137, align 1, !tbaa !14
  %1138 = add nuw nsw i64 %1113, 1
  br label %1139

1139:                                             ; preds = %1131, %1125
  %1140 = phi i64 [ %1113, %1125 ], [ %1138, %1131 ]
  %1141 = phi i64 [ %1116, %1125 ], [ %1133, %1131 ]
  %1142 = phi i64 [ %1126, %1125 ], [ %1136, %1131 ]
  %1143 = icmp eq i64 %975, %1128
  br i1 %1143, label %1169, label %1144

1144:                                             ; preds = %1139, %1144
  %1145 = phi i64 [ %1160, %1144 ], [ %1140, %1139 ]
  %1146 = phi i64 [ %1155, %1144 ], [ %1141, %1139 ]
  %1147 = phi i64 [ %1158, %1144 ], [ %1142, %1139 ]
  %1148 = load i8*, i8** %17, align 8, !tbaa !39
  %1149 = add i64 %1146, 1
  %1150 = getelementptr inbounds i8, i8* %1148, i64 %1146
  %1151 = load i8, i8* %1150, align 1, !tbaa !14
  %1152 = add i64 %1147, 1
  %1153 = getelementptr inbounds i8, i8* %1148, i64 %1147
  store i8 %1151, i8* %1153, align 1, !tbaa !14
  %1154 = load i8*, i8** %17, align 8, !tbaa !39
  %1155 = add i64 %1146, 2
  %1156 = getelementptr inbounds i8, i8* %1154, i64 %1149
  %1157 = load i8, i8* %1156, align 1, !tbaa !14
  %1158 = add i64 %1147, 2
  %1159 = getelementptr inbounds i8, i8* %1154, i64 %1152
  store i8 %1157, i8* %1159, align 1, !tbaa !14
  %1160 = add nuw nsw i64 %1145, 2
  %1161 = icmp eq i64 %1160, %975
  br i1 %1161, label %1169, label %1144

1162:                                             ; preds = %1115
  %1163 = icmp eq i64 %975, 0
  br i1 %1163, label %1169, label %1164

1164:                                             ; preds = %1162
  %1165 = getelementptr inbounds i8, i8* %1119, i64 %1116
  %1166 = getelementptr inbounds i8, i8* %1119, i64 %1112
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %1166, i8* align 1 %1165, i64 %975, i1 false) #25, !tbaa !14, !alias.scope !73
  br label %1169

1167:                                             ; preds = %891
  %1168 = icmp eq i16 %893, 256
  br i1 %1168, label %1169, label %1198

1169:                                             ; preds = %1139, %1144, %1167, %1164, %1162, %885
  %1170 = phi i64 [ %882, %885 ], [ %1110, %1162 ], [ %1110, %1164 ], [ %892, %1167 ], [ %1110, %1144 ], [ %1110, %1139 ]
  %1171 = phi i1 [ true, %885 ], [ true, %1162 ], [ true, %1164 ], [ false, %1167 ], [ true, %1144 ], [ true, %1139 ]
  %1172 = load i64, i64* %16, align 8, !tbaa !45
  %1173 = load i64, i64* %15, align 8, !tbaa !44
  %1174 = sub i64 %1172, %1173
  %1175 = icmp ult i64 %1174, 260
  br i1 %1175, label %1176, label %1186

1176:                                             ; preds = %1169
  %1177 = add i64 %1173, 260
  %1178 = icmp ult i64 %1172, %1177
  br i1 %1178, label %1179, label %1186

1179:                                             ; preds = %1176
  %1180 = lshr i64 %1172, 1
  %1181 = add i64 %1177, %1180
  %1182 = load i8*, i8** %17, align 8, !tbaa !39
  %1183 = tail call i8* @realloc(i8* noundef %1182, i64 noundef %1181) #25
  %1184 = icmp eq i8* %1183, null
  br i1 %1184, label %1198, label %1185

1185:                                             ; preds = %1179
  store i64 %1181, i64* %16, align 8, !tbaa !45
  store i8* %1183, i8** %17, align 8, !tbaa !39
  br label %1186

1186:                                             ; preds = %1185, %1176, %1169
  %1187 = icmp ugt i64 %1170, %9
  br i1 %1187, label %1198, label %1188

1188:                                             ; preds = %1186
  br i1 %725, label %1195, label %1189

1189:                                             ; preds = %1188
  %1190 = load i64, i64* %15, align 8, !tbaa !44
  %1191 = icmp ugt i64 %1190, %140
  %1192 = xor i1 %1171, true
  %1193 = or i1 %1191, %1192
  br i1 %1193, label %1196, label %1194

1194:                                             ; preds = %1189, %1195
  br label %728

1195:                                             ; preds = %1188
  br i1 %1171, label %1194, label %1198

1196:                                             ; preds = %1189
  %1197 = select i1 %1191, i32 109, i32 0
  br label %1198

1198:                                             ; preds = %1195, %1186, %1179, %1167, %1109, %1196, %713, %1092
  %1199 = phi i64 [ %716, %713 ], [ %1088, %1092 ], [ %1170, %1196 ], [ %1170, %1195 ], [ %1170, %1186 ], [ %1170, %1179 ], [ %892, %1167 ], [ %1110, %1109 ]
  %1200 = phi i8* [ %714, %713 ], [ %727, %1092 ], [ %727, %1196 ], [ %727, %1109 ], [ %727, %1167 ], [ %727, %1179 ], [ %727, %1186 ], [ %727, %1195 ]
  %1201 = phi i8* [ %715, %713 ], [ %723, %1092 ], [ %723, %1196 ], [ %723, %1109 ], [ %723, %1167 ], [ %723, %1179 ], [ %723, %1186 ], [ %723, %1195 ]
  %1202 = phi i8* [ %719, %713 ], [ %726, %1092 ], [ %726, %1196 ], [ %726, %1109 ], [ %726, %1167 ], [ %726, %1179 ], [ %726, %1186 ], [ %726, %1195 ]
  %1203 = phi i8* [ %718, %713 ], [ %721, %1092 ], [ %721, %1196 ], [ %721, %1109 ], [ %721, %1167 ], [ %721, %1179 ], [ %721, %1186 ], [ %721, %1195 ]
  %1204 = phi i32 [ %717, %713 ], [ %1094, %1092 ], [ %1197, %1196 ], [ 0, %1195 ], [ 51, %1186 ], [ 83, %1179 ], [ 16, %1167 ], [ 52, %1109 ]
  %1205 = load i8*, i8** %47, align 8, !tbaa !68
  tail call void @free(i8* noundef %1205) #25
  %1206 = load i8*, i8** %34, align 8, !tbaa !53
  tail call void @free(i8* noundef %1206) #25
  tail call void @free(i8* noundef %1203) #25
  tail call void @free(i8* noundef %1202) #25
  %1207 = load i8*, i8** %48, align 8, !tbaa !68
  tail call void @free(i8* noundef %1207) #25
  %1208 = load i8*, i8** %38, align 8, !tbaa !53
  tail call void @free(i8* noundef %1208) #25
  tail call void @free(i8* noundef %1201) #25
  tail call void @free(i8* noundef %1200) #25
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %20) #25
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %19) #25
  %1209 = icmp eq i32 %1204, 0
  br i1 %1209, label %1210, label %1219

1210:                                             ; preds = %136, %1198
  %1211 = phi i64 [ %138, %136 ], [ %1199, %1198 ]
  %1212 = load i64, i64* %18, align 8, !tbaa !52
  %1213 = icmp eq i64 %1212, 0
  br i1 %1213, label %1217, label %1214

1214:                                             ; preds = %1210
  %1215 = load i64, i64* %15, align 8, !tbaa !44
  %1216 = icmp ugt i64 %1215, %1212
  br i1 %1216, label %1219, label %1217

1217:                                             ; preds = %1210, %1214
  %1218 = icmp eq i32 %77, 0
  br i1 %1218, label %49, label %1219

1219:                                             ; preds = %72, %49, %1198, %81, %98, %124, %117, %1214, %1217, %151, %4
  %1220 = phi i32 [ 105, %4 ], [ 83, %151 ], [ 52, %49 ], [ 20, %72 ], [ 109, %1214 ], [ 52, %81 ], [ 21, %98 ], [ 23, %124 ], [ 83, %117 ], [ %1204, %1198 ], [ 0, %1217 ]
  ret i32 %1220
}

; Function Attrs: nofree nosync nounwind readnone speculatable willreturn
declare { i64, i1 } @llvm.umul.with.overflow.i64(i64, i64) #9

; Function Attrs: inaccessiblemem_or_argmemonly mustprogress nounwind willreturn
declare dso_local noalias noundef i8* @realloc(i8* nocapture noundef, i64 noundef) local_unnamed_addr #7

; Function Attrs: nounwind uwtable
define internal fastcc noundef i32 @_ZL23generateFixedLitLenTreeP11HuffmanTree(%struct.HuffmanTree* nocapture noundef %0) unnamed_addr #3 {
  %2 = tail call noalias dereferenceable_or_null(1152) i8* @malloc(i64 noundef 1152) #25
  %3 = bitcast i8* %2 to i32*
  %4 = icmp eq i8* %2, null
  br i1 %4, label %168, label %5

5:                                                ; preds = %1
  %6 = bitcast i8* %2 to <4 x i32>*
  store <4 x i32> <i32 8, i32 8, i32 8, i32 8>, <4 x i32>* %6, align 4, !tbaa !9
  %7 = getelementptr inbounds i32, i32* %3, i64 4
  %8 = bitcast i32* %7 to <4 x i32>*
  store <4 x i32> <i32 8, i32 8, i32 8, i32 8>, <4 x i32>* %8, align 4, !tbaa !9
  %9 = getelementptr inbounds i32, i32* %3, i64 8
  %10 = bitcast i32* %9 to <4 x i32>*
  store <4 x i32> <i32 8, i32 8, i32 8, i32 8>, <4 x i32>* %10, align 4, !tbaa !9
  %11 = getelementptr inbounds i32, i32* %3, i64 12
  %12 = bitcast i32* %11 to <4 x i32>*
  store <4 x i32> <i32 8, i32 8, i32 8, i32 8>, <4 x i32>* %12, align 4, !tbaa !9
  %13 = getelementptr inbounds i32, i32* %3, i64 16
  %14 = bitcast i32* %13 to <4 x i32>*
  store <4 x i32> <i32 8, i32 8, i32 8, i32 8>, <4 x i32>* %14, align 4, !tbaa !9
  %15 = getelementptr inbounds i32, i32* %3, i64 20
  %16 = bitcast i32* %15 to <4 x i32>*
  store <4 x i32> <i32 8, i32 8, i32 8, i32 8>, <4 x i32>* %16, align 4, !tbaa !9
  %17 = getelementptr inbounds i32, i32* %3, i64 24
  %18 = bitcast i32* %17 to <4 x i32>*
  store <4 x i32> <i32 8, i32 8, i32 8, i32 8>, <4 x i32>* %18, align 4, !tbaa !9
  %19 = getelementptr inbounds i32, i32* %3, i64 28
  %20 = bitcast i32* %19 to <4 x i32>*
  store <4 x i32> <i32 8, i32 8, i32 8, i32 8>, <4 x i32>* %20, align 4, !tbaa !9
  %21 = getelementptr inbounds i32, i32* %3, i64 32
  %22 = bitcast i32* %21 to <4 x i32>*
  store <4 x i32> <i32 8, i32 8, i32 8, i32 8>, <4 x i32>* %22, align 4, !tbaa !9
  %23 = getelementptr inbounds i32, i32* %3, i64 36
  %24 = bitcast i32* %23 to <4 x i32>*
  store <4 x i32> <i32 8, i32 8, i32 8, i32 8>, <4 x i32>* %24, align 4, !tbaa !9
  %25 = getelementptr inbounds i32, i32* %3, i64 40
  %26 = bitcast i32* %25 to <4 x i32>*
  store <4 x i32> <i32 8, i32 8, i32 8, i32 8>, <4 x i32>* %26, align 4, !tbaa !9
  %27 = getelementptr inbounds i32, i32* %3, i64 44
  %28 = bitcast i32* %27 to <4 x i32>*
  store <4 x i32> <i32 8, i32 8, i32 8, i32 8>, <4 x i32>* %28, align 4, !tbaa !9
  %29 = getelementptr inbounds i32, i32* %3, i64 48
  %30 = bitcast i32* %29 to <4 x i32>*
  store <4 x i32> <i32 8, i32 8, i32 8, i32 8>, <4 x i32>* %30, align 4, !tbaa !9
  %31 = getelementptr inbounds i32, i32* %3, i64 52
  %32 = bitcast i32* %31 to <4 x i32>*
  store <4 x i32> <i32 8, i32 8, i32 8, i32 8>, <4 x i32>* %32, align 4, !tbaa !9
  %33 = getelementptr inbounds i32, i32* %3, i64 56
  %34 = bitcast i32* %33 to <4 x i32>*
  store <4 x i32> <i32 8, i32 8, i32 8, i32 8>, <4 x i32>* %34, align 4, !tbaa !9
  %35 = getelementptr inbounds i32, i32* %3, i64 60
  %36 = bitcast i32* %35 to <4 x i32>*
  store <4 x i32> <i32 8, i32 8, i32 8, i32 8>, <4 x i32>* %36, align 4, !tbaa !9
  %37 = getelementptr inbounds i32, i32* %3, i64 64
  %38 = bitcast i32* %37 to <4 x i32>*
  store <4 x i32> <i32 8, i32 8, i32 8, i32 8>, <4 x i32>* %38, align 4, !tbaa !9
  %39 = getelementptr inbounds i32, i32* %3, i64 68
  %40 = bitcast i32* %39 to <4 x i32>*
  store <4 x i32> <i32 8, i32 8, i32 8, i32 8>, <4 x i32>* %40, align 4, !tbaa !9
  %41 = getelementptr inbounds i32, i32* %3, i64 72
  %42 = bitcast i32* %41 to <4 x i32>*
  store <4 x i32> <i32 8, i32 8, i32 8, i32 8>, <4 x i32>* %42, align 4, !tbaa !9
  %43 = getelementptr inbounds i32, i32* %3, i64 76
  %44 = bitcast i32* %43 to <4 x i32>*
  store <4 x i32> <i32 8, i32 8, i32 8, i32 8>, <4 x i32>* %44, align 4, !tbaa !9
  %45 = getelementptr inbounds i32, i32* %3, i64 80
  %46 = bitcast i32* %45 to <4 x i32>*
  store <4 x i32> <i32 8, i32 8, i32 8, i32 8>, <4 x i32>* %46, align 4, !tbaa !9
  %47 = getelementptr inbounds i32, i32* %3, i64 84
  %48 = bitcast i32* %47 to <4 x i32>*
  store <4 x i32> <i32 8, i32 8, i32 8, i32 8>, <4 x i32>* %48, align 4, !tbaa !9
  %49 = getelementptr inbounds i32, i32* %3, i64 88
  %50 = bitcast i32* %49 to <4 x i32>*
  store <4 x i32> <i32 8, i32 8, i32 8, i32 8>, <4 x i32>* %50, align 4, !tbaa !9
  %51 = getelementptr inbounds i32, i32* %3, i64 92
  %52 = bitcast i32* %51 to <4 x i32>*
  store <4 x i32> <i32 8, i32 8, i32 8, i32 8>, <4 x i32>* %52, align 4, !tbaa !9
  %53 = getelementptr inbounds i32, i32* %3, i64 96
  %54 = bitcast i32* %53 to <4 x i32>*
  store <4 x i32> <i32 8, i32 8, i32 8, i32 8>, <4 x i32>* %54, align 4, !tbaa !9
  %55 = getelementptr inbounds i32, i32* %3, i64 100
  %56 = bitcast i32* %55 to <4 x i32>*
  store <4 x i32> <i32 8, i32 8, i32 8, i32 8>, <4 x i32>* %56, align 4, !tbaa !9
  %57 = getelementptr inbounds i32, i32* %3, i64 104
  %58 = bitcast i32* %57 to <4 x i32>*
  store <4 x i32> <i32 8, i32 8, i32 8, i32 8>, <4 x i32>* %58, align 4, !tbaa !9
  %59 = getelementptr inbounds i32, i32* %3, i64 108
  %60 = bitcast i32* %59 to <4 x i32>*
  store <4 x i32> <i32 8, i32 8, i32 8, i32 8>, <4 x i32>* %60, align 4, !tbaa !9
  %61 = getelementptr inbounds i32, i32* %3, i64 112
  %62 = bitcast i32* %61 to <4 x i32>*
  store <4 x i32> <i32 8, i32 8, i32 8, i32 8>, <4 x i32>* %62, align 4, !tbaa !9
  %63 = getelementptr inbounds i32, i32* %3, i64 116
  %64 = bitcast i32* %63 to <4 x i32>*
  store <4 x i32> <i32 8, i32 8, i32 8, i32 8>, <4 x i32>* %64, align 4, !tbaa !9
  %65 = getelementptr inbounds i32, i32* %3, i64 120
  %66 = bitcast i32* %65 to <4 x i32>*
  store <4 x i32> <i32 8, i32 8, i32 8, i32 8>, <4 x i32>* %66, align 4, !tbaa !9
  %67 = getelementptr inbounds i32, i32* %3, i64 124
  %68 = bitcast i32* %67 to <4 x i32>*
  store <4 x i32> <i32 8, i32 8, i32 8, i32 8>, <4 x i32>* %68, align 4, !tbaa !9
  %69 = getelementptr inbounds i32, i32* %3, i64 128
  %70 = bitcast i32* %69 to <4 x i32>*
  store <4 x i32> <i32 8, i32 8, i32 8, i32 8>, <4 x i32>* %70, align 4, !tbaa !9
  %71 = getelementptr inbounds i32, i32* %3, i64 132
  %72 = bitcast i32* %71 to <4 x i32>*
  store <4 x i32> <i32 8, i32 8, i32 8, i32 8>, <4 x i32>* %72, align 4, !tbaa !9
  %73 = getelementptr inbounds i32, i32* %3, i64 136
  %74 = bitcast i32* %73 to <4 x i32>*
  store <4 x i32> <i32 8, i32 8, i32 8, i32 8>, <4 x i32>* %74, align 4, !tbaa !9
  %75 = getelementptr inbounds i32, i32* %3, i64 140
  %76 = bitcast i32* %75 to <4 x i32>*
  store <4 x i32> <i32 8, i32 8, i32 8, i32 8>, <4 x i32>* %76, align 4, !tbaa !9
  %77 = getelementptr inbounds i32, i32* %3, i64 144
  %78 = bitcast i32* %77 to <4 x i32>*
  store <4 x i32> <i32 9, i32 9, i32 9, i32 9>, <4 x i32>* %78, align 4, !tbaa !9
  %79 = getelementptr inbounds i32, i32* %3, i64 148
  %80 = bitcast i32* %79 to <4 x i32>*
  store <4 x i32> <i32 9, i32 9, i32 9, i32 9>, <4 x i32>* %80, align 4, !tbaa !9
  %81 = getelementptr inbounds i32, i32* %3, i64 152
  %82 = bitcast i32* %81 to <4 x i32>*
  store <4 x i32> <i32 9, i32 9, i32 9, i32 9>, <4 x i32>* %82, align 4, !tbaa !9
  %83 = getelementptr inbounds i32, i32* %3, i64 156
  %84 = bitcast i32* %83 to <4 x i32>*
  store <4 x i32> <i32 9, i32 9, i32 9, i32 9>, <4 x i32>* %84, align 4, !tbaa !9
  %85 = getelementptr inbounds i32, i32* %3, i64 160
  %86 = bitcast i32* %85 to <4 x i32>*
  store <4 x i32> <i32 9, i32 9, i32 9, i32 9>, <4 x i32>* %86, align 4, !tbaa !9
  %87 = getelementptr inbounds i32, i32* %3, i64 164
  %88 = bitcast i32* %87 to <4 x i32>*
  store <4 x i32> <i32 9, i32 9, i32 9, i32 9>, <4 x i32>* %88, align 4, !tbaa !9
  %89 = getelementptr inbounds i32, i32* %3, i64 168
  %90 = bitcast i32* %89 to <4 x i32>*
  store <4 x i32> <i32 9, i32 9, i32 9, i32 9>, <4 x i32>* %90, align 4, !tbaa !9
  %91 = getelementptr inbounds i32, i32* %3, i64 172
  %92 = bitcast i32* %91 to <4 x i32>*
  store <4 x i32> <i32 9, i32 9, i32 9, i32 9>, <4 x i32>* %92, align 4, !tbaa !9
  %93 = getelementptr inbounds i32, i32* %3, i64 176
  %94 = bitcast i32* %93 to <4 x i32>*
  store <4 x i32> <i32 9, i32 9, i32 9, i32 9>, <4 x i32>* %94, align 4, !tbaa !9
  %95 = getelementptr inbounds i32, i32* %3, i64 180
  %96 = bitcast i32* %95 to <4 x i32>*
  store <4 x i32> <i32 9, i32 9, i32 9, i32 9>, <4 x i32>* %96, align 4, !tbaa !9
  %97 = getelementptr inbounds i32, i32* %3, i64 184
  %98 = bitcast i32* %97 to <4 x i32>*
  store <4 x i32> <i32 9, i32 9, i32 9, i32 9>, <4 x i32>* %98, align 4, !tbaa !9
  %99 = getelementptr inbounds i32, i32* %3, i64 188
  %100 = bitcast i32* %99 to <4 x i32>*
  store <4 x i32> <i32 9, i32 9, i32 9, i32 9>, <4 x i32>* %100, align 4, !tbaa !9
  %101 = getelementptr inbounds i32, i32* %3, i64 192
  %102 = bitcast i32* %101 to <4 x i32>*
  store <4 x i32> <i32 9, i32 9, i32 9, i32 9>, <4 x i32>* %102, align 4, !tbaa !9
  %103 = getelementptr inbounds i32, i32* %3, i64 196
  %104 = bitcast i32* %103 to <4 x i32>*
  store <4 x i32> <i32 9, i32 9, i32 9, i32 9>, <4 x i32>* %104, align 4, !tbaa !9
  %105 = getelementptr inbounds i32, i32* %3, i64 200
  %106 = bitcast i32* %105 to <4 x i32>*
  store <4 x i32> <i32 9, i32 9, i32 9, i32 9>, <4 x i32>* %106, align 4, !tbaa !9
  %107 = getelementptr inbounds i32, i32* %3, i64 204
  %108 = bitcast i32* %107 to <4 x i32>*
  store <4 x i32> <i32 9, i32 9, i32 9, i32 9>, <4 x i32>* %108, align 4, !tbaa !9
  %109 = getelementptr inbounds i32, i32* %3, i64 208
  %110 = bitcast i32* %109 to <4 x i32>*
  store <4 x i32> <i32 9, i32 9, i32 9, i32 9>, <4 x i32>* %110, align 4, !tbaa !9
  %111 = getelementptr inbounds i32, i32* %3, i64 212
  %112 = bitcast i32* %111 to <4 x i32>*
  store <4 x i32> <i32 9, i32 9, i32 9, i32 9>, <4 x i32>* %112, align 4, !tbaa !9
  %113 = getelementptr inbounds i32, i32* %3, i64 216
  %114 = bitcast i32* %113 to <4 x i32>*
  store <4 x i32> <i32 9, i32 9, i32 9, i32 9>, <4 x i32>* %114, align 4, !tbaa !9
  %115 = getelementptr inbounds i32, i32* %3, i64 220
  %116 = bitcast i32* %115 to <4 x i32>*
  store <4 x i32> <i32 9, i32 9, i32 9, i32 9>, <4 x i32>* %116, align 4, !tbaa !9
  %117 = getelementptr inbounds i32, i32* %3, i64 224
  %118 = bitcast i32* %117 to <4 x i32>*
  store <4 x i32> <i32 9, i32 9, i32 9, i32 9>, <4 x i32>* %118, align 4, !tbaa !9
  %119 = getelementptr inbounds i32, i32* %3, i64 228
  %120 = bitcast i32* %119 to <4 x i32>*
  store <4 x i32> <i32 9, i32 9, i32 9, i32 9>, <4 x i32>* %120, align 4, !tbaa !9
  %121 = getelementptr inbounds i32, i32* %3, i64 232
  %122 = bitcast i32* %121 to <4 x i32>*
  store <4 x i32> <i32 9, i32 9, i32 9, i32 9>, <4 x i32>* %122, align 4, !tbaa !9
  %123 = getelementptr inbounds i32, i32* %3, i64 236
  %124 = bitcast i32* %123 to <4 x i32>*
  store <4 x i32> <i32 9, i32 9, i32 9, i32 9>, <4 x i32>* %124, align 4, !tbaa !9
  %125 = getelementptr inbounds i32, i32* %3, i64 240
  %126 = bitcast i32* %125 to <4 x i32>*
  store <4 x i32> <i32 9, i32 9, i32 9, i32 9>, <4 x i32>* %126, align 4, !tbaa !9
  %127 = getelementptr inbounds i32, i32* %3, i64 244
  %128 = bitcast i32* %127 to <4 x i32>*
  store <4 x i32> <i32 9, i32 9, i32 9, i32 9>, <4 x i32>* %128, align 4, !tbaa !9
  %129 = getelementptr inbounds i32, i32* %3, i64 248
  %130 = bitcast i32* %129 to <4 x i32>*
  store <4 x i32> <i32 9, i32 9, i32 9, i32 9>, <4 x i32>* %130, align 4, !tbaa !9
  %131 = getelementptr inbounds i32, i32* %3, i64 252
  %132 = bitcast i32* %131 to <4 x i32>*
  store <4 x i32> <i32 9, i32 9, i32 9, i32 9>, <4 x i32>* %132, align 4, !tbaa !9
  %133 = getelementptr inbounds i32, i32* %3, i64 256
  %134 = bitcast i32* %133 to <4 x i32>*
  store <4 x i32> <i32 7, i32 7, i32 7, i32 7>, <4 x i32>* %134, align 4, !tbaa !9
  %135 = getelementptr inbounds i32, i32* %3, i64 260
  %136 = bitcast i32* %135 to <4 x i32>*
  store <4 x i32> <i32 7, i32 7, i32 7, i32 7>, <4 x i32>* %136, align 4, !tbaa !9
  %137 = getelementptr inbounds i32, i32* %3, i64 264
  %138 = bitcast i32* %137 to <4 x i32>*
  store <4 x i32> <i32 7, i32 7, i32 7, i32 7>, <4 x i32>* %138, align 4, !tbaa !9
  %139 = getelementptr inbounds i32, i32* %3, i64 268
  %140 = bitcast i32* %139 to <4 x i32>*
  store <4 x i32> <i32 7, i32 7, i32 7, i32 7>, <4 x i32>* %140, align 4, !tbaa !9
  %141 = getelementptr inbounds i32, i32* %3, i64 272
  %142 = bitcast i32* %141 to <4 x i32>*
  store <4 x i32> <i32 7, i32 7, i32 7, i32 7>, <4 x i32>* %142, align 4, !tbaa !9
  %143 = getelementptr inbounds i32, i32* %3, i64 276
  %144 = bitcast i32* %143 to <4 x i32>*
  store <4 x i32> <i32 7, i32 7, i32 7, i32 7>, <4 x i32>* %144, align 4, !tbaa !9
  %145 = getelementptr inbounds i32, i32* %3, i64 280
  %146 = bitcast i32* %145 to <4 x i32>*
  store <4 x i32> <i32 8, i32 8, i32 8, i32 8>, <4 x i32>* %146, align 4, !tbaa !9
  %147 = getelementptr inbounds i32, i32* %3, i64 284
  %148 = bitcast i32* %147 to <4 x i32>*
  store <4 x i32> <i32 8, i32 8, i32 8, i32 8>, <4 x i32>* %148, align 4, !tbaa !9
  %149 = tail call noalias dereferenceable_or_null(1152) i8* @malloc(i64 noundef 1152) #25
  %150 = getelementptr inbounds %struct.HuffmanTree, %struct.HuffmanTree* %0, i64 0, i32 1
  %151 = bitcast i32** %150 to i8**
  store i8* %149, i8** %151, align 8, !tbaa !53
  %152 = icmp eq i8* %149, null
  %153 = bitcast i8* %149 to i32*
  br i1 %152, label %166, label %154

154:                                              ; preds = %5, %154
  %155 = phi i64 [ %160, %154 ], [ 0, %5 ]
  %156 = getelementptr inbounds i32, i32* %3, i64 %155
  %157 = load i32, i32* %156, align 4, !tbaa !9
  %158 = getelementptr inbounds i32, i32* %153, i64 %155
  store i32 %157, i32* %158, align 4, !tbaa !9
  %159 = add nuw nsw i64 %155, 1
  %160 = and i64 %159, 4294967295
  %161 = icmp eq i64 %160, 288
  br i1 %161, label %162, label %154

162:                                              ; preds = %154
  %163 = getelementptr inbounds %struct.HuffmanTree, %struct.HuffmanTree* %0, i64 0, i32 3
  store i32 288, i32* %163, align 4, !tbaa !55
  %164 = getelementptr inbounds %struct.HuffmanTree, %struct.HuffmanTree* %0, i64 0, i32 2
  store i32 15, i32* %164, align 8, !tbaa !56
  %165 = tail call fastcc noundef i32 @_ZL28HuffmanTree_makeFromLengths2P11HuffmanTree(%struct.HuffmanTree* noundef nonnull %0) #25
  br label %166

166:                                              ; preds = %5, %162
  %167 = phi i32 [ %165, %162 ], [ 83, %5 ]
  tail call void @free(i8* noundef nonnull %2) #25
  br label %168

168:                                              ; preds = %1, %166
  %169 = phi i32 [ %167, %166 ], [ 83, %1 ]
  ret i32 %169
}

; Function Attrs: nounwind uwtable
define internal fastcc noundef i32 @_ZL28HuffmanTree_makeFromLengths2P11HuffmanTree(%struct.HuffmanTree* nocapture noundef %0) unnamed_addr #3 {
  %2 = getelementptr inbounds %struct.HuffmanTree, %struct.HuffmanTree* %0, i64 0, i32 3
  %3 = load i32, i32* %2, align 4, !tbaa !55
  %4 = zext i32 %3 to i64
  %5 = shl nuw nsw i64 %4, 2
  %6 = tail call noalias i8* @malloc(i64 noundef %5) #25
  %7 = getelementptr inbounds %struct.HuffmanTree, %struct.HuffmanTree* %0, i64 0, i32 0
  %8 = bitcast %struct.HuffmanTree* %0 to i8**
  store i8* %6, i8** %8, align 8, !tbaa !68
  %9 = getelementptr inbounds %struct.HuffmanTree, %struct.HuffmanTree* %0, i64 0, i32 2
  %10 = load i32, i32* %9, align 8, !tbaa !56
  %11 = add i32 %10, 1
  %12 = zext i32 %11 to i64
  %13 = shl nuw nsw i64 %12, 2
  %14 = tail call noalias i8* @malloc(i64 noundef %13) #25
  %15 = bitcast i8* %14 to i32*
  %16 = tail call noalias i8* @malloc(i64 noundef %13) #25
  %17 = bitcast i8* %16 to i32*
  %18 = bitcast i8* %6 to i32*
  %19 = icmp ne i8* %6, null
  %20 = icmp ne i8* %14, null
  %21 = and i1 %20, %19
  %22 = icmp ne i8* %16, null
  %23 = and i1 %22, %21
  br i1 %23, label %24, label %420

24:                                               ; preds = %1
  %25 = icmp eq i32 %11, 0
  br i1 %25, label %30, label %26

26:                                               ; preds = %24
  %27 = zext i32 %10 to i64
  %28 = shl nuw nsw i64 %27, 2
  %29 = add nuw nsw i64 %28, 4
  call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 4 %16, i8 0, i64 %29, i1 false), !tbaa !9
  call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 4 %14, i8 0, i64 %29, i1 false), !tbaa !9
  br label %30

30:                                               ; preds = %26, %24
  %31 = icmp eq i32 %3, 0
  br i1 %31, label %55, label %32

32:                                               ; preds = %30
  %33 = getelementptr inbounds %struct.HuffmanTree, %struct.HuffmanTree* %0, i64 0, i32 1
  %34 = load i32*, i32** %33, align 8, !tbaa !53
  %35 = add nsw i64 %4, -1
  %36 = and i64 %4, 3
  %37 = icmp ult i64 %35, 3
  br i1 %37, label %40, label %38

38:                                               ; preds = %32
  %39 = and i64 %4, 4294967292
  br label %59

40:                                               ; preds = %59, %32
  %41 = phi i64 [ 0, %32 ], [ %89, %59 ]
  %42 = icmp eq i64 %36, 0
  br i1 %42, label %55, label %43

43:                                               ; preds = %40, %43
  %44 = phi i64 [ %52, %43 ], [ %41, %40 ]
  %45 = phi i64 [ %53, %43 ], [ 0, %40 ]
  %46 = getelementptr inbounds i32, i32* %34, i64 %44
  %47 = load i32, i32* %46, align 4, !tbaa !9
  %48 = zext i32 %47 to i64
  %49 = getelementptr inbounds i32, i32* %15, i64 %48
  %50 = load i32, i32* %49, align 4, !tbaa !9
  %51 = add i32 %50, 1
  store i32 %51, i32* %49, align 4, !tbaa !9
  %52 = add nuw nsw i64 %44, 1
  %53 = add i64 %45, 1
  %54 = icmp eq i64 %53, %36
  br i1 %54, label %55, label %43, !llvm.loop !77

55:                                               ; preds = %40, %43, %30
  %56 = icmp eq i32 %10, 0
  br i1 %56, label %92, label %57

57:                                               ; preds = %55
  %58 = load i32, i32* %17, align 4, !tbaa !9
  br label %96

59:                                               ; preds = %59, %38
  %60 = phi i64 [ 0, %38 ], [ %89, %59 ]
  %61 = phi i64 [ 0, %38 ], [ %90, %59 ]
  %62 = getelementptr inbounds i32, i32* %34, i64 %60
  %63 = load i32, i32* %62, align 4, !tbaa !9
  %64 = zext i32 %63 to i64
  %65 = getelementptr inbounds i32, i32* %15, i64 %64
  %66 = load i32, i32* %65, align 4, !tbaa !9
  %67 = add i32 %66, 1
  store i32 %67, i32* %65, align 4, !tbaa !9
  %68 = or i64 %60, 1
  %69 = getelementptr inbounds i32, i32* %34, i64 %68
  %70 = load i32, i32* %69, align 4, !tbaa !9
  %71 = zext i32 %70 to i64
  %72 = getelementptr inbounds i32, i32* %15, i64 %71
  %73 = load i32, i32* %72, align 4, !tbaa !9
  %74 = add i32 %73, 1
  store i32 %74, i32* %72, align 4, !tbaa !9
  %75 = or i64 %60, 2
  %76 = getelementptr inbounds i32, i32* %34, i64 %75
  %77 = load i32, i32* %76, align 4, !tbaa !9
  %78 = zext i32 %77 to i64
  %79 = getelementptr inbounds i32, i32* %15, i64 %78
  %80 = load i32, i32* %79, align 4, !tbaa !9
  %81 = add i32 %80, 1
  store i32 %81, i32* %79, align 4, !tbaa !9
  %82 = or i64 %60, 3
  %83 = getelementptr inbounds i32, i32* %34, i64 %82
  %84 = load i32, i32* %83, align 4, !tbaa !9
  %85 = zext i32 %84 to i64
  %86 = getelementptr inbounds i32, i32* %15, i64 %85
  %87 = load i32, i32* %86, align 4, !tbaa !9
  %88 = add i32 %87, 1
  store i32 %88, i32* %86, align 4, !tbaa !9
  %89 = add nuw nsw i64 %60, 4
  %90 = add i64 %61, 4
  %91 = icmp eq i64 %90, %39
  br i1 %91, label %40, label %59

92:                                               ; preds = %96, %55
  br i1 %31, label %128, label %93

93:                                               ; preds = %92
  %94 = getelementptr inbounds %struct.HuffmanTree, %struct.HuffmanTree* %0, i64 0, i32 1
  %95 = load i32*, i32** %94, align 8, !tbaa !53
  br label %109

96:                                               ; preds = %57, %96
  %97 = phi i32 [ %104, %96 ], [ %58, %57 ]
  %98 = phi i32 [ %107, %96 ], [ 1, %57 ]
  %99 = add i32 %98, -1
  %100 = zext i32 %99 to i64
  %101 = getelementptr inbounds i32, i32* %15, i64 %100
  %102 = load i32, i32* %101, align 4, !tbaa !9
  %103 = add i32 %102, %97
  %104 = shl i32 %103, 1
  %105 = zext i32 %98 to i64
  %106 = getelementptr inbounds i32, i32* %17, i64 %105
  store i32 %104, i32* %106, align 4, !tbaa !9
  %107 = add i32 %98, 1
  %108 = icmp ugt i32 %107, %10
  br i1 %108, label %92, label %96

109:                                              ; preds = %93, %125
  %110 = phi i32 [ 0, %93 ], [ %126, %125 ]
  %111 = zext i32 %110 to i64
  %112 = getelementptr inbounds i32, i32* %95, i64 %111
  %113 = load i32, i32* %112, align 4, !tbaa !9
  %114 = icmp eq i32 %113, 0
  br i1 %114, label %125, label %115

115:                                              ; preds = %109
  %116 = zext i32 %113 to i64
  %117 = getelementptr inbounds i32, i32* %17, i64 %116
  %118 = load i32, i32* %117, align 4, !tbaa !9
  %119 = add i32 %118, 1
  store i32 %119, i32* %117, align 4, !tbaa !9
  %120 = getelementptr inbounds i32, i32* %18, i64 %111
  store i32 %118, i32* %120, align 4, !tbaa !9
  %121 = load i32, i32* %112, align 4, !tbaa !9
  %122 = shl nsw i32 -1, %121
  %123 = xor i32 %122, -1
  %124 = and i32 %118, %123
  store i32 %124, i32* %120, align 4, !tbaa !9
  br label %125

125:                                              ; preds = %109, %115
  %126 = add i32 %110, 1
  %127 = icmp eq i32 %126, %3
  br i1 %127, label %128, label %109

128:                                              ; preds = %125, %92
  tail call void @free(i8* noundef %14) #25
  tail call void @free(i8* noundef %16) #25
  %129 = tail call dereferenceable_or_null(2048) i8* @calloc(i64 1, i64 2048) #25
  %130 = bitcast i8* %129 to i32*
  %131 = icmp eq i8* %129, null
  br i1 %131, label %434, label %132

132:                                              ; preds = %128
  %133 = zext i32 %3 to i64
  %134 = icmp eq i32 %3, 0
  br i1 %134, label %158, label %135

135:                                              ; preds = %132
  %136 = getelementptr inbounds %struct.HuffmanTree, %struct.HuffmanTree* %0, i64 0, i32 1
  %137 = load i32*, i32** %136, align 8, !tbaa !53
  br label %138

138:                                              ; preds = %155, %135
  %139 = phi i64 [ 0, %135 ], [ %156, %155 ]
  %140 = getelementptr inbounds i32, i32* %137, i64 %139
  %141 = load i32, i32* %140, align 4, !tbaa !9
  %142 = icmp ult i32 %141, 10
  br i1 %142, label %155, label %143

143:                                              ; preds = %138
  %144 = getelementptr inbounds i32, i32* %18, i64 %139
  %145 = load i32, i32* %144, align 4, !tbaa !9
  %146 = add i32 %141, -9
  %147 = lshr i32 %145, %146
  %148 = trunc i32 %147 to i9
  %149 = tail call i9 @llvm.bitreverse.i9(i9 %148) #25
  %150 = zext i9 %149 to i64
  %151 = getelementptr inbounds i32, i32* %130, i64 %150
  %152 = load i32, i32* %151, align 4, !tbaa !9
  %153 = icmp ugt i32 %152, %141
  %154 = select i1 %153, i32 %152, i32 %141
  store i32 %154, i32* %151, align 4, !tbaa !9
  br label %155

155:                                              ; preds = %143, %138
  %156 = add nuw nsw i64 %139, 1
  %157 = icmp eq i64 %156, %133
  br i1 %157, label %158, label %138

158:                                              ; preds = %155, %132
  br label %159

159:                                              ; preds = %159, %158
  %160 = phi i64 [ 0, %158 ], [ %179, %159 ]
  %161 = phi i64 [ 512, %158 ], [ %178, %159 ]
  %162 = getelementptr inbounds i32, i32* %130, i64 %160
  %163 = load i32, i32* %162, align 4, !tbaa !9
  %164 = icmp ugt i32 %163, 9
  %165 = add i32 %163, -9
  %166 = shl nuw i32 1, %165
  %167 = select i1 %164, i32 %166, i32 0
  %168 = zext i32 %167 to i64
  %169 = add i64 %161, %168
  %170 = or i64 %160, 1
  %171 = getelementptr inbounds i32, i32* %130, i64 %170
  %172 = load i32, i32* %171, align 4, !tbaa !9
  %173 = icmp ugt i32 %172, 9
  %174 = add i32 %172, -9
  %175 = shl nuw i32 1, %174
  %176 = select i1 %173, i32 %175, i32 0
  %177 = zext i32 %176 to i64
  %178 = add i64 %169, %177
  %179 = add nuw nsw i64 %160, 2
  %180 = icmp eq i64 %179, 512
  br i1 %180, label %181, label %159

181:                                              ; preds = %159
  %182 = tail call noalias i8* @malloc(i64 noundef %178) #25
  %183 = getelementptr inbounds %struct.HuffmanTree, %struct.HuffmanTree* %0, i64 0, i32 4
  store i8* %182, i8** %183, align 8, !tbaa !64
  %184 = shl i64 %178, 1
  %185 = tail call noalias i8* @malloc(i64 noundef %184) #25
  %186 = getelementptr inbounds %struct.HuffmanTree, %struct.HuffmanTree* %0, i64 0, i32 5
  %187 = bitcast i16** %186 to i8**
  store i8* %185, i8** %187, align 8, !tbaa !65
  %188 = icmp eq i8* %182, null
  %189 = icmp eq i8* %185, null
  %190 = or i1 %188, %189
  br i1 %190, label %205, label %191

191:                                              ; preds = %181
  %192 = icmp eq i64 %178, 0
  br i1 %192, label %234, label %193

193:                                              ; preds = %191
  store i8 16, i8* %182, align 1, !tbaa !14
  %194 = icmp eq i64 %178, 1
  br i1 %194, label %234, label %195

195:                                              ; preds = %193
  %196 = getelementptr inbounds i8, i8* %182, i64 1
  store i8 16, i8* %196, align 1, !tbaa !14
  %197 = icmp eq i64 %178, 2
  br i1 %197, label %234, label %198

198:                                              ; preds = %195
  %199 = add i64 %178, -2
  %200 = add i64 %178, -3
  %201 = and i64 %199, 3
  %202 = icmp ult i64 %200, 3
  br i1 %202, label %223, label %203

203:                                              ; preds = %198
  %204 = and i64 %199, -4
  br label %206

205:                                              ; preds = %181
  tail call void @free(i8* noundef nonnull %129) #25
  br label %434

206:                                              ; preds = %206, %203
  %207 = phi i64 [ 2, %203 ], [ %220, %206 ]
  %208 = phi i64 [ 0, %203 ], [ %221, %206 ]
  %209 = load i8*, i8** %183, align 8, !tbaa !64
  %210 = getelementptr inbounds i8, i8* %209, i64 %207
  store i8 16, i8* %210, align 1, !tbaa !14
  %211 = or i64 %207, 1
  %212 = load i8*, i8** %183, align 8, !tbaa !64
  %213 = getelementptr inbounds i8, i8* %212, i64 %211
  store i8 16, i8* %213, align 1, !tbaa !14
  %214 = add nuw i64 %207, 2
  %215 = load i8*, i8** %183, align 8, !tbaa !64
  %216 = getelementptr inbounds i8, i8* %215, i64 %214
  store i8 16, i8* %216, align 1, !tbaa !14
  %217 = add nuw i64 %207, 3
  %218 = load i8*, i8** %183, align 8, !tbaa !64
  %219 = getelementptr inbounds i8, i8* %218, i64 %217
  store i8 16, i8* %219, align 1, !tbaa !14
  %220 = add nuw i64 %207, 4
  %221 = add i64 %208, 4
  %222 = icmp eq i64 %221, %204
  br i1 %222, label %223, label %206

223:                                              ; preds = %206, %198
  %224 = phi i64 [ 2, %198 ], [ %220, %206 ]
  %225 = icmp eq i64 %201, 0
  br i1 %225, label %234, label %226

226:                                              ; preds = %223, %226
  %227 = phi i64 [ %231, %226 ], [ %224, %223 ]
  %228 = phi i64 [ %232, %226 ], [ 0, %223 ]
  %229 = load i8*, i8** %183, align 8, !tbaa !64
  %230 = getelementptr inbounds i8, i8* %229, i64 %227
  store i8 16, i8* %230, align 1, !tbaa !14
  %231 = add nuw i64 %227, 1
  %232 = add i64 %228, 1
  %233 = icmp eq i64 %232, %201
  br i1 %233, label %234, label %226, !llvm.loop !78

234:                                              ; preds = %223, %226, %195, %193, %191
  br label %235

235:                                              ; preds = %234, %252
  %236 = phi i64 [ %254, %252 ], [ 0, %234 ]
  %237 = phi i64 [ %253, %252 ], [ 512, %234 ]
  %238 = getelementptr inbounds i32, i32* %130, i64 %236
  %239 = load i32, i32* %238, align 4, !tbaa !9
  %240 = icmp ult i32 %239, 10
  br i1 %240, label %252, label %241

241:                                              ; preds = %235
  %242 = trunc i32 %239 to i8
  %243 = load i8*, i8** %183, align 8, !tbaa !64
  %244 = getelementptr inbounds i8, i8* %243, i64 %236
  store i8 %242, i8* %244, align 1, !tbaa !14
  %245 = trunc i64 %237 to i16
  %246 = load i16*, i16** %186, align 8, !tbaa !65
  %247 = getelementptr inbounds i16, i16* %246, i64 %236
  store i16 %245, i16* %247, align 2, !tbaa !66
  %248 = add i32 %239, -9
  %249 = shl nuw i32 1, %248
  %250 = zext i32 %249 to i64
  %251 = add i64 %237, %250
  br label %252

252:                                              ; preds = %241, %235
  %253 = phi i64 [ %251, %241 ], [ %237, %235 ]
  %254 = add nuw nsw i64 %236, 1
  %255 = icmp eq i64 %254, 512
  br i1 %255, label %256, label %235

256:                                              ; preds = %252
  tail call void @free(i8* noundef nonnull %129) #25
  %257 = load i32, i32* %2, align 4, !tbaa !55
  %258 = icmp eq i32 %257, 0
  br i1 %258, label %379, label %259

259:                                              ; preds = %256
  %260 = getelementptr inbounds %struct.HuffmanTree, %struct.HuffmanTree* %0, i64 0, i32 1
  br label %261

261:                                              ; preds = %368, %259
  %262 = phi i64 [ 0, %259 ], [ %370, %368 ]
  %263 = phi i64 [ 0, %259 ], [ %369, %368 ]
  %264 = load i32*, i32** %260, align 8, !tbaa !53
  %265 = getelementptr inbounds i32, i32* %264, i64 %262
  %266 = load i32, i32* %265, align 4, !tbaa !9
  %267 = icmp eq i32 %266, 0
  br i1 %267, label %368, label %268

268:                                              ; preds = %261
  %269 = load i32*, i32** %7, align 8, !tbaa !68
  %270 = getelementptr inbounds i32, i32* %269, i64 %262
  %271 = load i32, i32* %270, align 4, !tbaa !9
  %272 = and i32 %266, 1
  %273 = icmp eq i32 %266, 1
  br i1 %273, label %296, label %274

274:                                              ; preds = %268
  %275 = and i32 %266, -2
  br label %276

276:                                              ; preds = %276, %274
  %277 = phi i32 [ 0, %274 ], [ %292, %276 ]
  %278 = phi i32 [ 0, %274 ], [ %293, %276 ]
  %279 = phi i32 [ 0, %274 ], [ %294, %276 ]
  %280 = xor i32 %278, -1
  %281 = add i32 %266, %280
  %282 = lshr i32 %271, %281
  %283 = and i32 %282, 1
  %284 = shl nuw i32 %283, %278
  %285 = or i32 %284, %277
  %286 = or i32 %278, 1
  %287 = sub nuw nsw i32 -2, %278
  %288 = add i32 %266, %287
  %289 = lshr i32 %271, %288
  %290 = and i32 %289, 1
  %291 = shl nuw i32 %290, %286
  %292 = or i32 %291, %285
  %293 = add nuw i32 %278, 2
  %294 = add i32 %279, 2
  %295 = icmp eq i32 %294, %275
  br i1 %295, label %296, label %276

296:                                              ; preds = %276, %268
  %297 = phi i32 [ undef, %268 ], [ %292, %276 ]
  %298 = phi i32 [ 0, %268 ], [ %292, %276 ]
  %299 = phi i32 [ 0, %268 ], [ %293, %276 ]
  %300 = icmp eq i32 %272, 0
  br i1 %300, label %308, label %301

301:                                              ; preds = %296
  %302 = xor i32 %299, -1
  %303 = add i32 %266, %302
  %304 = lshr i32 %271, %303
  %305 = and i32 %304, 1
  %306 = shl nuw i32 %305, %299
  %307 = or i32 %306, %298
  br label %308

308:                                              ; preds = %296, %301
  %309 = phi i32 [ %297, %296 ], [ %307, %301 ]
  %310 = add i64 %263, 1
  %311 = icmp ult i32 %266, 10
  br i1 %311, label %312, label %331

312:                                              ; preds = %308
  %313 = sub nuw nsw i32 9, %266
  %314 = trunc i32 %266 to i8
  %315 = trunc i64 %262 to i16
  br label %316

316:                                              ; preds = %325, %312
  %317 = phi i32 [ 0, %312 ], [ %328, %325 ]
  %318 = shl i32 %317, %266
  %319 = or i32 %318, %309
  %320 = load i8*, i8** %183, align 8, !tbaa !64
  %321 = zext i32 %319 to i64
  %322 = getelementptr inbounds i8, i8* %320, i64 %321
  %323 = load i8, i8* %322, align 1, !tbaa !14
  %324 = icmp eq i8 %323, 16
  br i1 %324, label %325, label %434

325:                                              ; preds = %316
  store i8 %314, i8* %322, align 1, !tbaa !14
  %326 = load i16*, i16** %186, align 8, !tbaa !65
  %327 = getelementptr inbounds i16, i16* %326, i64 %321
  store i16 %315, i16* %327, align 2, !tbaa !66
  %328 = add i32 %317, 1
  %329 = lshr i32 %328, %313
  %330 = icmp eq i32 %329, 0
  br i1 %330, label %316, label %368

331:                                              ; preds = %308
  %332 = and i32 %309, 511
  %333 = load i8*, i8** %183, align 8, !tbaa !64
  %334 = zext i32 %332 to i64
  %335 = getelementptr inbounds i8, i8* %333, i64 %334
  %336 = load i8, i8* %335, align 1, !tbaa !14
  %337 = zext i8 %336 to i32
  %338 = load i16*, i16** %186, align 8, !tbaa !65
  %339 = getelementptr inbounds i16, i16* %338, i64 %334
  %340 = load i16, i16* %339, align 2, !tbaa !66
  %341 = zext i16 %340 to i32
  %342 = add i32 %266, -9
  %343 = sub i32 %337, %266
  %344 = icmp ugt i32 %266, %337
  br i1 %344, label %434, label %345

345:                                              ; preds = %331
  %346 = lshr i32 %309, 9
  %347 = trunc i32 %266 to i8
  %348 = trunc i64 %262 to i16
  %349 = add nuw nsw i32 %346, %341
  %350 = zext i32 %349 to i64
  %351 = getelementptr inbounds i8, i8* %333, i64 %350
  store i8 %347, i8* %351, align 1, !tbaa !14
  %352 = load i16*, i16** %186, align 8, !tbaa !65
  %353 = getelementptr inbounds i16, i16* %352, i64 %350
  store i16 %348, i16* %353, align 2, !tbaa !66
  %354 = icmp eq i32 %343, 0
  br i1 %354, label %368, label %355

355:                                              ; preds = %345, %355
  %356 = phi i32 [ %365, %355 ], [ 1, %345 ]
  %357 = load i8*, i8** %183, align 8, !tbaa !64
  %358 = shl i32 %356, %342
  %359 = or i32 %358, %346
  %360 = add i32 %359, %341
  %361 = zext i32 %360 to i64
  %362 = getelementptr inbounds i8, i8* %357, i64 %361
  store i8 %347, i8* %362, align 1, !tbaa !14
  %363 = load i16*, i16** %186, align 8, !tbaa !65
  %364 = getelementptr inbounds i16, i16* %363, i64 %361
  store i16 %348, i16* %364, align 2, !tbaa !66
  %365 = add i32 %356, 1
  %366 = lshr i32 %365, %343
  %367 = icmp eq i32 %366, 0
  br i1 %367, label %355, label %368

368:                                              ; preds = %355, %325, %345, %261
  %369 = phi i64 [ %263, %261 ], [ %310, %345 ], [ %310, %325 ], [ %310, %355 ]
  %370 = add nuw nsw i64 %262, 1
  %371 = load i32, i32* %2, align 4, !tbaa !55
  %372 = zext i32 %371 to i64
  %373 = icmp ult i64 %370, %372
  br i1 %373, label %261, label %374

374:                                              ; preds = %368
  %375 = icmp ult i64 %369, 2
  br i1 %375, label %379, label %376

376:                                              ; preds = %374
  br i1 %192, label %434, label %377

377:                                              ; preds = %376
  %378 = load i8*, i8** %183, align 8, !tbaa !64
  br label %414

379:                                              ; preds = %374, %256
  br i1 %192, label %434, label %380

380:                                              ; preds = %379
  %381 = and i64 %178, 1
  %382 = icmp eq i64 %178, 1
  br i1 %382, label %421, label %383

383:                                              ; preds = %380
  %384 = and i64 %178, -2
  br label %385

385:                                              ; preds = %408, %383
  %386 = phi i64 [ 0, %383 ], [ %409, %408 ]
  %387 = phi i64 [ 0, %383 ], [ %410, %408 ]
  %388 = load i8*, i8** %183, align 8, !tbaa !64
  %389 = getelementptr inbounds i8, i8* %388, i64 %386
  %390 = load i8, i8* %389, align 1, !tbaa !14
  %391 = icmp eq i8 %390, 16
  br i1 %391, label %392, label %397

392:                                              ; preds = %385
  %393 = icmp ult i64 %386, 512
  %394 = select i1 %393, i8 1, i8 10
  store i8 %394, i8* %389, align 1, !tbaa !14
  %395 = load i16*, i16** %186, align 8, !tbaa !65
  %396 = getelementptr inbounds i16, i16* %395, i64 %386
  store i16 -1, i16* %396, align 2, !tbaa !66
  br label %397

397:                                              ; preds = %392, %385
  %398 = or i64 %386, 1
  %399 = load i8*, i8** %183, align 8, !tbaa !64
  %400 = getelementptr inbounds i8, i8* %399, i64 %398
  %401 = load i8, i8* %400, align 1, !tbaa !14
  %402 = icmp eq i8 %401, 16
  br i1 %402, label %403, label %408

403:                                              ; preds = %397
  %404 = icmp ult i64 %398, 512
  %405 = select i1 %404, i8 1, i8 10
  store i8 %405, i8* %400, align 1, !tbaa !14
  %406 = load i16*, i16** %186, align 8, !tbaa !65
  %407 = getelementptr inbounds i16, i16* %406, i64 %398
  store i16 -1, i16* %407, align 2, !tbaa !66
  br label %408

408:                                              ; preds = %403, %397
  %409 = add nuw i64 %386, 2
  %410 = add i64 %387, 2
  %411 = icmp eq i64 %410, %384
  br i1 %411, label %421, label %385

412:                                              ; preds = %414
  %413 = icmp eq i64 %419, %178
  br i1 %413, label %434, label %414

414:                                              ; preds = %412, %377
  %415 = phi i64 [ 0, %377 ], [ %419, %412 ]
  %416 = getelementptr inbounds i8, i8* %378, i64 %415
  %417 = load i8, i8* %416, align 1, !tbaa !14
  %418 = icmp eq i8 %417, 16
  %419 = add nuw i64 %415, 1
  br i1 %418, label %434, label %412

420:                                              ; preds = %1
  tail call void @free(i8* noundef %14) #25
  tail call void @free(i8* noundef %16) #25
  br label %434

421:                                              ; preds = %408, %380
  %422 = phi i64 [ 0, %380 ], [ %409, %408 ]
  %423 = icmp eq i64 %381, 0
  br i1 %423, label %434, label %424

424:                                              ; preds = %421
  %425 = load i8*, i8** %183, align 8, !tbaa !64
  %426 = getelementptr inbounds i8, i8* %425, i64 %422
  %427 = load i8, i8* %426, align 1, !tbaa !14
  %428 = icmp eq i8 %427, 16
  br i1 %428, label %429, label %434

429:                                              ; preds = %424
  %430 = icmp ult i64 %422, 512
  %431 = select i1 %430, i8 1, i8 10
  store i8 %431, i8* %426, align 1, !tbaa !14
  %432 = load i16*, i16** %186, align 8, !tbaa !65
  %433 = getelementptr inbounds i16, i16* %432, i64 %422
  store i16 -1, i16* %433, align 2, !tbaa !66
  br label %434

434:                                              ; preds = %331, %316, %414, %412, %421, %429, %424, %379, %376, %205, %128, %420
  %435 = phi i32 [ 83, %420 ], [ 83, %205 ], [ 83, %128 ], [ 0, %379 ], [ 0, %376 ], [ 0, %424 ], [ 0, %429 ], [ 0, %421 ], [ 0, %412 ], [ 55, %414 ], [ 55, %316 ], [ 55, %331 ]
  ret i32 %435
}

; Function Attrs: nofree nosync nounwind readnone speculatable willreturn
declare i32 @llvm.usub.sat.i32(i32, i32) #9

; Function Attrs: inaccessiblememonly nofree nounwind willreturn
declare noalias noundef i8* @calloc(i64 noundef, i64 noundef) local_unnamed_addr #10

; Function Attrs: nofree nosync nounwind readnone speculatable willreturn
declare i9 @llvm.bitreverse.i9(i9) #9

; Function Attrs: nounwind uwtable
define dso_local noundef i32 @_Z15lodepng_deflatePPhPmPKhmPK23LodePNGCompressSettings(i8** nocapture noundef %0, i64* nocapture noundef %1, i8* noundef %2, i64 noundef %3, %struct.LodePNGCompressSettings* nocapture noundef readonly %4) local_unnamed_addr #3 {
  %6 = alloca %struct.uivector, align 8
  %7 = alloca %struct.HuffmanTree, align 8
  %8 = alloca %struct.HuffmanTree, align 8
  %9 = alloca %struct.HuffmanTree, align 8
  %10 = alloca %struct.HuffmanTree, align 8
  %11 = alloca %struct.HuffmanTree, align 8
  %12 = alloca %struct.uivector, align 8
  %13 = alloca %struct.Hash, align 8
  %14 = alloca %struct.LodePNGBitWriter, align 8
  %15 = alloca %struct.ucvector, align 8
  %16 = bitcast %struct.ucvector* %15 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %16) #25
  %17 = load i8*, i8** %0, align 8, !tbaa !7
  %18 = load i64, i64* %1, align 8, !tbaa !3
  %19 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %15, i64 0, i32 0
  store i8* %17, i8** %19, align 8, !tbaa !39, !alias.scope !79
  %20 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %15, i64 0, i32 1
  store i64 %18, i64* %20, align 8, !tbaa !44, !alias.scope !79
  %21 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %15, i64 0, i32 2
  store i64 %18, i64* %21, align 8, !tbaa !45, !alias.scope !79
  %22 = bitcast %struct.Hash* %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %22) #25
  %23 = bitcast %struct.LodePNGBitWriter* %14 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %23) #25
  %24 = getelementptr inbounds %struct.LodePNGBitWriter, %struct.LodePNGBitWriter* %14, i64 0, i32 0
  store %struct.ucvector* %15, %struct.ucvector** %24, align 8, !tbaa !82
  %25 = getelementptr inbounds %struct.LodePNGBitWriter, %struct.LodePNGBitWriter* %14, i64 0, i32 1
  store i8 0, i8* %25, align 8, !tbaa !84
  %26 = getelementptr inbounds %struct.LodePNGCompressSettings, %struct.LodePNGCompressSettings* %4, i64 0, i32 0
  %27 = load i32, i32* %26, align 8, !tbaa !85
  %28 = icmp ugt i32 %27, 2
  br i1 %28, label %2605, label %29

29:                                               ; preds = %5
  switch i32 %27, label %97 [
    i32 0, label %30
    i32 1, label %104
  ]

30:                                               ; preds = %29
  %31 = add i64 %3, 65534
  %32 = udiv i64 %31, 65535
  %33 = icmp ult i64 %31, 65535
  br i1 %33, label %2605, label %34

34:                                               ; preds = %30
  %35 = add nsw i64 %32, -1
  %36 = trunc i64 %3 to i32
  br label %37

37:                                               ; preds = %93, %34
  %38 = phi i64 [ %18, %34 ], [ %96, %93 ]
  %39 = phi i64 [ %18, %34 ], [ %95, %93 ]
  %40 = phi i64 [ 0, %34 ], [ %91, %93 ]
  %41 = phi i32 [ 0, %34 ], [ %94, %93 ]
  %42 = icmp eq i64 %40, %35
  %43 = zext i32 %41 to i64
  %44 = sub i64 %3, %43
  %45 = icmp ult i64 %44, 65535
  %46 = sub i32 %36, %41
  %47 = select i1 %45, i32 %46, i32 65535
  %48 = sub i32 65535, %47
  %49 = zext i32 %47 to i64
  %50 = add i64 %39, 5
  %51 = add i64 %50, %49
  store i64 %51, i64* %20, align 8, !tbaa !44
  %52 = icmp ult i64 %38, %51
  br i1 %52, label %55, label %53

53:                                               ; preds = %37
  %54 = load i8*, i8** %19, align 8, !tbaa !39
  br label %62

55:                                               ; preds = %37
  %56 = lshr i64 %38, 1
  %57 = add i64 %51, %56
  %58 = load i8*, i8** %19, align 8, !tbaa !39
  %59 = call i8* @realloc(i8* noundef %58, i64 noundef %57) #25
  %60 = icmp eq i8* %59, null
  br i1 %60, label %2605, label %61

61:                                               ; preds = %55
  store i64 %57, i64* %21, align 8, !tbaa !45
  store i8* %59, i8** %19, align 8, !tbaa !39
  br label %62

62:                                               ; preds = %61, %53
  %63 = phi i8* [ %54, %53 ], [ %59, %61 ]
  %64 = zext i1 %42 to i8
  %65 = getelementptr inbounds i8, i8* %63, i64 %39
  store i8 %64, i8* %65, align 1, !tbaa !14
  %66 = trunc i32 %47 to i8
  %67 = load i8*, i8** %19, align 8, !tbaa !39
  %68 = add i64 %39, 1
  %69 = getelementptr inbounds i8, i8* %67, i64 %68
  store i8 %66, i8* %69, align 1, !tbaa !14
  %70 = lshr i32 %47, 8
  %71 = trunc i32 %70 to i8
  %72 = load i8*, i8** %19, align 8, !tbaa !39
  %73 = add i64 %39, 2
  %74 = getelementptr inbounds i8, i8* %72, i64 %73
  store i8 %71, i8* %74, align 1, !tbaa !14
  %75 = trunc i32 %48 to i8
  %76 = load i8*, i8** %19, align 8, !tbaa !39
  %77 = add i64 %39, 3
  %78 = getelementptr inbounds i8, i8* %76, i64 %77
  store i8 %75, i8* %78, align 1, !tbaa !14
  %79 = lshr i32 %48, 8
  %80 = trunc i32 %79 to i8
  %81 = load i8*, i8** %19, align 8, !tbaa !39
  %82 = add i64 %39, 4
  %83 = getelementptr inbounds i8, i8* %81, i64 %82
  store i8 %80, i8* %83, align 1, !tbaa !14
  %84 = icmp eq i32 %47, 0
  br i1 %84, label %90, label %85

85:                                               ; preds = %62
  %86 = getelementptr inbounds i8, i8* %2, i64 %43
  %87 = load i8*, i8** %19, align 8, !tbaa !39
  %88 = getelementptr inbounds i8, i8* %87, i64 5
  %89 = getelementptr inbounds i8, i8* %88, i64 %39
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %89, i8* align 1 %86, i64 %49, i1 false) #25, !tbaa !14, !alias.scope !87
  br label %90

90:                                               ; preds = %85, %62
  %91 = add nuw nsw i64 %40, 1
  %92 = icmp eq i64 %91, %32
  br i1 %92, label %2605, label %93

93:                                               ; preds = %90
  %94 = add i32 %47, %41
  %95 = load i64, i64* %20, align 8, !tbaa !44
  %96 = load i64, i64* %21, align 8, !tbaa !45
  br label %37

97:                                               ; preds = %29
  %98 = lshr i64 %3, 3
  %99 = icmp ugt i64 %98, 65528
  %100 = select i1 %99, i64 %98, i64 65528
  %101 = icmp ult i64 %100, 262136
  %102 = select i1 %101, i64 %100, i64 262136
  %103 = add nuw nsw i64 %102, 8
  br label %104

104:                                              ; preds = %97, %29
  %105 = phi i64 [ %103, %97 ], [ %3, %29 ]
  %106 = add i64 %3, -1
  %107 = add i64 %106, %105
  %108 = udiv i64 %107, %105
  %109 = icmp ugt i64 %105, %107
  %110 = select i1 %109, i64 1, i64 %108
  %111 = getelementptr inbounds %struct.LodePNGCompressSettings, %struct.LodePNGCompressSettings* %4, i64 0, i32 2
  %112 = load i32, i32* %111, align 8, !tbaa !91
  %113 = call noalias dereferenceable_or_null(262144) i8* @malloc(i64 noundef 262144) #25
  %114 = bitcast %struct.Hash* %13 to i8**
  store i8* %113, i8** %114, align 8, !tbaa !92
  %115 = zext i32 %112 to i64
  %116 = shl nuw nsw i64 %115, 2
  %117 = call noalias i8* @malloc(i64 noundef %116) #25
  %118 = getelementptr inbounds %struct.Hash, %struct.Hash* %13, i64 0, i32 2
  %119 = bitcast i32** %118 to i8**
  store i8* %117, i8** %119, align 8, !tbaa !94
  %120 = shl nuw nsw i64 %115, 1
  %121 = call noalias i8* @malloc(i64 noundef %120) #25
  %122 = getelementptr inbounds %struct.Hash, %struct.Hash* %13, i64 0, i32 1
  %123 = bitcast i16** %122 to i8**
  store i8* %121, i8** %123, align 8, !tbaa !95
  %124 = call noalias i8* @malloc(i64 noundef %120) #25
  %125 = getelementptr inbounds %struct.Hash, %struct.Hash* %13, i64 0, i32 5
  %126 = bitcast i16** %125 to i8**
  store i8* %124, i8** %126, align 8, !tbaa !96
  %127 = call noalias dereferenceable_or_null(1036) i8* @malloc(i64 noundef 1036) #25
  %128 = getelementptr inbounds %struct.Hash, %struct.Hash* %13, i64 0, i32 3
  %129 = bitcast i32** %128 to i8**
  store i8* %127, i8** %129, align 8, !tbaa !97
  %130 = call noalias i8* @malloc(i64 noundef %120) #25
  %131 = getelementptr inbounds %struct.Hash, %struct.Hash* %13, i64 0, i32 4
  %132 = bitcast i16** %131 to i8**
  store i8* %130, i8** %132, align 8, !tbaa !98
  %133 = icmp eq i8* %113, null
  %134 = bitcast i8* %121 to i16*
  %135 = bitcast i8* %130 to i16*
  %136 = icmp eq i8* %121, null
  %137 = or i1 %133, %136
  %138 = icmp eq i8* %117, null
  %139 = or i1 %138, %137
  br i1 %139, label %2603, label %140

140:                                              ; preds = %104
  %141 = icmp eq i8* %127, null
  %142 = icmp eq i8* %130, null
  %143 = or i1 %141, %142
  %144 = icmp eq i8* %124, null
  %145 = or i1 %144, %143
  br i1 %145, label %2603, label %146

146:                                              ; preds = %140
  call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 4 dereferenceable(262144) %113, i8 -1, i64 262144, i1 false) #25, !tbaa !9
  %147 = icmp eq i32 %112, 0
  br i1 %147, label %148, label %149

148:                                              ; preds = %146
  call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 4 dereferenceable(1036) %127, i8 -1, i64 1036, i1 false) #25, !tbaa !9
  br label %295

149:                                              ; preds = %146
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %117, i8 -1, i64 %116, i1 false) #25, !tbaa !9
  %150 = icmp ult i32 %112, 8
  br i1 %150, label %214, label %151

151:                                              ; preds = %149
  %152 = and i64 %115, 4294967288
  %153 = add nsw i64 %152, -8
  %154 = lshr exact i64 %153, 3
  %155 = add nuw nsw i64 %154, 1
  %156 = and i64 %155, 7
  %157 = icmp ult i64 %153, 56
  br i1 %157, label %198, label %158

158:                                              ; preds = %151
  %159 = and i64 %155, 4611686018427387896
  br label %160

160:                                              ; preds = %160, %158
  %161 = phi i64 [ 0, %158 ], [ %194, %160 ]
  %162 = phi <8 x i16> [ <i16 0, i16 1, i16 2, i16 3, i16 4, i16 5, i16 6, i16 7>, %158 ], [ %195, %160 ]
  %163 = phi i64 [ 0, %158 ], [ %196, %160 ]
  %164 = getelementptr inbounds i16, i16* %134, i64 %161
  %165 = bitcast i16* %164 to <8 x i16>*
  store <8 x i16> %162, <8 x i16>* %165, align 2, !tbaa !66
  %166 = or i64 %161, 8
  %167 = add <8 x i16> %162, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %168 = getelementptr inbounds i16, i16* %134, i64 %166
  %169 = bitcast i16* %168 to <8 x i16>*
  store <8 x i16> %167, <8 x i16>* %169, align 2, !tbaa !66
  %170 = or i64 %161, 16
  %171 = add <8 x i16> %162, <i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16>
  %172 = getelementptr inbounds i16, i16* %134, i64 %170
  %173 = bitcast i16* %172 to <8 x i16>*
  store <8 x i16> %171, <8 x i16>* %173, align 2, !tbaa !66
  %174 = or i64 %161, 24
  %175 = add <8 x i16> %162, <i16 24, i16 24, i16 24, i16 24, i16 24, i16 24, i16 24, i16 24>
  %176 = getelementptr inbounds i16, i16* %134, i64 %174
  %177 = bitcast i16* %176 to <8 x i16>*
  store <8 x i16> %175, <8 x i16>* %177, align 2, !tbaa !66
  %178 = or i64 %161, 32
  %179 = add <8 x i16> %162, <i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32>
  %180 = getelementptr inbounds i16, i16* %134, i64 %178
  %181 = bitcast i16* %180 to <8 x i16>*
  store <8 x i16> %179, <8 x i16>* %181, align 2, !tbaa !66
  %182 = or i64 %161, 40
  %183 = add <8 x i16> %162, <i16 40, i16 40, i16 40, i16 40, i16 40, i16 40, i16 40, i16 40>
  %184 = getelementptr inbounds i16, i16* %134, i64 %182
  %185 = bitcast i16* %184 to <8 x i16>*
  store <8 x i16> %183, <8 x i16>* %185, align 2, !tbaa !66
  %186 = or i64 %161, 48
  %187 = add <8 x i16> %162, <i16 48, i16 48, i16 48, i16 48, i16 48, i16 48, i16 48, i16 48>
  %188 = getelementptr inbounds i16, i16* %134, i64 %186
  %189 = bitcast i16* %188 to <8 x i16>*
  store <8 x i16> %187, <8 x i16>* %189, align 2, !tbaa !66
  %190 = or i64 %161, 56
  %191 = add <8 x i16> %162, <i16 56, i16 56, i16 56, i16 56, i16 56, i16 56, i16 56, i16 56>
  %192 = getelementptr inbounds i16, i16* %134, i64 %190
  %193 = bitcast i16* %192 to <8 x i16>*
  store <8 x i16> %191, <8 x i16>* %193, align 2, !tbaa !66
  %194 = add nuw i64 %161, 64
  %195 = add <8 x i16> %162, <i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64>
  %196 = add nuw i64 %163, 8
  %197 = icmp eq i64 %196, %159
  br i1 %197, label %198, label %160, !llvm.loop !99

198:                                              ; preds = %160, %151
  %199 = phi i64 [ 0, %151 ], [ %194, %160 ]
  %200 = phi <8 x i16> [ <i16 0, i16 1, i16 2, i16 3, i16 4, i16 5, i16 6, i16 7>, %151 ], [ %195, %160 ]
  %201 = icmp eq i64 %156, 0
  br i1 %201, label %212, label %202

202:                                              ; preds = %198, %202
  %203 = phi i64 [ %208, %202 ], [ %199, %198 ]
  %204 = phi <8 x i16> [ %209, %202 ], [ %200, %198 ]
  %205 = phi i64 [ %210, %202 ], [ 0, %198 ]
  %206 = getelementptr inbounds i16, i16* %134, i64 %203
  %207 = bitcast i16* %206 to <8 x i16>*
  store <8 x i16> %204, <8 x i16>* %207, align 2, !tbaa !66
  %208 = add nuw i64 %203, 8
  %209 = add <8 x i16> %204, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %210 = add i64 %205, 1
  %211 = icmp eq i64 %210, %156
  br i1 %211, label %212, label %202, !llvm.loop !101

212:                                              ; preds = %202, %198
  %213 = icmp eq i64 %152, %115
  br i1 %213, label %216, label %214

214:                                              ; preds = %149, %212
  %215 = phi i64 [ 0, %149 ], [ %152, %212 ]
  br label %283

216:                                              ; preds = %283, %212
  call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 4 dereferenceable(1036) %127, i8 -1, i64 1036, i1 false) #25, !tbaa !9
  %217 = icmp ult i32 %112, 8
  br i1 %217, label %281, label %218

218:                                              ; preds = %216
  %219 = and i64 %115, 4294967288
  %220 = add nsw i64 %219, -8
  %221 = lshr exact i64 %220, 3
  %222 = add nuw nsw i64 %221, 1
  %223 = and i64 %222, 7
  %224 = icmp ult i64 %220, 56
  br i1 %224, label %265, label %225

225:                                              ; preds = %218
  %226 = and i64 %222, 4611686018427387896
  br label %227

227:                                              ; preds = %227, %225
  %228 = phi i64 [ 0, %225 ], [ %261, %227 ]
  %229 = phi <8 x i16> [ <i16 0, i16 1, i16 2, i16 3, i16 4, i16 5, i16 6, i16 7>, %225 ], [ %262, %227 ]
  %230 = phi i64 [ 0, %225 ], [ %263, %227 ]
  %231 = getelementptr inbounds i16, i16* %135, i64 %228
  %232 = bitcast i16* %231 to <8 x i16>*
  store <8 x i16> %229, <8 x i16>* %232, align 2, !tbaa !66
  %233 = or i64 %228, 8
  %234 = add <8 x i16> %229, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %235 = getelementptr inbounds i16, i16* %135, i64 %233
  %236 = bitcast i16* %235 to <8 x i16>*
  store <8 x i16> %234, <8 x i16>* %236, align 2, !tbaa !66
  %237 = or i64 %228, 16
  %238 = add <8 x i16> %229, <i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16>
  %239 = getelementptr inbounds i16, i16* %135, i64 %237
  %240 = bitcast i16* %239 to <8 x i16>*
  store <8 x i16> %238, <8 x i16>* %240, align 2, !tbaa !66
  %241 = or i64 %228, 24
  %242 = add <8 x i16> %229, <i16 24, i16 24, i16 24, i16 24, i16 24, i16 24, i16 24, i16 24>
  %243 = getelementptr inbounds i16, i16* %135, i64 %241
  %244 = bitcast i16* %243 to <8 x i16>*
  store <8 x i16> %242, <8 x i16>* %244, align 2, !tbaa !66
  %245 = or i64 %228, 32
  %246 = add <8 x i16> %229, <i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32>
  %247 = getelementptr inbounds i16, i16* %135, i64 %245
  %248 = bitcast i16* %247 to <8 x i16>*
  store <8 x i16> %246, <8 x i16>* %248, align 2, !tbaa !66
  %249 = or i64 %228, 40
  %250 = add <8 x i16> %229, <i16 40, i16 40, i16 40, i16 40, i16 40, i16 40, i16 40, i16 40>
  %251 = getelementptr inbounds i16, i16* %135, i64 %249
  %252 = bitcast i16* %251 to <8 x i16>*
  store <8 x i16> %250, <8 x i16>* %252, align 2, !tbaa !66
  %253 = or i64 %228, 48
  %254 = add <8 x i16> %229, <i16 48, i16 48, i16 48, i16 48, i16 48, i16 48, i16 48, i16 48>
  %255 = getelementptr inbounds i16, i16* %135, i64 %253
  %256 = bitcast i16* %255 to <8 x i16>*
  store <8 x i16> %254, <8 x i16>* %256, align 2, !tbaa !66
  %257 = or i64 %228, 56
  %258 = add <8 x i16> %229, <i16 56, i16 56, i16 56, i16 56, i16 56, i16 56, i16 56, i16 56>
  %259 = getelementptr inbounds i16, i16* %135, i64 %257
  %260 = bitcast i16* %259 to <8 x i16>*
  store <8 x i16> %258, <8 x i16>* %260, align 2, !tbaa !66
  %261 = add nuw i64 %228, 64
  %262 = add <8 x i16> %229, <i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64>
  %263 = add nuw i64 %230, 8
  %264 = icmp eq i64 %263, %226
  br i1 %264, label %265, label %227, !llvm.loop !102

265:                                              ; preds = %227, %218
  %266 = phi i64 [ 0, %218 ], [ %261, %227 ]
  %267 = phi <8 x i16> [ <i16 0, i16 1, i16 2, i16 3, i16 4, i16 5, i16 6, i16 7>, %218 ], [ %262, %227 ]
  %268 = icmp eq i64 %223, 0
  br i1 %268, label %279, label %269

269:                                              ; preds = %265, %269
  %270 = phi i64 [ %275, %269 ], [ %266, %265 ]
  %271 = phi <8 x i16> [ %276, %269 ], [ %267, %265 ]
  %272 = phi i64 [ %277, %269 ], [ 0, %265 ]
  %273 = getelementptr inbounds i16, i16* %135, i64 %270
  %274 = bitcast i16* %273 to <8 x i16>*
  store <8 x i16> %271, <8 x i16>* %274, align 2, !tbaa !66
  %275 = add nuw i64 %270, 8
  %276 = add <8 x i16> %271, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %277 = add i64 %272, 1
  %278 = icmp eq i64 %277, %223
  br i1 %278, label %279, label %269, !llvm.loop !103

279:                                              ; preds = %269, %265
  %280 = icmp eq i64 %219, %115
  br i1 %280, label %295, label %281

281:                                              ; preds = %216, %279
  %282 = phi i64 [ 0, %216 ], [ %219, %279 ]
  br label %289

283:                                              ; preds = %214, %283
  %284 = phi i64 [ %287, %283 ], [ %215, %214 ]
  %285 = trunc i64 %284 to i16
  %286 = getelementptr inbounds i16, i16* %134, i64 %284
  store i16 %285, i16* %286, align 2, !tbaa !66
  %287 = add nuw nsw i64 %284, 1
  %288 = icmp eq i64 %287, %115
  br i1 %288, label %216, label %283, !llvm.loop !104

289:                                              ; preds = %281, %289
  %290 = phi i64 [ %293, %289 ], [ %282, %281 ]
  %291 = trunc i64 %290 to i16
  %292 = getelementptr inbounds i16, i16* %135, i64 %290
  store i16 %291, i16* %292, align 2, !tbaa !66
  %293 = add nuw nsw i64 %290, 1
  %294 = icmp eq i64 %293, %115
  br i1 %294, label %295, label %289, !llvm.loop !106

295:                                              ; preds = %289, %279, %148
  %296 = icmp eq i64 %110, 0
  br i1 %296, label %2603, label %297

297:                                              ; preds = %295
  %298 = add i64 %110, -1
  %299 = bitcast %struct.uivector* %6 to i8*
  %300 = bitcast %struct.HuffmanTree* %7 to i8*
  %301 = bitcast %struct.HuffmanTree* %8 to i8*
  %302 = bitcast %struct.HuffmanTree* %9 to i8*
  %303 = getelementptr inbounds %struct.HuffmanTree, %struct.HuffmanTree* %7, i64 0, i32 4
  %304 = bitcast i8** %303 to i8*
  %305 = getelementptr inbounds %struct.HuffmanTree, %struct.HuffmanTree* %8, i64 0, i32 4
  %306 = bitcast i8** %305 to i8*
  %307 = getelementptr inbounds %struct.HuffmanTree, %struct.HuffmanTree* %9, i64 0, i32 4
  %308 = bitcast i8** %307 to i8*
  %309 = getelementptr inbounds %struct.LodePNGCompressSettings, %struct.LodePNGCompressSettings* %4, i64 0, i32 1
  %310 = getelementptr inbounds %struct.LodePNGCompressSettings, %struct.LodePNGCompressSettings* %4, i64 0, i32 3
  %311 = getelementptr inbounds %struct.LodePNGCompressSettings, %struct.LodePNGCompressSettings* %4, i64 0, i32 4
  %312 = getelementptr inbounds %struct.LodePNGCompressSettings, %struct.LodePNGCompressSettings* %4, i64 0, i32 5
  %313 = getelementptr inbounds %struct.uivector, %struct.uivector* %6, i64 0, i32 1
  %314 = getelementptr inbounds %struct.uivector, %struct.uivector* %6, i64 0, i32 2
  %315 = bitcast %struct.uivector* %6 to i8**
  %316 = getelementptr inbounds %struct.uivector, %struct.uivector* %6, i64 0, i32 0
  %317 = getelementptr inbounds %struct.HuffmanTree, %struct.HuffmanTree* %7, i64 0, i32 1
  %318 = bitcast i32** %317 to i8**
  %319 = getelementptr inbounds %struct.HuffmanTree, %struct.HuffmanTree* %7, i64 0, i32 2
  %320 = getelementptr inbounds %struct.HuffmanTree, %struct.HuffmanTree* %7, i64 0, i32 3
  %321 = getelementptr inbounds %struct.HuffmanTree, %struct.HuffmanTree* %8, i64 0, i32 1
  %322 = bitcast i32** %321 to i8**
  %323 = getelementptr inbounds %struct.HuffmanTree, %struct.HuffmanTree* %8, i64 0, i32 2
  %324 = getelementptr inbounds %struct.HuffmanTree, %struct.HuffmanTree* %8, i64 0, i32 3
  %325 = getelementptr inbounds %struct.HuffmanTree, %struct.HuffmanTree* %9, i64 0, i32 1
  %326 = bitcast i32** %325 to i8**
  %327 = getelementptr inbounds %struct.HuffmanTree, %struct.HuffmanTree* %9, i64 0, i32 2
  %328 = getelementptr inbounds %struct.HuffmanTree, %struct.HuffmanTree* %9, i64 0, i32 3
  %329 = getelementptr inbounds %struct.HuffmanTree, %struct.HuffmanTree* %9, i64 0, i32 0
  %330 = getelementptr inbounds %struct.HuffmanTree, %struct.HuffmanTree* %7, i64 0, i32 0
  %331 = bitcast %struct.HuffmanTree* %7 to i8**
  %332 = getelementptr inbounds %struct.HuffmanTree, %struct.HuffmanTree* %7, i64 0, i32 5
  %333 = bitcast i16** %332 to i8**
  %334 = bitcast %struct.HuffmanTree* %8 to i8**
  %335 = getelementptr inbounds %struct.HuffmanTree, %struct.HuffmanTree* %8, i64 0, i32 5
  %336 = bitcast i16** %335 to i8**
  %337 = bitcast %struct.HuffmanTree* %9 to i8**
  %338 = getelementptr inbounds %struct.HuffmanTree, %struct.HuffmanTree* %9, i64 0, i32 5
  %339 = bitcast i16** %338 to i8**
  %340 = bitcast %struct.HuffmanTree* %10 to i8*
  %341 = bitcast %struct.HuffmanTree* %11 to i8*
  %342 = getelementptr inbounds %struct.HuffmanTree, %struct.HuffmanTree* %10, i64 0, i32 4
  %343 = bitcast i8** %342 to i8*
  %344 = getelementptr inbounds %struct.HuffmanTree, %struct.HuffmanTree* %11, i64 0, i32 4
  %345 = bitcast i8** %344 to i8*
  %346 = getelementptr inbounds %struct.HuffmanTree, %struct.HuffmanTree* %11, i64 0, i32 1
  %347 = bitcast i32** %346 to i8**
  %348 = getelementptr inbounds %struct.HuffmanTree, %struct.HuffmanTree* %11, i64 0, i32 3
  %349 = getelementptr inbounds %struct.HuffmanTree, %struct.HuffmanTree* %11, i64 0, i32 2
  %350 = bitcast %struct.uivector* %12 to i8*
  %351 = bitcast %struct.uivector* %12 to i8**
  %352 = getelementptr inbounds %struct.HuffmanTree, %struct.HuffmanTree* %10, i64 0, i32 0
  %353 = getelementptr inbounds %struct.HuffmanTree, %struct.HuffmanTree* %10, i64 0, i32 1
  %354 = bitcast %struct.HuffmanTree* %10 to i8**
  %355 = bitcast i32** %353 to i8**
  %356 = getelementptr inbounds %struct.HuffmanTree, %struct.HuffmanTree* %10, i64 0, i32 5
  %357 = bitcast i16** %356 to i8**
  %358 = bitcast %struct.HuffmanTree* %11 to i8**
  %359 = getelementptr inbounds %struct.HuffmanTree, %struct.HuffmanTree* %11, i64 0, i32 5
  %360 = bitcast i16** %359 to i8**
  br label %361

361:                                              ; preds = %2601, %297
  %362 = phi i32 [ %27, %297 ], [ %2602, %2601 ]
  %363 = phi i64 [ 0, %297 ], [ %2597, %2601 ]
  %364 = mul i64 %105, %363
  %365 = add i64 %105, %364
  %366 = call i64 @llvm.umin.i64(i64 %3, i64 %365)
  %367 = mul i64 %105, %363
  %368 = sub i64 %366, %367
  %369 = add i64 %368, -8
  %370 = lshr i64 %369, 3
  %371 = add nuw nsw i64 %370, 1
  %372 = mul i64 %105, %363
  %373 = add i64 %105, %372
  %374 = call i64 @llvm.umin.i64(i64 %3, i64 %373)
  %375 = mul i64 %105, %363
  %376 = sub i64 %374, %375
  %377 = icmp eq i64 %363, %298
  %378 = zext i1 %377 to i32
  %379 = mul i64 %363, %105
  %380 = add i64 %379, %105
  %381 = icmp ugt i64 %380, %3
  %382 = select i1 %381, i64 %3, i64 %380
  switch i32 %362, label %2595 [
    i32 1, label %383
    i32 2, label %700
  ]

383:                                              ; preds = %361
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %340) #25
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %341) #25
  call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(16) %340, i8 0, i64 16, i1 false) #25
  call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(16) %343, i8 0, i64 16, i1 false) #25
  call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(16) %341, i8 0, i64 16, i1 false) #25
  call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(16) %345, i8 0, i64 16, i1 false) #25
  %384 = call fastcc noundef i32 @_ZL23generateFixedLitLenTreeP11HuffmanTree(%struct.HuffmanTree* noundef nonnull %10) #25
  %385 = icmp eq i32 %384, 0
  br i1 %385, label %386, label %690

386:                                              ; preds = %383
  %387 = call noalias dereferenceable_or_null(128) i8* @malloc(i64 noundef 128) #25
  store i8* %387, i8** %347, align 8, !tbaa !53
  %388 = icmp eq i8* %387, null
  %389 = bitcast i8* %387 to i32*
  br i1 %388, label %690, label %390

390:                                              ; preds = %386
  %391 = bitcast i8* %387 to <4 x i32>*
  store <4 x i32> <i32 5, i32 5, i32 5, i32 5>, <4 x i32>* %391, align 4, !tbaa !9
  %392 = getelementptr inbounds i32, i32* %389, i64 4
  %393 = bitcast i32* %392 to <4 x i32>*
  store <4 x i32> <i32 5, i32 5, i32 5, i32 5>, <4 x i32>* %393, align 4, !tbaa !9
  %394 = getelementptr inbounds i32, i32* %389, i64 8
  %395 = bitcast i32* %394 to <4 x i32>*
  store <4 x i32> <i32 5, i32 5, i32 5, i32 5>, <4 x i32>* %395, align 4, !tbaa !9
  %396 = getelementptr inbounds i32, i32* %389, i64 12
  %397 = bitcast i32* %396 to <4 x i32>*
  store <4 x i32> <i32 5, i32 5, i32 5, i32 5>, <4 x i32>* %397, align 4, !tbaa !9
  %398 = getelementptr inbounds i32, i32* %389, i64 16
  %399 = bitcast i32* %398 to <4 x i32>*
  store <4 x i32> <i32 5, i32 5, i32 5, i32 5>, <4 x i32>* %399, align 4, !tbaa !9
  %400 = getelementptr inbounds i32, i32* %389, i64 20
  %401 = bitcast i32* %400 to <4 x i32>*
  store <4 x i32> <i32 5, i32 5, i32 5, i32 5>, <4 x i32>* %401, align 4, !tbaa !9
  %402 = getelementptr inbounds i32, i32* %389, i64 24
  %403 = bitcast i32* %402 to <4 x i32>*
  store <4 x i32> <i32 5, i32 5, i32 5, i32 5>, <4 x i32>* %403, align 4, !tbaa !9
  %404 = getelementptr inbounds i32, i32* %389, i64 28
  %405 = bitcast i32* %404 to <4 x i32>*
  store <4 x i32> <i32 5, i32 5, i32 5, i32 5>, <4 x i32>* %405, align 4, !tbaa !9
  store i32 32, i32* %348, align 4, !tbaa !55
  store i32 15, i32* %349, align 8, !tbaa !56
  %406 = call fastcc noundef i32 @_ZL28HuffmanTree_makeFromLengths2P11HuffmanTree(%struct.HuffmanTree* noundef nonnull %11) #25
  %407 = icmp eq i32 %406, 0
  br i1 %407, label %408, label %690

408:                                              ; preds = %390
  %409 = load i8, i8* %25, align 8, !tbaa !84
  %410 = and i8 %409, 7
  %411 = icmp eq i8 %410, 0
  br i1 %411, label %412, label %439

412:                                              ; preds = %408
  %413 = load %struct.ucvector*, %struct.ucvector** %24, align 8, !tbaa !82
  %414 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %413, i64 0, i32 1
  %415 = load i64, i64* %414, align 8, !tbaa !44
  %416 = add i64 %415, 1
  store i64 %416, i64* %414, align 8, !tbaa !44
  %417 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %413, i64 0, i32 2
  %418 = load i64, i64* %417, align 8, !tbaa !45
  %419 = icmp ult i64 %418, %416
  br i1 %419, label %423, label %420

420:                                              ; preds = %412
  %421 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %413, i64 0, i32 0
  %422 = load i8*, i8** %421, align 8, !tbaa !39
  br label %432

423:                                              ; preds = %412
  %424 = lshr i64 %418, 1
  %425 = add i64 %424, %416
  %426 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %413, i64 0, i32 0
  %427 = load i8*, i8** %426, align 8, !tbaa !39
  %428 = call i8* @realloc(i8* noundef %427, i64 noundef %425) #25
  %429 = icmp eq i8* %428, null
  br i1 %429, label %455, label %430

430:                                              ; preds = %423
  store i64 %425, i64* %417, align 8, !tbaa !45
  store i8* %428, i8** %426, align 8, !tbaa !39
  %431 = load i64, i64* %414, align 8, !tbaa !44
  br label %432

432:                                              ; preds = %430, %420
  %433 = phi i8* [ %428, %430 ], [ %422, %420 ]
  %434 = phi i64 [ %431, %430 ], [ %416, %420 ]
  %435 = add i64 %434, -1
  %436 = getelementptr inbounds i8, i8* %433, i64 %435
  store i8 0, i8* %436, align 1, !tbaa !14
  %437 = load i8, i8* %25, align 8, !tbaa !84
  %438 = and i8 %437, 7
  br label %439

439:                                              ; preds = %432, %408
  %440 = phi i8 [ %438, %432 ], [ %410, %408 ]
  %441 = zext i8 %440 to i32
  %442 = shl nuw nsw i32 %378, %441
  %443 = load %struct.ucvector*, %struct.ucvector** %24, align 8, !tbaa !82
  %444 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %443, i64 0, i32 0
  %445 = load i8*, i8** %444, align 8, !tbaa !39
  %446 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %443, i64 0, i32 1
  %447 = load i64, i64* %446, align 8, !tbaa !44
  %448 = add i64 %447, -1
  %449 = getelementptr inbounds i8, i8* %445, i64 %448
  %450 = load i8, i8* %449, align 1, !tbaa !14
  %451 = trunc i32 %442 to i8
  %452 = or i8 %450, %451
  store i8 %452, i8* %449, align 1, !tbaa !14
  %453 = load i8, i8* %25, align 8, !tbaa !84
  %454 = add i8 %453, 1
  store i8 %454, i8* %25, align 8, !tbaa !84
  br label %455

455:                                              ; preds = %439, %423
  %456 = phi i8 [ %454, %439 ], [ %409, %423 ]
  %457 = and i8 %456, 7
  %458 = icmp eq i8 %457, 0
  br i1 %458, label %459, label %486

459:                                              ; preds = %455
  %460 = load %struct.ucvector*, %struct.ucvector** %24, align 8, !tbaa !82
  %461 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %460, i64 0, i32 1
  %462 = load i64, i64* %461, align 8, !tbaa !44
  %463 = add i64 %462, 1
  store i64 %463, i64* %461, align 8, !tbaa !44
  %464 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %460, i64 0, i32 2
  %465 = load i64, i64* %464, align 8, !tbaa !45
  %466 = icmp ult i64 %465, %463
  br i1 %466, label %470, label %467

467:                                              ; preds = %459
  %468 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %460, i64 0, i32 0
  %469 = load i8*, i8** %468, align 8, !tbaa !39
  br label %479

470:                                              ; preds = %459
  %471 = lshr i64 %465, 1
  %472 = add i64 %471, %463
  %473 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %460, i64 0, i32 0
  %474 = load i8*, i8** %473, align 8, !tbaa !39
  %475 = call i8* @realloc(i8* noundef %474, i64 noundef %472) #25
  %476 = icmp eq i8* %475, null
  br i1 %476, label %500, label %477

477:                                              ; preds = %470
  store i64 %472, i64* %464, align 8, !tbaa !45
  store i8* %475, i8** %473, align 8, !tbaa !39
  %478 = load i64, i64* %461, align 8, !tbaa !44
  br label %479

479:                                              ; preds = %477, %467
  %480 = phi i8* [ %475, %477 ], [ %469, %467 ]
  %481 = phi i64 [ %478, %477 ], [ %463, %467 ]
  %482 = add i64 %481, -1
  %483 = getelementptr inbounds i8, i8* %480, i64 %482
  store i8 0, i8* %483, align 1, !tbaa !14
  %484 = load i8, i8* %25, align 8, !tbaa !84
  %485 = and i8 %484, 7
  br label %486

486:                                              ; preds = %479, %455
  %487 = phi i8 [ %485, %479 ], [ %457, %455 ]
  %488 = shl nuw i8 1, %487
  %489 = load %struct.ucvector*, %struct.ucvector** %24, align 8, !tbaa !82
  %490 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %489, i64 0, i32 0
  %491 = load i8*, i8** %490, align 8, !tbaa !39
  %492 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %489, i64 0, i32 1
  %493 = load i64, i64* %492, align 8, !tbaa !44
  %494 = add i64 %493, -1
  %495 = getelementptr inbounds i8, i8* %491, i64 %494
  %496 = load i8, i8* %495, align 1, !tbaa !14
  %497 = or i8 %496, %488
  store i8 %497, i8* %495, align 1, !tbaa !14
  %498 = load i8, i8* %25, align 8, !tbaa !84
  %499 = add i8 %498, 1
  store i8 %499, i8* %25, align 8, !tbaa !84
  br label %500

500:                                              ; preds = %486, %470
  %501 = phi i8 [ %499, %486 ], [ %456, %470 ]
  %502 = and i8 %501, 7
  %503 = icmp eq i8 %502, 0
  br i1 %503, label %504, label %530

504:                                              ; preds = %500
  %505 = load %struct.ucvector*, %struct.ucvector** %24, align 8, !tbaa !82
  %506 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %505, i64 0, i32 1
  %507 = load i64, i64* %506, align 8, !tbaa !44
  %508 = add i64 %507, 1
  store i64 %508, i64* %506, align 8, !tbaa !44
  %509 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %505, i64 0, i32 2
  %510 = load i64, i64* %509, align 8, !tbaa !45
  %511 = icmp ult i64 %510, %508
  br i1 %511, label %515, label %512

512:                                              ; preds = %504
  %513 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %505, i64 0, i32 0
  %514 = load i8*, i8** %513, align 8, !tbaa !39
  br label %524

515:                                              ; preds = %504
  %516 = lshr i64 %510, 1
  %517 = add i64 %516, %508
  %518 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %505, i64 0, i32 0
  %519 = load i8*, i8** %518, align 8, !tbaa !39
  %520 = call i8* @realloc(i8* noundef %519, i64 noundef %517) #25
  %521 = icmp eq i8* %520, null
  br i1 %521, label %533, label %522

522:                                              ; preds = %515
  store i64 %517, i64* %509, align 8, !tbaa !45
  store i8* %520, i8** %518, align 8, !tbaa !39
  %523 = load i64, i64* %506, align 8, !tbaa !44
  br label %524

524:                                              ; preds = %522, %512
  %525 = phi i8* [ %520, %522 ], [ %514, %512 ]
  %526 = phi i64 [ %523, %522 ], [ %508, %512 ]
  %527 = add i64 %526, -1
  %528 = getelementptr inbounds i8, i8* %525, i64 %527
  store i8 0, i8* %528, align 1, !tbaa !14
  %529 = load i8, i8* %25, align 8, !tbaa !84
  br label %530

530:                                              ; preds = %524, %500
  %531 = phi i8 [ %529, %524 ], [ %501, %500 ]
  %532 = add i8 %531, 1
  store i8 %532, i8* %25, align 8, !tbaa !84
  br label %533

533:                                              ; preds = %530, %515
  %534 = phi i8 [ %532, %530 ], [ %501, %515 ]
  %535 = load i32, i32* %309, align 4, !tbaa !107
  %536 = icmp eq i32 %535, 0
  br i1 %536, label %537, label %542

537:                                              ; preds = %533
  %538 = icmp ugt i64 %382, %379
  br i1 %538, label %539, label %622

539:                                              ; preds = %537
  %540 = load i32*, i32** %352, align 8, !tbaa !68
  %541 = load i32*, i32** %353, align 8, !tbaa !53
  br label %551

542:                                              ; preds = %533
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %350) #25
  call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(24) %350, i8 0, i64 24, i1 false) #25
  %543 = load i32, i32* %111, align 8, !tbaa !91
  %544 = load i32, i32* %310, align 4, !tbaa !108
  %545 = load i32, i32* %311, align 8, !tbaa !109
  %546 = load i32, i32* %312, align 4, !tbaa !110
  %547 = call fastcc noundef i32 @_ZL10encodeLZ77P8uivectorP4HashPKhmmjjjj(%struct.uivector* noundef nonnull %12, %struct.Hash* noundef nonnull %13, i8* noundef %2, i64 noundef %379, i64 noundef %382, i32 noundef %543, i32 noundef %544, i32 noundef %545, i32 noundef %546) #25, !range !111
  %548 = icmp eq i32 %547, 0
  br i1 %548, label %549, label %688

549:                                              ; preds = %542
  call fastcc void @_ZL13writeLZ77dataP16LodePNGBitWriterPK8uivectorPK11HuffmanTreeS6_(%struct.LodePNGBitWriter* noundef nonnull %14, %struct.uivector* noundef nonnull %12, %struct.HuffmanTree* noundef nonnull %10, %struct.HuffmanTree* noundef nonnull %11) #25
  %550 = load i8*, i8** %351, align 8, !tbaa !112
  call void @free(i8* noundef %550) #25
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %350) #25
  br label %622

551:                                              ; preds = %618, %539
  %552 = phi i8 [ %534, %539 ], [ %619, %618 ]
  %553 = phi i64 [ %379, %539 ], [ %620, %618 ]
  %554 = getelementptr inbounds i8, i8* %2, i64 %553
  %555 = load i8, i8* %554, align 1, !tbaa !14
  %556 = zext i8 %555 to i64
  %557 = getelementptr inbounds i32, i32* %540, i64 %556
  %558 = load i32, i32* %557, align 4, !tbaa !9
  %559 = getelementptr inbounds i32, i32* %541, i64 %556
  %560 = load i32, i32* %559, align 4, !tbaa !9
  %561 = zext i32 %560 to i64
  %562 = icmp eq i32 %560, 0
  br i1 %562, label %618, label %563

563:                                              ; preds = %551, %595
  %564 = phi i8 [ %615, %595 ], [ %552, %551 ]
  %565 = phi i64 [ %616, %595 ], [ 0, %551 ]
  %566 = and i8 %564, 7
  %567 = icmp eq i8 %566, 0
  br i1 %567, label %568, label %595

568:                                              ; preds = %563
  %569 = load %struct.ucvector*, %struct.ucvector** %24, align 8, !tbaa !82
  %570 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %569, i64 0, i32 1
  %571 = load i64, i64* %570, align 8, !tbaa !44
  %572 = add i64 %571, 1
  store i64 %572, i64* %570, align 8, !tbaa !44
  %573 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %569, i64 0, i32 2
  %574 = load i64, i64* %573, align 8, !tbaa !45
  %575 = icmp ult i64 %574, %572
  br i1 %575, label %579, label %576

576:                                              ; preds = %568
  %577 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %569, i64 0, i32 0
  %578 = load i8*, i8** %577, align 8, !tbaa !39
  br label %588

579:                                              ; preds = %568
  %580 = lshr i64 %574, 1
  %581 = add i64 %580, %572
  %582 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %569, i64 0, i32 0
  %583 = load i8*, i8** %582, align 8, !tbaa !39
  %584 = call i8* @realloc(i8* noundef %583, i64 noundef %581) #25
  %585 = icmp eq i8* %584, null
  br i1 %585, label %618, label %586

586:                                              ; preds = %579
  store i64 %581, i64* %573, align 8, !tbaa !45
  store i8* %584, i8** %582, align 8, !tbaa !39
  %587 = load i64, i64* %570, align 8, !tbaa !44
  br label %588

588:                                              ; preds = %586, %576
  %589 = phi i8* [ %584, %586 ], [ %578, %576 ]
  %590 = phi i64 [ %587, %586 ], [ %572, %576 ]
  %591 = add i64 %590, -1
  %592 = getelementptr inbounds i8, i8* %589, i64 %591
  store i8 0, i8* %592, align 1, !tbaa !14
  %593 = load i8, i8* %25, align 8, !tbaa !84
  %594 = and i8 %593, 7
  br label %595

595:                                              ; preds = %588, %563
  %596 = phi i8 [ %594, %588 ], [ %566, %563 ]
  %597 = trunc i64 %565 to i32
  %598 = xor i32 %597, -1
  %599 = add i32 %560, %598
  %600 = lshr i32 %558, %599
  %601 = and i32 %600, 1
  %602 = zext i8 %596 to i32
  %603 = shl nuw nsw i32 %601, %602
  %604 = load %struct.ucvector*, %struct.ucvector** %24, align 8, !tbaa !82
  %605 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %604, i64 0, i32 0
  %606 = load i8*, i8** %605, align 8, !tbaa !39
  %607 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %604, i64 0, i32 1
  %608 = load i64, i64* %607, align 8, !tbaa !44
  %609 = add i64 %608, -1
  %610 = getelementptr inbounds i8, i8* %606, i64 %609
  %611 = load i8, i8* %610, align 1, !tbaa !14
  %612 = trunc i32 %603 to i8
  %613 = or i8 %611, %612
  store i8 %613, i8* %610, align 1, !tbaa !14
  %614 = load i8, i8* %25, align 8, !tbaa !84
  %615 = add i8 %614, 1
  store i8 %615, i8* %25, align 8, !tbaa !84
  %616 = add nuw nsw i64 %565, 1
  %617 = icmp eq i64 %616, %561
  br i1 %617, label %618, label %563

618:                                              ; preds = %595, %579, %551
  %619 = phi i8 [ %552, %551 ], [ %564, %579 ], [ %615, %595 ]
  %620 = add nuw i64 %553, 1
  %621 = icmp eq i64 %620, %382
  br i1 %621, label %622, label %551

622:                                              ; preds = %618, %549, %537
  %623 = load i32*, i32** %352, align 8, !tbaa !68
  %624 = getelementptr inbounds i32, i32* %623, i64 256
  %625 = load i32, i32* %624, align 4, !tbaa !9
  %626 = load i32*, i32** %353, align 8, !tbaa !53
  %627 = getelementptr inbounds i32, i32* %626, i64 256
  %628 = load i32, i32* %627, align 4, !tbaa !9
  %629 = zext i32 %628 to i64
  %630 = icmp eq i32 %628, 0
  br i1 %630, label %690, label %631

631:                                              ; preds = %622
  %632 = load i8, i8* %25, align 8, !tbaa !84
  br label %633

633:                                              ; preds = %665, %631
  %634 = phi i8 [ %632, %631 ], [ %685, %665 ]
  %635 = phi i64 [ 0, %631 ], [ %686, %665 ]
  %636 = and i8 %634, 7
  %637 = icmp eq i8 %636, 0
  br i1 %637, label %638, label %665

638:                                              ; preds = %633
  %639 = load %struct.ucvector*, %struct.ucvector** %24, align 8, !tbaa !82
  %640 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %639, i64 0, i32 1
  %641 = load i64, i64* %640, align 8, !tbaa !44
  %642 = add i64 %641, 1
  store i64 %642, i64* %640, align 8, !tbaa !44
  %643 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %639, i64 0, i32 2
  %644 = load i64, i64* %643, align 8, !tbaa !45
  %645 = icmp ult i64 %644, %642
  br i1 %645, label %649, label %646

646:                                              ; preds = %638
  %647 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %639, i64 0, i32 0
  %648 = load i8*, i8** %647, align 8, !tbaa !39
  br label %658

649:                                              ; preds = %638
  %650 = lshr i64 %644, 1
  %651 = add i64 %650, %642
  %652 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %639, i64 0, i32 0
  %653 = load i8*, i8** %652, align 8, !tbaa !39
  %654 = call i8* @realloc(i8* noundef %653, i64 noundef %651) #25
  %655 = icmp eq i8* %654, null
  br i1 %655, label %690, label %656

656:                                              ; preds = %649
  store i64 %651, i64* %643, align 8, !tbaa !45
  store i8* %654, i8** %652, align 8, !tbaa !39
  %657 = load i64, i64* %640, align 8, !tbaa !44
  br label %658

658:                                              ; preds = %656, %646
  %659 = phi i8* [ %654, %656 ], [ %648, %646 ]
  %660 = phi i64 [ %657, %656 ], [ %642, %646 ]
  %661 = add i64 %660, -1
  %662 = getelementptr inbounds i8, i8* %659, i64 %661
  store i8 0, i8* %662, align 1, !tbaa !14
  %663 = load i8, i8* %25, align 8, !tbaa !84
  %664 = and i8 %663, 7
  br label %665

665:                                              ; preds = %658, %633
  %666 = phi i8 [ %664, %658 ], [ %636, %633 ]
  %667 = trunc i64 %635 to i32
  %668 = xor i32 %667, -1
  %669 = add i32 %628, %668
  %670 = lshr i32 %625, %669
  %671 = and i32 %670, 1
  %672 = zext i8 %666 to i32
  %673 = shl nuw nsw i32 %671, %672
  %674 = load %struct.ucvector*, %struct.ucvector** %24, align 8, !tbaa !82
  %675 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %674, i64 0, i32 0
  %676 = load i8*, i8** %675, align 8, !tbaa !39
  %677 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %674, i64 0, i32 1
  %678 = load i64, i64* %677, align 8, !tbaa !44
  %679 = add i64 %678, -1
  %680 = getelementptr inbounds i8, i8* %676, i64 %679
  %681 = load i8, i8* %680, align 1, !tbaa !14
  %682 = trunc i32 %673 to i8
  %683 = or i8 %681, %682
  store i8 %683, i8* %680, align 1, !tbaa !14
  %684 = load i8, i8* %25, align 8, !tbaa !84
  %685 = add i8 %684, 1
  store i8 %685, i8* %25, align 8, !tbaa !84
  %686 = add nuw nsw i64 %635, 1
  %687 = icmp eq i64 %686, %629
  br i1 %687, label %690, label %633

688:                                              ; preds = %542
  %689 = load i8*, i8** %351, align 8, !tbaa !112
  call void @free(i8* noundef %689) #25
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %350) #25
  br label %690

690:                                              ; preds = %665, %649, %688, %622, %390, %386, %383
  %691 = phi i32 [ %406, %390 ], [ 0, %622 ], [ 83, %386 ], [ %384, %383 ], [ %547, %688 ], [ 0, %649 ], [ 0, %665 ]
  %692 = load i8*, i8** %354, align 8, !tbaa !68
  call void @free(i8* noundef %692) #25
  %693 = load i8*, i8** %355, align 8, !tbaa !53
  call void @free(i8* noundef %693) #25
  %694 = load i8*, i8** %342, align 8, !tbaa !64
  call void @free(i8* noundef %694) #25
  %695 = load i8*, i8** %357, align 8, !tbaa !65
  call void @free(i8* noundef %695) #25
  %696 = load i8*, i8** %358, align 8, !tbaa !68
  call void @free(i8* noundef %696) #25
  %697 = load i8*, i8** %347, align 8, !tbaa !53
  call void @free(i8* noundef %697) #25
  %698 = load i8*, i8** %344, align 8, !tbaa !64
  call void @free(i8* noundef %698) #25
  %699 = load i8*, i8** %360, align 8, !tbaa !65
  call void @free(i8* noundef %699) #25
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %341) #25
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %340) #25
  br label %2595

700:                                              ; preds = %361
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %299) #25
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %300) #25
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %301) #25
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %302) #25
  %701 = sub i64 %382, %379
  call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(24) %299, i8 0, i64 24, i1 false) #25
  call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(16) %300, i8 0, i64 16, i1 false) #25
  call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(16) %304, i8 0, i64 16, i1 false) #25
  call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(16) %301, i8 0, i64 16, i1 false) #25
  call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(16) %306, i8 0, i64 16, i1 false) #25
  call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(16) %302, i8 0, i64 16, i1 false) #25
  call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(16) %308, i8 0, i64 16, i1 false) #25
  %702 = call noalias dereferenceable_or_null(1144) i8* @malloc(i64 noundef 1144) #25
  %703 = bitcast i8* %702 to i32*
  %704 = call noalias dereferenceable_or_null(120) i8* @malloc(i64 noundef 120) #25
  %705 = bitcast i8* %704 to i32*
  %706 = call noalias dereferenceable_or_null(76) i8* @malloc(i64 noundef 76) #25
  %707 = bitcast i8* %706 to i32*
  %708 = icmp ne i8* %702, null
  %709 = icmp ne i8* %704, null
  %710 = and i1 %708, %709
  %711 = icmp ne i8* %706, null
  %712 = and i1 %710, %711
  br i1 %712, label %713, label %2578

713:                                              ; preds = %700
  call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 1 dereferenceable(1144) %702, i8 0, i64 1144, i1 false) #25, !tbaa !14, !alias.scope !114
  call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 1 dereferenceable(120) %704, i8 0, i64 120, i1 false) #25, !tbaa !14, !alias.scope !117
  call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 1 dereferenceable(76) %706, i8 0, i64 76, i1 false) #25, !tbaa !14, !alias.scope !120
  %714 = load i32, i32* %309, align 4, !tbaa !107
  %715 = icmp eq i32 %714, 0
  br i1 %715, label %725, label %716

716:                                              ; preds = %713
  %717 = load i32, i32* %111, align 8, !tbaa !91
  %718 = load i32, i32* %310, align 4, !tbaa !108
  %719 = load i32, i32* %311, align 8, !tbaa !109
  %720 = load i32, i32* %312, align 4, !tbaa !110
  %721 = call fastcc noundef i32 @_ZL10encodeLZ77P8uivectorP4HashPKhmmjjjj(%struct.uivector* noundef nonnull %6, %struct.Hash* noundef nonnull %13, i8* noundef %2, i64 noundef %379, i64 noundef %382, i32 noundef %717, i32 noundef %718, i32 noundef %719, i32 noundef %720) #25, !range !111
  %722 = icmp eq i32 %721, 0
  br i1 %722, label %723, label %2578

723:                                              ; preds = %716
  %724 = load i64, i64* %313, align 8, !tbaa !123
  br label %808

725:                                              ; preds = %713
  %726 = shl i64 %701, 2
  %727 = icmp eq i64 %726, 0
  br i1 %727, label %733, label %728

728:                                              ; preds = %725
  %729 = call i8* @malloc(i64 %726) #25
  %730 = icmp eq i8* %729, null
  br i1 %730, label %2578, label %731

731:                                              ; preds = %728
  store i64 %726, i64* %314, align 8, !tbaa !124
  store i8* %729, i8** %315, align 8, !tbaa !112
  %732 = bitcast i8* %729 to i32*
  br label %733

733:                                              ; preds = %731, %725
  %734 = phi i32* [ null, %725 ], [ %732, %731 ]
  store i64 %701, i64* %313, align 8, !tbaa !123
  %735 = icmp ugt i64 %382, %379
  br i1 %735, label %736, label %808

736:                                              ; preds = %733
  %737 = icmp ult i64 %376, 8
  br i1 %737, label %797, label %738

738:                                              ; preds = %736
  %739 = and i64 %376, -8
  %740 = add i64 %379, %739
  %741 = and i64 %371, 1
  %742 = icmp ult i64 %369, 8
  br i1 %742, label %778, label %743

743:                                              ; preds = %738
  %744 = and i64 %371, 4611686018427387902
  br label %745

745:                                              ; preds = %745, %743
  %746 = phi i64 [ 0, %743 ], [ %775, %745 ]
  %747 = phi i64 [ 0, %743 ], [ %776, %745 ]
  %748 = add i64 %379, %746
  %749 = getelementptr inbounds i8, i8* %2, i64 %748
  %750 = bitcast i8* %749 to <4 x i8>*
  %751 = load <4 x i8>, <4 x i8>* %750, align 1, !tbaa !14
  %752 = getelementptr inbounds i8, i8* %749, i64 4
  %753 = bitcast i8* %752 to <4 x i8>*
  %754 = load <4 x i8>, <4 x i8>* %753, align 1, !tbaa !14
  %755 = zext <4 x i8> %751 to <4 x i32>
  %756 = zext <4 x i8> %754 to <4 x i32>
  %757 = getelementptr inbounds i32, i32* %734, i64 %746
  %758 = bitcast i32* %757 to <4 x i32>*
  store <4 x i32> %755, <4 x i32>* %758, align 4, !tbaa !9
  %759 = getelementptr inbounds i32, i32* %757, i64 4
  %760 = bitcast i32* %759 to <4 x i32>*
  store <4 x i32> %756, <4 x i32>* %760, align 4, !tbaa !9
  %761 = or i64 %746, 8
  %762 = add i64 %379, %761
  %763 = getelementptr inbounds i8, i8* %2, i64 %762
  %764 = bitcast i8* %763 to <4 x i8>*
  %765 = load <4 x i8>, <4 x i8>* %764, align 1, !tbaa !14
  %766 = getelementptr inbounds i8, i8* %763, i64 4
  %767 = bitcast i8* %766 to <4 x i8>*
  %768 = load <4 x i8>, <4 x i8>* %767, align 1, !tbaa !14
  %769 = zext <4 x i8> %765 to <4 x i32>
  %770 = zext <4 x i8> %768 to <4 x i32>
  %771 = getelementptr inbounds i32, i32* %734, i64 %761
  %772 = bitcast i32* %771 to <4 x i32>*
  store <4 x i32> %769, <4 x i32>* %772, align 4, !tbaa !9
  %773 = getelementptr inbounds i32, i32* %771, i64 4
  %774 = bitcast i32* %773 to <4 x i32>*
  store <4 x i32> %770, <4 x i32>* %774, align 4, !tbaa !9
  %775 = add nuw i64 %746, 16
  %776 = add i64 %747, 2
  %777 = icmp eq i64 %776, %744
  br i1 %777, label %778, label %745, !llvm.loop !125

778:                                              ; preds = %745, %738
  %779 = phi i64 [ 0, %738 ], [ %775, %745 ]
  %780 = icmp eq i64 %741, 0
  br i1 %780, label %795, label %781

781:                                              ; preds = %778
  %782 = add i64 %379, %779
  %783 = getelementptr inbounds i8, i8* %2, i64 %782
  %784 = bitcast i8* %783 to <4 x i8>*
  %785 = load <4 x i8>, <4 x i8>* %784, align 1, !tbaa !14
  %786 = getelementptr inbounds i8, i8* %783, i64 4
  %787 = bitcast i8* %786 to <4 x i8>*
  %788 = load <4 x i8>, <4 x i8>* %787, align 1, !tbaa !14
  %789 = zext <4 x i8> %785 to <4 x i32>
  %790 = zext <4 x i8> %788 to <4 x i32>
  %791 = getelementptr inbounds i32, i32* %734, i64 %779
  %792 = bitcast i32* %791 to <4 x i32>*
  store <4 x i32> %789, <4 x i32>* %792, align 4, !tbaa !9
  %793 = getelementptr inbounds i32, i32* %791, i64 4
  %794 = bitcast i32* %793 to <4 x i32>*
  store <4 x i32> %790, <4 x i32>* %794, align 4, !tbaa !9
  br label %795

795:                                              ; preds = %778, %781
  %796 = icmp eq i64 %376, %739
  br i1 %796, label %808, label %797

797:                                              ; preds = %736, %795
  %798 = phi i64 [ %379, %736 ], [ %740, %795 ]
  br label %799

799:                                              ; preds = %797, %799
  %800 = phi i64 [ %806, %799 ], [ %798, %797 ]
  %801 = getelementptr inbounds i8, i8* %2, i64 %800
  %802 = load i8, i8* %801, align 1, !tbaa !14
  %803 = zext i8 %802 to i32
  %804 = sub nuw i64 %800, %379
  %805 = getelementptr inbounds i32, i32* %734, i64 %804
  store i32 %803, i32* %805, align 4, !tbaa !9
  %806 = add nuw i64 %800, 1
  %807 = icmp eq i64 %806, %382
  br i1 %807, label %808, label %799, !llvm.loop !126

808:                                              ; preds = %799, %795, %733, %723
  %809 = phi i64 [ %724, %723 ], [ %701, %733 ], [ %701, %795 ], [ %701, %799 ]
  %810 = icmp eq i64 %809, 0
  br i1 %810, label %835, label %811

811:                                              ; preds = %808
  %812 = load i32*, i32** %316, align 8, !tbaa !112
  br label %813

813:                                              ; preds = %831, %811
  %814 = phi i64 [ 0, %811 ], [ %833, %831 ]
  %815 = getelementptr inbounds i32, i32* %812, i64 %814
  %816 = load i32, i32* %815, align 4, !tbaa !9
  %817 = zext i32 %816 to i64
  %818 = getelementptr inbounds i32, i32* %703, i64 %817
  %819 = load i32, i32* %818, align 4, !tbaa !9
  %820 = add i32 %819, 1
  store i32 %820, i32* %818, align 4, !tbaa !9
  %821 = icmp ugt i32 %816, 256
  br i1 %821, label %822, label %831

822:                                              ; preds = %813
  %823 = add i64 %814, 2
  %824 = getelementptr inbounds i32, i32* %812, i64 %823
  %825 = load i32, i32* %824, align 4, !tbaa !9
  %826 = zext i32 %825 to i64
  %827 = getelementptr inbounds i32, i32* %705, i64 %826
  %828 = load i32, i32* %827, align 4, !tbaa !9
  %829 = add i32 %828, 1
  store i32 %829, i32* %827, align 4, !tbaa !9
  %830 = add i64 %814, 3
  br label %831

831:                                              ; preds = %822, %813
  %832 = phi i64 [ %830, %822 ], [ %814, %813 ]
  %833 = add i64 %832, 1
  %834 = icmp eq i64 %833, %809
  br i1 %834, label %835, label %813

835:                                              ; preds = %831, %808
  %836 = getelementptr inbounds i8, i8* %702, i64 1024
  %837 = bitcast i8* %836 to i32*
  store i32 1, i32* %837, align 4, !tbaa !9
  br label %838

838:                                              ; preds = %838, %835
  %839 = phi i64 [ 286, %835 ], [ %840, %838 ]
  %840 = add nsw i64 %839, -1
  %841 = getelementptr inbounds i32, i32* %703, i64 %840
  %842 = load i32, i32* %841, align 4, !tbaa !9
  %843 = icmp eq i32 %842, 0
  %844 = icmp ugt i64 %839, 257
  %845 = select i1 %843, i1 %844, i1 false
  br i1 %845, label %838, label %846

846:                                              ; preds = %838
  %847 = shl i64 %839, 2
  %848 = call noalias i8* @malloc(i64 noundef %847) #25
  store i8* %848, i8** %318, align 8, !tbaa !53
  %849 = icmp eq i8* %848, null
  br i1 %849, label %2578, label %850

850:                                              ; preds = %846
  %851 = bitcast i8* %848 to i32*
  store i32 15, i32* %319, align 8, !tbaa !56
  %852 = trunc i64 %839 to i32
  store i32 %852, i32* %320, align 4, !tbaa !55
  %853 = call noundef i32 @_Z28lodepng_huffman_code_lengthsPjPKjmj(i32* noundef nonnull %851, i32* noundef nonnull %703, i64 noundef %839, i32 noundef 15) #25, !range !127
  %854 = icmp eq i32 %853, 0
  br i1 %854, label %855, label %2578

855:                                              ; preds = %850
  %856 = call fastcc noundef i32 @_ZL28HuffmanTree_makeFromLengths2P11HuffmanTree(%struct.HuffmanTree* noundef nonnull %7) #25
  %857 = icmp eq i32 %856, 0
  br i1 %857, label %858, label %2578

858:                                              ; preds = %855, %858
  %859 = phi i64 [ %860, %858 ], [ 30, %855 ]
  %860 = add nsw i64 %859, -1
  %861 = getelementptr inbounds i32, i32* %705, i64 %860
  %862 = load i32, i32* %861, align 4, !tbaa !9
  %863 = icmp eq i32 %862, 0
  %864 = icmp ugt i64 %859, 2
  %865 = select i1 %863, i1 %864, i1 false
  br i1 %865, label %858, label %866

866:                                              ; preds = %858
  %867 = shl i64 %859, 2
  %868 = call noalias i8* @malloc(i64 noundef %867) #25
  store i8* %868, i8** %322, align 8, !tbaa !53
  %869 = icmp eq i8* %868, null
  br i1 %869, label %2578, label %870

870:                                              ; preds = %866
  %871 = bitcast i8* %868 to i32*
  store i32 15, i32* %323, align 8, !tbaa !56
  %872 = trunc i64 %859 to i32
  store i32 %872, i32* %324, align 4, !tbaa !55
  %873 = call noundef i32 @_Z28lodepng_huffman_code_lengthsPjPKjmj(i32* noundef nonnull %871, i32* noundef nonnull %705, i64 noundef %859, i32 noundef 15) #25, !range !127
  %874 = icmp eq i32 %873, 0
  br i1 %874, label %875, label %2578

875:                                              ; preds = %870
  %876 = call fastcc noundef i32 @_ZL28HuffmanTree_makeFromLengths2P11HuffmanTree(%struct.HuffmanTree* noundef nonnull %8) #25
  %877 = icmp eq i32 %876, 0
  br i1 %877, label %878, label %2578

878:                                              ; preds = %875
  %879 = load i32, i32* %320, align 4, !tbaa !55
  %880 = icmp ult i32 %879, 286
  %881 = select i1 %880, i32 %879, i32 286
  %882 = zext i32 %881 to i64
  %883 = load i32, i32* %324, align 4, !tbaa !55
  %884 = icmp ult i32 %883, 30
  %885 = select i1 %884, i32 %883, i32 30
  %886 = zext i32 %885 to i64
  %887 = add nuw nsw i64 %886, %882
  %888 = shl nuw nsw i64 %887, 2
  %889 = call noalias i8* @malloc(i64 noundef %888) #25
  %890 = bitcast i8* %889 to i32*
  %891 = call noalias i8* @malloc(i64 noundef %888) #25
  %892 = bitcast i8* %891 to i32*
  %893 = icmp ne i8* %889, null
  %894 = icmp ne i8* %891, null
  %895 = and i1 %893, %894
  br i1 %895, label %896, label %2578

896:                                              ; preds = %878
  %897 = icmp eq i32 %881, 0
  br i1 %897, label %901, label %898

898:                                              ; preds = %896
  %899 = load i8*, i8** %318, align 8, !tbaa !53
  %900 = shl nuw nsw i64 %882, 2
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %889, i8* align 4 %899, i64 %900, i1 false) #25, !tbaa !9
  br label %901

901:                                              ; preds = %898, %896
  %902 = icmp eq i32 %885, 0
  br i1 %902, label %908, label %903

903:                                              ; preds = %901
  %904 = load i8*, i8** %322, align 8, !tbaa !53
  %905 = shl nuw nsw i64 %882, 2
  %906 = getelementptr i8, i8* %889, i64 %905
  %907 = shl nuw nsw i64 %886, 2
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %906, i8* align 4 %904, i64 %907, i1 false) #25, !tbaa !9
  br label %908

908:                                              ; preds = %903, %901
  %909 = icmp eq i64 %887, 0
  br i1 %909, label %1113, label %910

910:                                              ; preds = %908
  %911 = getelementptr i8, i8* %891, i64 4
  %912 = getelementptr i8, i8* %891, i64 8
  %913 = getelementptr inbounds i32, i32* %892, i64 -1
  %914 = getelementptr inbounds i32, i32* %892, i64 -1
  %915 = getelementptr inbounds i32, i32* %892, i64 -1
  %916 = getelementptr inbounds i32, i32* %892, i64 -1
  %917 = getelementptr inbounds i32, i32* %892, i64 -1
  %918 = getelementptr inbounds i32, i32* %892, i64 -1
  br label %919

919:                                              ; preds = %910, %1095
  %920 = phi i64 [ %1098, %1095 ], [ 0, %910 ]
  %921 = phi i64 [ %1096, %1095 ], [ 0, %910 ]
  %922 = add i64 %920, 1
  %923 = icmp ult i64 %922, %887
  %924 = getelementptr inbounds i32, i32* %890, i64 %920
  %925 = load i32, i32* %924, align 4, !tbaa !9
  br i1 %923, label %928, label %1092

926:                                              ; preds = %1095
  %927 = icmp eq i64 %1096, 0
  br i1 %927, label %1113, label %1100

928:                                              ; preds = %919, %934
  %929 = phi i64 [ %937, %934 ], [ %922, %919 ]
  %930 = phi i32 [ %935, %934 ], [ 0, %919 ]
  %931 = getelementptr inbounds i32, i32* %890, i64 %929
  %932 = load i32, i32* %931, align 4, !tbaa !9
  %933 = icmp eq i32 %932, %925
  br i1 %933, label %934, label %939

934:                                              ; preds = %928
  %935 = add i32 %930, 1
  %936 = zext i32 %935 to i64
  %937 = add i64 %922, %936
  %938 = icmp ult i64 %937, %887
  br i1 %938, label %928, label %939

939:                                              ; preds = %934, %928
  %940 = phi i32 [ %930, %928 ], [ %935, %934 ]
  %941 = icmp eq i32 %925, 0
  %942 = icmp ugt i32 %940, 1
  %943 = select i1 %941, i1 %942, i1 false
  br i1 %943, label %944, label %961

944:                                              ; preds = %939
  %945 = add i32 %940, 1
  %946 = icmp ult i32 %945, 11
  %947 = add nsw i32 %940, -2
  %948 = icmp ult i32 %945, 138
  %949 = select i1 %948, i32 %945, i32 138
  %950 = add nsw i32 %949, -11
  %951 = select i1 %946, i32 17, i32 18
  %952 = select i1 %946, i32 %947, i32 %950
  %953 = select i1 %946, i32 %945, i32 %949
  %954 = getelementptr inbounds i32, i32* %892, i64 %921
  store i32 %951, i32* %954, align 4
  %955 = add i64 %921, 1
  %956 = getelementptr inbounds i32, i32* %892, i64 %955
  store i32 %952, i32* %956, align 4, !tbaa !9
  %957 = add i64 %921, 2
  %958 = add nsw i32 %953, -1
  %959 = zext i32 %958 to i64
  %960 = add i64 %920, %959
  br label %1095

961:                                              ; preds = %939
  %962 = icmp ugt i32 %940, 2
  br i1 %962, label %963, label %1092

963:                                              ; preds = %961
  %964 = urem i32 %940, 6
  %965 = udiv i32 %940, 6
  %966 = getelementptr inbounds i32, i32* %892, i64 %921
  store i32 %925, i32* %966, align 4, !tbaa !9
  %967 = add i64 %921, 1
  %968 = icmp ult i32 %940, 6
  br i1 %968, label %1075, label %969

969:                                              ; preds = %963
  %970 = zext i32 %965 to i64
  %971 = icmp ult i32 %940, 24
  br i1 %971, label %1040, label %972

972:                                              ; preds = %969
  %973 = add nsw i64 %970, -1
  %974 = shl i64 %921, 2
  %975 = getelementptr i8, i8* %911, i64 %974
  %976 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %973, i64 8)
  %977 = extractvalue { i64, i1 } %976, 0
  %978 = extractvalue { i64, i1 } %976, 1
  %979 = getelementptr i8, i8* %975, i64 %977
  %980 = icmp ult i8* %979, %975
  %981 = or i1 %980, %978
  %982 = getelementptr i8, i8* %912, i64 %974
  %983 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %973, i64 8)
  %984 = extractvalue { i64, i1 } %983, 0
  %985 = extractvalue { i64, i1 } %983, 1
  %986 = getelementptr i8, i8* %982, i64 %984
  %987 = icmp ult i8* %986, %982
  %988 = or i1 %987, %985
  %989 = or i1 %981, %988
  br i1 %989, label %1040, label %990

990:                                              ; preds = %972
  %991 = and i64 %970, 1073741820
  %992 = shl nuw nsw i64 %991, 1
  %993 = add i64 %967, %992
  %994 = shl nuw nsw i64 %991, 1
  %995 = add i64 %921, %994
  %996 = add nsw i64 %991, -4
  %997 = lshr exact i64 %996, 2
  %998 = add nuw nsw i64 %997, 1
  %999 = and i64 %998, 1
  %1000 = icmp eq i64 %996, 0
  br i1 %1000, label %1026, label %1001

1001:                                             ; preds = %990
  %1002 = and i64 %998, 9223372036854775806
  br label %1003

1003:                                             ; preds = %1003, %1001
  %1004 = phi i64 [ 0, %1001 ], [ %1023, %1003 ]
  %1005 = phi i64 [ 0, %1001 ], [ %1024, %1003 ]
  %1006 = shl i64 %1004, 1
  %1007 = add i64 %921, %1006
  %1008 = add i64 %1007, 2
  %1009 = add i64 %1007, 6
  %1010 = getelementptr inbounds i32, i32* %913, i64 %1008
  %1011 = bitcast i32* %1010 to <4 x i32>*
  %1012 = getelementptr inbounds i32, i32* %914, i64 %1009
  %1013 = bitcast i32* %1012 to <4 x i32>*
  store <4 x i32> <i32 16, i32 3, i32 16, i32 3>, <4 x i32>* %1011, align 4, !tbaa !9
  store <4 x i32> <i32 16, i32 3, i32 16, i32 3>, <4 x i32>* %1013, align 4, !tbaa !9
  %1014 = shl i64 %1004, 1
  %1015 = or i64 %1014, 8
  %1016 = add i64 %921, %1015
  %1017 = add i64 %1016, 2
  %1018 = add i64 %1016, 6
  %1019 = getelementptr inbounds i32, i32* %915, i64 %1017
  %1020 = bitcast i32* %1019 to <4 x i32>*
  %1021 = getelementptr inbounds i32, i32* %916, i64 %1018
  %1022 = bitcast i32* %1021 to <4 x i32>*
  store <4 x i32> <i32 16, i32 3, i32 16, i32 3>, <4 x i32>* %1020, align 4, !tbaa !9
  store <4 x i32> <i32 16, i32 3, i32 16, i32 3>, <4 x i32>* %1022, align 4, !tbaa !9
  %1023 = add nuw i64 %1004, 8
  %1024 = add i64 %1005, 2
  %1025 = icmp eq i64 %1024, %1002
  br i1 %1025, label %1026, label %1003, !llvm.loop !128

1026:                                             ; preds = %1003, %990
  %1027 = phi i64 [ 0, %990 ], [ %1023, %1003 ]
  %1028 = icmp eq i64 %999, 0
  br i1 %1028, label %1038, label %1029

1029:                                             ; preds = %1026
  %1030 = shl i64 %1027, 1
  %1031 = add i64 %921, %1030
  %1032 = add i64 %1031, 2
  %1033 = add i64 %1031, 6
  %1034 = getelementptr inbounds i32, i32* %917, i64 %1032
  %1035 = bitcast i32* %1034 to <4 x i32>*
  %1036 = getelementptr inbounds i32, i32* %918, i64 %1033
  %1037 = bitcast i32* %1036 to <4 x i32>*
  store <4 x i32> <i32 16, i32 3, i32 16, i32 3>, <4 x i32>* %1035, align 4, !tbaa !9
  store <4 x i32> <i32 16, i32 3, i32 16, i32 3>, <4 x i32>* %1037, align 4, !tbaa !9
  br label %1038

1038:                                             ; preds = %1026, %1029
  %1039 = icmp eq i64 %991, %970
  br i1 %1039, label %1075, label %1040

1040:                                             ; preds = %972, %969, %1038
  %1041 = phi i64 [ %967, %972 ], [ %967, %969 ], [ %993, %1038 ]
  %1042 = phi i64 [ 0, %972 ], [ 0, %969 ], [ %991, %1038 ]
  %1043 = phi i64 [ %921, %972 ], [ %921, %969 ], [ %995, %1038 ]
  %1044 = xor i64 %1042, -1
  %1045 = and i64 %970, 1
  %1046 = icmp eq i64 %1045, 0
  br i1 %1046, label %1053, label %1047

1047:                                             ; preds = %1040
  %1048 = add i64 %1043, 2
  %1049 = getelementptr inbounds i32, i32* %892, i64 %1041
  store i32 16, i32* %1049, align 4, !tbaa !9
  %1050 = getelementptr inbounds i32, i32* %892, i64 %1048
  store i32 3, i32* %1050, align 4, !tbaa !9
  %1051 = or i64 %1042, 1
  %1052 = add i64 %1043, 3
  br label %1053

1053:                                             ; preds = %1047, %1040
  %1054 = phi i64 [ undef, %1040 ], [ %1048, %1047 ]
  %1055 = phi i64 [ undef, %1040 ], [ %1052, %1047 ]
  %1056 = phi i64 [ %1041, %1040 ], [ %1052, %1047 ]
  %1057 = phi i64 [ %1042, %1040 ], [ %1051, %1047 ]
  %1058 = phi i64 [ %1043, %1040 ], [ %1048, %1047 ]
  %1059 = sub nsw i64 0, %970
  %1060 = icmp eq i64 %1044, %1059
  br i1 %1060, label %1075, label %1061

1061:                                             ; preds = %1053, %1061
  %1062 = phi i64 [ %1073, %1061 ], [ %1056, %1053 ]
  %1063 = phi i64 [ %1072, %1061 ], [ %1057, %1053 ]
  %1064 = phi i64 [ %1069, %1061 ], [ %1058, %1053 ]
  %1065 = add i64 %1064, 2
  %1066 = getelementptr inbounds i32, i32* %892, i64 %1062
  store i32 16, i32* %1066, align 4, !tbaa !9
  %1067 = getelementptr inbounds i32, i32* %892, i64 %1065
  store i32 3, i32* %1067, align 4, !tbaa !9
  %1068 = add i64 %1064, 3
  %1069 = add i64 %1064, 4
  %1070 = getelementptr inbounds i32, i32* %892, i64 %1068
  store i32 16, i32* %1070, align 4, !tbaa !9
  %1071 = getelementptr inbounds i32, i32* %892, i64 %1069
  store i32 3, i32* %1071, align 4, !tbaa !9
  %1072 = add nuw nsw i64 %1063, 2
  %1073 = add i64 %1064, 5
  %1074 = icmp eq i64 %1072, %970
  br i1 %1074, label %1075, label %1061, !llvm.loop !129

1075:                                             ; preds = %1053, %1061, %1038, %963
  %1076 = phi i64 [ %921, %963 ], [ %995, %1038 ], [ %1054, %1053 ], [ %1069, %1061 ]
  %1077 = phi i64 [ %967, %963 ], [ %993, %1038 ], [ %1055, %1053 ], [ %1073, %1061 ]
  %1078 = icmp ugt i32 %964, 2
  br i1 %1078, label %1079, label %1085

1079:                                             ; preds = %1075
  %1080 = add i64 %1076, 2
  %1081 = getelementptr inbounds i32, i32* %892, i64 %1077
  store i32 16, i32* %1081, align 4, !tbaa !9
  %1082 = add nsw i32 %964, -3
  %1083 = add i64 %1076, 3
  %1084 = getelementptr inbounds i32, i32* %892, i64 %1080
  store i32 %1082, i32* %1084, align 4, !tbaa !9
  br label %1087

1085:                                             ; preds = %1075
  %1086 = sub i32 %940, %964
  br label %1087

1087:                                             ; preds = %1085, %1079
  %1088 = phi i64 [ %1083, %1079 ], [ %1077, %1085 ]
  %1089 = phi i32 [ %940, %1079 ], [ %1086, %1085 ]
  %1090 = zext i32 %1089 to i64
  %1091 = add i64 %920, %1090
  br label %1095

1092:                                             ; preds = %961, %919
  %1093 = add i64 %921, 1
  %1094 = getelementptr inbounds i32, i32* %892, i64 %921
  store i32 %925, i32* %1094, align 4, !tbaa !9
  br label %1095

1095:                                             ; preds = %1092, %1087, %944
  %1096 = phi i64 [ %957, %944 ], [ %1088, %1087 ], [ %1093, %1092 ]
  %1097 = phi i64 [ %960, %944 ], [ %1091, %1087 ], [ %920, %1092 ]
  %1098 = add i64 %1097, 1
  %1099 = icmp eq i64 %1098, %887
  br i1 %1099, label %926, label %919

1100:                                             ; preds = %926, %1100
  %1101 = phi i64 [ %1111, %1100 ], [ 0, %926 ]
  %1102 = getelementptr inbounds i32, i32* %892, i64 %1101
  %1103 = load i32, i32* %1102, align 4, !tbaa !9
  %1104 = zext i32 %1103 to i64
  %1105 = getelementptr inbounds i32, i32* %707, i64 %1104
  %1106 = load i32, i32* %1105, align 4, !tbaa !9
  %1107 = add i32 %1106, 1
  store i32 %1107, i32* %1105, align 4, !tbaa !9
  %1108 = icmp ugt i32 %1103, 15
  %1109 = zext i1 %1108 to i64
  %1110 = add i64 %1101, 1
  %1111 = add i64 %1110, %1109
  %1112 = icmp eq i64 %1111, %1096
  br i1 %1112, label %1113, label %1100

1113:                                             ; preds = %1100, %926, %908
  %1114 = phi i1 [ true, %926 ], [ true, %908 ], [ false, %1100 ]
  %1115 = phi i64 [ 0, %926 ], [ 0, %908 ], [ %1096, %1100 ]
  %1116 = call noalias dereferenceable_or_null(76) i8* @malloc(i64 noundef 76) #25
  store i8* %1116, i8** %326, align 8, !tbaa !53
  %1117 = icmp eq i8* %1116, null
  br i1 %1117, label %2578, label %1118

1118:                                             ; preds = %1113
  %1119 = bitcast i8* %1116 to i32*
  store i32 7, i32* %327, align 8, !tbaa !56
  store i32 19, i32* %328, align 4, !tbaa !55
  %1120 = call noundef i32 @_Z28lodepng_huffman_code_lengthsPjPKjmj(i32* noundef nonnull %1119, i32* noundef nonnull %707, i64 noundef 19, i32 noundef 7) #25, !range !127
  %1121 = icmp eq i32 %1120, 0
  br i1 %1121, label %1122, label %2578

1122:                                             ; preds = %1118
  %1123 = call fastcc noundef i32 @_ZL28HuffmanTree_makeFromLengths2P11HuffmanTree(%struct.HuffmanTree* noundef nonnull %9) #25
  %1124 = icmp eq i32 %1123, 0
  br i1 %1124, label %1127, label %1125

1125:                                             ; preds = %1122
  %1126 = load i8*, i8** %326, align 8, !tbaa !53
  br label %2578

1127:                                             ; preds = %1122
  %1128 = load i32*, i32** %325, align 8
  %1129 = getelementptr inbounds i32, i32* %1128, i64 15
  %1130 = load i32, i32* %1129, align 4, !tbaa !9
  %1131 = icmp eq i32 %1130, 0
  %1132 = bitcast i32* %1128 to i8*
  br i1 %1131, label %1133, label %1190

1133:                                             ; preds = %1127
  %1134 = getelementptr inbounds i32, i32* %1128, i64 1
  %1135 = load i32, i32* %1134, align 4, !tbaa !9
  %1136 = icmp eq i32 %1135, 0
  br i1 %1136, label %1137, label %1190

1137:                                             ; preds = %1133
  %1138 = getelementptr inbounds i32, i32* %1128, i64 14
  %1139 = load i32, i32* %1138, align 4, !tbaa !9
  %1140 = icmp eq i32 %1139, 0
  br i1 %1140, label %1141, label %1190

1141:                                             ; preds = %1137
  %1142 = getelementptr inbounds i32, i32* %1128, i64 2
  %1143 = load i32, i32* %1142, align 4, !tbaa !9
  %1144 = icmp eq i32 %1143, 0
  br i1 %1144, label %1145, label %1190

1145:                                             ; preds = %1141
  %1146 = getelementptr inbounds i32, i32* %1128, i64 13
  %1147 = load i32, i32* %1146, align 4, !tbaa !9
  %1148 = icmp eq i32 %1147, 0
  br i1 %1148, label %1149, label %1190

1149:                                             ; preds = %1145
  %1150 = getelementptr inbounds i32, i32* %1128, i64 3
  %1151 = load i32, i32* %1150, align 4, !tbaa !9
  %1152 = icmp eq i32 %1151, 0
  br i1 %1152, label %1153, label %1190

1153:                                             ; preds = %1149
  %1154 = getelementptr inbounds i32, i32* %1128, i64 12
  %1155 = load i32, i32* %1154, align 4, !tbaa !9
  %1156 = icmp eq i32 %1155, 0
  br i1 %1156, label %1157, label %1190

1157:                                             ; preds = %1153
  %1158 = getelementptr inbounds i32, i32* %1128, i64 4
  %1159 = load i32, i32* %1158, align 4, !tbaa !9
  %1160 = icmp eq i32 %1159, 0
  br i1 %1160, label %1161, label %1190

1161:                                             ; preds = %1157
  %1162 = getelementptr inbounds i32, i32* %1128, i64 11
  %1163 = load i32, i32* %1162, align 4, !tbaa !9
  %1164 = icmp eq i32 %1163, 0
  br i1 %1164, label %1165, label %1190

1165:                                             ; preds = %1161
  %1166 = getelementptr inbounds i32, i32* %1128, i64 5
  %1167 = load i32, i32* %1166, align 4, !tbaa !9
  %1168 = icmp eq i32 %1167, 0
  br i1 %1168, label %1169, label %1190

1169:                                             ; preds = %1165
  %1170 = getelementptr inbounds i32, i32* %1128, i64 10
  %1171 = load i32, i32* %1170, align 4, !tbaa !9
  %1172 = icmp eq i32 %1171, 0
  br i1 %1172, label %1173, label %1190

1173:                                             ; preds = %1169
  %1174 = getelementptr inbounds i32, i32* %1128, i64 6
  %1175 = load i32, i32* %1174, align 4, !tbaa !9
  %1176 = icmp eq i32 %1175, 0
  br i1 %1176, label %1177, label %1190

1177:                                             ; preds = %1173
  %1178 = getelementptr inbounds i32, i32* %1128, i64 9
  %1179 = load i32, i32* %1178, align 4, !tbaa !9
  %1180 = icmp eq i32 %1179, 0
  br i1 %1180, label %1181, label %1190

1181:                                             ; preds = %1177
  %1182 = getelementptr inbounds i32, i32* %1128, i64 7
  %1183 = load i32, i32* %1182, align 4, !tbaa !9
  %1184 = icmp eq i32 %1183, 0
  br i1 %1184, label %1185, label %1190

1185:                                             ; preds = %1181
  %1186 = getelementptr inbounds i32, i32* %1128, i64 8
  %1187 = load i32, i32* %1186, align 4, !tbaa !9
  %1188 = icmp eq i32 %1187, 0
  %1189 = select i1 %1188, i64 4, i64 5
  br label %1190

1190:                                             ; preds = %1185, %1181, %1177, %1173, %1169, %1165, %1161, %1157, %1153, %1149, %1145, %1141, %1137, %1133, %1127
  %1191 = phi i64 [ 19, %1127 ], [ 18, %1133 ], [ 17, %1137 ], [ 16, %1141 ], [ 15, %1145 ], [ 14, %1149 ], [ 13, %1153 ], [ 12, %1157 ], [ 11, %1161 ], [ 10, %1165 ], [ 9, %1169 ], [ 8, %1173 ], [ 7, %1177 ], [ 6, %1181 ], [ %1189, %1185 ]
  %1192 = load i8, i8* %25, align 8, !tbaa !84
  %1193 = and i8 %1192, 7
  %1194 = icmp eq i8 %1193, 0
  br i1 %1194, label %1195, label %1222

1195:                                             ; preds = %1190
  %1196 = load %struct.ucvector*, %struct.ucvector** %24, align 8, !tbaa !82
  %1197 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %1196, i64 0, i32 1
  %1198 = load i64, i64* %1197, align 8, !tbaa !44
  %1199 = add i64 %1198, 1
  store i64 %1199, i64* %1197, align 8, !tbaa !44
  %1200 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %1196, i64 0, i32 2
  %1201 = load i64, i64* %1200, align 8, !tbaa !45
  %1202 = icmp ult i64 %1201, %1199
  br i1 %1202, label %1206, label %1203

1203:                                             ; preds = %1195
  %1204 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %1196, i64 0, i32 0
  %1205 = load i8*, i8** %1204, align 8, !tbaa !39
  br label %1215

1206:                                             ; preds = %1195
  %1207 = lshr i64 %1201, 1
  %1208 = add i64 %1207, %1199
  %1209 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %1196, i64 0, i32 0
  %1210 = load i8*, i8** %1209, align 8, !tbaa !39
  %1211 = call i8* @realloc(i8* noundef %1210, i64 noundef %1208) #25
  %1212 = icmp eq i8* %1211, null
  br i1 %1212, label %1238, label %1213

1213:                                             ; preds = %1206
  store i64 %1208, i64* %1200, align 8, !tbaa !45
  store i8* %1211, i8** %1209, align 8, !tbaa !39
  %1214 = load i64, i64* %1197, align 8, !tbaa !44
  br label %1215

1215:                                             ; preds = %1213, %1203
  %1216 = phi i8* [ %1211, %1213 ], [ %1205, %1203 ]
  %1217 = phi i64 [ %1214, %1213 ], [ %1199, %1203 ]
  %1218 = add i64 %1217, -1
  %1219 = getelementptr inbounds i8, i8* %1216, i64 %1218
  store i8 0, i8* %1219, align 1, !tbaa !14
  %1220 = load i8, i8* %25, align 8, !tbaa !84
  %1221 = and i8 %1220, 7
  br label %1222

1222:                                             ; preds = %1215, %1190
  %1223 = phi i8 [ %1221, %1215 ], [ %1193, %1190 ]
  %1224 = zext i8 %1223 to i32
  %1225 = shl i32 %378, %1224
  %1226 = load %struct.ucvector*, %struct.ucvector** %24, align 8, !tbaa !82
  %1227 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %1226, i64 0, i32 0
  %1228 = load i8*, i8** %1227, align 8, !tbaa !39
  %1229 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %1226, i64 0, i32 1
  %1230 = load i64, i64* %1229, align 8, !tbaa !44
  %1231 = add i64 %1230, -1
  %1232 = getelementptr inbounds i8, i8* %1228, i64 %1231
  %1233 = load i8, i8* %1232, align 1, !tbaa !14
  %1234 = trunc i32 %1225 to i8
  %1235 = or i8 %1233, %1234
  store i8 %1235, i8* %1232, align 1, !tbaa !14
  %1236 = load i8, i8* %25, align 8, !tbaa !84
  %1237 = add i8 %1236, 1
  store i8 %1237, i8* %25, align 8, !tbaa !84
  br label %1238

1238:                                             ; preds = %1222, %1206
  %1239 = phi i8 [ %1192, %1206 ], [ %1237, %1222 ]
  %1240 = and i8 %1239, 7
  %1241 = icmp eq i8 %1240, 0
  br i1 %1241, label %1242, label %1268

1242:                                             ; preds = %1238
  %1243 = load %struct.ucvector*, %struct.ucvector** %24, align 8, !tbaa !82
  %1244 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %1243, i64 0, i32 1
  %1245 = load i64, i64* %1244, align 8, !tbaa !44
  %1246 = add i64 %1245, 1
  store i64 %1246, i64* %1244, align 8, !tbaa !44
  %1247 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %1243, i64 0, i32 2
  %1248 = load i64, i64* %1247, align 8, !tbaa !45
  %1249 = icmp ult i64 %1248, %1246
  br i1 %1249, label %1253, label %1250

1250:                                             ; preds = %1242
  %1251 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %1243, i64 0, i32 0
  %1252 = load i8*, i8** %1251, align 8, !tbaa !39
  br label %1262

1253:                                             ; preds = %1242
  %1254 = lshr i64 %1248, 1
  %1255 = add i64 %1254, %1246
  %1256 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %1243, i64 0, i32 0
  %1257 = load i8*, i8** %1256, align 8, !tbaa !39
  %1258 = call i8* @realloc(i8* noundef %1257, i64 noundef %1255) #25
  %1259 = icmp eq i8* %1258, null
  br i1 %1259, label %1271, label %1260

1260:                                             ; preds = %1253
  store i64 %1255, i64* %1247, align 8, !tbaa !45
  store i8* %1258, i8** %1256, align 8, !tbaa !39
  %1261 = load i64, i64* %1244, align 8, !tbaa !44
  br label %1262

1262:                                             ; preds = %1260, %1250
  %1263 = phi i8* [ %1258, %1260 ], [ %1252, %1250 ]
  %1264 = phi i64 [ %1261, %1260 ], [ %1246, %1250 ]
  %1265 = add i64 %1264, -1
  %1266 = getelementptr inbounds i8, i8* %1263, i64 %1265
  store i8 0, i8* %1266, align 1, !tbaa !14
  %1267 = load i8, i8* %25, align 8, !tbaa !84
  br label %1268

1268:                                             ; preds = %1262, %1238
  %1269 = phi i8 [ %1267, %1262 ], [ %1239, %1238 ]
  %1270 = add i8 %1269, 1
  store i8 %1270, i8* %25, align 8, !tbaa !84
  br label %1271

1271:                                             ; preds = %1268, %1253
  %1272 = phi i8 [ %1239, %1253 ], [ %1270, %1268 ]
  %1273 = and i8 %1272, 7
  %1274 = icmp eq i8 %1273, 0
  br i1 %1274, label %1275, label %1302

1275:                                             ; preds = %1271
  %1276 = load %struct.ucvector*, %struct.ucvector** %24, align 8, !tbaa !82
  %1277 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %1276, i64 0, i32 1
  %1278 = load i64, i64* %1277, align 8, !tbaa !44
  %1279 = add i64 %1278, 1
  store i64 %1279, i64* %1277, align 8, !tbaa !44
  %1280 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %1276, i64 0, i32 2
  %1281 = load i64, i64* %1280, align 8, !tbaa !45
  %1282 = icmp ult i64 %1281, %1279
  br i1 %1282, label %1286, label %1283

1283:                                             ; preds = %1275
  %1284 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %1276, i64 0, i32 0
  %1285 = load i8*, i8** %1284, align 8, !tbaa !39
  br label %1295

1286:                                             ; preds = %1275
  %1287 = lshr i64 %1281, 1
  %1288 = add i64 %1287, %1279
  %1289 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %1276, i64 0, i32 0
  %1290 = load i8*, i8** %1289, align 8, !tbaa !39
  %1291 = call i8* @realloc(i8* noundef %1290, i64 noundef %1288) #25
  %1292 = icmp eq i8* %1291, null
  br i1 %1292, label %1316, label %1293

1293:                                             ; preds = %1286
  store i64 %1288, i64* %1280, align 8, !tbaa !45
  store i8* %1291, i8** %1289, align 8, !tbaa !39
  %1294 = load i64, i64* %1277, align 8, !tbaa !44
  br label %1295

1295:                                             ; preds = %1293, %1283
  %1296 = phi i8* [ %1291, %1293 ], [ %1285, %1283 ]
  %1297 = phi i64 [ %1294, %1293 ], [ %1279, %1283 ]
  %1298 = add i64 %1297, -1
  %1299 = getelementptr inbounds i8, i8* %1296, i64 %1298
  store i8 0, i8* %1299, align 1, !tbaa !14
  %1300 = load i8, i8* %25, align 8, !tbaa !84
  %1301 = and i8 %1300, 7
  br label %1302

1302:                                             ; preds = %1295, %1271
  %1303 = phi i8 [ %1301, %1295 ], [ %1273, %1271 ]
  %1304 = shl nuw i8 1, %1303
  %1305 = load %struct.ucvector*, %struct.ucvector** %24, align 8, !tbaa !82
  %1306 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %1305, i64 0, i32 0
  %1307 = load i8*, i8** %1306, align 8, !tbaa !39
  %1308 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %1305, i64 0, i32 1
  %1309 = load i64, i64* %1308, align 8, !tbaa !44
  %1310 = add i64 %1309, -1
  %1311 = getelementptr inbounds i8, i8* %1307, i64 %1310
  %1312 = load i8, i8* %1311, align 1, !tbaa !14
  %1313 = or i8 %1312, %1304
  store i8 %1313, i8* %1311, align 1, !tbaa !14
  %1314 = load i8, i8* %25, align 8, !tbaa !84
  %1315 = add i8 %1314, 1
  store i8 %1315, i8* %25, align 8, !tbaa !84
  br label %1316

1316:                                             ; preds = %1302, %1286
  %1317 = phi i8 [ %1272, %1286 ], [ %1315, %1302 ]
  %1318 = add nsw i32 %881, -257
  %1319 = add nsw i32 %885, -1
  %1320 = trunc i64 %1191 to i32
  %1321 = add nsw i32 %1320, -4
  %1322 = and i8 %1317, 7
  %1323 = icmp eq i8 %1322, 0
  br i1 %1323, label %1324, label %1351

1324:                                             ; preds = %1316
  %1325 = load %struct.ucvector*, %struct.ucvector** %24, align 8, !tbaa !82
  %1326 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %1325, i64 0, i32 1
  %1327 = load i64, i64* %1326, align 8, !tbaa !44
  %1328 = add i64 %1327, 1
  store i64 %1328, i64* %1326, align 8, !tbaa !44
  %1329 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %1325, i64 0, i32 2
  %1330 = load i64, i64* %1329, align 8, !tbaa !45
  %1331 = icmp ult i64 %1330, %1328
  br i1 %1331, label %1335, label %1332

1332:                                             ; preds = %1324
  %1333 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %1325, i64 0, i32 0
  %1334 = load i8*, i8** %1333, align 8, !tbaa !39
  br label %1344

1335:                                             ; preds = %1324
  %1336 = lshr i64 %1330, 1
  %1337 = add i64 %1336, %1328
  %1338 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %1325, i64 0, i32 0
  %1339 = load i8*, i8** %1338, align 8, !tbaa !39
  %1340 = call i8* @realloc(i8* noundef %1339, i64 noundef %1337) #25
  %1341 = icmp eq i8* %1340, null
  br i1 %1341, label %1556, label %1342

1342:                                             ; preds = %1335
  store i64 %1337, i64* %1329, align 8, !tbaa !45
  store i8* %1340, i8** %1338, align 8, !tbaa !39
  %1343 = load i64, i64* %1326, align 8, !tbaa !44
  br label %1344

1344:                                             ; preds = %1342, %1332
  %1345 = phi i8* [ %1340, %1342 ], [ %1334, %1332 ]
  %1346 = phi i64 [ %1343, %1342 ], [ %1328, %1332 ]
  %1347 = add i64 %1346, -1
  %1348 = getelementptr inbounds i8, i8* %1345, i64 %1347
  store i8 0, i8* %1348, align 1, !tbaa !14
  %1349 = load i8, i8* %25, align 8, !tbaa !84
  %1350 = and i8 %1349, 7
  br label %1351

1351:                                             ; preds = %1344, %1316
  %1352 = phi i8 [ %1350, %1344 ], [ %1322, %1316 ]
  %1353 = and i32 %1318, 1
  %1354 = zext i8 %1352 to i32
  %1355 = shl nuw nsw i32 %1353, %1354
  %1356 = load %struct.ucvector*, %struct.ucvector** %24, align 8, !tbaa !82
  %1357 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %1356, i64 0, i32 0
  %1358 = load i8*, i8** %1357, align 8, !tbaa !39
  %1359 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %1356, i64 0, i32 1
  %1360 = load i64, i64* %1359, align 8, !tbaa !44
  %1361 = add i64 %1360, -1
  %1362 = getelementptr inbounds i8, i8* %1358, i64 %1361
  %1363 = load i8, i8* %1362, align 1, !tbaa !14
  %1364 = trunc i32 %1355 to i8
  %1365 = or i8 %1363, %1364
  store i8 %1365, i8* %1362, align 1, !tbaa !14
  %1366 = load i8, i8* %25, align 8, !tbaa !84
  %1367 = add i8 %1366, 1
  store i8 %1367, i8* %25, align 8, !tbaa !84
  %1368 = and i8 %1367, 7
  %1369 = icmp eq i8 %1368, 0
  br i1 %1369, label %1370, label %1397

1370:                                             ; preds = %1351
  %1371 = load %struct.ucvector*, %struct.ucvector** %24, align 8, !tbaa !82
  %1372 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %1371, i64 0, i32 1
  %1373 = load i64, i64* %1372, align 8, !tbaa !44
  %1374 = add i64 %1373, 1
  store i64 %1374, i64* %1372, align 8, !tbaa !44
  %1375 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %1371, i64 0, i32 2
  %1376 = load i64, i64* %1375, align 8, !tbaa !45
  %1377 = icmp ult i64 %1376, %1374
  br i1 %1377, label %1381, label %1378

1378:                                             ; preds = %1370
  %1379 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %1371, i64 0, i32 0
  %1380 = load i8*, i8** %1379, align 8, !tbaa !39
  br label %1390

1381:                                             ; preds = %1370
  %1382 = lshr i64 %1376, 1
  %1383 = add i64 %1382, %1374
  %1384 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %1371, i64 0, i32 0
  %1385 = load i8*, i8** %1384, align 8, !tbaa !39
  %1386 = call i8* @realloc(i8* noundef %1385, i64 noundef %1383) #25
  %1387 = icmp eq i8* %1386, null
  br i1 %1387, label %1556, label %1388

1388:                                             ; preds = %1381
  store i64 %1383, i64* %1375, align 8, !tbaa !45
  store i8* %1386, i8** %1384, align 8, !tbaa !39
  %1389 = load i64, i64* %1372, align 8, !tbaa !44
  br label %1390

1390:                                             ; preds = %1388, %1378
  %1391 = phi i8* [ %1386, %1388 ], [ %1380, %1378 ]
  %1392 = phi i64 [ %1389, %1388 ], [ %1374, %1378 ]
  %1393 = add i64 %1392, -1
  %1394 = getelementptr inbounds i8, i8* %1391, i64 %1393
  store i8 0, i8* %1394, align 1, !tbaa !14
  %1395 = load i8, i8* %25, align 8, !tbaa !84
  %1396 = and i8 %1395, 7
  br label %1397

1397:                                             ; preds = %1390, %1351
  %1398 = phi i8 [ %1396, %1390 ], [ %1368, %1351 ]
  %1399 = lshr i32 %1318, 1
  %1400 = and i32 %1399, 1
  %1401 = zext i8 %1398 to i32
  %1402 = shl nuw nsw i32 %1400, %1401
  %1403 = load %struct.ucvector*, %struct.ucvector** %24, align 8, !tbaa !82
  %1404 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %1403, i64 0, i32 0
  %1405 = load i8*, i8** %1404, align 8, !tbaa !39
  %1406 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %1403, i64 0, i32 1
  %1407 = load i64, i64* %1406, align 8, !tbaa !44
  %1408 = add i64 %1407, -1
  %1409 = getelementptr inbounds i8, i8* %1405, i64 %1408
  %1410 = load i8, i8* %1409, align 1, !tbaa !14
  %1411 = trunc i32 %1402 to i8
  %1412 = or i8 %1410, %1411
  store i8 %1412, i8* %1409, align 1, !tbaa !14
  %1413 = load i8, i8* %25, align 8, !tbaa !84
  %1414 = add i8 %1413, 1
  store i8 %1414, i8* %25, align 8, !tbaa !84
  %1415 = and i8 %1414, 7
  %1416 = icmp eq i8 %1415, 0
  br i1 %1416, label %1417, label %1444

1417:                                             ; preds = %1397
  %1418 = load %struct.ucvector*, %struct.ucvector** %24, align 8, !tbaa !82
  %1419 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %1418, i64 0, i32 1
  %1420 = load i64, i64* %1419, align 8, !tbaa !44
  %1421 = add i64 %1420, 1
  store i64 %1421, i64* %1419, align 8, !tbaa !44
  %1422 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %1418, i64 0, i32 2
  %1423 = load i64, i64* %1422, align 8, !tbaa !45
  %1424 = icmp ult i64 %1423, %1421
  br i1 %1424, label %1428, label %1425

1425:                                             ; preds = %1417
  %1426 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %1418, i64 0, i32 0
  %1427 = load i8*, i8** %1426, align 8, !tbaa !39
  br label %1437

1428:                                             ; preds = %1417
  %1429 = lshr i64 %1423, 1
  %1430 = add i64 %1429, %1421
  %1431 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %1418, i64 0, i32 0
  %1432 = load i8*, i8** %1431, align 8, !tbaa !39
  %1433 = call i8* @realloc(i8* noundef %1432, i64 noundef %1430) #25
  %1434 = icmp eq i8* %1433, null
  br i1 %1434, label %1556, label %1435

1435:                                             ; preds = %1428
  store i64 %1430, i64* %1422, align 8, !tbaa !45
  store i8* %1433, i8** %1431, align 8, !tbaa !39
  %1436 = load i64, i64* %1419, align 8, !tbaa !44
  br label %1437

1437:                                             ; preds = %1435, %1425
  %1438 = phi i8* [ %1433, %1435 ], [ %1427, %1425 ]
  %1439 = phi i64 [ %1436, %1435 ], [ %1421, %1425 ]
  %1440 = add i64 %1439, -1
  %1441 = getelementptr inbounds i8, i8* %1438, i64 %1440
  store i8 0, i8* %1441, align 1, !tbaa !14
  %1442 = load i8, i8* %25, align 8, !tbaa !84
  %1443 = and i8 %1442, 7
  br label %1444

1444:                                             ; preds = %1437, %1397
  %1445 = phi i8 [ %1443, %1437 ], [ %1415, %1397 ]
  %1446 = lshr i32 %1318, 2
  %1447 = and i32 %1446, 1
  %1448 = zext i8 %1445 to i32
  %1449 = shl nuw nsw i32 %1447, %1448
  %1450 = load %struct.ucvector*, %struct.ucvector** %24, align 8, !tbaa !82
  %1451 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %1450, i64 0, i32 0
  %1452 = load i8*, i8** %1451, align 8, !tbaa !39
  %1453 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %1450, i64 0, i32 1
  %1454 = load i64, i64* %1453, align 8, !tbaa !44
  %1455 = add i64 %1454, -1
  %1456 = getelementptr inbounds i8, i8* %1452, i64 %1455
  %1457 = load i8, i8* %1456, align 1, !tbaa !14
  %1458 = trunc i32 %1449 to i8
  %1459 = or i8 %1457, %1458
  store i8 %1459, i8* %1456, align 1, !tbaa !14
  %1460 = load i8, i8* %25, align 8, !tbaa !84
  %1461 = add i8 %1460, 1
  store i8 %1461, i8* %25, align 8, !tbaa !84
  %1462 = and i8 %1461, 7
  %1463 = icmp eq i8 %1462, 0
  br i1 %1463, label %1464, label %1491

1464:                                             ; preds = %1444
  %1465 = load %struct.ucvector*, %struct.ucvector** %24, align 8, !tbaa !82
  %1466 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %1465, i64 0, i32 1
  %1467 = load i64, i64* %1466, align 8, !tbaa !44
  %1468 = add i64 %1467, 1
  store i64 %1468, i64* %1466, align 8, !tbaa !44
  %1469 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %1465, i64 0, i32 2
  %1470 = load i64, i64* %1469, align 8, !tbaa !45
  %1471 = icmp ult i64 %1470, %1468
  br i1 %1471, label %1475, label %1472

1472:                                             ; preds = %1464
  %1473 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %1465, i64 0, i32 0
  %1474 = load i8*, i8** %1473, align 8, !tbaa !39
  br label %1484

1475:                                             ; preds = %1464
  %1476 = lshr i64 %1470, 1
  %1477 = add i64 %1476, %1468
  %1478 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %1465, i64 0, i32 0
  %1479 = load i8*, i8** %1478, align 8, !tbaa !39
  %1480 = call i8* @realloc(i8* noundef %1479, i64 noundef %1477) #25
  %1481 = icmp eq i8* %1480, null
  br i1 %1481, label %1556, label %1482

1482:                                             ; preds = %1475
  store i64 %1477, i64* %1469, align 8, !tbaa !45
  store i8* %1480, i8** %1478, align 8, !tbaa !39
  %1483 = load i64, i64* %1466, align 8, !tbaa !44
  br label %1484

1484:                                             ; preds = %1482, %1472
  %1485 = phi i8* [ %1480, %1482 ], [ %1474, %1472 ]
  %1486 = phi i64 [ %1483, %1482 ], [ %1468, %1472 ]
  %1487 = add i64 %1486, -1
  %1488 = getelementptr inbounds i8, i8* %1485, i64 %1487
  store i8 0, i8* %1488, align 1, !tbaa !14
  %1489 = load i8, i8* %25, align 8, !tbaa !84
  %1490 = and i8 %1489, 7
  br label %1491

1491:                                             ; preds = %1484, %1444
  %1492 = phi i8 [ %1490, %1484 ], [ %1462, %1444 ]
  %1493 = lshr i32 %1318, 3
  %1494 = and i32 %1493, 1
  %1495 = zext i8 %1492 to i32
  %1496 = shl nuw nsw i32 %1494, %1495
  %1497 = load %struct.ucvector*, %struct.ucvector** %24, align 8, !tbaa !82
  %1498 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %1497, i64 0, i32 0
  %1499 = load i8*, i8** %1498, align 8, !tbaa !39
  %1500 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %1497, i64 0, i32 1
  %1501 = load i64, i64* %1500, align 8, !tbaa !44
  %1502 = add i64 %1501, -1
  %1503 = getelementptr inbounds i8, i8* %1499, i64 %1502
  %1504 = load i8, i8* %1503, align 1, !tbaa !14
  %1505 = trunc i32 %1496 to i8
  %1506 = or i8 %1504, %1505
  store i8 %1506, i8* %1503, align 1, !tbaa !14
  %1507 = load i8, i8* %25, align 8, !tbaa !84
  %1508 = add i8 %1507, 1
  store i8 %1508, i8* %25, align 8, !tbaa !84
  %1509 = and i8 %1508, 7
  %1510 = icmp eq i8 %1509, 0
  br i1 %1510, label %1511, label %1538

1511:                                             ; preds = %1491
  %1512 = load %struct.ucvector*, %struct.ucvector** %24, align 8, !tbaa !82
  %1513 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %1512, i64 0, i32 1
  %1514 = load i64, i64* %1513, align 8, !tbaa !44
  %1515 = add i64 %1514, 1
  store i64 %1515, i64* %1513, align 8, !tbaa !44
  %1516 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %1512, i64 0, i32 2
  %1517 = load i64, i64* %1516, align 8, !tbaa !45
  %1518 = icmp ult i64 %1517, %1515
  br i1 %1518, label %1522, label %1519

1519:                                             ; preds = %1511
  %1520 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %1512, i64 0, i32 0
  %1521 = load i8*, i8** %1520, align 8, !tbaa !39
  br label %1531

1522:                                             ; preds = %1511
  %1523 = lshr i64 %1517, 1
  %1524 = add i64 %1523, %1515
  %1525 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %1512, i64 0, i32 0
  %1526 = load i8*, i8** %1525, align 8, !tbaa !39
  %1527 = call i8* @realloc(i8* noundef %1526, i64 noundef %1524) #25
  %1528 = icmp eq i8* %1527, null
  br i1 %1528, label %1556, label %1529

1529:                                             ; preds = %1522
  store i64 %1524, i64* %1516, align 8, !tbaa !45
  store i8* %1527, i8** %1525, align 8, !tbaa !39
  %1530 = load i64, i64* %1513, align 8, !tbaa !44
  br label %1531

1531:                                             ; preds = %1529, %1519
  %1532 = phi i8* [ %1527, %1529 ], [ %1521, %1519 ]
  %1533 = phi i64 [ %1530, %1529 ], [ %1515, %1519 ]
  %1534 = add i64 %1533, -1
  %1535 = getelementptr inbounds i8, i8* %1532, i64 %1534
  store i8 0, i8* %1535, align 1, !tbaa !14
  %1536 = load i8, i8* %25, align 8, !tbaa !84
  %1537 = and i8 %1536, 7
  br label %1538

1538:                                             ; preds = %1531, %1491
  %1539 = phi i8 [ %1537, %1531 ], [ %1509, %1491 ]
  %1540 = lshr i32 %1318, 4
  %1541 = and i32 %1540, 1
  %1542 = zext i8 %1539 to i32
  %1543 = shl nuw nsw i32 %1541, %1542
  %1544 = load %struct.ucvector*, %struct.ucvector** %24, align 8, !tbaa !82
  %1545 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %1544, i64 0, i32 0
  %1546 = load i8*, i8** %1545, align 8, !tbaa !39
  %1547 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %1544, i64 0, i32 1
  %1548 = load i64, i64* %1547, align 8, !tbaa !44
  %1549 = add i64 %1548, -1
  %1550 = getelementptr inbounds i8, i8* %1546, i64 %1549
  %1551 = load i8, i8* %1550, align 1, !tbaa !14
  %1552 = trunc i32 %1543 to i8
  %1553 = or i8 %1551, %1552
  store i8 %1553, i8* %1550, align 1, !tbaa !14
  %1554 = load i8, i8* %25, align 8, !tbaa !84
  %1555 = add i8 %1554, 1
  store i8 %1555, i8* %25, align 8, !tbaa !84
  br label %1556

1556:                                             ; preds = %1538, %1522, %1475, %1428, %1381, %1335
  %1557 = phi i8 [ %1555, %1538 ], [ %1508, %1522 ], [ %1461, %1475 ], [ %1414, %1428 ], [ %1367, %1381 ], [ %1317, %1335 ]
  %1558 = and i8 %1557, 7
  %1559 = icmp eq i8 %1558, 0
  br i1 %1559, label %1560, label %1587

1560:                                             ; preds = %1556
  %1561 = load %struct.ucvector*, %struct.ucvector** %24, align 8, !tbaa !82
  %1562 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %1561, i64 0, i32 1
  %1563 = load i64, i64* %1562, align 8, !tbaa !44
  %1564 = add i64 %1563, 1
  store i64 %1564, i64* %1562, align 8, !tbaa !44
  %1565 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %1561, i64 0, i32 2
  %1566 = load i64, i64* %1565, align 8, !tbaa !45
  %1567 = icmp ult i64 %1566, %1564
  br i1 %1567, label %1571, label %1568

1568:                                             ; preds = %1560
  %1569 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %1561, i64 0, i32 0
  %1570 = load i8*, i8** %1569, align 8, !tbaa !39
  br label %1580

1571:                                             ; preds = %1560
  %1572 = lshr i64 %1566, 1
  %1573 = add i64 %1572, %1564
  %1574 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %1561, i64 0, i32 0
  %1575 = load i8*, i8** %1574, align 8, !tbaa !39
  %1576 = call i8* @realloc(i8* noundef %1575, i64 noundef %1573) #25
  %1577 = icmp eq i8* %1576, null
  br i1 %1577, label %1792, label %1578

1578:                                             ; preds = %1571
  store i64 %1573, i64* %1565, align 8, !tbaa !45
  store i8* %1576, i8** %1574, align 8, !tbaa !39
  %1579 = load i64, i64* %1562, align 8, !tbaa !44
  br label %1580

1580:                                             ; preds = %1578, %1568
  %1581 = phi i8* [ %1576, %1578 ], [ %1570, %1568 ]
  %1582 = phi i64 [ %1579, %1578 ], [ %1564, %1568 ]
  %1583 = add i64 %1582, -1
  %1584 = getelementptr inbounds i8, i8* %1581, i64 %1583
  store i8 0, i8* %1584, align 1, !tbaa !14
  %1585 = load i8, i8* %25, align 8, !tbaa !84
  %1586 = and i8 %1585, 7
  br label %1587

1587:                                             ; preds = %1580, %1556
  %1588 = phi i8 [ %1586, %1580 ], [ %1558, %1556 ]
  %1589 = and i32 %1319, 1
  %1590 = zext i8 %1588 to i32
  %1591 = shl nuw nsw i32 %1589, %1590
  %1592 = load %struct.ucvector*, %struct.ucvector** %24, align 8, !tbaa !82
  %1593 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %1592, i64 0, i32 0
  %1594 = load i8*, i8** %1593, align 8, !tbaa !39
  %1595 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %1592, i64 0, i32 1
  %1596 = load i64, i64* %1595, align 8, !tbaa !44
  %1597 = add i64 %1596, -1
  %1598 = getelementptr inbounds i8, i8* %1594, i64 %1597
  %1599 = load i8, i8* %1598, align 1, !tbaa !14
  %1600 = trunc i32 %1591 to i8
  %1601 = or i8 %1599, %1600
  store i8 %1601, i8* %1598, align 1, !tbaa !14
  %1602 = load i8, i8* %25, align 8, !tbaa !84
  %1603 = add i8 %1602, 1
  store i8 %1603, i8* %25, align 8, !tbaa !84
  %1604 = and i8 %1603, 7
  %1605 = icmp eq i8 %1604, 0
  br i1 %1605, label %1606, label %1633

1606:                                             ; preds = %1587
  %1607 = load %struct.ucvector*, %struct.ucvector** %24, align 8, !tbaa !82
  %1608 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %1607, i64 0, i32 1
  %1609 = load i64, i64* %1608, align 8, !tbaa !44
  %1610 = add i64 %1609, 1
  store i64 %1610, i64* %1608, align 8, !tbaa !44
  %1611 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %1607, i64 0, i32 2
  %1612 = load i64, i64* %1611, align 8, !tbaa !45
  %1613 = icmp ult i64 %1612, %1610
  br i1 %1613, label %1617, label %1614

1614:                                             ; preds = %1606
  %1615 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %1607, i64 0, i32 0
  %1616 = load i8*, i8** %1615, align 8, !tbaa !39
  br label %1626

1617:                                             ; preds = %1606
  %1618 = lshr i64 %1612, 1
  %1619 = add i64 %1618, %1610
  %1620 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %1607, i64 0, i32 0
  %1621 = load i8*, i8** %1620, align 8, !tbaa !39
  %1622 = call i8* @realloc(i8* noundef %1621, i64 noundef %1619) #25
  %1623 = icmp eq i8* %1622, null
  br i1 %1623, label %1792, label %1624

1624:                                             ; preds = %1617
  store i64 %1619, i64* %1611, align 8, !tbaa !45
  store i8* %1622, i8** %1620, align 8, !tbaa !39
  %1625 = load i64, i64* %1608, align 8, !tbaa !44
  br label %1626

1626:                                             ; preds = %1624, %1614
  %1627 = phi i8* [ %1622, %1624 ], [ %1616, %1614 ]
  %1628 = phi i64 [ %1625, %1624 ], [ %1610, %1614 ]
  %1629 = add i64 %1628, -1
  %1630 = getelementptr inbounds i8, i8* %1627, i64 %1629
  store i8 0, i8* %1630, align 1, !tbaa !14
  %1631 = load i8, i8* %25, align 8, !tbaa !84
  %1632 = and i8 %1631, 7
  br label %1633

1633:                                             ; preds = %1626, %1587
  %1634 = phi i8 [ %1632, %1626 ], [ %1604, %1587 ]
  %1635 = lshr i32 %1319, 1
  %1636 = and i32 %1635, 1
  %1637 = zext i8 %1634 to i32
  %1638 = shl nuw nsw i32 %1636, %1637
  %1639 = load %struct.ucvector*, %struct.ucvector** %24, align 8, !tbaa !82
  %1640 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %1639, i64 0, i32 0
  %1641 = load i8*, i8** %1640, align 8, !tbaa !39
  %1642 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %1639, i64 0, i32 1
  %1643 = load i64, i64* %1642, align 8, !tbaa !44
  %1644 = add i64 %1643, -1
  %1645 = getelementptr inbounds i8, i8* %1641, i64 %1644
  %1646 = load i8, i8* %1645, align 1, !tbaa !14
  %1647 = trunc i32 %1638 to i8
  %1648 = or i8 %1646, %1647
  store i8 %1648, i8* %1645, align 1, !tbaa !14
  %1649 = load i8, i8* %25, align 8, !tbaa !84
  %1650 = add i8 %1649, 1
  store i8 %1650, i8* %25, align 8, !tbaa !84
  %1651 = and i8 %1650, 7
  %1652 = icmp eq i8 %1651, 0
  br i1 %1652, label %1653, label %1680

1653:                                             ; preds = %1633
  %1654 = load %struct.ucvector*, %struct.ucvector** %24, align 8, !tbaa !82
  %1655 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %1654, i64 0, i32 1
  %1656 = load i64, i64* %1655, align 8, !tbaa !44
  %1657 = add i64 %1656, 1
  store i64 %1657, i64* %1655, align 8, !tbaa !44
  %1658 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %1654, i64 0, i32 2
  %1659 = load i64, i64* %1658, align 8, !tbaa !45
  %1660 = icmp ult i64 %1659, %1657
  br i1 %1660, label %1664, label %1661

1661:                                             ; preds = %1653
  %1662 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %1654, i64 0, i32 0
  %1663 = load i8*, i8** %1662, align 8, !tbaa !39
  br label %1673

1664:                                             ; preds = %1653
  %1665 = lshr i64 %1659, 1
  %1666 = add i64 %1665, %1657
  %1667 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %1654, i64 0, i32 0
  %1668 = load i8*, i8** %1667, align 8, !tbaa !39
  %1669 = call i8* @realloc(i8* noundef %1668, i64 noundef %1666) #25
  %1670 = icmp eq i8* %1669, null
  br i1 %1670, label %1792, label %1671

1671:                                             ; preds = %1664
  store i64 %1666, i64* %1658, align 8, !tbaa !45
  store i8* %1669, i8** %1667, align 8, !tbaa !39
  %1672 = load i64, i64* %1655, align 8, !tbaa !44
  br label %1673

1673:                                             ; preds = %1671, %1661
  %1674 = phi i8* [ %1669, %1671 ], [ %1663, %1661 ]
  %1675 = phi i64 [ %1672, %1671 ], [ %1657, %1661 ]
  %1676 = add i64 %1675, -1
  %1677 = getelementptr inbounds i8, i8* %1674, i64 %1676
  store i8 0, i8* %1677, align 1, !tbaa !14
  %1678 = load i8, i8* %25, align 8, !tbaa !84
  %1679 = and i8 %1678, 7
  br label %1680

1680:                                             ; preds = %1673, %1633
  %1681 = phi i8 [ %1679, %1673 ], [ %1651, %1633 ]
  %1682 = lshr i32 %1319, 2
  %1683 = and i32 %1682, 1
  %1684 = zext i8 %1681 to i32
  %1685 = shl nuw nsw i32 %1683, %1684
  %1686 = load %struct.ucvector*, %struct.ucvector** %24, align 8, !tbaa !82
  %1687 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %1686, i64 0, i32 0
  %1688 = load i8*, i8** %1687, align 8, !tbaa !39
  %1689 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %1686, i64 0, i32 1
  %1690 = load i64, i64* %1689, align 8, !tbaa !44
  %1691 = add i64 %1690, -1
  %1692 = getelementptr inbounds i8, i8* %1688, i64 %1691
  %1693 = load i8, i8* %1692, align 1, !tbaa !14
  %1694 = trunc i32 %1685 to i8
  %1695 = or i8 %1693, %1694
  store i8 %1695, i8* %1692, align 1, !tbaa !14
  %1696 = load i8, i8* %25, align 8, !tbaa !84
  %1697 = add i8 %1696, 1
  store i8 %1697, i8* %25, align 8, !tbaa !84
  %1698 = and i8 %1697, 7
  %1699 = icmp eq i8 %1698, 0
  br i1 %1699, label %1700, label %1727

1700:                                             ; preds = %1680
  %1701 = load %struct.ucvector*, %struct.ucvector** %24, align 8, !tbaa !82
  %1702 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %1701, i64 0, i32 1
  %1703 = load i64, i64* %1702, align 8, !tbaa !44
  %1704 = add i64 %1703, 1
  store i64 %1704, i64* %1702, align 8, !tbaa !44
  %1705 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %1701, i64 0, i32 2
  %1706 = load i64, i64* %1705, align 8, !tbaa !45
  %1707 = icmp ult i64 %1706, %1704
  br i1 %1707, label %1711, label %1708

1708:                                             ; preds = %1700
  %1709 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %1701, i64 0, i32 0
  %1710 = load i8*, i8** %1709, align 8, !tbaa !39
  br label %1720

1711:                                             ; preds = %1700
  %1712 = lshr i64 %1706, 1
  %1713 = add i64 %1712, %1704
  %1714 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %1701, i64 0, i32 0
  %1715 = load i8*, i8** %1714, align 8, !tbaa !39
  %1716 = call i8* @realloc(i8* noundef %1715, i64 noundef %1713) #25
  %1717 = icmp eq i8* %1716, null
  br i1 %1717, label %1792, label %1718

1718:                                             ; preds = %1711
  store i64 %1713, i64* %1705, align 8, !tbaa !45
  store i8* %1716, i8** %1714, align 8, !tbaa !39
  %1719 = load i64, i64* %1702, align 8, !tbaa !44
  br label %1720

1720:                                             ; preds = %1718, %1708
  %1721 = phi i8* [ %1716, %1718 ], [ %1710, %1708 ]
  %1722 = phi i64 [ %1719, %1718 ], [ %1704, %1708 ]
  %1723 = add i64 %1722, -1
  %1724 = getelementptr inbounds i8, i8* %1721, i64 %1723
  store i8 0, i8* %1724, align 1, !tbaa !14
  %1725 = load i8, i8* %25, align 8, !tbaa !84
  %1726 = and i8 %1725, 7
  br label %1727

1727:                                             ; preds = %1720, %1680
  %1728 = phi i8 [ %1726, %1720 ], [ %1698, %1680 ]
  %1729 = lshr i32 %1319, 3
  %1730 = and i32 %1729, 1
  %1731 = zext i8 %1728 to i32
  %1732 = shl nuw nsw i32 %1730, %1731
  %1733 = load %struct.ucvector*, %struct.ucvector** %24, align 8, !tbaa !82
  %1734 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %1733, i64 0, i32 0
  %1735 = load i8*, i8** %1734, align 8, !tbaa !39
  %1736 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %1733, i64 0, i32 1
  %1737 = load i64, i64* %1736, align 8, !tbaa !44
  %1738 = add i64 %1737, -1
  %1739 = getelementptr inbounds i8, i8* %1735, i64 %1738
  %1740 = load i8, i8* %1739, align 1, !tbaa !14
  %1741 = trunc i32 %1732 to i8
  %1742 = or i8 %1740, %1741
  store i8 %1742, i8* %1739, align 1, !tbaa !14
  %1743 = load i8, i8* %25, align 8, !tbaa !84
  %1744 = add i8 %1743, 1
  store i8 %1744, i8* %25, align 8, !tbaa !84
  %1745 = and i8 %1744, 7
  %1746 = icmp eq i8 %1745, 0
  br i1 %1746, label %1747, label %1774

1747:                                             ; preds = %1727
  %1748 = load %struct.ucvector*, %struct.ucvector** %24, align 8, !tbaa !82
  %1749 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %1748, i64 0, i32 1
  %1750 = load i64, i64* %1749, align 8, !tbaa !44
  %1751 = add i64 %1750, 1
  store i64 %1751, i64* %1749, align 8, !tbaa !44
  %1752 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %1748, i64 0, i32 2
  %1753 = load i64, i64* %1752, align 8, !tbaa !45
  %1754 = icmp ult i64 %1753, %1751
  br i1 %1754, label %1758, label %1755

1755:                                             ; preds = %1747
  %1756 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %1748, i64 0, i32 0
  %1757 = load i8*, i8** %1756, align 8, !tbaa !39
  br label %1767

1758:                                             ; preds = %1747
  %1759 = lshr i64 %1753, 1
  %1760 = add i64 %1759, %1751
  %1761 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %1748, i64 0, i32 0
  %1762 = load i8*, i8** %1761, align 8, !tbaa !39
  %1763 = call i8* @realloc(i8* noundef %1762, i64 noundef %1760) #25
  %1764 = icmp eq i8* %1763, null
  br i1 %1764, label %1792, label %1765

1765:                                             ; preds = %1758
  store i64 %1760, i64* %1752, align 8, !tbaa !45
  store i8* %1763, i8** %1761, align 8, !tbaa !39
  %1766 = load i64, i64* %1749, align 8, !tbaa !44
  br label %1767

1767:                                             ; preds = %1765, %1755
  %1768 = phi i8* [ %1763, %1765 ], [ %1757, %1755 ]
  %1769 = phi i64 [ %1766, %1765 ], [ %1751, %1755 ]
  %1770 = add i64 %1769, -1
  %1771 = getelementptr inbounds i8, i8* %1768, i64 %1770
  store i8 0, i8* %1771, align 1, !tbaa !14
  %1772 = load i8, i8* %25, align 8, !tbaa !84
  %1773 = and i8 %1772, 7
  br label %1774

1774:                                             ; preds = %1767, %1727
  %1775 = phi i8 [ %1773, %1767 ], [ %1745, %1727 ]
  %1776 = lshr i32 %1319, 4
  %1777 = and i32 %1776, 1
  %1778 = zext i8 %1775 to i32
  %1779 = shl nuw nsw i32 %1777, %1778
  %1780 = load %struct.ucvector*, %struct.ucvector** %24, align 8, !tbaa !82
  %1781 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %1780, i64 0, i32 0
  %1782 = load i8*, i8** %1781, align 8, !tbaa !39
  %1783 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %1780, i64 0, i32 1
  %1784 = load i64, i64* %1783, align 8, !tbaa !44
  %1785 = add i64 %1784, -1
  %1786 = getelementptr inbounds i8, i8* %1782, i64 %1785
  %1787 = load i8, i8* %1786, align 1, !tbaa !14
  %1788 = trunc i32 %1779 to i8
  %1789 = or i8 %1787, %1788
  store i8 %1789, i8* %1786, align 1, !tbaa !14
  %1790 = load i8, i8* %25, align 8, !tbaa !84
  %1791 = add i8 %1790, 1
  store i8 %1791, i8* %25, align 8, !tbaa !84
  br label %1792

1792:                                             ; preds = %1774, %1758, %1711, %1664, %1617, %1571
  %1793 = phi i8 [ %1791, %1774 ], [ %1744, %1758 ], [ %1697, %1711 ], [ %1650, %1664 ], [ %1603, %1617 ], [ %1557, %1571 ]
  %1794 = and i8 %1793, 7
  %1795 = icmp eq i8 %1794, 0
  br i1 %1795, label %1796, label %1825

1796:                                             ; preds = %1792
  %1797 = load %struct.ucvector*, %struct.ucvector** %24, align 8, !tbaa !82
  %1798 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %1797, i64 0, i32 1
  %1799 = load i64, i64* %1798, align 8, !tbaa !44
  %1800 = add i64 %1799, 1
  store i64 %1800, i64* %1798, align 8, !tbaa !44
  %1801 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %1797, i64 0, i32 2
  %1802 = load i64, i64* %1801, align 8, !tbaa !45
  %1803 = icmp ult i64 %1802, %1800
  br i1 %1803, label %1807, label %1804

1804:                                             ; preds = %1796
  %1805 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %1797, i64 0, i32 0
  %1806 = load i8*, i8** %1805, align 8, !tbaa !39
  br label %1818

1807:                                             ; preds = %1796
  %1808 = lshr i64 %1802, 1
  %1809 = add i64 %1808, %1800
  %1810 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %1797, i64 0, i32 0
  %1811 = load i8*, i8** %1810, align 8, !tbaa !39
  %1812 = call i8* @realloc(i8* noundef %1811, i64 noundef %1809) #25
  %1813 = icmp eq i8* %1812, null
  br i1 %1813, label %1814, label %1816

1814:                                             ; preds = %1965, %1949, %1902, %1855, %1807
  %1815 = phi i8 [ %1793, %1807 ], [ %1841, %1855 ], [ %1888, %1902 ], [ %1935, %1949 ], [ %1981, %1965 ]
  br label %1985

1816:                                             ; preds = %1807
  store i64 %1809, i64* %1801, align 8, !tbaa !45
  store i8* %1812, i8** %1810, align 8, !tbaa !39
  %1817 = load i64, i64* %1798, align 8, !tbaa !44
  br label %1818

1818:                                             ; preds = %1816, %1804
  %1819 = phi i8* [ %1812, %1816 ], [ %1806, %1804 ]
  %1820 = phi i64 [ %1817, %1816 ], [ %1800, %1804 ]
  %1821 = add i64 %1820, -1
  %1822 = getelementptr inbounds i8, i8* %1819, i64 %1821
  store i8 0, i8* %1822, align 1, !tbaa !14
  %1823 = load i8, i8* %25, align 8, !tbaa !84
  %1824 = and i8 %1823, 7
  br label %1825

1825:                                             ; preds = %1818, %1792
  %1826 = phi i8 [ %1824, %1818 ], [ %1794, %1792 ]
  %1827 = and i32 %1320, 1
  %1828 = zext i8 %1826 to i32
  %1829 = shl nuw nsw i32 %1827, %1828
  %1830 = load %struct.ucvector*, %struct.ucvector** %24, align 8, !tbaa !82
  %1831 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %1830, i64 0, i32 0
  %1832 = load i8*, i8** %1831, align 8, !tbaa !39
  %1833 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %1830, i64 0, i32 1
  %1834 = load i64, i64* %1833, align 8, !tbaa !44
  %1835 = add i64 %1834, -1
  %1836 = getelementptr inbounds i8, i8* %1832, i64 %1835
  %1837 = load i8, i8* %1836, align 1, !tbaa !14
  %1838 = trunc i32 %1829 to i8
  %1839 = or i8 %1837, %1838
  store i8 %1839, i8* %1836, align 1, !tbaa !14
  %1840 = load i8, i8* %25, align 8, !tbaa !84
  %1841 = add i8 %1840, 1
  store i8 %1841, i8* %25, align 8, !tbaa !84
  %1842 = and i8 %1841, 7
  %1843 = icmp eq i8 %1842, 0
  br i1 %1843, label %1844, label %1871

1844:                                             ; preds = %1825
  %1845 = load %struct.ucvector*, %struct.ucvector** %24, align 8, !tbaa !82
  %1846 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %1845, i64 0, i32 1
  %1847 = load i64, i64* %1846, align 8, !tbaa !44
  %1848 = add i64 %1847, 1
  store i64 %1848, i64* %1846, align 8, !tbaa !44
  %1849 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %1845, i64 0, i32 2
  %1850 = load i64, i64* %1849, align 8, !tbaa !45
  %1851 = icmp ult i64 %1850, %1848
  br i1 %1851, label %1855, label %1852

1852:                                             ; preds = %1844
  %1853 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %1845, i64 0, i32 0
  %1854 = load i8*, i8** %1853, align 8, !tbaa !39
  br label %1864

1855:                                             ; preds = %1844
  %1856 = lshr i64 %1850, 1
  %1857 = add i64 %1856, %1848
  %1858 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %1845, i64 0, i32 0
  %1859 = load i8*, i8** %1858, align 8, !tbaa !39
  %1860 = call i8* @realloc(i8* noundef %1859, i64 noundef %1857) #25
  %1861 = icmp eq i8* %1860, null
  br i1 %1861, label %1814, label %1862

1862:                                             ; preds = %1855
  store i64 %1857, i64* %1849, align 8, !tbaa !45
  store i8* %1860, i8** %1858, align 8, !tbaa !39
  %1863 = load i64, i64* %1846, align 8, !tbaa !44
  br label %1864

1864:                                             ; preds = %1862, %1852
  %1865 = phi i8* [ %1860, %1862 ], [ %1854, %1852 ]
  %1866 = phi i64 [ %1863, %1862 ], [ %1848, %1852 ]
  %1867 = add i64 %1866, -1
  %1868 = getelementptr inbounds i8, i8* %1865, i64 %1867
  store i8 0, i8* %1868, align 1, !tbaa !14
  %1869 = load i8, i8* %25, align 8, !tbaa !84
  %1870 = and i8 %1869, 7
  br label %1871

1871:                                             ; preds = %1864, %1825
  %1872 = phi i8 [ %1870, %1864 ], [ %1842, %1825 ]
  %1873 = lshr i32 %1321, 1
  %1874 = and i32 %1873, 1
  %1875 = zext i8 %1872 to i32
  %1876 = shl nuw nsw i32 %1874, %1875
  %1877 = load %struct.ucvector*, %struct.ucvector** %24, align 8, !tbaa !82
  %1878 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %1877, i64 0, i32 0
  %1879 = load i8*, i8** %1878, align 8, !tbaa !39
  %1880 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %1877, i64 0, i32 1
  %1881 = load i64, i64* %1880, align 8, !tbaa !44
  %1882 = add i64 %1881, -1
  %1883 = getelementptr inbounds i8, i8* %1879, i64 %1882
  %1884 = load i8, i8* %1883, align 1, !tbaa !14
  %1885 = trunc i32 %1876 to i8
  %1886 = or i8 %1884, %1885
  store i8 %1886, i8* %1883, align 1, !tbaa !14
  %1887 = load i8, i8* %25, align 8, !tbaa !84
  %1888 = add i8 %1887, 1
  store i8 %1888, i8* %25, align 8, !tbaa !84
  %1889 = and i8 %1888, 7
  %1890 = icmp eq i8 %1889, 0
  br i1 %1890, label %1891, label %1918

1891:                                             ; preds = %1871
  %1892 = load %struct.ucvector*, %struct.ucvector** %24, align 8, !tbaa !82
  %1893 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %1892, i64 0, i32 1
  %1894 = load i64, i64* %1893, align 8, !tbaa !44
  %1895 = add i64 %1894, 1
  store i64 %1895, i64* %1893, align 8, !tbaa !44
  %1896 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %1892, i64 0, i32 2
  %1897 = load i64, i64* %1896, align 8, !tbaa !45
  %1898 = icmp ult i64 %1897, %1895
  br i1 %1898, label %1902, label %1899

1899:                                             ; preds = %1891
  %1900 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %1892, i64 0, i32 0
  %1901 = load i8*, i8** %1900, align 8, !tbaa !39
  br label %1911

1902:                                             ; preds = %1891
  %1903 = lshr i64 %1897, 1
  %1904 = add i64 %1903, %1895
  %1905 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %1892, i64 0, i32 0
  %1906 = load i8*, i8** %1905, align 8, !tbaa !39
  %1907 = call i8* @realloc(i8* noundef %1906, i64 noundef %1904) #25
  %1908 = icmp eq i8* %1907, null
  br i1 %1908, label %1814, label %1909

1909:                                             ; preds = %1902
  store i64 %1904, i64* %1896, align 8, !tbaa !45
  store i8* %1907, i8** %1905, align 8, !tbaa !39
  %1910 = load i64, i64* %1893, align 8, !tbaa !44
  br label %1911

1911:                                             ; preds = %1909, %1899
  %1912 = phi i8* [ %1907, %1909 ], [ %1901, %1899 ]
  %1913 = phi i64 [ %1910, %1909 ], [ %1895, %1899 ]
  %1914 = add i64 %1913, -1
  %1915 = getelementptr inbounds i8, i8* %1912, i64 %1914
  store i8 0, i8* %1915, align 1, !tbaa !14
  %1916 = load i8, i8* %25, align 8, !tbaa !84
  %1917 = and i8 %1916, 7
  br label %1918

1918:                                             ; preds = %1911, %1871
  %1919 = phi i8 [ %1917, %1911 ], [ %1889, %1871 ]
  %1920 = lshr i32 %1321, 2
  %1921 = and i32 %1920, 1
  %1922 = zext i8 %1919 to i32
  %1923 = shl nuw nsw i32 %1921, %1922
  %1924 = load %struct.ucvector*, %struct.ucvector** %24, align 8, !tbaa !82
  %1925 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %1924, i64 0, i32 0
  %1926 = load i8*, i8** %1925, align 8, !tbaa !39
  %1927 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %1924, i64 0, i32 1
  %1928 = load i64, i64* %1927, align 8, !tbaa !44
  %1929 = add i64 %1928, -1
  %1930 = getelementptr inbounds i8, i8* %1926, i64 %1929
  %1931 = load i8, i8* %1930, align 1, !tbaa !14
  %1932 = trunc i32 %1923 to i8
  %1933 = or i8 %1931, %1932
  store i8 %1933, i8* %1930, align 1, !tbaa !14
  %1934 = load i8, i8* %25, align 8, !tbaa !84
  %1935 = add i8 %1934, 1
  store i8 %1935, i8* %25, align 8, !tbaa !84
  %1936 = and i8 %1935, 7
  %1937 = icmp eq i8 %1936, 0
  br i1 %1937, label %1938, label %1965

1938:                                             ; preds = %1918
  %1939 = load %struct.ucvector*, %struct.ucvector** %24, align 8, !tbaa !82
  %1940 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %1939, i64 0, i32 1
  %1941 = load i64, i64* %1940, align 8, !tbaa !44
  %1942 = add i64 %1941, 1
  store i64 %1942, i64* %1940, align 8, !tbaa !44
  %1943 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %1939, i64 0, i32 2
  %1944 = load i64, i64* %1943, align 8, !tbaa !45
  %1945 = icmp ult i64 %1944, %1942
  br i1 %1945, label %1949, label %1946

1946:                                             ; preds = %1938
  %1947 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %1939, i64 0, i32 0
  %1948 = load i8*, i8** %1947, align 8, !tbaa !39
  br label %1958

1949:                                             ; preds = %1938
  %1950 = lshr i64 %1944, 1
  %1951 = add i64 %1950, %1942
  %1952 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %1939, i64 0, i32 0
  %1953 = load i8*, i8** %1952, align 8, !tbaa !39
  %1954 = call i8* @realloc(i8* noundef %1953, i64 noundef %1951) #25
  %1955 = icmp eq i8* %1954, null
  br i1 %1955, label %1814, label %1956

1956:                                             ; preds = %1949
  store i64 %1951, i64* %1943, align 8, !tbaa !45
  store i8* %1954, i8** %1952, align 8, !tbaa !39
  %1957 = load i64, i64* %1940, align 8, !tbaa !44
  br label %1958

1958:                                             ; preds = %1956, %1946
  %1959 = phi i8* [ %1954, %1956 ], [ %1948, %1946 ]
  %1960 = phi i64 [ %1957, %1956 ], [ %1942, %1946 ]
  %1961 = add i64 %1960, -1
  %1962 = getelementptr inbounds i8, i8* %1959, i64 %1961
  store i8 0, i8* %1962, align 1, !tbaa !14
  %1963 = load i8, i8* %25, align 8, !tbaa !84
  %1964 = and i8 %1963, 7
  br label %1965

1965:                                             ; preds = %1958, %1918
  %1966 = phi i8 [ %1964, %1958 ], [ %1936, %1918 ]
  %1967 = lshr i32 %1321, 3
  %1968 = zext i8 %1966 to i32
  %1969 = shl nuw nsw i32 %1967, %1968
  %1970 = load %struct.ucvector*, %struct.ucvector** %24, align 8, !tbaa !82
  %1971 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %1970, i64 0, i32 0
  %1972 = load i8*, i8** %1971, align 8, !tbaa !39
  %1973 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %1970, i64 0, i32 1
  %1974 = load i64, i64* %1973, align 8, !tbaa !44
  %1975 = add i64 %1974, -1
  %1976 = getelementptr inbounds i8, i8* %1972, i64 %1975
  %1977 = load i8, i8* %1976, align 1, !tbaa !14
  %1978 = trunc i32 %1969 to i8
  %1979 = or i8 %1977, %1978
  store i8 %1979, i8* %1976, align 1, !tbaa !14
  %1980 = load i8, i8* %25, align 8, !tbaa !84
  %1981 = add i8 %1980, 1
  store i8 %1981, i8* %25, align 8, !tbaa !84
  br label %1814

1982:                                             ; preds = %2133
  br i1 %1114, label %2512, label %1983

1983:                                             ; preds = %1982
  %1984 = load i32*, i32** %329, align 8, !tbaa !68
  br label %2137

1985:                                             ; preds = %1814, %2133
  %1986 = phi i8 [ %2134, %2133 ], [ %1815, %1814 ]
  %1987 = phi i64 [ %2135, %2133 ], [ 0, %1814 ]
  %1988 = getelementptr inbounds [19 x i32], [19 x i32]* @_ZL10CLCL_ORDER, i64 0, i64 %1987
  %1989 = load i32, i32* %1988, align 4, !tbaa !9
  %1990 = zext i32 %1989 to i64
  %1991 = getelementptr inbounds i32, i32* %1128, i64 %1990
  %1992 = load i32, i32* %1991, align 4, !tbaa !9
  %1993 = and i8 %1986, 7
  %1994 = icmp eq i8 %1993, 0
  br i1 %1994, label %1995, label %2022

1995:                                             ; preds = %1985
  %1996 = load %struct.ucvector*, %struct.ucvector** %24, align 8, !tbaa !82
  %1997 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %1996, i64 0, i32 1
  %1998 = load i64, i64* %1997, align 8, !tbaa !44
  %1999 = add i64 %1998, 1
  store i64 %1999, i64* %1997, align 8, !tbaa !44
  %2000 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %1996, i64 0, i32 2
  %2001 = load i64, i64* %2000, align 8, !tbaa !45
  %2002 = icmp ult i64 %2001, %1999
  br i1 %2002, label %2006, label %2003

2003:                                             ; preds = %1995
  %2004 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %1996, i64 0, i32 0
  %2005 = load i8*, i8** %2004, align 8, !tbaa !39
  br label %2015

2006:                                             ; preds = %1995
  %2007 = lshr i64 %2001, 1
  %2008 = add i64 %2007, %1999
  %2009 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %1996, i64 0, i32 0
  %2010 = load i8*, i8** %2009, align 8, !tbaa !39
  %2011 = call i8* @realloc(i8* noundef %2010, i64 noundef %2008) #25
  %2012 = icmp eq i8* %2011, null
  br i1 %2012, label %2133, label %2013

2013:                                             ; preds = %2006
  store i64 %2008, i64* %2000, align 8, !tbaa !45
  store i8* %2011, i8** %2009, align 8, !tbaa !39
  %2014 = load i64, i64* %1997, align 8, !tbaa !44
  br label %2015

2015:                                             ; preds = %2013, %2003
  %2016 = phi i8* [ %2011, %2013 ], [ %2005, %2003 ]
  %2017 = phi i64 [ %2014, %2013 ], [ %1999, %2003 ]
  %2018 = add i64 %2017, -1
  %2019 = getelementptr inbounds i8, i8* %2016, i64 %2018
  store i8 0, i8* %2019, align 1, !tbaa !14
  %2020 = load i8, i8* %25, align 8, !tbaa !84
  %2021 = and i8 %2020, 7
  br label %2022

2022:                                             ; preds = %2015, %1985
  %2023 = phi i8 [ %2021, %2015 ], [ %1993, %1985 ]
  %2024 = and i32 %1992, 1
  %2025 = zext i8 %2023 to i32
  %2026 = shl nuw nsw i32 %2024, %2025
  %2027 = load %struct.ucvector*, %struct.ucvector** %24, align 8, !tbaa !82
  %2028 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %2027, i64 0, i32 0
  %2029 = load i8*, i8** %2028, align 8, !tbaa !39
  %2030 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %2027, i64 0, i32 1
  %2031 = load i64, i64* %2030, align 8, !tbaa !44
  %2032 = add i64 %2031, -1
  %2033 = getelementptr inbounds i8, i8* %2029, i64 %2032
  %2034 = load i8, i8* %2033, align 1, !tbaa !14
  %2035 = trunc i32 %2026 to i8
  %2036 = or i8 %2034, %2035
  store i8 %2036, i8* %2033, align 1, !tbaa !14
  %2037 = load i8, i8* %25, align 8, !tbaa !84
  %2038 = add i8 %2037, 1
  store i8 %2038, i8* %25, align 8, !tbaa !84
  %2039 = and i8 %2038, 7
  %2040 = icmp eq i8 %2039, 0
  br i1 %2040, label %2041, label %2068

2041:                                             ; preds = %2022
  %2042 = load %struct.ucvector*, %struct.ucvector** %24, align 8, !tbaa !82
  %2043 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %2042, i64 0, i32 1
  %2044 = load i64, i64* %2043, align 8, !tbaa !44
  %2045 = add i64 %2044, 1
  store i64 %2045, i64* %2043, align 8, !tbaa !44
  %2046 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %2042, i64 0, i32 2
  %2047 = load i64, i64* %2046, align 8, !tbaa !45
  %2048 = icmp ult i64 %2047, %2045
  br i1 %2048, label %2052, label %2049

2049:                                             ; preds = %2041
  %2050 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %2042, i64 0, i32 0
  %2051 = load i8*, i8** %2050, align 8, !tbaa !39
  br label %2061

2052:                                             ; preds = %2041
  %2053 = lshr i64 %2047, 1
  %2054 = add i64 %2053, %2045
  %2055 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %2042, i64 0, i32 0
  %2056 = load i8*, i8** %2055, align 8, !tbaa !39
  %2057 = call i8* @realloc(i8* noundef %2056, i64 noundef %2054) #25
  %2058 = icmp eq i8* %2057, null
  br i1 %2058, label %2133, label %2059

2059:                                             ; preds = %2052
  store i64 %2054, i64* %2046, align 8, !tbaa !45
  store i8* %2057, i8** %2055, align 8, !tbaa !39
  %2060 = load i64, i64* %2043, align 8, !tbaa !44
  br label %2061

2061:                                             ; preds = %2059, %2049
  %2062 = phi i8* [ %2057, %2059 ], [ %2051, %2049 ]
  %2063 = phi i64 [ %2060, %2059 ], [ %2045, %2049 ]
  %2064 = add i64 %2063, -1
  %2065 = getelementptr inbounds i8, i8* %2062, i64 %2064
  store i8 0, i8* %2065, align 1, !tbaa !14
  %2066 = load i8, i8* %25, align 8, !tbaa !84
  %2067 = and i8 %2066, 7
  br label %2068

2068:                                             ; preds = %2061, %2022
  %2069 = phi i8 [ %2067, %2061 ], [ %2039, %2022 ]
  %2070 = lshr i32 %1992, 1
  %2071 = and i32 %2070, 1
  %2072 = zext i8 %2069 to i32
  %2073 = shl nuw nsw i32 %2071, %2072
  %2074 = load %struct.ucvector*, %struct.ucvector** %24, align 8, !tbaa !82
  %2075 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %2074, i64 0, i32 0
  %2076 = load i8*, i8** %2075, align 8, !tbaa !39
  %2077 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %2074, i64 0, i32 1
  %2078 = load i64, i64* %2077, align 8, !tbaa !44
  %2079 = add i64 %2078, -1
  %2080 = getelementptr inbounds i8, i8* %2076, i64 %2079
  %2081 = load i8, i8* %2080, align 1, !tbaa !14
  %2082 = trunc i32 %2073 to i8
  %2083 = or i8 %2081, %2082
  store i8 %2083, i8* %2080, align 1, !tbaa !14
  %2084 = load i8, i8* %25, align 8, !tbaa !84
  %2085 = add i8 %2084, 1
  store i8 %2085, i8* %25, align 8, !tbaa !84
  %2086 = and i8 %2085, 7
  %2087 = icmp eq i8 %2086, 0
  br i1 %2087, label %2088, label %2115

2088:                                             ; preds = %2068
  %2089 = load %struct.ucvector*, %struct.ucvector** %24, align 8, !tbaa !82
  %2090 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %2089, i64 0, i32 1
  %2091 = load i64, i64* %2090, align 8, !tbaa !44
  %2092 = add i64 %2091, 1
  store i64 %2092, i64* %2090, align 8, !tbaa !44
  %2093 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %2089, i64 0, i32 2
  %2094 = load i64, i64* %2093, align 8, !tbaa !45
  %2095 = icmp ult i64 %2094, %2092
  br i1 %2095, label %2099, label %2096

2096:                                             ; preds = %2088
  %2097 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %2089, i64 0, i32 0
  %2098 = load i8*, i8** %2097, align 8, !tbaa !39
  br label %2108

2099:                                             ; preds = %2088
  %2100 = lshr i64 %2094, 1
  %2101 = add i64 %2100, %2092
  %2102 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %2089, i64 0, i32 0
  %2103 = load i8*, i8** %2102, align 8, !tbaa !39
  %2104 = call i8* @realloc(i8* noundef %2103, i64 noundef %2101) #25
  %2105 = icmp eq i8* %2104, null
  br i1 %2105, label %2133, label %2106

2106:                                             ; preds = %2099
  store i64 %2101, i64* %2093, align 8, !tbaa !45
  store i8* %2104, i8** %2102, align 8, !tbaa !39
  %2107 = load i64, i64* %2090, align 8, !tbaa !44
  br label %2108

2108:                                             ; preds = %2106, %2096
  %2109 = phi i8* [ %2104, %2106 ], [ %2098, %2096 ]
  %2110 = phi i64 [ %2107, %2106 ], [ %2092, %2096 ]
  %2111 = add i64 %2110, -1
  %2112 = getelementptr inbounds i8, i8* %2109, i64 %2111
  store i8 0, i8* %2112, align 1, !tbaa !14
  %2113 = load i8, i8* %25, align 8, !tbaa !84
  %2114 = and i8 %2113, 7
  br label %2115

2115:                                             ; preds = %2108, %2068
  %2116 = phi i8 [ %2114, %2108 ], [ %2086, %2068 ]
  %2117 = lshr i32 %1992, 2
  %2118 = and i32 %2117, 1
  %2119 = zext i8 %2116 to i32
  %2120 = shl nuw nsw i32 %2118, %2119
  %2121 = load %struct.ucvector*, %struct.ucvector** %24, align 8, !tbaa !82
  %2122 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %2121, i64 0, i32 0
  %2123 = load i8*, i8** %2122, align 8, !tbaa !39
  %2124 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %2121, i64 0, i32 1
  %2125 = load i64, i64* %2124, align 8, !tbaa !44
  %2126 = add i64 %2125, -1
  %2127 = getelementptr inbounds i8, i8* %2123, i64 %2126
  %2128 = load i8, i8* %2127, align 1, !tbaa !14
  %2129 = trunc i32 %2120 to i8
  %2130 = or i8 %2128, %2129
  store i8 %2130, i8* %2127, align 1, !tbaa !14
  %2131 = load i8, i8* %25, align 8, !tbaa !84
  %2132 = add i8 %2131, 1
  store i8 %2132, i8* %25, align 8, !tbaa !84
  br label %2133

2133:                                             ; preds = %2115, %2099, %2052, %2006
  %2134 = phi i8 [ %2132, %2115 ], [ %2085, %2099 ], [ %2038, %2052 ], [ %1986, %2006 ]
  %2135 = add nuw nsw i64 %1987, 1
  %2136 = icmp eq i64 %2135, %1191
  br i1 %2136, label %1982, label %1985

2137:                                             ; preds = %2504, %1983
  %2138 = phi i8 [ %2134, %1983 ], [ %2505, %2504 ]
  %2139 = phi i8 [ %2134, %1983 ], [ %2506, %2504 ]
  %2140 = phi i8 [ %2134, %1983 ], [ %2507, %2504 ]
  %2141 = phi i8 [ %2134, %1983 ], [ %2508, %2504 ]
  %2142 = phi i64 [ 0, %1983 ], [ %2510, %2504 ]
  %2143 = getelementptr inbounds i32, i32* %892, i64 %2142
  %2144 = load i32, i32* %2143, align 4, !tbaa !9
  %2145 = zext i32 %2144 to i64
  %2146 = getelementptr inbounds i32, i32* %1984, i64 %2145
  %2147 = load i32, i32* %2146, align 4, !tbaa !9
  %2148 = getelementptr inbounds i32, i32* %1128, i64 %2145
  %2149 = load i32, i32* %2148, align 4, !tbaa !9
  %2150 = zext i32 %2149 to i64
  %2151 = icmp eq i32 %2149, 0
  br i1 %2151, label %2210, label %2152

2152:                                             ; preds = %2137, %2187
  %2153 = phi i8 [ %2207, %2187 ], [ %2138, %2137 ]
  %2154 = phi i8 [ %2207, %2187 ], [ %2139, %2137 ]
  %2155 = phi i8 [ %2207, %2187 ], [ %2140, %2137 ]
  %2156 = phi i8 [ %2207, %2187 ], [ %2141, %2137 ]
  %2157 = phi i64 [ %2208, %2187 ], [ 0, %2137 ]
  %2158 = and i8 %2156, 7
  %2159 = icmp eq i8 %2158, 0
  br i1 %2159, label %2160, label %2187

2160:                                             ; preds = %2152
  %2161 = load %struct.ucvector*, %struct.ucvector** %24, align 8, !tbaa !82
  %2162 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %2161, i64 0, i32 1
  %2163 = load i64, i64* %2162, align 8, !tbaa !44
  %2164 = add i64 %2163, 1
  store i64 %2164, i64* %2162, align 8, !tbaa !44
  %2165 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %2161, i64 0, i32 2
  %2166 = load i64, i64* %2165, align 8, !tbaa !45
  %2167 = icmp ult i64 %2166, %2164
  br i1 %2167, label %2171, label %2168

2168:                                             ; preds = %2160
  %2169 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %2161, i64 0, i32 0
  %2170 = load i8*, i8** %2169, align 8, !tbaa !39
  br label %2180

2171:                                             ; preds = %2160
  %2172 = lshr i64 %2166, 1
  %2173 = add i64 %2172, %2164
  %2174 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %2161, i64 0, i32 0
  %2175 = load i8*, i8** %2174, align 8, !tbaa !39
  %2176 = call i8* @realloc(i8* noundef %2175, i64 noundef %2173) #25
  %2177 = icmp eq i8* %2176, null
  br i1 %2177, label %2210, label %2178

2178:                                             ; preds = %2171
  store i64 %2173, i64* %2165, align 8, !tbaa !45
  store i8* %2176, i8** %2174, align 8, !tbaa !39
  %2179 = load i64, i64* %2162, align 8, !tbaa !44
  br label %2180

2180:                                             ; preds = %2178, %2168
  %2181 = phi i8* [ %2176, %2178 ], [ %2170, %2168 ]
  %2182 = phi i64 [ %2179, %2178 ], [ %2164, %2168 ]
  %2183 = add i64 %2182, -1
  %2184 = getelementptr inbounds i8, i8* %2181, i64 %2183
  store i8 0, i8* %2184, align 1, !tbaa !14
  %2185 = load i8, i8* %25, align 8, !tbaa !84
  %2186 = and i8 %2185, 7
  br label %2187

2187:                                             ; preds = %2180, %2152
  %2188 = phi i8 [ %2186, %2180 ], [ %2158, %2152 ]
  %2189 = trunc i64 %2157 to i32
  %2190 = xor i32 %2189, -1
  %2191 = add i32 %2149, %2190
  %2192 = lshr i32 %2147, %2191
  %2193 = and i32 %2192, 1
  %2194 = zext i8 %2188 to i32
  %2195 = shl nuw nsw i32 %2193, %2194
  %2196 = load %struct.ucvector*, %struct.ucvector** %24, align 8, !tbaa !82
  %2197 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %2196, i64 0, i32 0
  %2198 = load i8*, i8** %2197, align 8, !tbaa !39
  %2199 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %2196, i64 0, i32 1
  %2200 = load i64, i64* %2199, align 8, !tbaa !44
  %2201 = add i64 %2200, -1
  %2202 = getelementptr inbounds i8, i8* %2198, i64 %2201
  %2203 = load i8, i8* %2202, align 1, !tbaa !14
  %2204 = trunc i32 %2195 to i8
  %2205 = or i8 %2203, %2204
  store i8 %2205, i8* %2202, align 1, !tbaa !14
  %2206 = load i8, i8* %25, align 8, !tbaa !84
  %2207 = add i8 %2206, 1
  store i8 %2207, i8* %25, align 8, !tbaa !84
  %2208 = add nuw nsw i64 %2157, 1
  %2209 = icmp eq i64 %2208, %2150
  br i1 %2209, label %2210, label %2152

2210:                                             ; preds = %2187, %2171, %2137
  %2211 = phi i8 [ %2138, %2137 ], [ %2153, %2171 ], [ %2207, %2187 ]
  %2212 = phi i8 [ %2139, %2137 ], [ %2154, %2171 ], [ %2207, %2187 ]
  %2213 = phi i8 [ %2140, %2137 ], [ %2155, %2171 ], [ %2207, %2187 ]
  %2214 = phi i8 [ %2141, %2137 ], [ %2156, %2171 ], [ %2207, %2187 ]
  switch i32 %2144, label %2504 [
    i32 16, label %2215
    i32 17, label %2297
    i32 18, label %2426
  ]

2215:                                             ; preds = %2210
  %2216 = add i64 %2142, 1
  %2217 = getelementptr inbounds i32, i32* %892, i64 %2216
  %2218 = load i32, i32* %2217, align 4, !tbaa !9
  %2219 = and i8 %2211, 7
  %2220 = icmp eq i8 %2219, 0
  br i1 %2220, label %2221, label %2248

2221:                                             ; preds = %2215
  %2222 = load %struct.ucvector*, %struct.ucvector** %24, align 8, !tbaa !82
  %2223 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %2222, i64 0, i32 1
  %2224 = load i64, i64* %2223, align 8, !tbaa !44
  %2225 = add i64 %2224, 1
  store i64 %2225, i64* %2223, align 8, !tbaa !44
  %2226 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %2222, i64 0, i32 2
  %2227 = load i64, i64* %2226, align 8, !tbaa !45
  %2228 = icmp ult i64 %2227, %2225
  br i1 %2228, label %2232, label %2229

2229:                                             ; preds = %2221
  %2230 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %2222, i64 0, i32 0
  %2231 = load i8*, i8** %2230, align 8, !tbaa !39
  br label %2241

2232:                                             ; preds = %2221
  %2233 = lshr i64 %2227, 1
  %2234 = add i64 %2233, %2225
  %2235 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %2222, i64 0, i32 0
  %2236 = load i8*, i8** %2235, align 8, !tbaa !39
  %2237 = call i8* @realloc(i8* noundef %2236, i64 noundef %2234) #25
  %2238 = icmp eq i8* %2237, null
  br i1 %2238, label %2504, label %2239

2239:                                             ; preds = %2232
  store i64 %2234, i64* %2226, align 8, !tbaa !45
  store i8* %2237, i8** %2235, align 8, !tbaa !39
  %2240 = load i64, i64* %2223, align 8, !tbaa !44
  br label %2241

2241:                                             ; preds = %2239, %2229
  %2242 = phi i8* [ %2237, %2239 ], [ %2231, %2229 ]
  %2243 = phi i64 [ %2240, %2239 ], [ %2225, %2229 ]
  %2244 = add i64 %2243, -1
  %2245 = getelementptr inbounds i8, i8* %2242, i64 %2244
  store i8 0, i8* %2245, align 1, !tbaa !14
  %2246 = load i8, i8* %25, align 8, !tbaa !84
  %2247 = and i8 %2246, 7
  br label %2248

2248:                                             ; preds = %2241, %2215
  %2249 = phi i8 [ %2247, %2241 ], [ %2219, %2215 ]
  %2250 = and i32 %2218, 1
  %2251 = zext i8 %2249 to i32
  %2252 = shl nuw nsw i32 %2250, %2251
  %2253 = load %struct.ucvector*, %struct.ucvector** %24, align 8, !tbaa !82
  %2254 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %2253, i64 0, i32 0
  %2255 = load i8*, i8** %2254, align 8, !tbaa !39
  %2256 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %2253, i64 0, i32 1
  %2257 = load i64, i64* %2256, align 8, !tbaa !44
  %2258 = add i64 %2257, -1
  %2259 = getelementptr inbounds i8, i8* %2255, i64 %2258
  %2260 = load i8, i8* %2259, align 1, !tbaa !14
  %2261 = trunc i32 %2252 to i8
  %2262 = or i8 %2260, %2261
  store i8 %2262, i8* %2259, align 1, !tbaa !14
  %2263 = load i8, i8* %25, align 8, !tbaa !84
  %2264 = add i8 %2263, 1
  store i8 %2264, i8* %25, align 8, !tbaa !84
  %2265 = and i8 %2264, 7
  %2266 = icmp eq i8 %2265, 0
  br i1 %2266, label %2267, label %2294

2267:                                             ; preds = %2248
  %2268 = load %struct.ucvector*, %struct.ucvector** %24, align 8, !tbaa !82
  %2269 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %2268, i64 0, i32 1
  %2270 = load i64, i64* %2269, align 8, !tbaa !44
  %2271 = add i64 %2270, 1
  store i64 %2271, i64* %2269, align 8, !tbaa !44
  %2272 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %2268, i64 0, i32 2
  %2273 = load i64, i64* %2272, align 8, !tbaa !45
  %2274 = icmp ult i64 %2273, %2271
  br i1 %2274, label %2278, label %2275

2275:                                             ; preds = %2267
  %2276 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %2268, i64 0, i32 0
  %2277 = load i8*, i8** %2276, align 8, !tbaa !39
  br label %2287

2278:                                             ; preds = %2267
  %2279 = lshr i64 %2273, 1
  %2280 = add i64 %2279, %2271
  %2281 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %2268, i64 0, i32 0
  %2282 = load i8*, i8** %2281, align 8, !tbaa !39
  %2283 = call i8* @realloc(i8* noundef %2282, i64 noundef %2280) #25
  %2284 = icmp eq i8* %2283, null
  br i1 %2284, label %2504, label %2285

2285:                                             ; preds = %2278
  store i64 %2280, i64* %2272, align 8, !tbaa !45
  store i8* %2283, i8** %2281, align 8, !tbaa !39
  %2286 = load i64, i64* %2269, align 8, !tbaa !44
  br label %2287

2287:                                             ; preds = %2285, %2275
  %2288 = phi i8* [ %2283, %2285 ], [ %2277, %2275 ]
  %2289 = phi i64 [ %2286, %2285 ], [ %2271, %2275 ]
  %2290 = add i64 %2289, -1
  %2291 = getelementptr inbounds i8, i8* %2288, i64 %2290
  store i8 0, i8* %2291, align 1, !tbaa !14
  %2292 = load i8, i8* %25, align 8, !tbaa !84
  %2293 = and i8 %2292, 7
  br label %2294

2294:                                             ; preds = %2287, %2248
  %2295 = phi i8 [ %2293, %2287 ], [ %2265, %2248 ]
  %2296 = lshr i32 %2218, 1
  br label %2485

2297:                                             ; preds = %2210
  %2298 = add i64 %2142, 1
  %2299 = getelementptr inbounds i32, i32* %892, i64 %2298
  %2300 = load i32, i32* %2299, align 4, !tbaa !9
  %2301 = and i8 %2212, 7
  %2302 = icmp eq i8 %2301, 0
  br i1 %2302, label %2303, label %2330

2303:                                             ; preds = %2297
  %2304 = load %struct.ucvector*, %struct.ucvector** %24, align 8, !tbaa !82
  %2305 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %2304, i64 0, i32 1
  %2306 = load i64, i64* %2305, align 8, !tbaa !44
  %2307 = add i64 %2306, 1
  store i64 %2307, i64* %2305, align 8, !tbaa !44
  %2308 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %2304, i64 0, i32 2
  %2309 = load i64, i64* %2308, align 8, !tbaa !45
  %2310 = icmp ult i64 %2309, %2307
  br i1 %2310, label %2314, label %2311

2311:                                             ; preds = %2303
  %2312 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %2304, i64 0, i32 0
  %2313 = load i8*, i8** %2312, align 8, !tbaa !39
  br label %2323

2314:                                             ; preds = %2303
  %2315 = lshr i64 %2309, 1
  %2316 = add i64 %2315, %2307
  %2317 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %2304, i64 0, i32 0
  %2318 = load i8*, i8** %2317, align 8, !tbaa !39
  %2319 = call i8* @realloc(i8* noundef %2318, i64 noundef %2316) #25
  %2320 = icmp eq i8* %2319, null
  br i1 %2320, label %2504, label %2321

2321:                                             ; preds = %2314
  store i64 %2316, i64* %2308, align 8, !tbaa !45
  store i8* %2319, i8** %2317, align 8, !tbaa !39
  %2322 = load i64, i64* %2305, align 8, !tbaa !44
  br label %2323

2323:                                             ; preds = %2321, %2311
  %2324 = phi i8* [ %2319, %2321 ], [ %2313, %2311 ]
  %2325 = phi i64 [ %2322, %2321 ], [ %2307, %2311 ]
  %2326 = add i64 %2325, -1
  %2327 = getelementptr inbounds i8, i8* %2324, i64 %2326
  store i8 0, i8* %2327, align 1, !tbaa !14
  %2328 = load i8, i8* %25, align 8, !tbaa !84
  %2329 = and i8 %2328, 7
  br label %2330

2330:                                             ; preds = %2323, %2297
  %2331 = phi i8 [ %2329, %2323 ], [ %2301, %2297 ]
  %2332 = and i32 %2300, 1
  %2333 = zext i8 %2331 to i32
  %2334 = shl nuw nsw i32 %2332, %2333
  %2335 = load %struct.ucvector*, %struct.ucvector** %24, align 8, !tbaa !82
  %2336 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %2335, i64 0, i32 0
  %2337 = load i8*, i8** %2336, align 8, !tbaa !39
  %2338 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %2335, i64 0, i32 1
  %2339 = load i64, i64* %2338, align 8, !tbaa !44
  %2340 = add i64 %2339, -1
  %2341 = getelementptr inbounds i8, i8* %2337, i64 %2340
  %2342 = load i8, i8* %2341, align 1, !tbaa !14
  %2343 = trunc i32 %2334 to i8
  %2344 = or i8 %2342, %2343
  store i8 %2344, i8* %2341, align 1, !tbaa !14
  %2345 = load i8, i8* %25, align 8, !tbaa !84
  %2346 = add i8 %2345, 1
  store i8 %2346, i8* %25, align 8, !tbaa !84
  %2347 = and i8 %2346, 7
  %2348 = icmp eq i8 %2347, 0
  br i1 %2348, label %2349, label %2376

2349:                                             ; preds = %2330
  %2350 = load %struct.ucvector*, %struct.ucvector** %24, align 8, !tbaa !82
  %2351 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %2350, i64 0, i32 1
  %2352 = load i64, i64* %2351, align 8, !tbaa !44
  %2353 = add i64 %2352, 1
  store i64 %2353, i64* %2351, align 8, !tbaa !44
  %2354 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %2350, i64 0, i32 2
  %2355 = load i64, i64* %2354, align 8, !tbaa !45
  %2356 = icmp ult i64 %2355, %2353
  br i1 %2356, label %2360, label %2357

2357:                                             ; preds = %2349
  %2358 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %2350, i64 0, i32 0
  %2359 = load i8*, i8** %2358, align 8, !tbaa !39
  br label %2369

2360:                                             ; preds = %2349
  %2361 = lshr i64 %2355, 1
  %2362 = add i64 %2361, %2353
  %2363 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %2350, i64 0, i32 0
  %2364 = load i8*, i8** %2363, align 8, !tbaa !39
  %2365 = call i8* @realloc(i8* noundef %2364, i64 noundef %2362) #25
  %2366 = icmp eq i8* %2365, null
  br i1 %2366, label %2504, label %2367

2367:                                             ; preds = %2360
  store i64 %2362, i64* %2354, align 8, !tbaa !45
  store i8* %2365, i8** %2363, align 8, !tbaa !39
  %2368 = load i64, i64* %2351, align 8, !tbaa !44
  br label %2369

2369:                                             ; preds = %2367, %2357
  %2370 = phi i8* [ %2365, %2367 ], [ %2359, %2357 ]
  %2371 = phi i64 [ %2368, %2367 ], [ %2353, %2357 ]
  %2372 = add i64 %2371, -1
  %2373 = getelementptr inbounds i8, i8* %2370, i64 %2372
  store i8 0, i8* %2373, align 1, !tbaa !14
  %2374 = load i8, i8* %25, align 8, !tbaa !84
  %2375 = and i8 %2374, 7
  br label %2376

2376:                                             ; preds = %2369, %2330
  %2377 = phi i8 [ %2375, %2369 ], [ %2347, %2330 ]
  %2378 = lshr i32 %2300, 1
  %2379 = and i32 %2378, 1
  %2380 = zext i8 %2377 to i32
  %2381 = shl nuw nsw i32 %2379, %2380
  %2382 = load %struct.ucvector*, %struct.ucvector** %24, align 8, !tbaa !82
  %2383 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %2382, i64 0, i32 0
  %2384 = load i8*, i8** %2383, align 8, !tbaa !39
  %2385 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %2382, i64 0, i32 1
  %2386 = load i64, i64* %2385, align 8, !tbaa !44
  %2387 = add i64 %2386, -1
  %2388 = getelementptr inbounds i8, i8* %2384, i64 %2387
  %2389 = load i8, i8* %2388, align 1, !tbaa !14
  %2390 = trunc i32 %2381 to i8
  %2391 = or i8 %2389, %2390
  store i8 %2391, i8* %2388, align 1, !tbaa !14
  %2392 = load i8, i8* %25, align 8, !tbaa !84
  %2393 = add i8 %2392, 1
  store i8 %2393, i8* %25, align 8, !tbaa !84
  %2394 = and i8 %2393, 7
  %2395 = icmp eq i8 %2394, 0
  br i1 %2395, label %2396, label %2423

2396:                                             ; preds = %2376
  %2397 = load %struct.ucvector*, %struct.ucvector** %24, align 8, !tbaa !82
  %2398 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %2397, i64 0, i32 1
  %2399 = load i64, i64* %2398, align 8, !tbaa !44
  %2400 = add i64 %2399, 1
  store i64 %2400, i64* %2398, align 8, !tbaa !44
  %2401 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %2397, i64 0, i32 2
  %2402 = load i64, i64* %2401, align 8, !tbaa !45
  %2403 = icmp ult i64 %2402, %2400
  br i1 %2403, label %2407, label %2404

2404:                                             ; preds = %2396
  %2405 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %2397, i64 0, i32 0
  %2406 = load i8*, i8** %2405, align 8, !tbaa !39
  br label %2416

2407:                                             ; preds = %2396
  %2408 = lshr i64 %2402, 1
  %2409 = add i64 %2408, %2400
  %2410 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %2397, i64 0, i32 0
  %2411 = load i8*, i8** %2410, align 8, !tbaa !39
  %2412 = call i8* @realloc(i8* noundef %2411, i64 noundef %2409) #25
  %2413 = icmp eq i8* %2412, null
  br i1 %2413, label %2504, label %2414

2414:                                             ; preds = %2407
  store i64 %2409, i64* %2401, align 8, !tbaa !45
  store i8* %2412, i8** %2410, align 8, !tbaa !39
  %2415 = load i64, i64* %2398, align 8, !tbaa !44
  br label %2416

2416:                                             ; preds = %2414, %2404
  %2417 = phi i8* [ %2412, %2414 ], [ %2406, %2404 ]
  %2418 = phi i64 [ %2415, %2414 ], [ %2400, %2404 ]
  %2419 = add i64 %2418, -1
  %2420 = getelementptr inbounds i8, i8* %2417, i64 %2419
  store i8 0, i8* %2420, align 1, !tbaa !14
  %2421 = load i8, i8* %25, align 8, !tbaa !84
  %2422 = and i8 %2421, 7
  br label %2423

2423:                                             ; preds = %2416, %2376
  %2424 = phi i8 [ %2422, %2416 ], [ %2394, %2376 ]
  %2425 = lshr i32 %2300, 2
  br label %2485

2426:                                             ; preds = %2210
  %2427 = add i64 %2142, 1
  %2428 = getelementptr inbounds i32, i32* %892, i64 %2427
  %2429 = load i32, i32* %2428, align 4, !tbaa !9
  br label %2430

2430:                                             ; preds = %2464, %2426
  %2431 = phi i8 [ %2211, %2426 ], [ %2482, %2464 ]
  %2432 = phi i8 [ %2212, %2426 ], [ %2482, %2464 ]
  %2433 = phi i8 [ %2213, %2426 ], [ %2482, %2464 ]
  %2434 = phi i64 [ 0, %2426 ], [ %2483, %2464 ]
  %2435 = and i8 %2433, 7
  %2436 = icmp eq i8 %2435, 0
  br i1 %2436, label %2437, label %2464

2437:                                             ; preds = %2430
  %2438 = load %struct.ucvector*, %struct.ucvector** %24, align 8, !tbaa !82
  %2439 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %2438, i64 0, i32 1
  %2440 = load i64, i64* %2439, align 8, !tbaa !44
  %2441 = add i64 %2440, 1
  store i64 %2441, i64* %2439, align 8, !tbaa !44
  %2442 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %2438, i64 0, i32 2
  %2443 = load i64, i64* %2442, align 8, !tbaa !45
  %2444 = icmp ult i64 %2443, %2441
  br i1 %2444, label %2448, label %2445

2445:                                             ; preds = %2437
  %2446 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %2438, i64 0, i32 0
  %2447 = load i8*, i8** %2446, align 8, !tbaa !39
  br label %2457

2448:                                             ; preds = %2437
  %2449 = lshr i64 %2443, 1
  %2450 = add i64 %2449, %2441
  %2451 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %2438, i64 0, i32 0
  %2452 = load i8*, i8** %2451, align 8, !tbaa !39
  %2453 = call i8* @realloc(i8* noundef %2452, i64 noundef %2450) #25
  %2454 = icmp eq i8* %2453, null
  br i1 %2454, label %2504, label %2455

2455:                                             ; preds = %2448
  store i64 %2450, i64* %2442, align 8, !tbaa !45
  store i8* %2453, i8** %2451, align 8, !tbaa !39
  %2456 = load i64, i64* %2439, align 8, !tbaa !44
  br label %2457

2457:                                             ; preds = %2455, %2445
  %2458 = phi i8* [ %2453, %2455 ], [ %2447, %2445 ]
  %2459 = phi i64 [ %2456, %2455 ], [ %2441, %2445 ]
  %2460 = add i64 %2459, -1
  %2461 = getelementptr inbounds i8, i8* %2458, i64 %2460
  store i8 0, i8* %2461, align 1, !tbaa !14
  %2462 = load i8, i8* %25, align 8, !tbaa !84
  %2463 = and i8 %2462, 7
  br label %2464

2464:                                             ; preds = %2457, %2430
  %2465 = phi i8 [ %2463, %2457 ], [ %2435, %2430 ]
  %2466 = trunc i64 %2434 to i32
  %2467 = lshr i32 %2429, %2466
  %2468 = and i32 %2467, 1
  %2469 = zext i8 %2465 to i32
  %2470 = shl nuw nsw i32 %2468, %2469
  %2471 = load %struct.ucvector*, %struct.ucvector** %24, align 8, !tbaa !82
  %2472 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %2471, i64 0, i32 0
  %2473 = load i8*, i8** %2472, align 8, !tbaa !39
  %2474 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %2471, i64 0, i32 1
  %2475 = load i64, i64* %2474, align 8, !tbaa !44
  %2476 = add i64 %2475, -1
  %2477 = getelementptr inbounds i8, i8* %2473, i64 %2476
  %2478 = load i8, i8* %2477, align 1, !tbaa !14
  %2479 = trunc i32 %2470 to i8
  %2480 = or i8 %2478, %2479
  store i8 %2480, i8* %2477, align 1, !tbaa !14
  %2481 = load i8, i8* %25, align 8, !tbaa !84
  %2482 = add i8 %2481, 1
  store i8 %2482, i8* %25, align 8, !tbaa !84
  %2483 = add nuw nsw i64 %2434, 1
  %2484 = icmp eq i64 %2483, 7
  br i1 %2484, label %2504, label %2430

2485:                                             ; preds = %2423, %2294
  %2486 = phi i32 [ %2296, %2294 ], [ %2425, %2423 ]
  %2487 = phi i8 [ %2295, %2294 ], [ %2424, %2423 ]
  %2488 = phi i64 [ %2216, %2294 ], [ %2298, %2423 ]
  %2489 = and i32 %2486, 1
  %2490 = zext i8 %2487 to i32
  %2491 = shl nuw nsw i32 %2489, %2490
  %2492 = load %struct.ucvector*, %struct.ucvector** %24, align 8, !tbaa !82
  %2493 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %2492, i64 0, i32 0
  %2494 = load i8*, i8** %2493, align 8, !tbaa !39
  %2495 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %2492, i64 0, i32 1
  %2496 = load i64, i64* %2495, align 8, !tbaa !44
  %2497 = add i64 %2496, -1
  %2498 = getelementptr inbounds i8, i8* %2494, i64 %2497
  %2499 = load i8, i8* %2498, align 1, !tbaa !14
  %2500 = trunc i32 %2491 to i8
  %2501 = or i8 %2499, %2500
  store i8 %2501, i8* %2498, align 1, !tbaa !14
  %2502 = load i8, i8* %25, align 8, !tbaa !84
  %2503 = add i8 %2502, 1
  store i8 %2503, i8* %25, align 8, !tbaa !84
  br label %2504

2504:                                             ; preds = %2464, %2448, %2485, %2407, %2360, %2314, %2278, %2232, %2210
  %2505 = phi i8 [ %2211, %2210 ], [ %2264, %2278 ], [ %2211, %2232 ], [ %2393, %2407 ], [ %2346, %2360 ], [ %2211, %2314 ], [ %2503, %2485 ], [ %2431, %2448 ], [ %2482, %2464 ]
  %2506 = phi i8 [ %2212, %2210 ], [ %2264, %2278 ], [ %2211, %2232 ], [ %2393, %2407 ], [ %2346, %2360 ], [ %2212, %2314 ], [ %2503, %2485 ], [ %2432, %2448 ], [ %2482, %2464 ]
  %2507 = phi i8 [ %2213, %2210 ], [ %2264, %2278 ], [ %2211, %2232 ], [ %2393, %2407 ], [ %2346, %2360 ], [ %2212, %2314 ], [ %2503, %2485 ], [ %2433, %2448 ], [ %2482, %2464 ]
  %2508 = phi i8 [ %2214, %2210 ], [ %2264, %2278 ], [ %2211, %2232 ], [ %2393, %2407 ], [ %2346, %2360 ], [ %2212, %2314 ], [ %2503, %2485 ], [ %2433, %2448 ], [ %2482, %2464 ]
  %2509 = phi i64 [ %2142, %2210 ], [ %2216, %2278 ], [ %2216, %2232 ], [ %2298, %2407 ], [ %2298, %2360 ], [ %2298, %2314 ], [ %2488, %2485 ], [ %2427, %2448 ], [ %2427, %2464 ]
  %2510 = add i64 %2509, 1
  %2511 = icmp eq i64 %2510, %1115
  br i1 %2511, label %2512, label %2137

2512:                                             ; preds = %2504, %1982
  call fastcc void @_ZL13writeLZ77dataP16LodePNGBitWriterPK8uivectorPK11HuffmanTreeS6_(%struct.LodePNGBitWriter* noundef nonnull %14, %struct.uivector* noundef nonnull %6, %struct.HuffmanTree* noundef nonnull %7, %struct.HuffmanTree* noundef nonnull %8) #25
  %2513 = load i32*, i32** %317, align 8, !tbaa !53
  %2514 = getelementptr inbounds i32, i32* %2513, i64 256
  %2515 = load i32, i32* %2514, align 4, !tbaa !9
  %2516 = icmp eq i32 %2515, 0
  br i1 %2516, label %2578, label %2517

2517:                                             ; preds = %2512
  %2518 = load i32*, i32** %330, align 8, !tbaa !68
  %2519 = getelementptr inbounds i32, i32* %2518, i64 256
  %2520 = load i32, i32* %2519, align 4, !tbaa !9
  %2521 = zext i32 %2515 to i64
  %2522 = load i8, i8* %25, align 8, !tbaa !84
  br label %2523

2523:                                             ; preds = %2555, %2517
  %2524 = phi i8 [ %2522, %2517 ], [ %2575, %2555 ]
  %2525 = phi i64 [ 0, %2517 ], [ %2576, %2555 ]
  %2526 = and i8 %2524, 7
  %2527 = icmp eq i8 %2526, 0
  br i1 %2527, label %2528, label %2555

2528:                                             ; preds = %2523
  %2529 = load %struct.ucvector*, %struct.ucvector** %24, align 8, !tbaa !82
  %2530 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %2529, i64 0, i32 1
  %2531 = load i64, i64* %2530, align 8, !tbaa !44
  %2532 = add i64 %2531, 1
  store i64 %2532, i64* %2530, align 8, !tbaa !44
  %2533 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %2529, i64 0, i32 2
  %2534 = load i64, i64* %2533, align 8, !tbaa !45
  %2535 = icmp ult i64 %2534, %2532
  br i1 %2535, label %2539, label %2536

2536:                                             ; preds = %2528
  %2537 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %2529, i64 0, i32 0
  %2538 = load i8*, i8** %2537, align 8, !tbaa !39
  br label %2548

2539:                                             ; preds = %2528
  %2540 = lshr i64 %2534, 1
  %2541 = add i64 %2540, %2532
  %2542 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %2529, i64 0, i32 0
  %2543 = load i8*, i8** %2542, align 8, !tbaa !39
  %2544 = call i8* @realloc(i8* noundef %2543, i64 noundef %2541) #25
  %2545 = icmp eq i8* %2544, null
  br i1 %2545, label %2578, label %2546

2546:                                             ; preds = %2539
  store i64 %2541, i64* %2533, align 8, !tbaa !45
  store i8* %2544, i8** %2542, align 8, !tbaa !39
  %2547 = load i64, i64* %2530, align 8, !tbaa !44
  br label %2548

2548:                                             ; preds = %2546, %2536
  %2549 = phi i8* [ %2544, %2546 ], [ %2538, %2536 ]
  %2550 = phi i64 [ %2547, %2546 ], [ %2532, %2536 ]
  %2551 = add i64 %2550, -1
  %2552 = getelementptr inbounds i8, i8* %2549, i64 %2551
  store i8 0, i8* %2552, align 1, !tbaa !14
  %2553 = load i8, i8* %25, align 8, !tbaa !84
  %2554 = and i8 %2553, 7
  br label %2555

2555:                                             ; preds = %2548, %2523
  %2556 = phi i8 [ %2554, %2548 ], [ %2526, %2523 ]
  %2557 = trunc i64 %2525 to i32
  %2558 = xor i32 %2557, -1
  %2559 = add i32 %2515, %2558
  %2560 = lshr i32 %2520, %2559
  %2561 = and i32 %2560, 1
  %2562 = zext i8 %2556 to i32
  %2563 = shl nuw nsw i32 %2561, %2562
  %2564 = load %struct.ucvector*, %struct.ucvector** %24, align 8, !tbaa !82
  %2565 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %2564, i64 0, i32 0
  %2566 = load i8*, i8** %2565, align 8, !tbaa !39
  %2567 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %2564, i64 0, i32 1
  %2568 = load i64, i64* %2567, align 8, !tbaa !44
  %2569 = add i64 %2568, -1
  %2570 = getelementptr inbounds i8, i8* %2566, i64 %2569
  %2571 = load i8, i8* %2570, align 1, !tbaa !14
  %2572 = trunc i32 %2563 to i8
  %2573 = or i8 %2571, %2572
  store i8 %2573, i8* %2570, align 1, !tbaa !14
  %2574 = load i8, i8* %25, align 8, !tbaa !84
  %2575 = add i8 %2574, 1
  store i8 %2575, i8* %25, align 8, !tbaa !84
  %2576 = add nuw nsw i64 %2525, 1
  %2577 = icmp eq i64 %2576, %2521
  br i1 %2577, label %2578, label %2523

2578:                                             ; preds = %2555, %2539, %2512, %1125, %1118, %1113, %878, %875, %870, %866, %855, %850, %846, %728, %716, %700
  %2579 = phi i8* [ null, %716 ], [ null, %855 ], [ null, %875 ], [ null, %700 ], [ null, %878 ], [ %1132, %2512 ], [ null, %728 ], [ null, %846 ], [ null, %850 ], [ null, %866 ], [ null, %870 ], [ %1126, %1125 ], [ %1116, %1118 ], [ null, %1113 ], [ %1132, %2539 ], [ %1132, %2555 ]
  %2580 = phi i8* [ null, %716 ], [ null, %855 ], [ null, %875 ], [ null, %700 ], [ %891, %878 ], [ %891, %2512 ], [ null, %728 ], [ null, %846 ], [ null, %850 ], [ null, %866 ], [ null, %870 ], [ %891, %1125 ], [ %891, %1118 ], [ %891, %1113 ], [ %891, %2539 ], [ %891, %2555 ]
  %2581 = phi i8* [ null, %716 ], [ null, %855 ], [ null, %875 ], [ null, %700 ], [ %889, %878 ], [ %889, %2512 ], [ null, %728 ], [ null, %846 ], [ null, %850 ], [ null, %866 ], [ null, %870 ], [ %889, %1125 ], [ %889, %1118 ], [ %889, %1113 ], [ %889, %2539 ], [ %889, %2555 ]
  %2582 = phi i32 [ %721, %716 ], [ %856, %855 ], [ %876, %875 ], [ 83, %700 ], [ 83, %878 ], [ 64, %2512 ], [ 83, %728 ], [ 83, %846 ], [ %853, %850 ], [ 83, %866 ], [ %873, %870 ], [ %1123, %1125 ], [ %1120, %1118 ], [ 83, %1113 ], [ 0, %2539 ], [ 0, %2555 ]
  %2583 = load i8*, i8** %315, align 8, !tbaa !112
  call void @free(i8* noundef %2583) #25
  %2584 = load i8*, i8** %331, align 8, !tbaa !68
  call void @free(i8* noundef %2584) #25
  %2585 = load i8*, i8** %318, align 8, !tbaa !53
  call void @free(i8* noundef %2585) #25
  %2586 = load i8*, i8** %303, align 8, !tbaa !64
  call void @free(i8* noundef %2586) #25
  %2587 = load i8*, i8** %333, align 8, !tbaa !65
  call void @free(i8* noundef %2587) #25
  %2588 = load i8*, i8** %334, align 8, !tbaa !68
  call void @free(i8* noundef %2588) #25
  %2589 = load i8*, i8** %322, align 8, !tbaa !53
  call void @free(i8* noundef %2589) #25
  %2590 = load i8*, i8** %305, align 8, !tbaa !64
  call void @free(i8* noundef %2590) #25
  %2591 = load i8*, i8** %336, align 8, !tbaa !65
  call void @free(i8* noundef %2591) #25
  %2592 = load i8*, i8** %337, align 8, !tbaa !68
  call void @free(i8* noundef %2592) #25
  call void @free(i8* noundef %2579) #25
  %2593 = load i8*, i8** %307, align 8, !tbaa !64
  call void @free(i8* noundef %2593) #25
  %2594 = load i8*, i8** %339, align 8, !tbaa !65
  call void @free(i8* noundef %2594) #25
  call void @free(i8* noundef %702) #25
  call void @free(i8* noundef %704) #25
  call void @free(i8* noundef %706) #25
  call void @free(i8* noundef %2581) #25
  call void @free(i8* noundef %2580) #25
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %302) #25
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %301) #25
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %300) #25
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %299) #25
  br label %2595

2595:                                             ; preds = %2578, %690, %361
  %2596 = phi i32 [ %691, %690 ], [ %2582, %2578 ], [ 0, %361 ]
  %2597 = add nuw i64 %363, 1
  %2598 = icmp ne i64 %2597, %110
  %2599 = icmp eq i32 %2596, 0
  %2600 = and i1 %2598, %2599
  br i1 %2600, label %2601, label %2603

2601:                                             ; preds = %2595
  %2602 = load i32, i32* %26, align 8, !tbaa !85
  br label %361

2603:                                             ; preds = %2595, %295, %140, %104
  %2604 = phi i32 [ 83, %140 ], [ 83, %104 ], [ 0, %295 ], [ %2596, %2595 ]
  call void @free(i8* noundef %113) #25
  call void @free(i8* noundef %117) #25
  call void @free(i8* noundef %121) #25
  call void @free(i8* noundef %124) #25
  call void @free(i8* noundef %127) #25
  call void @free(i8* noundef %130) #25
  br label %2605

2605:                                             ; preds = %55, %90, %5, %30, %2603
  %2606 = phi i32 [ %2604, %2603 ], [ 61, %5 ], [ 0, %30 ], [ 83, %55 ], [ 0, %90 ]
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %23) #25
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %22) #25
  %2607 = load i8*, i8** %19, align 8, !tbaa !39
  store i8* %2607, i8** %0, align 8, !tbaa !7
  %2608 = load i64, i64* %20, align 8, !tbaa !44
  store i64 %2608, i64* %1, align 8, !tbaa !3
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %16) #25
  ret i32 %2606
}

; Function Attrs: nofree nosync nounwind readnone speculatable willreturn
declare i64 @llvm.umin.i64(i64, i64) #9

; Function Attrs: nounwind uwtable
define internal fastcc noundef i32 @_ZL10encodeLZ77P8uivectorP4HashPKhmmjjjj(%struct.uivector* nocapture noundef %0, %struct.Hash* nocapture noundef readonly %1, i8* noundef %2, i64 noundef %3, i64 noundef %4, i32 noundef %5, i32 noundef %6, i32 noundef %7, i32 noundef %8) unnamed_addr #3 {
  %10 = icmp ugt i32 %5, 8191
  %11 = lshr i32 %5, 3
  %12 = select i1 %10, i32 258, i32 64
  %13 = select i1 %10, i32 %5, i32 %11
  %14 = add i32 %5, -32769
  %15 = icmp ult i32 %14, -32768
  br i1 %15, label %617, label %16

16:                                               ; preds = %9
  %17 = add nsw i32 %5, -1
  %18 = tail call i32 @llvm.ctpop.i32(i32 %5), !range !130
  %19 = icmp ult i32 %18, 2
  br i1 %19, label %20, label %617

20:                                               ; preds = %16
  %21 = icmp ult i32 %7, 258
  %22 = select i1 %21, i32 %7, i32 258
  %23 = icmp ult i64 %3, %4
  br i1 %23, label %24, label %617

24:                                               ; preds = %20
  %25 = zext i32 %17 to i64
  %26 = getelementptr inbounds i8, i8* %2, i64 %4
  %27 = getelementptr inbounds %struct.Hash, %struct.Hash* %1, i64 0, i32 2
  %28 = getelementptr inbounds %struct.Hash, %struct.Hash* %1, i64 0, i32 0
  %29 = getelementptr inbounds %struct.Hash, %struct.Hash* %1, i64 0, i32 1
  %30 = getelementptr inbounds %struct.Hash, %struct.Hash* %1, i64 0, i32 5
  %31 = getelementptr inbounds %struct.Hash, %struct.Hash* %1, i64 0, i32 3
  %32 = getelementptr inbounds %struct.Hash, %struct.Hash* %1, i64 0, i32 4
  %33 = icmp eq i32 %13, 0
  %34 = zext i32 %5 to i64
  %35 = icmp eq i32 %8, 0
  %36 = getelementptr inbounds %struct.uivector, %struct.uivector* %0, i64 0, i32 1
  %37 = getelementptr inbounds %struct.uivector, %struct.uivector* %0, i64 0, i32 2
  %38 = getelementptr inbounds %struct.uivector, %struct.uivector* %0, i64 0, i32 0
  %39 = bitcast %struct.uivector* %0 to i8**
  br label %40

40:                                               ; preds = %24, %609
  %41 = phi i64 [ %3, %24 ], [ %615, %609 ]
  %42 = phi i32 [ 0, %24 ], [ %613, %609 ]
  %43 = phi i32 [ 0, %24 ], [ %612, %609 ]
  %44 = phi i32 [ 0, %24 ], [ %611, %609 ]
  %45 = phi i32 [ 0, %24 ], [ %610, %609 ]
  %46 = and i64 %41, %25
  %47 = add i64 %41, 2
  %48 = icmp ult i64 %47, %4
  br i1 %48, label %49, label %64

49:                                               ; preds = %40
  %50 = getelementptr inbounds i8, i8* %2, i64 %41
  %51 = load i8, i8* %50, align 1, !tbaa !14
  %52 = zext i8 %51 to i32
  %53 = add nuw i64 %41, 1
  %54 = getelementptr inbounds i8, i8* %2, i64 %53
  %55 = load i8, i8* %54, align 1, !tbaa !14
  %56 = zext i8 %55 to i32
  %57 = shl nuw nsw i32 %56, 4
  %58 = xor i32 %57, %52
  %59 = getelementptr inbounds i8, i8* %2, i64 %47
  %60 = load i8, i8* %59, align 1, !tbaa !14
  %61 = zext i8 %60 to i32
  %62 = shl nuw nsw i32 %61, 8
  %63 = xor i32 %58, %62
  br label %115

64:                                               ; preds = %40
  %65 = sub i64 %4, %41
  %66 = icmp eq i64 %65, 0
  br i1 %66, label %119, label %67

67:                                               ; preds = %64
  %68 = icmp ult i64 %65, 8
  br i1 %68, label %99, label %69

69:                                               ; preds = %67
  %70 = and i64 %65, -8
  br label %71

71:                                               ; preds = %71, %69
  %72 = phi i64 [ 0, %69 ], [ %92, %71 ]
  %73 = phi <4 x i32> [ zeroinitializer, %69 ], [ %90, %71 ]
  %74 = phi <4 x i32> [ zeroinitializer, %69 ], [ %91, %71 ]
  %75 = phi <4 x i32> [ <i32 0, i32 1, i32 2, i32 3>, %69 ], [ %93, %71 ]
  %76 = add i64 %72, %41
  %77 = getelementptr inbounds i8, i8* %2, i64 %76
  %78 = bitcast i8* %77 to <4 x i8>*
  %79 = load <4 x i8>, <4 x i8>* %78, align 1, !tbaa !14
  %80 = getelementptr inbounds i8, i8* %77, i64 4
  %81 = bitcast i8* %80 to <4 x i8>*
  %82 = load <4 x i8>, <4 x i8>* %81, align 1, !tbaa !14
  %83 = zext <4 x i8> %79 to <4 x i32>
  %84 = zext <4 x i8> %82 to <4 x i32>
  %85 = shl <4 x i32> %75, <i32 3, i32 3, i32 3, i32 3>
  %86 = shl <4 x i32> %75, <i32 3, i32 3, i32 3, i32 3>
  %87 = add <4 x i32> %86, <i32 32, i32 32, i32 32, i32 32>
  %88 = shl <4 x i32> %83, %85
  %89 = shl <4 x i32> %84, %87
  %90 = xor <4 x i32> %88, %73
  %91 = xor <4 x i32> %89, %74
  %92 = add nuw i64 %72, 8
  %93 = add <4 x i32> %75, <i32 8, i32 8, i32 8, i32 8>
  %94 = icmp eq i64 %92, %70
  br i1 %94, label %95, label %71, !llvm.loop !131

95:                                               ; preds = %71
  %96 = xor <4 x i32> %91, %90
  %97 = call i32 @llvm.vector.reduce.xor.v4i32(<4 x i32> %96)
  %98 = icmp eq i64 %65, %70
  br i1 %98, label %115, label %99

99:                                               ; preds = %67, %95
  %100 = phi i64 [ 0, %67 ], [ %70, %95 ]
  %101 = phi i32 [ 0, %67 ], [ %97, %95 ]
  br label %102

102:                                              ; preds = %99, %102
  %103 = phi i64 [ %113, %102 ], [ %100, %99 ]
  %104 = phi i32 [ %112, %102 ], [ %101, %99 ]
  %105 = add i64 %103, %41
  %106 = getelementptr inbounds i8, i8* %2, i64 %105
  %107 = load i8, i8* %106, align 1, !tbaa !14
  %108 = zext i8 %107 to i32
  %109 = trunc i64 %103 to i32
  %110 = shl i32 %109, 3
  %111 = shl i32 %108, %110
  %112 = xor i32 %111, %104
  %113 = add nuw i64 %103, 1
  %114 = icmp eq i64 %113, %65
  br i1 %114, label %115, label %102, !llvm.loop !132

115:                                              ; preds = %102, %95, %49
  %116 = phi i32 [ %63, %49 ], [ %97, %95 ], [ %112, %102 ]
  %117 = and i32 %116, 65535
  %118 = icmp eq i32 %117, 0
  br i1 %118, label %119, label %151

119:                                              ; preds = %64, %115
  %120 = icmp eq i32 %45, 0
  br i1 %120, label %121, label %140

121:                                              ; preds = %119
  %122 = getelementptr inbounds i8, i8* %2, i64 %41
  %123 = getelementptr inbounds i8, i8* %122, i64 258
  %124 = icmp ugt i8* %123, %26
  %125 = select i1 %124, i8* %26, i8* %123
  %126 = icmp eq i8* %122, %125
  br i1 %126, label %134, label %127

127:                                              ; preds = %121, %131
  %128 = phi i8* [ %132, %131 ], [ %122, %121 ]
  %129 = load i8, i8* %128, align 1, !tbaa !14
  %130 = icmp eq i8 %129, 0
  br i1 %130, label %131, label %134

131:                                              ; preds = %127
  %132 = getelementptr inbounds i8, i8* %128, i64 1
  %133 = icmp eq i8* %132, %125
  br i1 %133, label %134, label %127

134:                                              ; preds = %127, %131, %121
  %135 = phi i8* [ %122, %121 ], [ %128, %127 ], [ %125, %131 ]
  %136 = ptrtoint i8* %135 to i64
  %137 = ptrtoint i8* %122 to i64
  %138 = sub i64 %136, %137
  %139 = trunc i64 %138 to i32
  br label %151

140:                                              ; preds = %119
  %141 = zext i32 %45 to i64
  %142 = add i64 %41, %141
  %143 = icmp ugt i64 %142, %4
  br i1 %143, label %149, label %144

144:                                              ; preds = %140
  %145 = add i64 %142, -1
  %146 = getelementptr inbounds i8, i8* %2, i64 %145
  %147 = load i8, i8* %146, align 1, !tbaa !14
  %148 = icmp eq i8 %147, 0
  br i1 %148, label %151, label %149

149:                                              ; preds = %144, %140
  %150 = add i32 %45, -1
  br label %151

151:                                              ; preds = %115, %134, %149, %144
  %152 = phi i32 [ 0, %134 ], [ 0, %149 ], [ 0, %144 ], [ %117, %115 ]
  %153 = phi i32 [ %139, %134 ], [ %150, %149 ], [ %45, %144 ], [ 0, %115 ]
  %154 = trunc i32 %153 to i16
  %155 = load i32*, i32** %27, align 8, !tbaa !94
  %156 = getelementptr inbounds i32, i32* %155, i64 %46
  store i32 %152, i32* %156, align 4, !tbaa !9
  %157 = load i32*, i32** %28, align 8, !tbaa !92
  %158 = zext i32 %152 to i64
  %159 = getelementptr inbounds i32, i32* %157, i64 %158
  %160 = load i32, i32* %159, align 4, !tbaa !9
  %161 = icmp eq i32 %160, -1
  br i1 %161, label %166, label %162

162:                                              ; preds = %151
  %163 = trunc i32 %160 to i16
  %164 = load i16*, i16** %29, align 8, !tbaa !95
  %165 = getelementptr inbounds i16, i16* %164, i64 %46
  store i16 %163, i16* %165, align 2, !tbaa !66
  br label %166

166:                                              ; preds = %162, %151
  %167 = trunc i64 %46 to i32
  store i32 %167, i32* %159, align 4, !tbaa !9
  %168 = load i16*, i16** %30, align 8, !tbaa !96
  %169 = getelementptr inbounds i16, i16* %168, i64 %46
  store i16 %154, i16* %169, align 2, !tbaa !66
  %170 = load i32*, i32** %31, align 8, !tbaa !97
  %171 = and i32 %153, 65535
  %172 = zext i32 %171 to i64
  %173 = getelementptr inbounds i32, i32* %170, i64 %172
  %174 = load i32, i32* %173, align 4, !tbaa !9
  %175 = icmp eq i32 %174, -1
  br i1 %175, label %180, label %176

176:                                              ; preds = %166
  %177 = trunc i32 %174 to i16
  %178 = load i16*, i16** %32, align 8, !tbaa !98
  %179 = getelementptr inbounds i16, i16* %178, i64 %46
  store i16 %177, i16* %179, align 2, !tbaa !66
  br label %180

180:                                              ; preds = %166, %176
  store i32 %167, i32* %173, align 4, !tbaa !9
  %181 = load i16*, i16** %29, align 8, !tbaa !95
  %182 = add i64 %41, 258
  %183 = icmp ugt i64 %182, %4
  %184 = select i1 %183, i64 %4, i64 %182
  %185 = getelementptr inbounds i8, i8* %2, i64 %184
  br i1 %33, label %272, label %186

186:                                              ; preds = %180
  %187 = getelementptr inbounds i16, i16* %181, i64 %46
  %188 = load i16, i16* %187, align 2, !tbaa !66
  %189 = getelementptr inbounds i8, i8* %2, i64 %41
  %190 = icmp ugt i32 %153, 2
  %191 = ptrtoint i8* %189 to i64
  br label %192

192:                                              ; preds = %186, %265
  %193 = phi i32 [ 1, %186 ], [ %267, %265 ]
  %194 = phi i16 [ %188, %186 ], [ %266, %265 ]
  %195 = phi i32 [ 0, %186 ], [ %203, %265 ]
  %196 = phi i32 [ 0, %186 ], [ %244, %265 ]
  %197 = phi i32 [ 0, %186 ], [ %243, %265 ]
  %198 = zext i16 %194 to i64
  %199 = icmp ult i64 %46, %198
  %200 = sub nsw i64 %46, %198
  %201 = select i1 %199, i64 %34, i64 0
  %202 = add nsw i64 %201, %200
  %203 = trunc i64 %202 to i32
  %204 = icmp ugt i32 %195, %203
  br i1 %204, label %272, label %205

205:                                              ; preds = %192
  %206 = icmp eq i32 %203, 0
  br i1 %206, label %242, label %207

207:                                              ; preds = %205
  %208 = and i64 %202, 4294967295
  %209 = sub i64 %41, %208
  %210 = getelementptr inbounds i8, i8* %2, i64 %209
  br i1 %190, label %211, label %220

211:                                              ; preds = %207
  %212 = getelementptr inbounds i16, i16* %168, i64 %198
  %213 = load i16, i16* %212, align 2, !tbaa !66
  %214 = zext i16 %213 to i32
  %215 = icmp ult i32 %153, %214
  %216 = select i1 %215, i32 %153, i32 %214
  %217 = zext i32 %216 to i64
  %218 = getelementptr inbounds i8, i8* %210, i64 %217
  %219 = getelementptr inbounds i8, i8* %189, i64 %217
  br label %220

220:                                              ; preds = %211, %207
  %221 = phi i8* [ %219, %211 ], [ %189, %207 ]
  %222 = phi i8* [ %218, %211 ], [ %210, %207 ]
  %223 = icmp eq i8* %221, %185
  br i1 %223, label %234, label %224

224:                                              ; preds = %220, %230
  %225 = phi i8* [ %231, %230 ], [ %222, %220 ]
  %226 = phi i8* [ %232, %230 ], [ %221, %220 ]
  %227 = load i8, i8* %225, align 1, !tbaa !14
  %228 = load i8, i8* %226, align 1, !tbaa !14
  %229 = icmp eq i8 %227, %228
  br i1 %229, label %230, label %234

230:                                              ; preds = %224
  %231 = getelementptr inbounds i8, i8* %225, i64 1
  %232 = getelementptr inbounds i8, i8* %226, i64 1
  %233 = icmp eq i8* %232, %185
  br i1 %233, label %234, label %224

234:                                              ; preds = %224, %230, %220
  %235 = phi i8* [ %185, %220 ], [ %185, %230 ], [ %226, %224 ]
  %236 = ptrtoint i8* %235 to i64
  %237 = sub i64 %236, %191
  %238 = trunc i64 %237 to i32
  %239 = icmp ult i32 %196, %238
  br i1 %239, label %240, label %242

240:                                              ; preds = %234
  %241 = icmp ugt i32 %22, %238
  br i1 %241, label %242, label %269

242:                                              ; preds = %234, %240, %205
  %243 = phi i32 [ %203, %240 ], [ %197, %234 ], [ %197, %205 ]
  %244 = phi i32 [ %238, %240 ], [ %196, %234 ], [ %196, %205 ]
  %245 = getelementptr inbounds i16, i16* %181, i64 %198
  %246 = load i16, i16* %245, align 2, !tbaa !66
  %247 = icmp eq i16 %194, %246
  br i1 %247, label %272, label %248

248:                                              ; preds = %242
  %249 = icmp ugt i32 %244, %153
  %250 = select i1 %190, i1 %249, i1 false
  br i1 %250, label %251, label %260

251:                                              ; preds = %248
  %252 = load i16*, i16** %32, align 8, !tbaa !98
  %253 = getelementptr inbounds i16, i16* %252, i64 %198
  %254 = load i16, i16* %253, align 2, !tbaa !66
  %255 = zext i16 %254 to i64
  %256 = getelementptr inbounds i16, i16* %168, i64 %255
  %257 = load i16, i16* %256, align 2, !tbaa !66
  %258 = zext i16 %257 to i32
  %259 = icmp eq i32 %153, %258
  br i1 %259, label %265, label %272

260:                                              ; preds = %248
  %261 = zext i16 %246 to i64
  %262 = getelementptr inbounds i32, i32* %155, i64 %261
  %263 = load i32, i32* %262, align 4, !tbaa !9
  %264 = icmp eq i32 %263, %152
  br i1 %264, label %265, label %272

265:                                              ; preds = %260, %251
  %266 = phi i16 [ %254, %251 ], [ %246, %260 ]
  %267 = add i32 %193, 1
  %268 = icmp eq i32 %193, %13
  br i1 %268, label %272, label %192

269:                                              ; preds = %240
  %270 = trunc i64 %202 to i32
  %271 = trunc i64 %237 to i32
  br label %272

272:                                              ; preds = %260, %251, %242, %192, %265, %269, %180
  %273 = phi i32 [ 0, %180 ], [ %270, %269 ], [ %243, %260 ], [ %243, %251 ], [ %243, %242 ], [ %197, %192 ], [ %243, %265 ]
  %274 = phi i32 [ 0, %180 ], [ %271, %269 ], [ %244, %260 ], [ %244, %251 ], [ %244, %242 ], [ %196, %192 ], [ %244, %265 ]
  br i1 %35, label %316, label %275

275:                                              ; preds = %272
  %276 = icmp eq i32 %44, 0
  %277 = icmp ugt i32 %274, 2
  %278 = select i1 %276, i1 %277, i1 false
  br i1 %278, label %279, label %283

279:                                              ; preds = %275
  %280 = icmp ule i32 %274, %12
  %281 = icmp ult i32 %274, 258
  %282 = and i1 %280, %281
  br i1 %282, label %609, label %283

283:                                              ; preds = %279, %275
  br i1 %276, label %316, label %284

284:                                              ; preds = %283
  %285 = icmp eq i64 %41, 0
  br i1 %285, label %617, label %286

286:                                              ; preds = %284
  %287 = add i32 %43, 1
  %288 = icmp ugt i32 %274, %287
  br i1 %288, label %289, label %312

289:                                              ; preds = %286
  %290 = add i64 %41, -1
  %291 = getelementptr inbounds i8, i8* %2, i64 %290
  %292 = load i8, i8* %291, align 1, !tbaa !14
  %293 = zext i8 %292 to i32
  %294 = load i64, i64* %36, align 8, !tbaa !123
  %295 = add i64 %294, 1
  %296 = shl i64 %295, 2
  %297 = load i64, i64* %37, align 8, !tbaa !124
  %298 = icmp ugt i64 %296, %297
  br i1 %298, label %301, label %299

299:                                              ; preds = %289
  %300 = load i32*, i32** %38, align 8, !tbaa !112
  br label %309

301:                                              ; preds = %289
  %302 = lshr i64 %297, 1
  %303 = add i64 %302, %296
  %304 = load i8*, i8** %39, align 8, !tbaa !112
  %305 = tail call i8* @realloc(i8* noundef %304, i64 noundef %303) #25
  %306 = icmp eq i8* %305, null
  br i1 %306, label %617, label %307

307:                                              ; preds = %301
  store i64 %303, i64* %37, align 8, !tbaa !124
  store i8* %305, i8** %39, align 8, !tbaa !112
  %308 = bitcast i8* %305 to i32*
  br label %309

309:                                              ; preds = %299, %307
  %310 = phi i32* [ %300, %299 ], [ %308, %307 ]
  store i64 %295, i64* %36, align 8, !tbaa !123
  %311 = getelementptr inbounds i32, i32* %310, i64 %294
  store i32 %293, i32* %311, align 4, !tbaa !9
  br label %316

312:                                              ; preds = %286
  store i32 -1, i32* %159, align 4, !tbaa !9
  %313 = zext i32 %153 to i64
  %314 = getelementptr inbounds i32, i32* %170, i64 %313
  store i32 -1, i32* %314, align 4, !tbaa !9
  %315 = add i64 %41, -1
  br label %316

316:                                              ; preds = %309, %283, %312, %272
  %317 = phi i32 [ %273, %309 ], [ %42, %312 ], [ %273, %283 ], [ %273, %272 ]
  %318 = phi i32 [ %274, %309 ], [ %43, %312 ], [ %274, %283 ], [ %274, %272 ]
  %319 = phi i32 [ 0, %309 ], [ 0, %312 ], [ 0, %283 ], [ %44, %272 ]
  %320 = phi i64 [ %41, %309 ], [ %315, %312 ], [ %41, %283 ], [ %41, %272 ]
  %321 = icmp ugt i32 %318, 2
  %322 = icmp ugt i32 %317, %5
  %323 = select i1 %321, i1 %322, i1 false
  br i1 %323, label %617, label %324

324:                                              ; preds = %316
  %325 = icmp ult i32 %318, 3
  br i1 %325, label %326, label %348

326:                                              ; preds = %324
  %327 = getelementptr inbounds i8, i8* %2, i64 %320
  %328 = load i8, i8* %327, align 1, !tbaa !14
  %329 = zext i8 %328 to i32
  %330 = load i64, i64* %36, align 8, !tbaa !123
  %331 = add i64 %330, 1
  %332 = shl i64 %331, 2
  %333 = load i64, i64* %37, align 8, !tbaa !124
  %334 = icmp ugt i64 %332, %333
  br i1 %334, label %337, label %335

335:                                              ; preds = %326
  %336 = load i32*, i32** %38, align 8, !tbaa !112
  br label %345

337:                                              ; preds = %326
  %338 = lshr i64 %333, 1
  %339 = add i64 %338, %332
  %340 = load i8*, i8** %39, align 8, !tbaa !112
  %341 = tail call i8* @realloc(i8* noundef %340, i64 noundef %339) #25
  %342 = icmp eq i8* %341, null
  br i1 %342, label %617, label %343

343:                                              ; preds = %337
  store i64 %339, i64* %37, align 8, !tbaa !124
  store i8* %341, i8** %39, align 8, !tbaa !112
  %344 = bitcast i8* %341 to i32*
  br label %345

345:                                              ; preds = %335, %343
  %346 = phi i32* [ %336, %335 ], [ %344, %343 ]
  store i64 %331, i64* %36, align 8, !tbaa !123
  %347 = getelementptr inbounds i32, i32* %346, i64 %330
  store i32 %329, i32* %347, align 4, !tbaa !9
  br label %609

348:                                              ; preds = %324
  %349 = icmp ult i32 %318, %6
  br i1 %349, label %354, label %350

350:                                              ; preds = %348
  %351 = icmp eq i32 %318, 3
  %352 = icmp ugt i32 %317, 4096
  %353 = select i1 %351, i1 %352, i1 false
  br i1 %353, label %354, label %376

354:                                              ; preds = %350, %348
  %355 = getelementptr inbounds i8, i8* %2, i64 %320
  %356 = load i8, i8* %355, align 1, !tbaa !14
  %357 = zext i8 %356 to i32
  %358 = load i64, i64* %36, align 8, !tbaa !123
  %359 = add i64 %358, 1
  %360 = shl i64 %359, 2
  %361 = load i64, i64* %37, align 8, !tbaa !124
  %362 = icmp ugt i64 %360, %361
  br i1 %362, label %365, label %363

363:                                              ; preds = %354
  %364 = load i32*, i32** %38, align 8, !tbaa !112
  br label %373

365:                                              ; preds = %354
  %366 = lshr i64 %361, 1
  %367 = add i64 %366, %360
  %368 = load i8*, i8** %39, align 8, !tbaa !112
  %369 = tail call i8* @realloc(i8* noundef %368, i64 noundef %367) #25
  %370 = icmp eq i8* %369, null
  br i1 %370, label %617, label %371

371:                                              ; preds = %365
  store i64 %367, i64* %37, align 8, !tbaa !124
  store i8* %369, i8** %39, align 8, !tbaa !112
  %372 = bitcast i8* %369 to i32*
  br label %373

373:                                              ; preds = %363, %371
  %374 = phi i32* [ %364, %363 ], [ %372, %371 ]
  store i64 %359, i64* %36, align 8, !tbaa !123
  %375 = getelementptr inbounds i32, i32* %374, i64 %358
  store i32 %357, i32* %375, align 4, !tbaa !9
  br label %609

376:                                              ; preds = %350, %376
  %377 = phi i64 [ %387, %376 ], [ 1, %350 ]
  %378 = phi i64 [ %386, %376 ], [ 28, %350 ]
  %379 = add i64 %378, %377
  %380 = lshr i64 %379, 1
  %381 = getelementptr inbounds [29 x i32], [29 x i32]* @_ZL10LENGTHBASE, i64 0, i64 %380
  %382 = load i32, i32* %381, align 4, !tbaa !9
  %383 = icmp ult i32 %382, %318
  %384 = add nsw i64 %380, -1
  %385 = add nuw i64 %380, 1
  %386 = select i1 %383, i64 %378, i64 %384
  %387 = select i1 %383, i64 %385, i64 %377
  %388 = icmp ugt i64 %387, %386
  br i1 %388, label %389, label %376

389:                                              ; preds = %376
  %390 = icmp ult i64 %387, 29
  br i1 %390, label %391, label %395

391:                                              ; preds = %389
  %392 = getelementptr inbounds [29 x i32], [29 x i32]* @_ZL10LENGTHBASE, i64 0, i64 %387
  %393 = load i32, i32* %392, align 4, !tbaa !9
  %394 = icmp ugt i32 %393, %318
  br i1 %394, label %395, label %397

395:                                              ; preds = %391, %389
  %396 = add i64 %387, -1
  br label %397

397:                                              ; preds = %395, %391
  %398 = phi i64 [ %396, %395 ], [ %387, %391 ]
  %399 = and i64 %398, 4294967295
  %400 = getelementptr inbounds [29 x i32], [29 x i32]* @_ZL10LENGTHBASE, i64 0, i64 %399
  %401 = load i32, i32* %400, align 4, !tbaa !9
  br label %402

402:                                              ; preds = %402, %397
  %403 = phi i64 [ %413, %402 ], [ 1, %397 ]
  %404 = phi i64 [ %412, %402 ], [ 29, %397 ]
  %405 = add i64 %404, %403
  %406 = lshr i64 %405, 1
  %407 = getelementptr inbounds [30 x i32], [30 x i32]* @_ZL12DISTANCEBASE, i64 0, i64 %406
  %408 = load i32, i32* %407, align 4, !tbaa !9
  %409 = icmp ult i32 %408, %317
  %410 = add nsw i64 %406, -1
  %411 = add nuw i64 %406, 1
  %412 = select i1 %409, i64 %404, i64 %410
  %413 = select i1 %409, i64 %411, i64 %403
  %414 = icmp ugt i64 %413, %412
  br i1 %414, label %415, label %402

415:                                              ; preds = %402
  %416 = icmp ult i64 %413, 30
  br i1 %416, label %417, label %421

417:                                              ; preds = %415
  %418 = getelementptr inbounds [30 x i32], [30 x i32]* @_ZL12DISTANCEBASE, i64 0, i64 %413
  %419 = load i32, i32* %418, align 4, !tbaa !9
  %420 = icmp ugt i32 %419, %317
  br i1 %420, label %421, label %423

421:                                              ; preds = %417, %415
  %422 = add i64 %413, -1
  br label %423

423:                                              ; preds = %421, %417
  %424 = phi i64 [ %422, %421 ], [ %413, %417 ]
  %425 = and i64 %424, 4294967295
  %426 = getelementptr inbounds [30 x i32], [30 x i32]* @_ZL12DISTANCEBASE, i64 0, i64 %425
  %427 = load i32, i32* %426, align 4, !tbaa !9
  %428 = load i64, i64* %36, align 8, !tbaa !123
  %429 = add i64 %428, 4
  %430 = shl i64 %429, 2
  %431 = load i64, i64* %37, align 8, !tbaa !124
  %432 = icmp ugt i64 %430, %431
  br i1 %432, label %435, label %433

433:                                              ; preds = %423
  %434 = load i32*, i32** %38, align 8, !tbaa !112
  br label %443

435:                                              ; preds = %423
  %436 = lshr i64 %431, 1
  %437 = add i64 %436, %430
  %438 = load i8*, i8** %39, align 8, !tbaa !112
  %439 = tail call i8* @realloc(i8* noundef %438, i64 noundef %437) #25
  %440 = icmp eq i8* %439, null
  br i1 %440, label %457, label %441

441:                                              ; preds = %435
  store i64 %437, i64* %37, align 8, !tbaa !124
  store i8* %439, i8** %39, align 8, !tbaa !112
  %442 = bitcast i8* %439 to i32*
  br label %443

443:                                              ; preds = %441, %433
  %444 = phi i32* [ %434, %433 ], [ %442, %441 ]
  store i64 %429, i64* %36, align 8, !tbaa !123
  %445 = sub i32 %317, %427
  %446 = trunc i64 %424 to i32
  %447 = sub i32 %318, %401
  %448 = trunc i64 %398 to i32
  %449 = add i32 %448, 257
  %450 = getelementptr inbounds i32, i32* %444, i64 %428
  store i32 %449, i32* %450, align 4, !tbaa !9
  %451 = add i64 %428, 1
  %452 = getelementptr inbounds i32, i32* %444, i64 %451
  store i32 %447, i32* %452, align 4, !tbaa !9
  %453 = add i64 %428, 2
  %454 = getelementptr inbounds i32, i32* %444, i64 %453
  store i32 %446, i32* %454, align 4, !tbaa !9
  %455 = add i64 %428, 3
  %456 = getelementptr inbounds i32, i32* %444, i64 %455
  store i32 %445, i32* %456, align 4, !tbaa !9
  br label %457

457:                                              ; preds = %435, %443
  %458 = icmp ugt i32 %318, 1
  br i1 %458, label %459, label %609

459:                                              ; preds = %457
  %460 = load i32*, i32** %27, align 8, !tbaa !94
  %461 = load i32*, i32** %28, align 8, !tbaa !92
  %462 = load i16*, i16** %30, align 8, !tbaa !96
  %463 = load i32*, i32** %31, align 8, !tbaa !97
  %464 = xor i64 %320, -1
  %465 = add i64 %464, %4
  br label %466

466:                                              ; preds = %459, %605
  %467 = phi i64 [ 0, %459 ], [ %608, %605 ]
  %468 = phi i64 [ %320, %459 ], [ %472, %605 ]
  %469 = phi i32 [ %153, %459 ], [ %582, %605 ]
  %470 = phi i32 [ 1, %459 ], [ %606, %605 ]
  %471 = sub i64 %465, %467
  %472 = add i64 %468, 1
  %473 = and i64 %472, %25
  %474 = add i64 %468, 3
  %475 = icmp ult i64 %474, %4
  br i1 %475, label %476, label %491

476:                                              ; preds = %466
  %477 = getelementptr inbounds i8, i8* %2, i64 %472
  %478 = load i8, i8* %477, align 1, !tbaa !14
  %479 = zext i8 %478 to i32
  %480 = add i64 %468, 2
  %481 = getelementptr inbounds i8, i8* %2, i64 %480
  %482 = load i8, i8* %481, align 1, !tbaa !14
  %483 = zext i8 %482 to i32
  %484 = shl nuw nsw i32 %483, 4
  %485 = xor i32 %484, %479
  %486 = getelementptr inbounds i8, i8* %2, i64 %474
  %487 = load i8, i8* %486, align 1, !tbaa !14
  %488 = zext i8 %487 to i32
  %489 = shl nuw nsw i32 %488, 8
  %490 = xor i32 %485, %489
  br label %544

491:                                              ; preds = %466
  %492 = icmp ult i64 %472, %4
  br i1 %492, label %493, label %548

493:                                              ; preds = %491
  %494 = sub i64 %4, %472
  %495 = icmp eq i64 %494, 0
  br i1 %495, label %548, label %496

496:                                              ; preds = %493
  %497 = icmp ult i64 %471, 8
  br i1 %497, label %528, label %498

498:                                              ; preds = %496
  %499 = and i64 %471, -8
  br label %500

500:                                              ; preds = %500, %498
  %501 = phi i64 [ 0, %498 ], [ %521, %500 ]
  %502 = phi <4 x i32> [ zeroinitializer, %498 ], [ %519, %500 ]
  %503 = phi <4 x i32> [ zeroinitializer, %498 ], [ %520, %500 ]
  %504 = phi <4 x i32> [ <i32 0, i32 1, i32 2, i32 3>, %498 ], [ %522, %500 ]
  %505 = add i64 %501, %472
  %506 = getelementptr inbounds i8, i8* %2, i64 %505
  %507 = bitcast i8* %506 to <4 x i8>*
  %508 = load <4 x i8>, <4 x i8>* %507, align 1, !tbaa !14
  %509 = getelementptr inbounds i8, i8* %506, i64 4
  %510 = bitcast i8* %509 to <4 x i8>*
  %511 = load <4 x i8>, <4 x i8>* %510, align 1, !tbaa !14
  %512 = zext <4 x i8> %508 to <4 x i32>
  %513 = zext <4 x i8> %511 to <4 x i32>
  %514 = shl <4 x i32> %504, <i32 3, i32 3, i32 3, i32 3>
  %515 = shl <4 x i32> %504, <i32 3, i32 3, i32 3, i32 3>
  %516 = add <4 x i32> %515, <i32 32, i32 32, i32 32, i32 32>
  %517 = shl <4 x i32> %512, %514
  %518 = shl <4 x i32> %513, %516
  %519 = xor <4 x i32> %517, %502
  %520 = xor <4 x i32> %518, %503
  %521 = add nuw i64 %501, 8
  %522 = add <4 x i32> %504, <i32 8, i32 8, i32 8, i32 8>
  %523 = icmp eq i64 %521, %499
  br i1 %523, label %524, label %500, !llvm.loop !133

524:                                              ; preds = %500
  %525 = xor <4 x i32> %520, %519
  %526 = call i32 @llvm.vector.reduce.xor.v4i32(<4 x i32> %525)
  %527 = icmp eq i64 %471, %499
  br i1 %527, label %544, label %528

528:                                              ; preds = %496, %524
  %529 = phi i64 [ 0, %496 ], [ %499, %524 ]
  %530 = phi i32 [ 0, %496 ], [ %526, %524 ]
  br label %531

531:                                              ; preds = %528, %531
  %532 = phi i64 [ %542, %531 ], [ %529, %528 ]
  %533 = phi i32 [ %541, %531 ], [ %530, %528 ]
  %534 = add i64 %532, %472
  %535 = getelementptr inbounds i8, i8* %2, i64 %534
  %536 = load i8, i8* %535, align 1, !tbaa !14
  %537 = zext i8 %536 to i32
  %538 = trunc i64 %532 to i32
  %539 = shl i32 %538, 3
  %540 = shl i32 %537, %539
  %541 = xor i32 %540, %533
  %542 = add nuw i64 %532, 1
  %543 = icmp eq i64 %542, %494
  br i1 %543, label %544, label %531, !llvm.loop !134

544:                                              ; preds = %531, %524, %476
  %545 = phi i32 [ %490, %476 ], [ %526, %524 ], [ %541, %531 ]
  %546 = and i32 %545, 65535
  %547 = icmp eq i32 %546, 0
  br i1 %547, label %548, label %580

548:                                              ; preds = %493, %491, %544
  %549 = icmp eq i32 %469, 0
  br i1 %549, label %550, label %569

550:                                              ; preds = %548
  %551 = getelementptr inbounds i8, i8* %2, i64 %472
  %552 = getelementptr inbounds i8, i8* %551, i64 258
  %553 = icmp ugt i8* %552, %26
  %554 = select i1 %553, i8* %26, i8* %552
  %555 = icmp eq i8* %551, %554
  br i1 %555, label %563, label %556

556:                                              ; preds = %550, %560
  %557 = phi i8* [ %561, %560 ], [ %551, %550 ]
  %558 = load i8, i8* %557, align 1, !tbaa !14
  %559 = icmp eq i8 %558, 0
  br i1 %559, label %560, label %563

560:                                              ; preds = %556
  %561 = getelementptr inbounds i8, i8* %557, i64 1
  %562 = icmp eq i8* %561, %554
  br i1 %562, label %563, label %556

563:                                              ; preds = %556, %560, %550
  %564 = phi i8* [ %551, %550 ], [ %557, %556 ], [ %554, %560 ]
  %565 = ptrtoint i8* %564 to i64
  %566 = ptrtoint i8* %551 to i64
  %567 = sub i64 %565, %566
  %568 = trunc i64 %567 to i32
  br label %580

569:                                              ; preds = %548
  %570 = zext i32 %469 to i64
  %571 = add i64 %472, %570
  %572 = icmp ugt i64 %571, %4
  br i1 %572, label %578, label %573

573:                                              ; preds = %569
  %574 = add i64 %468, %570
  %575 = getelementptr inbounds i8, i8* %2, i64 %574
  %576 = load i8, i8* %575, align 1, !tbaa !14
  %577 = icmp eq i8 %576, 0
  br i1 %577, label %580, label %578

578:                                              ; preds = %573, %569
  %579 = add i32 %469, -1
  br label %580

580:                                              ; preds = %544, %563, %578, %573
  %581 = phi i32 [ 0, %563 ], [ 0, %578 ], [ 0, %573 ], [ %546, %544 ]
  %582 = phi i32 [ %568, %563 ], [ %579, %578 ], [ %469, %573 ], [ 0, %544 ]
  %583 = trunc i32 %582 to i16
  %584 = getelementptr inbounds i32, i32* %460, i64 %473
  store i32 %581, i32* %584, align 4, !tbaa !9
  %585 = zext i32 %581 to i64
  %586 = getelementptr inbounds i32, i32* %461, i64 %585
  %587 = load i32, i32* %586, align 4, !tbaa !9
  %588 = icmp eq i32 %587, -1
  br i1 %588, label %593, label %589

589:                                              ; preds = %580
  %590 = trunc i32 %587 to i16
  %591 = load i16*, i16** %29, align 8, !tbaa !95
  %592 = getelementptr inbounds i16, i16* %591, i64 %473
  store i16 %590, i16* %592, align 2, !tbaa !66
  br label %593

593:                                              ; preds = %589, %580
  %594 = trunc i64 %473 to i32
  store i32 %594, i32* %586, align 4, !tbaa !9
  %595 = getelementptr inbounds i16, i16* %462, i64 %473
  store i16 %583, i16* %595, align 2, !tbaa !66
  %596 = and i32 %582, 65535
  %597 = zext i32 %596 to i64
  %598 = getelementptr inbounds i32, i32* %463, i64 %597
  %599 = load i32, i32* %598, align 4, !tbaa !9
  %600 = icmp eq i32 %599, -1
  br i1 %600, label %605, label %601

601:                                              ; preds = %593
  %602 = trunc i32 %599 to i16
  %603 = load i16*, i16** %32, align 8, !tbaa !98
  %604 = getelementptr inbounds i16, i16* %603, i64 %473
  store i16 %602, i16* %604, align 2, !tbaa !66
  br label %605

605:                                              ; preds = %593, %601
  store i32 %594, i32* %598, align 4, !tbaa !9
  %606 = add nuw i32 %470, 1
  %607 = icmp eq i32 %606, %318
  %608 = add i64 %467, 1
  br i1 %607, label %609, label %466

609:                                              ; preds = %605, %457, %279, %373, %345
  %610 = phi i32 [ %153, %279 ], [ %153, %345 ], [ %153, %373 ], [ %153, %457 ], [ %582, %605 ]
  %611 = phi i32 [ 1, %279 ], [ %319, %345 ], [ %319, %373 ], [ %319, %457 ], [ %319, %605 ]
  %612 = phi i32 [ %274, %279 ], [ %43, %345 ], [ %43, %373 ], [ %43, %457 ], [ %43, %605 ]
  %613 = phi i32 [ %273, %279 ], [ %42, %345 ], [ %42, %373 ], [ %42, %457 ], [ %42, %605 ]
  %614 = phi i64 [ %41, %279 ], [ %320, %345 ], [ %320, %373 ], [ %320, %457 ], [ %472, %605 ]
  %615 = add i64 %614, 1
  %616 = icmp ult i64 %615, %4
  br i1 %616, label %40, label %617

617:                                              ; preds = %609, %284, %316, %301, %337, %365, %20, %16, %9
  %618 = phi i32 [ 60, %9 ], [ 90, %16 ], [ 0, %20 ], [ 0, %609 ], [ 81, %284 ], [ 86, %316 ], [ 83, %301 ], [ 83, %337 ], [ 83, %365 ]
  ret i32 %618
}

; Function Attrs: nounwind uwtable
define internal fastcc void @_ZL13writeLZ77dataP16LodePNGBitWriterPK8uivectorPK11HuffmanTreeS6_(%struct.LodePNGBitWriter* nocapture noundef %0, %struct.uivector* nocapture noundef readonly %1, %struct.HuffmanTree* nocapture noundef readonly %2, %struct.HuffmanTree* nocapture noundef readonly %3) unnamed_addr #3 {
  %5 = getelementptr inbounds %struct.uivector, %struct.uivector* %1, i64 0, i32 1
  %6 = load i64, i64* %5, align 8, !tbaa !123
  %7 = icmp eq i64 %6, 0
  br i1 %7, label %182, label %8

8:                                                ; preds = %4
  %9 = getelementptr inbounds %struct.uivector, %struct.uivector* %1, i64 0, i32 0
  %10 = getelementptr inbounds %struct.HuffmanTree, %struct.HuffmanTree* %2, i64 0, i32 0
  %11 = getelementptr inbounds %struct.HuffmanTree, %struct.HuffmanTree* %2, i64 0, i32 1
  %12 = getelementptr inbounds %struct.LodePNGBitWriter, %struct.LodePNGBitWriter* %0, i64 0, i32 1
  %13 = getelementptr inbounds %struct.LodePNGBitWriter, %struct.LodePNGBitWriter* %0, i64 0, i32 0
  %14 = getelementptr inbounds %struct.HuffmanTree, %struct.HuffmanTree* %3, i64 0, i32 0
  %15 = getelementptr inbounds %struct.HuffmanTree, %struct.HuffmanTree* %3, i64 0, i32 1
  br label %16

16:                                               ; preds = %8, %177
  %17 = phi i64 [ 0, %8 ], [ %179, %177 ]
  %18 = load i32*, i32** %9, align 8, !tbaa !112
  %19 = getelementptr inbounds i32, i32* %18, i64 %17
  %20 = load i32, i32* %19, align 4, !tbaa !9
  %21 = load i32*, i32** %10, align 8, !tbaa !68
  %22 = zext i32 %20 to i64
  %23 = getelementptr inbounds i32, i32* %21, i64 %22
  %24 = load i32, i32* %23, align 4, !tbaa !9
  %25 = load i32*, i32** %11, align 8, !tbaa !53
  %26 = getelementptr inbounds i32, i32* %25, i64 %22
  %27 = load i32, i32* %26, align 4, !tbaa !9
  %28 = zext i32 %27 to i64
  %29 = icmp eq i32 %27, 0
  br i1 %29, label %88, label %30

30:                                               ; preds = %16
  %31 = load i8, i8* %12, align 8, !tbaa !84
  br label %32

32:                                               ; preds = %65, %30
  %33 = phi i8 [ %31, %30 ], [ %85, %65 ]
  %34 = phi i64 [ 0, %30 ], [ %86, %65 ]
  %35 = and i8 %33, 7
  %36 = icmp eq i8 %35, 0
  br i1 %36, label %37, label %65

37:                                               ; preds = %32
  %38 = load %struct.ucvector*, %struct.ucvector** %13, align 8, !tbaa !82
  %39 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %38, i64 0, i32 1
  %40 = load i64, i64* %39, align 8, !tbaa !44
  %41 = add i64 %40, 1
  store i64 %41, i64* %39, align 8, !tbaa !44
  %42 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %38, i64 0, i32 2
  %43 = load i64, i64* %42, align 8, !tbaa !45
  %44 = icmp ult i64 %43, %41
  br i1 %44, label %45, label %56

45:                                               ; preds = %37
  %46 = lshr i64 %43, 1
  %47 = add i64 %46, %41
  %48 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %38, i64 0, i32 0
  %49 = load i8*, i8** %48, align 8, !tbaa !39
  %50 = tail call i8* @realloc(i8* noundef %49, i64 noundef %47) #25
  %51 = icmp eq i8* %50, null
  br i1 %51, label %88, label %52

52:                                               ; preds = %45
  store i64 %47, i64* %42, align 8, !tbaa !45
  store i8* %50, i8** %48, align 8, !tbaa !39
  %53 = load %struct.ucvector*, %struct.ucvector** %13, align 8, !tbaa !82
  %54 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %53, i64 0, i32 1
  %55 = load i64, i64* %54, align 8, !tbaa !44
  br label %56

56:                                               ; preds = %52, %37
  %57 = phi i64 [ %55, %52 ], [ %41, %37 ]
  %58 = phi %struct.ucvector* [ %53, %52 ], [ %38, %37 ]
  %59 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %58, i64 0, i32 0
  %60 = load i8*, i8** %59, align 8, !tbaa !39
  %61 = add i64 %57, -1
  %62 = getelementptr inbounds i8, i8* %60, i64 %61
  store i8 0, i8* %62, align 1, !tbaa !14
  %63 = load i8, i8* %12, align 8, !tbaa !84
  %64 = and i8 %63, 7
  br label %65

65:                                               ; preds = %56, %32
  %66 = phi i8 [ %64, %56 ], [ %35, %32 ]
  %67 = trunc i64 %34 to i32
  %68 = xor i32 %67, -1
  %69 = add i32 %27, %68
  %70 = lshr i32 %24, %69
  %71 = and i32 %70, 1
  %72 = zext i8 %66 to i32
  %73 = shl nuw nsw i32 %71, %72
  %74 = load %struct.ucvector*, %struct.ucvector** %13, align 8, !tbaa !82
  %75 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %74, i64 0, i32 0
  %76 = load i8*, i8** %75, align 8, !tbaa !39
  %77 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %74, i64 0, i32 1
  %78 = load i64, i64* %77, align 8, !tbaa !44
  %79 = add i64 %78, -1
  %80 = getelementptr inbounds i8, i8* %76, i64 %79
  %81 = load i8, i8* %80, align 1, !tbaa !14
  %82 = trunc i32 %73 to i8
  %83 = or i8 %81, %82
  store i8 %83, i8* %80, align 1, !tbaa !14
  %84 = load i8, i8* %12, align 8, !tbaa !84
  %85 = add i8 %84, 1
  store i8 %85, i8* %12, align 8, !tbaa !84
  %86 = add nuw nsw i64 %34, 1
  %87 = icmp eq i64 %86, %28
  br i1 %87, label %88, label %32

88:                                               ; preds = %45, %65, %16
  %89 = icmp ugt i32 %20, 256
  br i1 %89, label %90, label %177

90:                                               ; preds = %88
  %91 = add i32 %20, -257
  %92 = zext i32 %91 to i64
  %93 = getelementptr inbounds [29 x i32], [29 x i32]* @_ZL11LENGTHEXTRA, i64 0, i64 %92
  %94 = load i32, i32* %93, align 4, !tbaa !9
  %95 = load i32*, i32** %9, align 8, !tbaa !112
  %96 = add i64 %17, 1
  %97 = getelementptr inbounds i32, i32* %95, i64 %96
  %98 = load i32, i32* %97, align 4, !tbaa !9
  %99 = add i64 %17, 2
  %100 = getelementptr inbounds i32, i32* %95, i64 %99
  %101 = load i32, i32* %100, align 4, !tbaa !9
  %102 = zext i32 %101 to i64
  %103 = getelementptr inbounds [30 x i32], [30 x i32]* @_ZL13DISTANCEEXTRA, i64 0, i64 %102
  %104 = load i32, i32* %103, align 4, !tbaa !9
  %105 = add i64 %17, 3
  %106 = getelementptr inbounds i32, i32* %95, i64 %105
  %107 = load i32, i32* %106, align 4, !tbaa !9
  %108 = zext i32 %94 to i64
  tail call fastcc void @_ZL9writeBitsP16LodePNGBitWriterjm(%struct.LodePNGBitWriter* noundef %0, i32 noundef %98, i64 noundef %108)
  %109 = load i32*, i32** %14, align 8, !tbaa !68
  %110 = getelementptr inbounds i32, i32* %109, i64 %102
  %111 = load i32, i32* %110, align 4, !tbaa !9
  %112 = load i32*, i32** %15, align 8, !tbaa !53
  %113 = getelementptr inbounds i32, i32* %112, i64 %102
  %114 = load i32, i32* %113, align 4, !tbaa !9
  %115 = zext i32 %114 to i64
  %116 = icmp eq i32 %114, 0
  br i1 %116, label %175, label %117

117:                                              ; preds = %90
  %118 = load i8, i8* %12, align 8, !tbaa !84
  br label %119

119:                                              ; preds = %152, %117
  %120 = phi i8 [ %118, %117 ], [ %172, %152 ]
  %121 = phi i64 [ 0, %117 ], [ %173, %152 ]
  %122 = and i8 %120, 7
  %123 = icmp eq i8 %122, 0
  br i1 %123, label %124, label %152

124:                                              ; preds = %119
  %125 = load %struct.ucvector*, %struct.ucvector** %13, align 8, !tbaa !82
  %126 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %125, i64 0, i32 1
  %127 = load i64, i64* %126, align 8, !tbaa !44
  %128 = add i64 %127, 1
  store i64 %128, i64* %126, align 8, !tbaa !44
  %129 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %125, i64 0, i32 2
  %130 = load i64, i64* %129, align 8, !tbaa !45
  %131 = icmp ult i64 %130, %128
  br i1 %131, label %132, label %143

132:                                              ; preds = %124
  %133 = lshr i64 %130, 1
  %134 = add i64 %133, %128
  %135 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %125, i64 0, i32 0
  %136 = load i8*, i8** %135, align 8, !tbaa !39
  %137 = tail call i8* @realloc(i8* noundef %136, i64 noundef %134) #25
  %138 = icmp eq i8* %137, null
  br i1 %138, label %175, label %139

139:                                              ; preds = %132
  store i64 %134, i64* %129, align 8, !tbaa !45
  store i8* %137, i8** %135, align 8, !tbaa !39
  %140 = load %struct.ucvector*, %struct.ucvector** %13, align 8, !tbaa !82
  %141 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %140, i64 0, i32 1
  %142 = load i64, i64* %141, align 8, !tbaa !44
  br label %143

143:                                              ; preds = %139, %124
  %144 = phi i64 [ %142, %139 ], [ %128, %124 ]
  %145 = phi %struct.ucvector* [ %140, %139 ], [ %125, %124 ]
  %146 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %145, i64 0, i32 0
  %147 = load i8*, i8** %146, align 8, !tbaa !39
  %148 = add i64 %144, -1
  %149 = getelementptr inbounds i8, i8* %147, i64 %148
  store i8 0, i8* %149, align 1, !tbaa !14
  %150 = load i8, i8* %12, align 8, !tbaa !84
  %151 = and i8 %150, 7
  br label %152

152:                                              ; preds = %143, %119
  %153 = phi i8 [ %151, %143 ], [ %122, %119 ]
  %154 = trunc i64 %121 to i32
  %155 = xor i32 %154, -1
  %156 = add i32 %114, %155
  %157 = lshr i32 %111, %156
  %158 = and i32 %157, 1
  %159 = zext i8 %153 to i32
  %160 = shl nuw nsw i32 %158, %159
  %161 = load %struct.ucvector*, %struct.ucvector** %13, align 8, !tbaa !82
  %162 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %161, i64 0, i32 0
  %163 = load i8*, i8** %162, align 8, !tbaa !39
  %164 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %161, i64 0, i32 1
  %165 = load i64, i64* %164, align 8, !tbaa !44
  %166 = add i64 %165, -1
  %167 = getelementptr inbounds i8, i8* %163, i64 %166
  %168 = load i8, i8* %167, align 1, !tbaa !14
  %169 = trunc i32 %160 to i8
  %170 = or i8 %168, %169
  store i8 %170, i8* %167, align 1, !tbaa !14
  %171 = load i8, i8* %12, align 8, !tbaa !84
  %172 = add i8 %171, 1
  store i8 %172, i8* %12, align 8, !tbaa !84
  %173 = add nuw nsw i64 %121, 1
  %174 = icmp eq i64 %173, %115
  br i1 %174, label %175, label %119

175:                                              ; preds = %132, %152, %90
  %176 = zext i32 %104 to i64
  tail call fastcc void @_ZL9writeBitsP16LodePNGBitWriterjm(%struct.LodePNGBitWriter* noundef %0, i32 noundef %107, i64 noundef %176)
  br label %177

177:                                              ; preds = %175, %88
  %178 = phi i64 [ %105, %175 ], [ %17, %88 ]
  %179 = add i64 %178, 1
  %180 = load i64, i64* %5, align 8, !tbaa !123
  %181 = icmp eq i64 %179, %180
  br i1 %181, label %182, label %16

182:                                              ; preds = %177, %4
  ret void
}

; Function Attrs: nounwind uwtable
define internal fastcc void @_ZL9writeBitsP16LodePNGBitWriterjm(%struct.LodePNGBitWriter* nocapture noundef %0, i32 noundef %1, i64 noundef %2) unnamed_addr #3 {
  switch i64 %2, label %4 [
    i64 1, label %8
    i64 0, label %113
  ]

4:                                                ; preds = %3
  %5 = getelementptr inbounds %struct.LodePNGBitWriter, %struct.LodePNGBitWriter* %0, i64 0, i32 1
  %6 = getelementptr inbounds %struct.LodePNGBitWriter, %struct.LodePNGBitWriter* %0, i64 0, i32 0
  %7 = load i8, i8* %5, align 8, !tbaa !84
  br label %59

8:                                                ; preds = %3
  %9 = getelementptr inbounds %struct.LodePNGBitWriter, %struct.LodePNGBitWriter* %0, i64 0, i32 1
  %10 = load i8, i8* %9, align 8, !tbaa !84
  %11 = and i8 %10, 7
  %12 = icmp eq i8 %11, 0
  br i1 %12, label %13, label %42

13:                                               ; preds = %8
  %14 = getelementptr inbounds %struct.LodePNGBitWriter, %struct.LodePNGBitWriter* %0, i64 0, i32 0
  %15 = load %struct.ucvector*, %struct.ucvector** %14, align 8, !tbaa !82
  %16 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %15, i64 0, i32 1
  %17 = load i64, i64* %16, align 8, !tbaa !44
  %18 = add i64 %17, 1
  store i64 %18, i64* %16, align 8, !tbaa !44
  %19 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %15, i64 0, i32 2
  %20 = load i64, i64* %19, align 8, !tbaa !45
  %21 = icmp ult i64 %20, %18
  br i1 %21, label %22, label %33

22:                                               ; preds = %13
  %23 = lshr i64 %20, 1
  %24 = add i64 %23, %18
  %25 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %15, i64 0, i32 0
  %26 = load i8*, i8** %25, align 8, !tbaa !39
  %27 = tail call i8* @realloc(i8* noundef %26, i64 noundef %24) #25
  %28 = icmp eq i8* %27, null
  br i1 %28, label %113, label %29

29:                                               ; preds = %22
  store i64 %24, i64* %19, align 8, !tbaa !45
  store i8* %27, i8** %25, align 8, !tbaa !39
  %30 = load %struct.ucvector*, %struct.ucvector** %14, align 8, !tbaa !82
  %31 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %30, i64 0, i32 1
  %32 = load i64, i64* %31, align 8, !tbaa !44
  br label %33

33:                                               ; preds = %29, %13
  %34 = phi i64 [ %32, %29 ], [ %18, %13 ]
  %35 = phi %struct.ucvector* [ %30, %29 ], [ %15, %13 ]
  %36 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %35, i64 0, i32 0
  %37 = load i8*, i8** %36, align 8, !tbaa !39
  %38 = add i64 %34, -1
  %39 = getelementptr inbounds i8, i8* %37, i64 %38
  store i8 0, i8* %39, align 1, !tbaa !14
  %40 = load i8, i8* %9, align 8, !tbaa !84
  %41 = and i8 %40, 7
  br label %42

42:                                               ; preds = %33, %8
  %43 = phi i8 [ %41, %33 ], [ %11, %8 ]
  %44 = zext i8 %43 to i32
  %45 = shl i32 %1, %44
  %46 = getelementptr inbounds %struct.LodePNGBitWriter, %struct.LodePNGBitWriter* %0, i64 0, i32 0
  %47 = load %struct.ucvector*, %struct.ucvector** %46, align 8, !tbaa !82
  %48 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %47, i64 0, i32 0
  %49 = load i8*, i8** %48, align 8, !tbaa !39
  %50 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %47, i64 0, i32 1
  %51 = load i64, i64* %50, align 8, !tbaa !44
  %52 = add i64 %51, -1
  %53 = getelementptr inbounds i8, i8* %49, i64 %52
  %54 = load i8, i8* %53, align 1, !tbaa !14
  %55 = trunc i32 %45 to i8
  %56 = or i8 %54, %55
  store i8 %56, i8* %53, align 1, !tbaa !14
  %57 = load i8, i8* %9, align 8, !tbaa !84
  %58 = add i8 %57, 1
  store i8 %58, i8* %9, align 8, !tbaa !84
  br label %113

59:                                               ; preds = %4, %92
  %60 = phi i8 [ %7, %4 ], [ %110, %92 ]
  %61 = phi i64 [ 0, %4 ], [ %111, %92 ]
  %62 = and i8 %60, 7
  %63 = icmp eq i8 %62, 0
  br i1 %63, label %64, label %92

64:                                               ; preds = %59
  %65 = load %struct.ucvector*, %struct.ucvector** %6, align 8, !tbaa !82
  %66 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %65, i64 0, i32 1
  %67 = load i64, i64* %66, align 8, !tbaa !44
  %68 = add i64 %67, 1
  store i64 %68, i64* %66, align 8, !tbaa !44
  %69 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %65, i64 0, i32 2
  %70 = load i64, i64* %69, align 8, !tbaa !45
  %71 = icmp ult i64 %70, %68
  br i1 %71, label %72, label %83

72:                                               ; preds = %64
  %73 = lshr i64 %70, 1
  %74 = add i64 %73, %68
  %75 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %65, i64 0, i32 0
  %76 = load i8*, i8** %75, align 8, !tbaa !39
  %77 = tail call i8* @realloc(i8* noundef %76, i64 noundef %74) #25
  %78 = icmp eq i8* %77, null
  br i1 %78, label %113, label %79

79:                                               ; preds = %72
  store i64 %74, i64* %69, align 8, !tbaa !45
  store i8* %77, i8** %75, align 8, !tbaa !39
  %80 = load %struct.ucvector*, %struct.ucvector** %6, align 8, !tbaa !82
  %81 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %80, i64 0, i32 1
  %82 = load i64, i64* %81, align 8, !tbaa !44
  br label %83

83:                                               ; preds = %79, %64
  %84 = phi i64 [ %82, %79 ], [ %68, %64 ]
  %85 = phi %struct.ucvector* [ %80, %79 ], [ %65, %64 ]
  %86 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %85, i64 0, i32 0
  %87 = load i8*, i8** %86, align 8, !tbaa !39
  %88 = add i64 %84, -1
  %89 = getelementptr inbounds i8, i8* %87, i64 %88
  store i8 0, i8* %89, align 1, !tbaa !14
  %90 = load i8, i8* %5, align 8, !tbaa !84
  %91 = and i8 %90, 7
  br label %92

92:                                               ; preds = %83, %59
  %93 = phi i8 [ %91, %83 ], [ %62, %59 ]
  %94 = trunc i64 %61 to i32
  %95 = lshr i32 %1, %94
  %96 = and i32 %95, 1
  %97 = zext i8 %93 to i32
  %98 = shl nuw nsw i32 %96, %97
  %99 = load %struct.ucvector*, %struct.ucvector** %6, align 8, !tbaa !82
  %100 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %99, i64 0, i32 0
  %101 = load i8*, i8** %100, align 8, !tbaa !39
  %102 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %99, i64 0, i32 1
  %103 = load i64, i64* %102, align 8, !tbaa !44
  %104 = add i64 %103, -1
  %105 = getelementptr inbounds i8, i8* %101, i64 %104
  %106 = load i8, i8* %105, align 1, !tbaa !14
  %107 = trunc i32 %98 to i8
  %108 = or i8 %106, %107
  store i8 %108, i8* %105, align 1, !tbaa !14
  %109 = load i8, i8* %5, align 8, !tbaa !84
  %110 = add i8 %109, 1
  store i8 %110, i8* %5, align 8, !tbaa !84
  %111 = add nuw i64 %61, 1
  %112 = icmp eq i64 %111, %2
  br i1 %112, label %113, label %59

113:                                              ; preds = %92, %72, %3, %22, %42
  ret void
}

; Function Attrs: nofree nosync nounwind readnone speculatable willreturn
declare i32 @llvm.ctpop.i32(i32) #9

; Function Attrs: nofree nosync nounwind readnone willreturn
declare i32 @llvm.vector.reduce.xor.v4i32(<4 x i32>) #11

; Function Attrs: uwtable
define dso_local noundef i32 @_Z23lodepng_zlib_decompressPPhPmPKhmPK25LodePNGDecompressSettings(i8** nocapture noundef %0, i64* nocapture noundef %1, i8* noundef %2, i64 noundef %3, %struct.LodePNGDecompressSettings* noundef %4) local_unnamed_addr #12 {
  %6 = alloca %struct.ucvector, align 8
  %7 = bitcast %struct.ucvector* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %7) #25
  %8 = load i8*, i8** %0, align 8, !tbaa !7
  %9 = load i64, i64* %1, align 8, !tbaa !3
  %10 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %6, i64 0, i32 0
  store i8* %8, i8** %10, align 8, !tbaa !39, !alias.scope !135
  %11 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %6, i64 0, i32 1
  store i64 %9, i64* %11, align 8, !tbaa !44, !alias.scope !135
  %12 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %6, i64 0, i32 2
  store i64 %9, i64* %12, align 8, !tbaa !45, !alias.scope !135
  %13 = call fastcc noundef i32 @_ZL24lodepng_zlib_decompressvP8ucvectorPKhmPK25LodePNGDecompressSettings(%struct.ucvector* noundef nonnull %6, i8* noundef %2, i64 noundef %3, %struct.LodePNGDecompressSettings* noundef %4)
  %14 = load i8*, i8** %10, align 8, !tbaa !39
  store i8* %14, i8** %0, align 8, !tbaa !7
  %15 = load i64, i64* %11, align 8, !tbaa !44
  store i64 %15, i64* %1, align 8, !tbaa !3
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %7) #25
  ret i32 %13
}

; Function Attrs: uwtable
define internal fastcc noundef i32 @_ZL24lodepng_zlib_decompressvP8ucvectorPKhmPK25LodePNGDecompressSettings(%struct.ucvector* noundef %0, i8* noundef %1, i64 noundef %2, %struct.LodePNGDecompressSettings* noundef %3) unnamed_addr #12 {
  %5 = icmp ult i64 %2, 2
  br i1 %5, label %80, label %6

6:                                                ; preds = %4
  %7 = load i8, i8* %1, align 1, !tbaa !14
  %8 = zext i8 %7 to i32
  %9 = shl nuw nsw i32 %8, 8
  %10 = getelementptr inbounds i8, i8* %1, i64 1
  %11 = load i8, i8* %10, align 1, !tbaa !14
  %12 = zext i8 %11 to i32
  %13 = or i32 %9, %12
  %14 = urem i32 %13, 31
  %15 = icmp eq i32 %14, 0
  br i1 %15, label %16, label %80

16:                                               ; preds = %6
  %17 = and i32 %8, 15
  %18 = icmp ne i32 %17, 8
  %19 = icmp slt i8 %7, 0
  %20 = select i1 %18, i1 true, i1 %19
  br i1 %20, label %80, label %21

21:                                               ; preds = %16
  %22 = and i32 %12, 32
  %23 = icmp eq i32 %22, 0
  br i1 %23, label %24, label %80

24:                                               ; preds = %21
  %25 = getelementptr inbounds i8, i8* %1, i64 2
  %26 = add i64 %2, -2
  %27 = getelementptr inbounds %struct.LodePNGDecompressSettings, %struct.LodePNGDecompressSettings* %3, i64 0, i32 4
  %28 = bitcast {}** %27 to i32 (i8**, i64*, i8*, i64, %struct.LodePNGDecompressSettings*)**
  %29 = load i32 (i8**, i64*, i8*, i64, %struct.LodePNGDecompressSettings*)*, i32 (i8**, i64*, i8*, i64, %struct.LodePNGDecompressSettings*)** %28, align 8, !tbaa !138
  %30 = icmp eq i32 (i8**, i64*, i8*, i64, %struct.LodePNGDecompressSettings*)* %29, null
  br i1 %30, label %45, label %31

31:                                               ; preds = %24
  %32 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %0, i64 0, i32 0
  %33 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %0, i64 0, i32 1
  %34 = tail call noundef i32 %29(i8** noundef %32, i64* noundef nonnull %33, i8* noundef nonnull %25, i64 noundef %26, %struct.LodePNGDecompressSettings* noundef nonnull %3)
  %35 = load i64, i64* %33, align 8, !tbaa !44
  %36 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %0, i64 0, i32 2
  store i64 %35, i64* %36, align 8, !tbaa !45
  %37 = icmp eq i32 %34, 0
  br i1 %37, label %48, label %38

38:                                               ; preds = %31
  %39 = getelementptr inbounds %struct.LodePNGDecompressSettings, %struct.LodePNGDecompressSettings* %3, i64 0, i32 2
  %40 = load i64, i64* %39, align 8, !tbaa !52
  %41 = icmp eq i64 %40, 0
  br i1 %41, label %80, label %42

42:                                               ; preds = %38
  %43 = icmp ugt i64 %35, %40
  %44 = select i1 %43, i32 109, i32 110
  br label %80

45:                                               ; preds = %24
  %46 = tail call fastcc noundef i32 @_ZL16lodepng_inflatevP8ucvectorPKhmPK25LodePNGDecompressSettings(%struct.ucvector* noundef %0, i8* noundef nonnull %25, i64 noundef %26, %struct.LodePNGDecompressSettings* noundef nonnull %3)
  %47 = icmp eq i32 %46, 0
  br i1 %47, label %48, label %80

48:                                               ; preds = %31, %45
  %49 = getelementptr inbounds %struct.LodePNGDecompressSettings, %struct.LodePNGDecompressSettings* %3, i64 0, i32 0
  %50 = load i32, i32* %49, align 8, !tbaa !139
  %51 = icmp eq i32 %50, 0
  br i1 %51, label %52, label %79

52:                                               ; preds = %48
  %53 = add i64 %2, -4
  %54 = getelementptr inbounds i8, i8* %1, i64 %53
  %55 = load i8, i8* %54, align 1, !tbaa !14
  %56 = zext i8 %55 to i32
  %57 = shl nuw i32 %56, 24
  %58 = getelementptr inbounds i8, i8* %54, i64 1
  %59 = load i8, i8* %58, align 1, !tbaa !14
  %60 = zext i8 %59 to i32
  %61 = shl nuw nsw i32 %60, 16
  %62 = or i32 %61, %57
  %63 = getelementptr inbounds i8, i8* %54, i64 2
  %64 = load i8, i8* %63, align 1, !tbaa !14
  %65 = zext i8 %64 to i32
  %66 = shl nuw nsw i32 %65, 8
  %67 = or i32 %62, %66
  %68 = getelementptr inbounds i8, i8* %54, i64 3
  %69 = load i8, i8* %68, align 1, !tbaa !14
  %70 = zext i8 %69 to i32
  %71 = or i32 %67, %70
  %72 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %0, i64 0, i32 0
  %73 = load i8*, i8** %72, align 8, !tbaa !39
  %74 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %0, i64 0, i32 1
  %75 = load i64, i64* %74, align 8, !tbaa !44
  %76 = trunc i64 %75 to i32
  %77 = tail call fastcc noundef i32 @_ZL7adler32PKhj(i8* noundef %73, i32 noundef %76)
  %78 = icmp eq i32 %77, %71
  br i1 %78, label %79, label %80

79:                                               ; preds = %52, %48
  br label %80

80:                                               ; preds = %42, %38, %45, %21, %16, %6, %4, %52, %79
  %81 = phi i32 [ 0, %79 ], [ 58, %52 ], [ 53, %4 ], [ 24, %6 ], [ 25, %16 ], [ 26, %21 ], [ %46, %45 ], [ %44, %42 ], [ 110, %38 ]
  ret i32 %81
}

; Function Attrs: nofree norecurse nosync nounwind readonly uwtable
define internal fastcc noundef i32 @_ZL7adler32PKhj(i8* nocapture noundef readonly %0, i32 noundef %1) unnamed_addr #13 {
  %3 = icmp eq i32 %1, 0
  br i1 %3, label %76, label %4

4:                                                ; preds = %2, %63
  %5 = phi i8* [ %69, %63 ], [ %0, %2 ]
  %6 = phi i32 [ %71, %63 ], [ 0, %2 ]
  %7 = phi i32 [ %70, %63 ], [ 1, %2 ]
  %8 = phi i32 [ %66, %63 ], [ %1, %2 ]
  %9 = icmp ult i32 %8, 5552
  %10 = select i1 %9, i32 %8, i32 5552
  %11 = add nsw i32 %10, -1
  %12 = add nsw i32 %10, -1
  %13 = and i32 %10, 3
  %14 = icmp ult i32 %12, 3
  br i1 %14, label %44, label %15

15:                                               ; preds = %4
  %16 = and i32 %10, 8188
  br label %17

17:                                               ; preds = %17, %15
  %18 = phi i8* [ %5, %15 ], [ %37, %17 ]
  %19 = phi i32 [ %6, %15 ], [ %41, %17 ]
  %20 = phi i32 [ %7, %15 ], [ %40, %17 ]
  %21 = phi i32 [ 0, %15 ], [ %42, %17 ]
  %22 = getelementptr inbounds i8, i8* %18, i64 1
  %23 = load i8, i8* %18, align 1, !tbaa !14
  %24 = zext i8 %23 to i32
  %25 = add i32 %20, %24
  %26 = add i32 %25, %19
  %27 = getelementptr inbounds i8, i8* %18, i64 2
  %28 = load i8, i8* %22, align 1, !tbaa !14
  %29 = zext i8 %28 to i32
  %30 = add i32 %25, %29
  %31 = add i32 %30, %26
  %32 = getelementptr inbounds i8, i8* %18, i64 3
  %33 = load i8, i8* %27, align 1, !tbaa !14
  %34 = zext i8 %33 to i32
  %35 = add i32 %30, %34
  %36 = add i32 %35, %31
  %37 = getelementptr inbounds i8, i8* %18, i64 4
  %38 = load i8, i8* %32, align 1, !tbaa !14
  %39 = zext i8 %38 to i32
  %40 = add i32 %35, %39
  %41 = add i32 %40, %36
  %42 = add i32 %21, 4
  %43 = icmp eq i32 %42, %16
  br i1 %43, label %44, label %17

44:                                               ; preds = %17, %4
  %45 = phi i32 [ undef, %4 ], [ %40, %17 ]
  %46 = phi i32 [ undef, %4 ], [ %41, %17 ]
  %47 = phi i8* [ %5, %4 ], [ %37, %17 ]
  %48 = phi i32 [ %6, %4 ], [ %41, %17 ]
  %49 = phi i32 [ %7, %4 ], [ %40, %17 ]
  %50 = icmp eq i32 %13, 0
  br i1 %50, label %63, label %51

51:                                               ; preds = %44, %51
  %52 = phi i8* [ %56, %51 ], [ %47, %44 ]
  %53 = phi i32 [ %60, %51 ], [ %48, %44 ]
  %54 = phi i32 [ %59, %51 ], [ %49, %44 ]
  %55 = phi i32 [ %61, %51 ], [ 0, %44 ]
  %56 = getelementptr inbounds i8, i8* %52, i64 1
  %57 = load i8, i8* %52, align 1, !tbaa !14
  %58 = zext i8 %57 to i32
  %59 = add i32 %54, %58
  %60 = add i32 %59, %53
  %61 = add i32 %55, 1
  %62 = icmp eq i32 %61, %13
  br i1 %62, label %63, label %51, !llvm.loop !140

63:                                               ; preds = %51, %44
  %64 = phi i32 [ %45, %44 ], [ %59, %51 ]
  %65 = phi i32 [ %46, %44 ], [ %60, %51 ]
  %66 = sub i32 %8, %10
  %67 = zext i32 %11 to i64
  %68 = getelementptr i8, i8* %5, i64 1
  %69 = getelementptr i8, i8* %68, i64 %67
  %70 = urem i32 %64, 65521
  %71 = urem i32 %65, 65521
  %72 = icmp eq i32 %66, 0
  br i1 %72, label %73, label %4

73:                                               ; preds = %63
  %74 = shl nuw i32 %71, 16
  %75 = or i32 %74, %70
  br label %76

76:                                               ; preds = %2, %73
  %77 = phi i32 [ %75, %73 ], [ 1, %2 ]
  ret i32 %77
}

; Function Attrs: uwtable
define dso_local noundef i32 @_Z21lodepng_zlib_compressPPhPmPKhmPK23LodePNGCompressSettings(i8** nocapture noundef %0, i64* nocapture noundef %1, i8* noundef %2, i64 noundef %3, %struct.LodePNGCompressSettings* noundef %4) local_unnamed_addr #12 {
  %6 = alloca i8*, align 8
  %7 = alloca i64, align 8
  %8 = bitcast i8** %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %8) #25
  store i8* null, i8** %6, align 8, !tbaa !7
  %9 = bitcast i64* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %9) #25
  store i64 0, i64* %7, align 8, !tbaa !3
  %10 = getelementptr inbounds %struct.LodePNGCompressSettings, %struct.LodePNGCompressSettings* %4, i64 0, i32 7
  %11 = bitcast {}** %10 to i32 (i8**, i64*, i8*, i64, %struct.LodePNGCompressSettings*)**
  %12 = load i32 (i8**, i64*, i8*, i64, %struct.LodePNGCompressSettings*)*, i32 (i8**, i64*, i8*, i64, %struct.LodePNGCompressSettings*)** %11, align 8, !tbaa !141
  %13 = icmp eq i32 (i8**, i64*, i8*, i64, %struct.LodePNGCompressSettings*)* %12, null
  br i1 %13, label %18, label %14

14:                                               ; preds = %5
  %15 = call noundef i32 %12(i8** noundef nonnull %6, i64* noundef nonnull %7, i8* noundef %2, i64 noundef %3, %struct.LodePNGCompressSettings* noundef nonnull %4)
  %16 = icmp eq i32 %15, 0
  br i1 %16, label %21, label %17

17:                                               ; preds = %14
  store i8* null, i8** %0, align 8, !tbaa !7
  store i64 0, i64* %1, align 8, !tbaa !3
  br label %134

18:                                               ; preds = %5
  %19 = call noundef i32 @_Z15lodepng_deflatePPhPmPKhmPK23LodePNGCompressSettings(i8** noundef nonnull %6, i64* noundef nonnull %7, i8* noundef %2, i64 noundef %3, %struct.LodePNGCompressSettings* noundef nonnull %4)
  store i8* null, i8** %0, align 8, !tbaa !7
  store i64 0, i64* %1, align 8, !tbaa !3
  %20 = icmp eq i32 %19, 0
  br i1 %20, label %21, label %134

21:                                               ; preds = %14, %18
  %22 = load i64, i64* %7, align 8, !tbaa !3
  %23 = add i64 %22, 6
  store i64 %23, i64* %1, align 8, !tbaa !3
  %24 = call noalias i8* @malloc(i64 noundef %23) #25
  store i8* %24, i8** %0, align 8, !tbaa !7
  %25 = icmp eq i8* %24, null
  br i1 %25, label %134, label %26

26:                                               ; preds = %21
  %27 = trunc i64 %3 to i32
  %28 = icmp eq i32 %27, 0
  br i1 %28, label %101, label %29

29:                                               ; preds = %26, %87
  %30 = phi i8* [ %94, %87 ], [ %2, %26 ]
  %31 = phi i32 [ %96, %87 ], [ 0, %26 ]
  %32 = phi i32 [ %95, %87 ], [ 1, %26 ]
  %33 = phi i32 [ %91, %87 ], [ %27, %26 ]
  %34 = icmp ult i32 %33, 5552
  %35 = select i1 %34, i32 %33, i32 5552
  %36 = add nsw i32 %35, -1
  %37 = and i32 %35, 3
  %38 = icmp ult i32 %36, 3
  br i1 %38, label %68, label %39

39:                                               ; preds = %29
  %40 = and i32 %35, 8188
  br label %41

41:                                               ; preds = %41, %39
  %42 = phi i8* [ %30, %39 ], [ %61, %41 ]
  %43 = phi i32 [ %31, %39 ], [ %65, %41 ]
  %44 = phi i32 [ %32, %39 ], [ %64, %41 ]
  %45 = phi i32 [ 0, %39 ], [ %66, %41 ]
  %46 = getelementptr inbounds i8, i8* %42, i64 1
  %47 = load i8, i8* %42, align 1, !tbaa !14
  %48 = zext i8 %47 to i32
  %49 = add i32 %44, %48
  %50 = add i32 %49, %43
  %51 = getelementptr inbounds i8, i8* %42, i64 2
  %52 = load i8, i8* %46, align 1, !tbaa !14
  %53 = zext i8 %52 to i32
  %54 = add i32 %49, %53
  %55 = add i32 %54, %50
  %56 = getelementptr inbounds i8, i8* %42, i64 3
  %57 = load i8, i8* %51, align 1, !tbaa !14
  %58 = zext i8 %57 to i32
  %59 = add i32 %54, %58
  %60 = add i32 %59, %55
  %61 = getelementptr inbounds i8, i8* %42, i64 4
  %62 = load i8, i8* %56, align 1, !tbaa !14
  %63 = zext i8 %62 to i32
  %64 = add i32 %59, %63
  %65 = add i32 %64, %60
  %66 = add i32 %45, 4
  %67 = icmp eq i32 %66, %40
  br i1 %67, label %68, label %41

68:                                               ; preds = %41, %29
  %69 = phi i32 [ undef, %29 ], [ %64, %41 ]
  %70 = phi i32 [ undef, %29 ], [ %65, %41 ]
  %71 = phi i8* [ %30, %29 ], [ %61, %41 ]
  %72 = phi i32 [ %31, %29 ], [ %65, %41 ]
  %73 = phi i32 [ %32, %29 ], [ %64, %41 ]
  %74 = icmp eq i32 %37, 0
  br i1 %74, label %87, label %75

75:                                               ; preds = %68, %75
  %76 = phi i8* [ %80, %75 ], [ %71, %68 ]
  %77 = phi i32 [ %84, %75 ], [ %72, %68 ]
  %78 = phi i32 [ %83, %75 ], [ %73, %68 ]
  %79 = phi i32 [ %85, %75 ], [ 0, %68 ]
  %80 = getelementptr inbounds i8, i8* %76, i64 1
  %81 = load i8, i8* %76, align 1, !tbaa !14
  %82 = zext i8 %81 to i32
  %83 = add i32 %78, %82
  %84 = add i32 %83, %77
  %85 = add i32 %79, 1
  %86 = icmp eq i32 %85, %37
  br i1 %86, label %87, label %75, !llvm.loop !142

87:                                               ; preds = %75, %68
  %88 = phi i32 [ %69, %68 ], [ %83, %75 ]
  %89 = phi i32 [ %70, %68 ], [ %84, %75 ]
  %90 = add nsw i32 %35, -1
  %91 = sub i32 %33, %35
  %92 = zext i32 %90 to i64
  %93 = getelementptr i8, i8* %30, i64 1
  %94 = getelementptr i8, i8* %93, i64 %92
  %95 = urem i32 %88, 65521
  %96 = urem i32 %89, 65521
  %97 = icmp eq i32 %91, 0
  br i1 %97, label %98, label %29

98:                                               ; preds = %87
  %99 = shl nuw i32 %96, 16
  %100 = or i32 %99, %95
  br label %101

101:                                              ; preds = %26, %98
  %102 = phi i32 [ %100, %98 ], [ 1, %26 ]
  store i8 120, i8* %24, align 1, !tbaa !14
  %103 = getelementptr inbounds i8, i8* %24, i64 1
  store i8 1, i8* %103, align 1, !tbaa !14
  %104 = icmp eq i64 %22, 0
  br i1 %104, label %120, label %105

105:                                              ; preds = %101, %105
  %106 = phi i8* [ %116, %105 ], [ %24, %101 ]
  %107 = phi i64 [ %113, %105 ], [ 0, %101 ]
  %108 = load i8*, i8** %6, align 8, !tbaa !7
  %109 = getelementptr inbounds i8, i8* %108, i64 %107
  %110 = load i8, i8* %109, align 1, !tbaa !14
  %111 = add i64 %107, 2
  %112 = getelementptr inbounds i8, i8* %106, i64 %111
  store i8 %110, i8* %112, align 1, !tbaa !14
  %113 = add i64 %107, 1
  %114 = load i64, i64* %7, align 8, !tbaa !3
  %115 = icmp eq i64 %113, %114
  %116 = load i8*, i8** %0, align 8, !tbaa !7
  br i1 %115, label %117, label %105

117:                                              ; preds = %105
  %118 = load i64, i64* %1, align 8, !tbaa !3
  %119 = add i64 %118, -4
  br label %120

120:                                              ; preds = %117, %101
  %121 = phi i64 [ %119, %117 ], [ 2, %101 ]
  %122 = phi i8* [ %116, %117 ], [ %24, %101 ]
  %123 = getelementptr inbounds i8, i8* %122, i64 %121
  %124 = lshr i32 %102, 24
  %125 = trunc i32 %124 to i8
  store i8 %125, i8* %123, align 1, !tbaa !14
  %126 = lshr i32 %102, 16
  %127 = trunc i32 %126 to i8
  %128 = getelementptr inbounds i8, i8* %123, i64 1
  store i8 %127, i8* %128, align 1, !tbaa !14
  %129 = lshr i32 %102, 8
  %130 = trunc i32 %129 to i8
  %131 = getelementptr inbounds i8, i8* %123, i64 2
  store i8 %130, i8* %131, align 1, !tbaa !14
  %132 = trunc i32 %102 to i8
  %133 = getelementptr inbounds i8, i8* %123, i64 3
  store i8 %132, i8* %133, align 1, !tbaa !14
  br label %134

134:                                              ; preds = %21, %17, %18, %120
  %135 = phi i32 [ 0, %120 ], [ 111, %17 ], [ %19, %18 ], [ 83, %21 ]
  %136 = load i8*, i8** %6, align 8, !tbaa !7
  call void @free(i8* noundef %136) #25
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %9) #25
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %8) #25
  ret i32 %135
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind uwtable willreturn writeonly
define dso_local void @_Z30lodepng_compress_settings_initP23LodePNGCompressSettings(%struct.LodePNGCompressSettings* nocapture noundef writeonly %0) local_unnamed_addr #14 {
  %2 = bitcast %struct.LodePNGCompressSettings* %0 to <4 x i32>*
  store <4 x i32> <i32 2, i32 1, i32 2048, i32 3>, <4 x i32>* %2, align 8, !tbaa !9
  %3 = getelementptr inbounds %struct.LodePNGCompressSettings, %struct.LodePNGCompressSettings* %0, i64 0, i32 4
  store i32 128, i32* %3, align 8, !tbaa !109
  %4 = getelementptr inbounds %struct.LodePNGCompressSettings, %struct.LodePNGCompressSettings* %0, i64 0, i32 5
  store i32 1, i32* %4, align 4, !tbaa !110
  %5 = getelementptr inbounds %struct.LodePNGCompressSettings, %struct.LodePNGCompressSettings* %0, i64 0, i32 6
  %6 = bitcast {}** %5 to i8*
  call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(24) %6, i8 0, i64 24, i1 false)
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind uwtable willreturn writeonly
define dso_local void @_Z32lodepng_decompress_settings_initP25LodePNGDecompressSettings(%struct.LodePNGDecompressSettings* nocapture noundef writeonly %0) local_unnamed_addr #14 {
  %2 = bitcast %struct.LodePNGDecompressSettings* %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(40) %2, i8 0, i64 40, i1 false)
  ret void
}

; Function Attrs: nofree norecurse nosync nounwind readonly uwtable
define dso_local noundef i32 @_Z13lodepng_crc32PKhm(i8* nocapture noundef readonly %0, i64 noundef %1) local_unnamed_addr #13 {
  %3 = icmp ugt i64 %1, 7
  br i1 %3, label %30, label %4

4:                                                ; preds = %30, %2
  %5 = phi i8* [ %0, %2 ], [ %94, %30 ]
  %6 = phi i64 [ %1, %2 ], [ %95, %30 ]
  %7 = phi i32 [ -1, %2 ], [ %93, %30 ]
  %8 = icmp eq i64 %6, 0
  br i1 %8, label %123, label %9

9:                                                ; preds = %4
  %10 = and i64 %6, 1
  %11 = icmp eq i64 %10, 0
  br i1 %11, label %24, label %12

12:                                               ; preds = %9
  %13 = add i64 %6, -1
  %14 = getelementptr inbounds i8, i8* %5, i64 1
  %15 = load i8, i8* %5, align 1, !tbaa !14
  %16 = zext i8 %15 to i32
  %17 = and i32 %7, 255
  %18 = xor i32 %17, %16
  %19 = zext i32 %18 to i64
  %20 = getelementptr inbounds [256 x i32], [256 x i32]* @_ZL20lodepng_crc32_table0, i64 0, i64 %19
  %21 = load i32, i32* %20, align 4, !tbaa !9
  %22 = lshr i32 %7, 8
  %23 = xor i32 %21, %22
  br label %24

24:                                               ; preds = %12, %9
  %25 = phi i32 [ undef, %9 ], [ %23, %12 ]
  %26 = phi i32 [ %7, %9 ], [ %23, %12 ]
  %27 = phi i64 [ %6, %9 ], [ %13, %12 ]
  %28 = phi i8* [ %5, %9 ], [ %14, %12 ]
  %29 = icmp eq i64 %6, 1
  br i1 %29, label %123, label %97

30:                                               ; preds = %2, %30
  %31 = phi i32 [ %93, %30 ], [ -1, %2 ]
  %32 = phi i64 [ %95, %30 ], [ %1, %2 ]
  %33 = phi i8* [ %94, %30 ], [ %0, %2 ]
  %34 = load i8, i8* %33, align 1, !tbaa !14
  %35 = zext i8 %34 to i32
  %36 = and i32 %31, 255
  %37 = xor i32 %36, %35
  %38 = zext i32 %37 to i64
  %39 = getelementptr inbounds [256 x i32], [256 x i32]* @_ZL20lodepng_crc32_table7, i64 0, i64 %38
  %40 = load i32, i32* %39, align 4, !tbaa !9
  %41 = getelementptr inbounds i8, i8* %33, i64 1
  %42 = load i8, i8* %41, align 1, !tbaa !14
  %43 = zext i8 %42 to i32
  %44 = lshr i32 %31, 8
  %45 = and i32 %44, 255
  %46 = xor i32 %45, %43
  %47 = zext i32 %46 to i64
  %48 = getelementptr inbounds [256 x i32], [256 x i32]* @_ZL20lodepng_crc32_table6, i64 0, i64 %47
  %49 = load i32, i32* %48, align 4, !tbaa !9
  %50 = xor i32 %49, %40
  %51 = getelementptr inbounds i8, i8* %33, i64 2
  %52 = load i8, i8* %51, align 1, !tbaa !14
  %53 = zext i8 %52 to i32
  %54 = lshr i32 %31, 16
  %55 = and i32 %54, 255
  %56 = xor i32 %55, %53
  %57 = zext i32 %56 to i64
  %58 = getelementptr inbounds [256 x i32], [256 x i32]* @_ZL20lodepng_crc32_table5, i64 0, i64 %57
  %59 = load i32, i32* %58, align 4, !tbaa !9
  %60 = xor i32 %50, %59
  %61 = getelementptr inbounds i8, i8* %33, i64 3
  %62 = load i8, i8* %61, align 1, !tbaa !14
  %63 = zext i8 %62 to i32
  %64 = lshr i32 %31, 24
  %65 = xor i32 %64, %63
  %66 = zext i32 %65 to i64
  %67 = getelementptr inbounds [256 x i32], [256 x i32]* @_ZL20lodepng_crc32_table4, i64 0, i64 %66
  %68 = load i32, i32* %67, align 4, !tbaa !9
  %69 = xor i32 %60, %68
  %70 = getelementptr inbounds i8, i8* %33, i64 4
  %71 = load i8, i8* %70, align 1, !tbaa !14
  %72 = zext i8 %71 to i64
  %73 = getelementptr inbounds [256 x i32], [256 x i32]* @_ZL20lodepng_crc32_table3, i64 0, i64 %72
  %74 = load i32, i32* %73, align 4, !tbaa !9
  %75 = xor i32 %69, %74
  %76 = getelementptr inbounds i8, i8* %33, i64 5
  %77 = load i8, i8* %76, align 1, !tbaa !14
  %78 = zext i8 %77 to i64
  %79 = getelementptr inbounds [256 x i32], [256 x i32]* @_ZL20lodepng_crc32_table2, i64 0, i64 %78
  %80 = load i32, i32* %79, align 4, !tbaa !9
  %81 = xor i32 %75, %80
  %82 = getelementptr inbounds i8, i8* %33, i64 6
  %83 = load i8, i8* %82, align 1, !tbaa !14
  %84 = zext i8 %83 to i64
  %85 = getelementptr inbounds [256 x i32], [256 x i32]* @_ZL20lodepng_crc32_table1, i64 0, i64 %84
  %86 = load i32, i32* %85, align 4, !tbaa !9
  %87 = xor i32 %81, %86
  %88 = getelementptr inbounds i8, i8* %33, i64 7
  %89 = load i8, i8* %88, align 1, !tbaa !14
  %90 = zext i8 %89 to i64
  %91 = getelementptr inbounds [256 x i32], [256 x i32]* @_ZL20lodepng_crc32_table0, i64 0, i64 %90
  %92 = load i32, i32* %91, align 4, !tbaa !9
  %93 = xor i32 %87, %92
  %94 = getelementptr inbounds i8, i8* %33, i64 8
  %95 = add i64 %32, -8
  %96 = icmp ugt i64 %95, 7
  br i1 %96, label %30, label %4

97:                                               ; preds = %24, %97
  %98 = phi i32 [ %121, %97 ], [ %26, %24 ]
  %99 = phi i64 [ %111, %97 ], [ %27, %24 ]
  %100 = phi i8* [ %112, %97 ], [ %28, %24 ]
  %101 = getelementptr inbounds i8, i8* %100, i64 1
  %102 = load i8, i8* %100, align 1, !tbaa !14
  %103 = zext i8 %102 to i32
  %104 = and i32 %98, 255
  %105 = xor i32 %104, %103
  %106 = zext i32 %105 to i64
  %107 = getelementptr inbounds [256 x i32], [256 x i32]* @_ZL20lodepng_crc32_table0, i64 0, i64 %106
  %108 = load i32, i32* %107, align 4, !tbaa !9
  %109 = lshr i32 %98, 8
  %110 = xor i32 %108, %109
  %111 = add i64 %99, -2
  %112 = getelementptr inbounds i8, i8* %100, i64 2
  %113 = load i8, i8* %101, align 1, !tbaa !14
  %114 = zext i8 %113 to i32
  %115 = and i32 %110, 255
  %116 = xor i32 %115, %114
  %117 = zext i32 %116 to i64
  %118 = getelementptr inbounds [256 x i32], [256 x i32]* @_ZL20lodepng_crc32_table0, i64 0, i64 %117
  %119 = load i32, i32* %118, align 4, !tbaa !9
  %120 = lshr i32 %110, 8
  %121 = xor i32 %119, %120
  %122 = icmp eq i64 %111, 0
  br i1 %122, label %123, label %97

123:                                              ; preds = %24, %97, %4
  %124 = phi i32 [ %7, %4 ], [ %25, %24 ], [ %121, %97 ]
  %125 = xor i32 %124, -1
  ret i32 %125
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind readonly uwtable willreturn
define dso_local noundef i32 @_Z20lodepng_chunk_lengthPKh(i8* nocapture noundef readonly %0) local_unnamed_addr #15 {
  %2 = load i8, i8* %0, align 1, !tbaa !14
  %3 = zext i8 %2 to i32
  %4 = shl nuw i32 %3, 24
  %5 = getelementptr inbounds i8, i8* %0, i64 1
  %6 = load i8, i8* %5, align 1, !tbaa !14
  %7 = zext i8 %6 to i32
  %8 = shl nuw nsw i32 %7, 16
  %9 = or i32 %8, %4
  %10 = getelementptr inbounds i8, i8* %0, i64 2
  %11 = load i8, i8* %10, align 1, !tbaa !14
  %12 = zext i8 %11 to i32
  %13 = shl nuw nsw i32 %12, 8
  %14 = or i32 %9, %13
  %15 = getelementptr inbounds i8, i8* %0, i64 3
  %16 = load i8, i8* %15, align 1, !tbaa !14
  %17 = zext i8 %16 to i32
  %18 = or i32 %14, %17
  ret i32 %18
}

; Function Attrs: nofree norecurse nosync nounwind uwtable
define dso_local void @_Z18lodepng_chunk_typePcPKh(i8* nocapture noundef writeonly %0, i8* nocapture noundef readonly %1) local_unnamed_addr #16 {
  %3 = getelementptr inbounds i8, i8* %1, i64 4
  %4 = load i8, i8* %3, align 1, !tbaa !14
  store i8 %4, i8* %0, align 1, !tbaa !14
  %5 = getelementptr inbounds i8, i8* %1, i64 5
  %6 = load i8, i8* %5, align 1, !tbaa !14
  %7 = getelementptr inbounds i8, i8* %0, i64 1
  store i8 %6, i8* %7, align 1, !tbaa !14
  %8 = getelementptr inbounds i8, i8* %1, i64 6
  %9 = load i8, i8* %8, align 1, !tbaa !14
  %10 = getelementptr inbounds i8, i8* %0, i64 2
  store i8 %9, i8* %10, align 1, !tbaa !14
  %11 = getelementptr inbounds i8, i8* %1, i64 7
  %12 = load i8, i8* %11, align 1, !tbaa !14
  %13 = getelementptr inbounds i8, i8* %0, i64 3
  store i8 %12, i8* %13, align 1, !tbaa !14
  %14 = getelementptr inbounds i8, i8* %0, i64 4
  store i8 0, i8* %14, align 1, !tbaa !14
  ret void
}

; Function Attrs: nofree norecurse nosync nounwind readonly uwtable
define dso_local noundef zeroext i8 @_Z25lodepng_chunk_type_equalsPKhPKc(i8* nocapture noundef readonly %0, i8* noundef %1) local_unnamed_addr #13 {
  br label %3

3:                                                ; preds = %3, %2
  %4 = phi i8* [ %1, %2 ], [ %7, %3 ]
  %5 = load i8, i8* %4, align 1, !tbaa !14
  %6 = icmp eq i8 %5, 0
  %7 = getelementptr inbounds i8, i8* %4, i64 1
  br i1 %6, label %8, label %3

8:                                                ; preds = %3
  %9 = ptrtoint i8* %4 to i64
  %10 = ptrtoint i8* %1 to i64
  %11 = sub i64 %9, %10
  %12 = icmp eq i64 %11, 4
  br i1 %12, label %13, label %45

13:                                               ; preds = %8
  %14 = getelementptr inbounds i8, i8* %0, i64 4
  %15 = load i8, i8* %14, align 1, !tbaa !14
  %16 = zext i8 %15 to i32
  %17 = load i8, i8* %1, align 1, !tbaa !14
  %18 = sext i8 %17 to i32
  %19 = icmp eq i32 %16, %18
  br i1 %19, label %20, label %45

20:                                               ; preds = %13
  %21 = getelementptr inbounds i8, i8* %0, i64 5
  %22 = load i8, i8* %21, align 1, !tbaa !14
  %23 = zext i8 %22 to i32
  %24 = getelementptr inbounds i8, i8* %1, i64 1
  %25 = load i8, i8* %24, align 1, !tbaa !14
  %26 = sext i8 %25 to i32
  %27 = icmp eq i32 %23, %26
  br i1 %27, label %28, label %45

28:                                               ; preds = %20
  %29 = getelementptr inbounds i8, i8* %0, i64 6
  %30 = load i8, i8* %29, align 1, !tbaa !14
  %31 = zext i8 %30 to i32
  %32 = getelementptr inbounds i8, i8* %1, i64 2
  %33 = load i8, i8* %32, align 1, !tbaa !14
  %34 = sext i8 %33 to i32
  %35 = icmp eq i32 %31, %34
  br i1 %35, label %36, label %45

36:                                               ; preds = %28
  %37 = getelementptr inbounds i8, i8* %0, i64 7
  %38 = load i8, i8* %37, align 1, !tbaa !14
  %39 = zext i8 %38 to i32
  %40 = getelementptr inbounds i8, i8* %1, i64 3
  %41 = load i8, i8* %40, align 1, !tbaa !14
  %42 = sext i8 %41 to i32
  %43 = icmp eq i32 %39, %42
  %44 = zext i1 %43 to i8
  br label %45

45:                                               ; preds = %13, %20, %28, %36, %8
  %46 = phi i8 [ 0, %8 ], [ 0, %28 ], [ 0, %20 ], [ 0, %13 ], [ %44, %36 ]
  ret i8 %46
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind readonly uwtable willreturn
define dso_local noundef zeroext i8 @_Z23lodepng_chunk_ancillaryPKh(i8* nocapture noundef readonly %0) local_unnamed_addr #15 {
  %2 = getelementptr inbounds i8, i8* %0, i64 4
  %3 = load i8, i8* %2, align 1, !tbaa !14
  %4 = lshr i8 %3, 5
  %5 = and i8 %4, 1
  ret i8 %5
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind readonly uwtable willreturn
define dso_local noundef zeroext i8 @_Z21lodepng_chunk_privatePKh(i8* nocapture noundef readonly %0) local_unnamed_addr #15 {
  %2 = getelementptr inbounds i8, i8* %0, i64 6
  %3 = load i8, i8* %2, align 1, !tbaa !14
  %4 = lshr i8 %3, 5
  %5 = and i8 %4, 1
  ret i8 %5
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind readonly uwtable willreturn
define dso_local noundef zeroext i8 @_Z24lodepng_chunk_safetocopyPKh(i8* nocapture noundef readonly %0) local_unnamed_addr #15 {
  %2 = getelementptr inbounds i8, i8* %0, i64 7
  %3 = load i8, i8* %2, align 1, !tbaa !14
  %4 = lshr i8 %3, 5
  %5 = and i8 %4, 1
  ret i8 %5
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind readnone uwtable willreturn
define dso_local noundef nonnull i8* @_Z18lodepng_chunk_dataPh(i8* noundef readnone %0) local_unnamed_addr #17 {
  %2 = getelementptr inbounds i8, i8* %0, i64 8
  ret i8* %2
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind readnone uwtable willreturn
define dso_local noundef nonnull i8* @_Z24lodepng_chunk_data_constPKh(i8* noundef readnone %0) local_unnamed_addr #17 {
  %2 = getelementptr inbounds i8, i8* %0, i64 8
  ret i8* %2
}

; Function Attrs: nofree norecurse nosync nounwind readonly uwtable
define dso_local noundef i32 @_Z23lodepng_chunk_check_crcPKh(i8* nocapture noundef readonly %0) local_unnamed_addr #13 {
  %2 = load i8, i8* %0, align 1, !tbaa !14
  %3 = zext i8 %2 to i32
  %4 = shl nuw i32 %3, 24
  %5 = getelementptr inbounds i8, i8* %0, i64 1
  %6 = load i8, i8* %5, align 1, !tbaa !14
  %7 = zext i8 %6 to i32
  %8 = shl nuw nsw i32 %7, 16
  %9 = or i32 %8, %4
  %10 = getelementptr inbounds i8, i8* %0, i64 2
  %11 = load i8, i8* %10, align 1, !tbaa !14
  %12 = zext i8 %11 to i32
  %13 = shl nuw nsw i32 %12, 8
  %14 = or i32 %9, %13
  %15 = getelementptr inbounds i8, i8* %0, i64 3
  %16 = load i8, i8* %15, align 1, !tbaa !14
  %17 = zext i8 %16 to i32
  %18 = or i32 %14, %17
  %19 = add i32 %18, 8
  %20 = zext i32 %19 to i64
  %21 = getelementptr inbounds i8, i8* %0, i64 %20
  %22 = load i8, i8* %21, align 1, !tbaa !14
  %23 = getelementptr inbounds i8, i8* %21, i64 1
  %24 = load i8, i8* %23, align 1, !tbaa !14
  %25 = getelementptr inbounds i8, i8* %21, i64 2
  %26 = load i8, i8* %25, align 1, !tbaa !14
  %27 = getelementptr inbounds i8, i8* %21, i64 3
  %28 = load i8, i8* %27, align 1, !tbaa !14
  %29 = getelementptr inbounds i8, i8* %0, i64 4
  %30 = add i32 %18, 4
  %31 = zext i32 %30 to i64
  %32 = icmp ugt i32 %30, 7
  br i1 %32, label %59, label %33

33:                                               ; preds = %59, %1
  %34 = phi i8* [ %29, %1 ], [ %123, %59 ]
  %35 = phi i64 [ %31, %1 ], [ %124, %59 ]
  %36 = phi i32 [ -1, %1 ], [ %122, %59 ]
  %37 = icmp eq i64 %35, 0
  br i1 %37, label %152, label %38

38:                                               ; preds = %33
  %39 = and i64 %35, 1
  %40 = icmp eq i64 %39, 0
  br i1 %40, label %53, label %41

41:                                               ; preds = %38
  %42 = add i64 %35, -1
  %43 = getelementptr inbounds i8, i8* %34, i64 1
  %44 = load i8, i8* %34, align 1, !tbaa !14
  %45 = zext i8 %44 to i32
  %46 = and i32 %36, 255
  %47 = xor i32 %46, %45
  %48 = zext i32 %47 to i64
  %49 = getelementptr inbounds [256 x i32], [256 x i32]* @_ZL20lodepng_crc32_table0, i64 0, i64 %48
  %50 = load i32, i32* %49, align 4, !tbaa !9
  %51 = lshr i32 %36, 8
  %52 = xor i32 %50, %51
  br label %53

53:                                               ; preds = %41, %38
  %54 = phi i32 [ undef, %38 ], [ %52, %41 ]
  %55 = phi i32 [ %36, %38 ], [ %52, %41 ]
  %56 = phi i64 [ %35, %38 ], [ %42, %41 ]
  %57 = phi i8* [ %34, %38 ], [ %43, %41 ]
  %58 = icmp eq i64 %35, 1
  br i1 %58, label %152, label %126

59:                                               ; preds = %1, %59
  %60 = phi i32 [ %122, %59 ], [ -1, %1 ]
  %61 = phi i64 [ %124, %59 ], [ %31, %1 ]
  %62 = phi i8* [ %123, %59 ], [ %29, %1 ]
  %63 = load i8, i8* %62, align 1, !tbaa !14
  %64 = zext i8 %63 to i32
  %65 = and i32 %60, 255
  %66 = xor i32 %65, %64
  %67 = zext i32 %66 to i64
  %68 = getelementptr inbounds [256 x i32], [256 x i32]* @_ZL20lodepng_crc32_table7, i64 0, i64 %67
  %69 = load i32, i32* %68, align 4, !tbaa !9
  %70 = getelementptr inbounds i8, i8* %62, i64 1
  %71 = load i8, i8* %70, align 1, !tbaa !14
  %72 = zext i8 %71 to i32
  %73 = lshr i32 %60, 8
  %74 = and i32 %73, 255
  %75 = xor i32 %74, %72
  %76 = zext i32 %75 to i64
  %77 = getelementptr inbounds [256 x i32], [256 x i32]* @_ZL20lodepng_crc32_table6, i64 0, i64 %76
  %78 = load i32, i32* %77, align 4, !tbaa !9
  %79 = xor i32 %78, %69
  %80 = getelementptr inbounds i8, i8* %62, i64 2
  %81 = load i8, i8* %80, align 1, !tbaa !14
  %82 = zext i8 %81 to i32
  %83 = lshr i32 %60, 16
  %84 = and i32 %83, 255
  %85 = xor i32 %84, %82
  %86 = zext i32 %85 to i64
  %87 = getelementptr inbounds [256 x i32], [256 x i32]* @_ZL20lodepng_crc32_table5, i64 0, i64 %86
  %88 = load i32, i32* %87, align 4, !tbaa !9
  %89 = xor i32 %79, %88
  %90 = getelementptr inbounds i8, i8* %62, i64 3
  %91 = load i8, i8* %90, align 1, !tbaa !14
  %92 = zext i8 %91 to i32
  %93 = lshr i32 %60, 24
  %94 = xor i32 %93, %92
  %95 = zext i32 %94 to i64
  %96 = getelementptr inbounds [256 x i32], [256 x i32]* @_ZL20lodepng_crc32_table4, i64 0, i64 %95
  %97 = load i32, i32* %96, align 4, !tbaa !9
  %98 = xor i32 %89, %97
  %99 = getelementptr inbounds i8, i8* %62, i64 4
  %100 = load i8, i8* %99, align 1, !tbaa !14
  %101 = zext i8 %100 to i64
  %102 = getelementptr inbounds [256 x i32], [256 x i32]* @_ZL20lodepng_crc32_table3, i64 0, i64 %101
  %103 = load i32, i32* %102, align 4, !tbaa !9
  %104 = xor i32 %98, %103
  %105 = getelementptr inbounds i8, i8* %62, i64 5
  %106 = load i8, i8* %105, align 1, !tbaa !14
  %107 = zext i8 %106 to i64
  %108 = getelementptr inbounds [256 x i32], [256 x i32]* @_ZL20lodepng_crc32_table2, i64 0, i64 %107
  %109 = load i32, i32* %108, align 4, !tbaa !9
  %110 = xor i32 %104, %109
  %111 = getelementptr inbounds i8, i8* %62, i64 6
  %112 = load i8, i8* %111, align 1, !tbaa !14
  %113 = zext i8 %112 to i64
  %114 = getelementptr inbounds [256 x i32], [256 x i32]* @_ZL20lodepng_crc32_table1, i64 0, i64 %113
  %115 = load i32, i32* %114, align 4, !tbaa !9
  %116 = xor i32 %110, %115
  %117 = getelementptr inbounds i8, i8* %62, i64 7
  %118 = load i8, i8* %117, align 1, !tbaa !14
  %119 = zext i8 %118 to i64
  %120 = getelementptr inbounds [256 x i32], [256 x i32]* @_ZL20lodepng_crc32_table0, i64 0, i64 %119
  %121 = load i32, i32* %120, align 4, !tbaa !9
  %122 = xor i32 %116, %121
  %123 = getelementptr inbounds i8, i8* %62, i64 8
  %124 = add i64 %61, -8
  %125 = icmp ugt i64 %124, 7
  br i1 %125, label %59, label %33

126:                                              ; preds = %53, %126
  %127 = phi i32 [ %150, %126 ], [ %55, %53 ]
  %128 = phi i64 [ %140, %126 ], [ %56, %53 ]
  %129 = phi i8* [ %141, %126 ], [ %57, %53 ]
  %130 = getelementptr inbounds i8, i8* %129, i64 1
  %131 = load i8, i8* %129, align 1, !tbaa !14
  %132 = zext i8 %131 to i32
  %133 = and i32 %127, 255
  %134 = xor i32 %133, %132
  %135 = zext i32 %134 to i64
  %136 = getelementptr inbounds [256 x i32], [256 x i32]* @_ZL20lodepng_crc32_table0, i64 0, i64 %135
  %137 = load i32, i32* %136, align 4, !tbaa !9
  %138 = lshr i32 %127, 8
  %139 = xor i32 %137, %138
  %140 = add i64 %128, -2
  %141 = getelementptr inbounds i8, i8* %129, i64 2
  %142 = load i8, i8* %130, align 1, !tbaa !14
  %143 = zext i8 %142 to i32
  %144 = and i32 %139, 255
  %145 = xor i32 %144, %143
  %146 = zext i32 %145 to i64
  %147 = getelementptr inbounds [256 x i32], [256 x i32]* @_ZL20lodepng_crc32_table0, i64 0, i64 %146
  %148 = load i32, i32* %147, align 4, !tbaa !9
  %149 = lshr i32 %139, 8
  %150 = xor i32 %148, %149
  %151 = icmp eq i64 %140, 0
  br i1 %151, label %152, label %126

152:                                              ; preds = %53, %126, %33
  %153 = phi i32 [ %36, %33 ], [ %54, %53 ], [ %150, %126 ]
  %154 = zext i8 %24 to i32
  %155 = shl nuw nsw i32 %154, 16
  %156 = zext i8 %22 to i32
  %157 = shl nuw i32 %156, 24
  %158 = or i32 %155, %157
  %159 = zext i8 %26 to i32
  %160 = shl nuw nsw i32 %159, 8
  %161 = or i32 %158, %160
  %162 = zext i8 %28 to i32
  %163 = or i32 %161, %162
  %164 = xor i32 %153, -1
  %165 = icmp ne i32 %163, %164
  %166 = zext i1 %165 to i32
  ret i32 %166
}

; Function Attrs: nofree norecurse nosync nounwind uwtable
define dso_local void @_Z26lodepng_chunk_generate_crcPh(i8* nocapture noundef %0) local_unnamed_addr #16 {
  %2 = load i8, i8* %0, align 1, !tbaa !14
  %3 = zext i8 %2 to i32
  %4 = shl nuw i32 %3, 24
  %5 = getelementptr inbounds i8, i8* %0, i64 1
  %6 = load i8, i8* %5, align 1, !tbaa !14
  %7 = zext i8 %6 to i32
  %8 = shl nuw nsw i32 %7, 16
  %9 = or i32 %8, %4
  %10 = getelementptr inbounds i8, i8* %0, i64 2
  %11 = load i8, i8* %10, align 1, !tbaa !14
  %12 = zext i8 %11 to i32
  %13 = shl nuw nsw i32 %12, 8
  %14 = or i32 %9, %13
  %15 = getelementptr inbounds i8, i8* %0, i64 3
  %16 = load i8, i8* %15, align 1, !tbaa !14
  %17 = zext i8 %16 to i32
  %18 = or i32 %14, %17
  %19 = getelementptr inbounds i8, i8* %0, i64 4
  %20 = add i32 %18, 4
  %21 = zext i32 %20 to i64
  %22 = icmp ugt i32 %20, 7
  br i1 %22, label %49, label %23

23:                                               ; preds = %49, %1
  %24 = phi i8* [ %19, %1 ], [ %113, %49 ]
  %25 = phi i64 [ %21, %1 ], [ %114, %49 ]
  %26 = phi i32 [ -1, %1 ], [ %112, %49 ]
  %27 = icmp eq i64 %25, 0
  br i1 %27, label %142, label %28

28:                                               ; preds = %23
  %29 = and i64 %25, 1
  %30 = icmp eq i64 %29, 0
  br i1 %30, label %43, label %31

31:                                               ; preds = %28
  %32 = add i64 %25, -1
  %33 = getelementptr inbounds i8, i8* %24, i64 1
  %34 = load i8, i8* %24, align 1, !tbaa !14
  %35 = zext i8 %34 to i32
  %36 = and i32 %26, 255
  %37 = xor i32 %36, %35
  %38 = zext i32 %37 to i64
  %39 = getelementptr inbounds [256 x i32], [256 x i32]* @_ZL20lodepng_crc32_table0, i64 0, i64 %38
  %40 = load i32, i32* %39, align 4, !tbaa !9
  %41 = lshr i32 %26, 8
  %42 = xor i32 %40, %41
  br label %43

43:                                               ; preds = %31, %28
  %44 = phi i32 [ undef, %28 ], [ %42, %31 ]
  %45 = phi i32 [ %26, %28 ], [ %42, %31 ]
  %46 = phi i64 [ %25, %28 ], [ %32, %31 ]
  %47 = phi i8* [ %24, %28 ], [ %33, %31 ]
  %48 = icmp eq i64 %25, 1
  br i1 %48, label %142, label %116

49:                                               ; preds = %1, %49
  %50 = phi i32 [ %112, %49 ], [ -1, %1 ]
  %51 = phi i64 [ %114, %49 ], [ %21, %1 ]
  %52 = phi i8* [ %113, %49 ], [ %19, %1 ]
  %53 = load i8, i8* %52, align 1, !tbaa !14
  %54 = zext i8 %53 to i32
  %55 = and i32 %50, 255
  %56 = xor i32 %55, %54
  %57 = zext i32 %56 to i64
  %58 = getelementptr inbounds [256 x i32], [256 x i32]* @_ZL20lodepng_crc32_table7, i64 0, i64 %57
  %59 = load i32, i32* %58, align 4, !tbaa !9
  %60 = getelementptr inbounds i8, i8* %52, i64 1
  %61 = load i8, i8* %60, align 1, !tbaa !14
  %62 = zext i8 %61 to i32
  %63 = lshr i32 %50, 8
  %64 = and i32 %63, 255
  %65 = xor i32 %64, %62
  %66 = zext i32 %65 to i64
  %67 = getelementptr inbounds [256 x i32], [256 x i32]* @_ZL20lodepng_crc32_table6, i64 0, i64 %66
  %68 = load i32, i32* %67, align 4, !tbaa !9
  %69 = xor i32 %68, %59
  %70 = getelementptr inbounds i8, i8* %52, i64 2
  %71 = load i8, i8* %70, align 1, !tbaa !14
  %72 = zext i8 %71 to i32
  %73 = lshr i32 %50, 16
  %74 = and i32 %73, 255
  %75 = xor i32 %74, %72
  %76 = zext i32 %75 to i64
  %77 = getelementptr inbounds [256 x i32], [256 x i32]* @_ZL20lodepng_crc32_table5, i64 0, i64 %76
  %78 = load i32, i32* %77, align 4, !tbaa !9
  %79 = xor i32 %69, %78
  %80 = getelementptr inbounds i8, i8* %52, i64 3
  %81 = load i8, i8* %80, align 1, !tbaa !14
  %82 = zext i8 %81 to i32
  %83 = lshr i32 %50, 24
  %84 = xor i32 %83, %82
  %85 = zext i32 %84 to i64
  %86 = getelementptr inbounds [256 x i32], [256 x i32]* @_ZL20lodepng_crc32_table4, i64 0, i64 %85
  %87 = load i32, i32* %86, align 4, !tbaa !9
  %88 = xor i32 %79, %87
  %89 = getelementptr inbounds i8, i8* %52, i64 4
  %90 = load i8, i8* %89, align 1, !tbaa !14
  %91 = zext i8 %90 to i64
  %92 = getelementptr inbounds [256 x i32], [256 x i32]* @_ZL20lodepng_crc32_table3, i64 0, i64 %91
  %93 = load i32, i32* %92, align 4, !tbaa !9
  %94 = xor i32 %88, %93
  %95 = getelementptr inbounds i8, i8* %52, i64 5
  %96 = load i8, i8* %95, align 1, !tbaa !14
  %97 = zext i8 %96 to i64
  %98 = getelementptr inbounds [256 x i32], [256 x i32]* @_ZL20lodepng_crc32_table2, i64 0, i64 %97
  %99 = load i32, i32* %98, align 4, !tbaa !9
  %100 = xor i32 %94, %99
  %101 = getelementptr inbounds i8, i8* %52, i64 6
  %102 = load i8, i8* %101, align 1, !tbaa !14
  %103 = zext i8 %102 to i64
  %104 = getelementptr inbounds [256 x i32], [256 x i32]* @_ZL20lodepng_crc32_table1, i64 0, i64 %103
  %105 = load i32, i32* %104, align 4, !tbaa !9
  %106 = xor i32 %100, %105
  %107 = getelementptr inbounds i8, i8* %52, i64 7
  %108 = load i8, i8* %107, align 1, !tbaa !14
  %109 = zext i8 %108 to i64
  %110 = getelementptr inbounds [256 x i32], [256 x i32]* @_ZL20lodepng_crc32_table0, i64 0, i64 %109
  %111 = load i32, i32* %110, align 4, !tbaa !9
  %112 = xor i32 %106, %111
  %113 = getelementptr inbounds i8, i8* %52, i64 8
  %114 = add i64 %51, -8
  %115 = icmp ugt i64 %114, 7
  br i1 %115, label %49, label %23

116:                                              ; preds = %43, %116
  %117 = phi i32 [ %140, %116 ], [ %45, %43 ]
  %118 = phi i64 [ %130, %116 ], [ %46, %43 ]
  %119 = phi i8* [ %131, %116 ], [ %47, %43 ]
  %120 = getelementptr inbounds i8, i8* %119, i64 1
  %121 = load i8, i8* %119, align 1, !tbaa !14
  %122 = zext i8 %121 to i32
  %123 = and i32 %117, 255
  %124 = xor i32 %123, %122
  %125 = zext i32 %124 to i64
  %126 = getelementptr inbounds [256 x i32], [256 x i32]* @_ZL20lodepng_crc32_table0, i64 0, i64 %125
  %127 = load i32, i32* %126, align 4, !tbaa !9
  %128 = lshr i32 %117, 8
  %129 = xor i32 %127, %128
  %130 = add i64 %118, -2
  %131 = getelementptr inbounds i8, i8* %119, i64 2
  %132 = load i8, i8* %120, align 1, !tbaa !14
  %133 = zext i8 %132 to i32
  %134 = and i32 %129, 255
  %135 = xor i32 %134, %133
  %136 = zext i32 %135 to i64
  %137 = getelementptr inbounds [256 x i32], [256 x i32]* @_ZL20lodepng_crc32_table0, i64 0, i64 %136
  %138 = load i32, i32* %137, align 4, !tbaa !9
  %139 = lshr i32 %129, 8
  %140 = xor i32 %138, %139
  %141 = icmp eq i64 %130, 0
  br i1 %141, label %142, label %116

142:                                              ; preds = %43, %116, %23
  %143 = phi i32 [ %26, %23 ], [ %44, %43 ], [ %140, %116 ]
  %144 = xor i32 %143, -1
  %145 = getelementptr inbounds i8, i8* %0, i64 8
  %146 = zext i32 %18 to i64
  %147 = getelementptr inbounds i8, i8* %145, i64 %146
  %148 = lshr i32 %144, 24
  %149 = trunc i32 %148 to i8
  store i8 %149, i8* %147, align 1, !tbaa !14
  %150 = lshr i32 %144, 16
  %151 = trunc i32 %150 to i8
  %152 = getelementptr inbounds i8, i8* %147, i64 1
  store i8 %151, i8* %152, align 1, !tbaa !14
  %153 = lshr i32 %144, 8
  %154 = trunc i32 %153 to i8
  %155 = getelementptr inbounds i8, i8* %147, i64 2
  store i8 %154, i8* %155, align 1, !tbaa !14
  %156 = trunc i32 %144 to i8
  %157 = getelementptr inbounds i8, i8* %147, i64 3
  store i8 %156, i8* %157, align 1, !tbaa !14
  ret void
}

; Function Attrs: mustprogress nofree nosync nounwind readonly uwtable willreturn
define dso_local noundef i8* @_Z18lodepng_chunk_nextPhS_(i8* noundef %0, i8* noundef %1) local_unnamed_addr #18 {
  %3 = ptrtoint i8* %1 to i64
  %4 = ptrtoint i8* %0 to i64
  %5 = sub i64 %3, %4
  %6 = icmp uge i8* %0, %1
  %7 = icmp ult i64 %5, 12
  %8 = or i1 %6, %7
  br i1 %8, label %62, label %9

9:                                                ; preds = %2
  %10 = load i8, i8* %0, align 1, !tbaa !14
  %11 = icmp eq i8 %10, -119
  %12 = getelementptr inbounds i8, i8* %0, i64 1
  %13 = load i8, i8* %12, align 1, !tbaa !14
  %14 = icmp eq i8 %13, 80
  %15 = select i1 %11, i1 %14, i1 false
  br i1 %15, label %16, label %42

16:                                               ; preds = %9
  %17 = getelementptr inbounds i8, i8* %0, i64 2
  %18 = load i8, i8* %17, align 1, !tbaa !14
  %19 = icmp eq i8 %18, 78
  br i1 %19, label %20, label %42

20:                                               ; preds = %16
  %21 = getelementptr inbounds i8, i8* %0, i64 3
  %22 = load i8, i8* %21, align 1, !tbaa !14
  %23 = icmp eq i8 %22, 71
  br i1 %23, label %24, label %42

24:                                               ; preds = %20
  %25 = getelementptr inbounds i8, i8* %0, i64 4
  %26 = load i8, i8* %25, align 1, !tbaa !14
  %27 = icmp eq i8 %26, 13
  br i1 %27, label %28, label %42

28:                                               ; preds = %24
  %29 = getelementptr inbounds i8, i8* %0, i64 5
  %30 = load i8, i8* %29, align 1, !tbaa !14
  %31 = icmp eq i8 %30, 10
  br i1 %31, label %32, label %42

32:                                               ; preds = %28
  %33 = getelementptr inbounds i8, i8* %0, i64 6
  %34 = load i8, i8* %33, align 1, !tbaa !14
  %35 = icmp eq i8 %34, 26
  br i1 %35, label %36, label %42

36:                                               ; preds = %32
  %37 = getelementptr inbounds i8, i8* %0, i64 7
  %38 = load i8, i8* %37, align 1, !tbaa !14
  %39 = icmp eq i8 %38, 10
  br i1 %39, label %40, label %42

40:                                               ; preds = %36
  %41 = getelementptr inbounds i8, i8* %0, i64 8
  br label %62

42:                                               ; preds = %9, %36, %32, %28, %24, %20, %16
  %43 = phi i8 [ 80, %36 ], [ 80, %32 ], [ 80, %28 ], [ 80, %24 ], [ 80, %20 ], [ 80, %16 ], [ %13, %9 ]
  %44 = zext i8 %10 to i64
  %45 = shl nuw nsw i64 %44, 24
  %46 = zext i8 %43 to i64
  %47 = shl nuw nsw i64 %46, 16
  %48 = or i64 %47, %45
  %49 = getelementptr inbounds i8, i8* %0, i64 2
  %50 = load i8, i8* %49, align 1, !tbaa !14
  %51 = zext i8 %50 to i64
  %52 = shl nuw nsw i64 %51, 8
  %53 = or i64 %48, %52
  %54 = getelementptr inbounds i8, i8* %0, i64 3
  %55 = load i8, i8* %54, align 1, !tbaa !14
  %56 = zext i8 %55 to i64
  %57 = or i64 %53, %56
  %58 = add nuw nsw i64 %57, 12
  %59 = icmp ugt i64 %58, %5
  %60 = getelementptr inbounds i8, i8* %0, i64 %58
  %61 = select i1 %59, i8* %1, i8* %60
  br label %62

62:                                               ; preds = %2, %42, %40
  %63 = phi i8* [ %41, %40 ], [ %61, %42 ], [ %1, %2 ]
  ret i8* %63
}

; Function Attrs: mustprogress nofree nosync nounwind readonly uwtable willreturn
define dso_local noundef i8* @_Z24lodepng_chunk_next_constPKhS0_(i8* noundef %0, i8* noundef %1) local_unnamed_addr #18 {
  %3 = ptrtoint i8* %1 to i64
  %4 = ptrtoint i8* %0 to i64
  %5 = sub i64 %3, %4
  %6 = icmp uge i8* %0, %1
  %7 = icmp ult i64 %5, 12
  %8 = or i1 %6, %7
  br i1 %8, label %62, label %9

9:                                                ; preds = %2
  %10 = load i8, i8* %0, align 1, !tbaa !14
  %11 = icmp eq i8 %10, -119
  %12 = getelementptr inbounds i8, i8* %0, i64 1
  %13 = load i8, i8* %12, align 1, !tbaa !14
  %14 = icmp eq i8 %13, 80
  %15 = select i1 %11, i1 %14, i1 false
  br i1 %15, label %16, label %42

16:                                               ; preds = %9
  %17 = getelementptr inbounds i8, i8* %0, i64 2
  %18 = load i8, i8* %17, align 1, !tbaa !14
  %19 = icmp eq i8 %18, 78
  br i1 %19, label %20, label %42

20:                                               ; preds = %16
  %21 = getelementptr inbounds i8, i8* %0, i64 3
  %22 = load i8, i8* %21, align 1, !tbaa !14
  %23 = icmp eq i8 %22, 71
  br i1 %23, label %24, label %42

24:                                               ; preds = %20
  %25 = getelementptr inbounds i8, i8* %0, i64 4
  %26 = load i8, i8* %25, align 1, !tbaa !14
  %27 = icmp eq i8 %26, 13
  br i1 %27, label %28, label %42

28:                                               ; preds = %24
  %29 = getelementptr inbounds i8, i8* %0, i64 5
  %30 = load i8, i8* %29, align 1, !tbaa !14
  %31 = icmp eq i8 %30, 10
  br i1 %31, label %32, label %42

32:                                               ; preds = %28
  %33 = getelementptr inbounds i8, i8* %0, i64 6
  %34 = load i8, i8* %33, align 1, !tbaa !14
  %35 = icmp eq i8 %34, 26
  br i1 %35, label %36, label %42

36:                                               ; preds = %32
  %37 = getelementptr inbounds i8, i8* %0, i64 7
  %38 = load i8, i8* %37, align 1, !tbaa !14
  %39 = icmp eq i8 %38, 10
  br i1 %39, label %40, label %42

40:                                               ; preds = %36
  %41 = getelementptr inbounds i8, i8* %0, i64 8
  br label %62

42:                                               ; preds = %9, %36, %32, %28, %24, %20, %16
  %43 = phi i8 [ 80, %36 ], [ 80, %32 ], [ 80, %28 ], [ 80, %24 ], [ 80, %20 ], [ 80, %16 ], [ %13, %9 ]
  %44 = zext i8 %10 to i64
  %45 = shl nuw nsw i64 %44, 24
  %46 = zext i8 %43 to i64
  %47 = shl nuw nsw i64 %46, 16
  %48 = or i64 %47, %45
  %49 = getelementptr inbounds i8, i8* %0, i64 2
  %50 = load i8, i8* %49, align 1, !tbaa !14
  %51 = zext i8 %50 to i64
  %52 = shl nuw nsw i64 %51, 8
  %53 = or i64 %48, %52
  %54 = getelementptr inbounds i8, i8* %0, i64 3
  %55 = load i8, i8* %54, align 1, !tbaa !14
  %56 = zext i8 %55 to i64
  %57 = or i64 %53, %56
  %58 = add nuw nsw i64 %57, 12
  %59 = icmp ugt i64 %58, %5
  %60 = getelementptr inbounds i8, i8* %0, i64 %58
  %61 = select i1 %59, i8* %1, i8* %60
  br label %62

62:                                               ; preds = %2, %42, %40
  %63 = phi i8* [ %41, %40 ], [ %61, %42 ], [ %1, %2 ]
  ret i8* %63
}

; Function Attrs: nofree norecurse nosync nounwind readonly uwtable
define dso_local noundef i8* @_Z18lodepng_chunk_findPhS_PKc(i8* noundef %0, i8* noundef %1, i8* noundef %2) local_unnamed_addr #13 {
  %4 = ptrtoint i8* %1 to i64
  %5 = icmp uge i8* %0, %1
  %6 = ptrtoint i8* %0 to i64
  %7 = sub i64 %4, %6
  %8 = icmp slt i64 %7, 12
  %9 = or i1 %5, %8
  br i1 %9, label %116, label %10

10:                                               ; preds = %3
  %11 = ptrtoint i8* %2 to i64
  %12 = getelementptr inbounds i8, i8* %2, i64 1
  %13 = getelementptr inbounds i8, i8* %2, i64 2
  %14 = getelementptr inbounds i8, i8* %2, i64 3
  br label %15

15:                                               ; preds = %10, %109
  %16 = phi i64 [ %7, %10 ], [ %113, %109 ]
  %17 = phi i8* [ %0, %10 ], [ %110, %109 ]
  br label %18

18:                                               ; preds = %15, %18
  %19 = phi i8* [ %22, %18 ], [ %2, %15 ]
  %20 = load i8, i8* %19, align 1, !tbaa !14
  %21 = icmp eq i8 %20, 0
  %22 = getelementptr inbounds i8, i8* %19, i64 1
  br i1 %21, label %23, label %18

23:                                               ; preds = %18
  %24 = ptrtoint i8* %19 to i64
  %25 = sub i64 %24, %11
  %26 = icmp eq i64 %25, 4
  br i1 %26, label %27, label %55

27:                                               ; preds = %23
  %28 = getelementptr inbounds i8, i8* %17, i64 4
  %29 = load i8, i8* %28, align 1, !tbaa !14
  %30 = zext i8 %29 to i32
  %31 = load i8, i8* %2, align 1, !tbaa !14
  %32 = sext i8 %31 to i32
  %33 = icmp eq i32 %30, %32
  br i1 %33, label %34, label %55

34:                                               ; preds = %27
  %35 = getelementptr inbounds i8, i8* %17, i64 5
  %36 = load i8, i8* %35, align 1, !tbaa !14
  %37 = zext i8 %36 to i32
  %38 = load i8, i8* %12, align 1, !tbaa !14
  %39 = sext i8 %38 to i32
  %40 = icmp eq i32 %37, %39
  br i1 %40, label %41, label %55

41:                                               ; preds = %34
  %42 = getelementptr inbounds i8, i8* %17, i64 6
  %43 = load i8, i8* %42, align 1, !tbaa !14
  %44 = zext i8 %43 to i32
  %45 = load i8, i8* %13, align 1, !tbaa !14
  %46 = sext i8 %45 to i32
  %47 = icmp eq i32 %44, %46
  br i1 %47, label %48, label %55

48:                                               ; preds = %41
  %49 = getelementptr inbounds i8, i8* %17, i64 7
  %50 = load i8, i8* %49, align 1, !tbaa !14
  %51 = zext i8 %50 to i32
  %52 = load i8, i8* %14, align 1, !tbaa !14
  %53 = sext i8 %52 to i32
  %54 = icmp eq i32 %51, %53
  br i1 %54, label %116, label %55

55:                                               ; preds = %27, %34, %41, %23, %48
  %56 = icmp ult i64 %16, 12
  br i1 %56, label %116, label %57

57:                                               ; preds = %55
  %58 = load i8, i8* %17, align 1, !tbaa !14
  %59 = icmp eq i8 %58, -119
  %60 = getelementptr inbounds i8, i8* %17, i64 1
  %61 = load i8, i8* %60, align 1, !tbaa !14
  %62 = icmp eq i8 %61, 80
  %63 = select i1 %59, i1 %62, i1 false
  %64 = getelementptr inbounds i8, i8* %17, i64 2
  %65 = load i8, i8* %64, align 1, !tbaa !14
  br i1 %63, label %66, label %90

66:                                               ; preds = %57
  %67 = icmp eq i8 %65, 78
  br i1 %67, label %68, label %90

68:                                               ; preds = %66
  %69 = getelementptr inbounds i8, i8* %17, i64 3
  %70 = load i8, i8* %69, align 1, !tbaa !14
  %71 = icmp eq i8 %70, 71
  br i1 %71, label %72, label %90

72:                                               ; preds = %68
  %73 = getelementptr inbounds i8, i8* %17, i64 4
  %74 = load i8, i8* %73, align 1, !tbaa !14
  %75 = icmp eq i8 %74, 13
  br i1 %75, label %76, label %90

76:                                               ; preds = %72
  %77 = getelementptr inbounds i8, i8* %17, i64 5
  %78 = load i8, i8* %77, align 1, !tbaa !14
  %79 = icmp eq i8 %78, 10
  br i1 %79, label %80, label %90

80:                                               ; preds = %76
  %81 = getelementptr inbounds i8, i8* %17, i64 6
  %82 = load i8, i8* %81, align 1, !tbaa !14
  %83 = icmp eq i8 %82, 26
  br i1 %83, label %84, label %90

84:                                               ; preds = %80
  %85 = getelementptr inbounds i8, i8* %17, i64 7
  %86 = load i8, i8* %85, align 1, !tbaa !14
  %87 = icmp eq i8 %86, 10
  br i1 %87, label %88, label %90

88:                                               ; preds = %84
  %89 = getelementptr inbounds i8, i8* %17, i64 8
  br label %109

90:                                               ; preds = %57, %84, %80, %76, %72, %68, %66
  %91 = phi i8 [ 78, %84 ], [ 78, %80 ], [ 78, %76 ], [ 78, %72 ], [ 78, %68 ], [ %65, %66 ], [ %65, %57 ]
  %92 = phi i8 [ 80, %84 ], [ 80, %80 ], [ 80, %76 ], [ 80, %72 ], [ 80, %68 ], [ 80, %66 ], [ %61, %57 ]
  %93 = zext i8 %58 to i64
  %94 = shl nuw nsw i64 %93, 24
  %95 = zext i8 %92 to i64
  %96 = shl nuw nsw i64 %95, 16
  %97 = zext i8 %91 to i64
  %98 = shl nuw nsw i64 %97, 8
  %99 = getelementptr inbounds i8, i8* %17, i64 3
  %100 = load i8, i8* %99, align 1, !tbaa !14
  %101 = zext i8 %100 to i64
  %102 = or i64 %94, %96
  %103 = or i64 %102, 12
  %104 = add nuw nsw i64 %103, %101
  %105 = add nuw nsw i64 %104, %98
  %106 = icmp ugt i64 %105, %16
  %107 = getelementptr inbounds i8, i8* %17, i64 %105
  %108 = select i1 %106, i8* %1, i8* %107
  br label %109

109:                                              ; preds = %88, %90
  %110 = phi i8* [ %89, %88 ], [ %108, %90 ]
  %111 = icmp uge i8* %110, %1
  %112 = ptrtoint i8* %110 to i64
  %113 = sub i64 %4, %112
  %114 = icmp slt i64 %113, 12
  %115 = or i1 %111, %114
  br i1 %115, label %116, label %15

116:                                              ; preds = %55, %109, %48, %3
  %117 = phi i8* [ null, %3 ], [ null, %55 ], [ %17, %48 ], [ null, %109 ]
  ret i8* %117
}

; Function Attrs: nofree norecurse nosync nounwind readonly uwtable
define dso_local noundef i8* @_Z24lodepng_chunk_find_constPKhS0_PKc(i8* noundef %0, i8* noundef %1, i8* noundef %2) local_unnamed_addr #13 {
  %4 = ptrtoint i8* %1 to i64
  %5 = icmp uge i8* %0, %1
  %6 = ptrtoint i8* %0 to i64
  %7 = sub i64 %4, %6
  %8 = icmp slt i64 %7, 12
  %9 = or i1 %5, %8
  br i1 %9, label %116, label %10

10:                                               ; preds = %3
  %11 = ptrtoint i8* %2 to i64
  %12 = getelementptr inbounds i8, i8* %2, i64 1
  %13 = getelementptr inbounds i8, i8* %2, i64 2
  %14 = getelementptr inbounds i8, i8* %2, i64 3
  br label %15

15:                                               ; preds = %10, %109
  %16 = phi i64 [ %7, %10 ], [ %113, %109 ]
  %17 = phi i8* [ %0, %10 ], [ %110, %109 ]
  br label %18

18:                                               ; preds = %15, %18
  %19 = phi i8* [ %22, %18 ], [ %2, %15 ]
  %20 = load i8, i8* %19, align 1, !tbaa !14
  %21 = icmp eq i8 %20, 0
  %22 = getelementptr inbounds i8, i8* %19, i64 1
  br i1 %21, label %23, label %18

23:                                               ; preds = %18
  %24 = ptrtoint i8* %19 to i64
  %25 = sub i64 %24, %11
  %26 = icmp eq i64 %25, 4
  br i1 %26, label %27, label %55

27:                                               ; preds = %23
  %28 = getelementptr inbounds i8, i8* %17, i64 4
  %29 = load i8, i8* %28, align 1, !tbaa !14
  %30 = zext i8 %29 to i32
  %31 = load i8, i8* %2, align 1, !tbaa !14
  %32 = sext i8 %31 to i32
  %33 = icmp eq i32 %30, %32
  br i1 %33, label %34, label %55

34:                                               ; preds = %27
  %35 = getelementptr inbounds i8, i8* %17, i64 5
  %36 = load i8, i8* %35, align 1, !tbaa !14
  %37 = zext i8 %36 to i32
  %38 = load i8, i8* %12, align 1, !tbaa !14
  %39 = sext i8 %38 to i32
  %40 = icmp eq i32 %37, %39
  br i1 %40, label %41, label %55

41:                                               ; preds = %34
  %42 = getelementptr inbounds i8, i8* %17, i64 6
  %43 = load i8, i8* %42, align 1, !tbaa !14
  %44 = zext i8 %43 to i32
  %45 = load i8, i8* %13, align 1, !tbaa !14
  %46 = sext i8 %45 to i32
  %47 = icmp eq i32 %44, %46
  br i1 %47, label %48, label %55

48:                                               ; preds = %41
  %49 = getelementptr inbounds i8, i8* %17, i64 7
  %50 = load i8, i8* %49, align 1, !tbaa !14
  %51 = zext i8 %50 to i32
  %52 = load i8, i8* %14, align 1, !tbaa !14
  %53 = sext i8 %52 to i32
  %54 = icmp eq i32 %51, %53
  br i1 %54, label %116, label %55

55:                                               ; preds = %27, %34, %41, %23, %48
  %56 = icmp ult i64 %16, 12
  br i1 %56, label %116, label %57

57:                                               ; preds = %55
  %58 = load i8, i8* %17, align 1, !tbaa !14
  %59 = icmp eq i8 %58, -119
  %60 = getelementptr inbounds i8, i8* %17, i64 1
  %61 = load i8, i8* %60, align 1, !tbaa !14
  %62 = icmp eq i8 %61, 80
  %63 = select i1 %59, i1 %62, i1 false
  %64 = getelementptr inbounds i8, i8* %17, i64 2
  %65 = load i8, i8* %64, align 1, !tbaa !14
  br i1 %63, label %66, label %90

66:                                               ; preds = %57
  %67 = icmp eq i8 %65, 78
  br i1 %67, label %68, label %90

68:                                               ; preds = %66
  %69 = getelementptr inbounds i8, i8* %17, i64 3
  %70 = load i8, i8* %69, align 1, !tbaa !14
  %71 = icmp eq i8 %70, 71
  br i1 %71, label %72, label %90

72:                                               ; preds = %68
  %73 = getelementptr inbounds i8, i8* %17, i64 4
  %74 = load i8, i8* %73, align 1, !tbaa !14
  %75 = icmp eq i8 %74, 13
  br i1 %75, label %76, label %90

76:                                               ; preds = %72
  %77 = getelementptr inbounds i8, i8* %17, i64 5
  %78 = load i8, i8* %77, align 1, !tbaa !14
  %79 = icmp eq i8 %78, 10
  br i1 %79, label %80, label %90

80:                                               ; preds = %76
  %81 = getelementptr inbounds i8, i8* %17, i64 6
  %82 = load i8, i8* %81, align 1, !tbaa !14
  %83 = icmp eq i8 %82, 26
  br i1 %83, label %84, label %90

84:                                               ; preds = %80
  %85 = getelementptr inbounds i8, i8* %17, i64 7
  %86 = load i8, i8* %85, align 1, !tbaa !14
  %87 = icmp eq i8 %86, 10
  br i1 %87, label %88, label %90

88:                                               ; preds = %84
  %89 = getelementptr inbounds i8, i8* %17, i64 8
  br label %109

90:                                               ; preds = %57, %84, %80, %76, %72, %68, %66
  %91 = phi i8 [ 78, %84 ], [ 78, %80 ], [ 78, %76 ], [ 78, %72 ], [ 78, %68 ], [ %65, %66 ], [ %65, %57 ]
  %92 = phi i8 [ 80, %84 ], [ 80, %80 ], [ 80, %76 ], [ 80, %72 ], [ 80, %68 ], [ 80, %66 ], [ %61, %57 ]
  %93 = zext i8 %58 to i64
  %94 = shl nuw nsw i64 %93, 24
  %95 = zext i8 %92 to i64
  %96 = shl nuw nsw i64 %95, 16
  %97 = zext i8 %91 to i64
  %98 = shl nuw nsw i64 %97, 8
  %99 = getelementptr inbounds i8, i8* %17, i64 3
  %100 = load i8, i8* %99, align 1, !tbaa !14
  %101 = zext i8 %100 to i64
  %102 = or i64 %94, %96
  %103 = or i64 %102, 12
  %104 = add nuw nsw i64 %103, %101
  %105 = add nuw nsw i64 %104, %98
  %106 = icmp ugt i64 %105, %16
  %107 = getelementptr inbounds i8, i8* %17, i64 %105
  %108 = select i1 %106, i8* %1, i8* %107
  br label %109

109:                                              ; preds = %88, %90
  %110 = phi i8* [ %89, %88 ], [ %108, %90 ]
  %111 = icmp uge i8* %110, %1
  %112 = ptrtoint i8* %110 to i64
  %113 = sub i64 %4, %112
  %114 = icmp slt i64 %113, 12
  %115 = or i1 %111, %114
  br i1 %115, label %116, label %15

116:                                              ; preds = %55, %109, %48, %3
  %117 = phi i8* [ null, %3 ], [ null, %55 ], [ %17, %48 ], [ null, %109 ]
  ret i8* %117
}

; Function Attrs: nounwind uwtable
define dso_local noundef i32 @_Z20lodepng_chunk_appendPPhPmPKh(i8** nocapture noundef %0, i64* nocapture noundef %1, i8* nocapture noundef readonly %2) local_unnamed_addr #3 {
  %4 = load i8, i8* %2, align 1, !tbaa !14
  %5 = zext i8 %4 to i64
  %6 = shl nuw nsw i64 %5, 24
  %7 = getelementptr inbounds i8, i8* %2, i64 1
  %8 = load i8, i8* %7, align 1, !tbaa !14
  %9 = zext i8 %8 to i64
  %10 = shl nuw nsw i64 %9, 16
  %11 = or i64 %10, %6
  %12 = getelementptr inbounds i8, i8* %2, i64 2
  %13 = load i8, i8* %12, align 1, !tbaa !14
  %14 = zext i8 %13 to i64
  %15 = shl nuw nsw i64 %14, 8
  %16 = or i64 %11, %15
  %17 = getelementptr inbounds i8, i8* %2, i64 3
  %18 = load i8, i8* %17, align 1, !tbaa !14
  %19 = zext i8 %18 to i64
  %20 = or i64 %16, %19
  %21 = add nuw nsw i64 %20, 12
  %22 = load i64, i64* %1, align 8, !tbaa !3
  %23 = add i64 %21, %22
  %24 = icmp ult i64 %23, %22
  br i1 %24, label %39, label %25

25:                                               ; preds = %3
  %26 = load i8*, i8** %0, align 8, !tbaa !7
  %27 = tail call i8* @realloc(i8* noundef %26, i64 noundef %23) #25
  %28 = icmp eq i8* %27, null
  br i1 %28, label %39, label %29

29:                                               ; preds = %25
  store i8* %27, i8** %0, align 8, !tbaa !7
  store i64 %23, i64* %1, align 8, !tbaa !3
  %30 = getelementptr inbounds i8, i8* %27, i64 %22
  br label %31

31:                                               ; preds = %29, %31
  %32 = phi i64 [ 0, %29 ], [ %37, %31 ]
  %33 = getelementptr inbounds i8, i8* %2, i64 %32
  %34 = load i8, i8* %33, align 1, !tbaa !14
  %35 = getelementptr inbounds i8, i8* %30, i64 %32
  store i8 %34, i8* %35, align 1, !tbaa !14
  %36 = add nuw nsw i64 %32, 1
  %37 = and i64 %36, 4294967295
  %38 = icmp eq i64 %21, %37
  br i1 %38, label %39, label %31

39:                                               ; preds = %31, %25, %3
  %40 = phi i32 [ 77, %3 ], [ 83, %25 ], [ 0, %31 ]
  ret i32 %40
}

; Function Attrs: nounwind uwtable
define dso_local noundef i32 @_Z20lodepng_chunk_createPPhPmjPKcPKh(i8** nocapture noundef %0, i64* nocapture noundef %1, i32 noundef %2, i8* nocapture noundef readonly %3, i8* nocapture noundef readonly %4) local_unnamed_addr #3 {
  %6 = load i8*, i8** %0, align 8, !tbaa !7
  %7 = load i64, i64* %1, align 8, !tbaa !3
  %8 = zext i32 %2 to i64
  %9 = add i64 %7, %8
  %10 = icmp ult i64 %9, %7
  br i1 %10, label %45, label %11

11:                                               ; preds = %5
  %12 = add i64 %9, 12
  %13 = icmp ult i64 %9, -12
  br i1 %13, label %14, label %45

14:                                               ; preds = %11
  %15 = icmp ult i64 %7, %12
  br i1 %15, label %16, label %21

16:                                               ; preds = %14
  %17 = lshr i64 %7, 1
  %18 = add i64 %12, %17
  %19 = tail call i8* @realloc(i8* noundef %6, i64 noundef %18) #25
  %20 = icmp eq i8* %19, null
  br i1 %20, label %45, label %21

21:                                               ; preds = %16, %14
  %22 = phi i8* [ %6, %14 ], [ %19, %16 ]
  %23 = getelementptr inbounds i8, i8* %22, i64 %12
  %24 = sub nsw i64 0, %8
  %25 = getelementptr inbounds i8, i8* %23, i64 %24
  %26 = getelementptr inbounds i8, i8* %25, i64 -12
  %27 = lshr i32 %2, 24
  %28 = trunc i32 %27 to i8
  store i8 %28, i8* %26, align 1, !tbaa !14
  %29 = lshr i32 %2, 16
  %30 = trunc i32 %29 to i8
  %31 = getelementptr inbounds i8, i8* %26, i64 1
  store i8 %30, i8* %31, align 1, !tbaa !14
  %32 = lshr i32 %2, 8
  %33 = trunc i32 %32 to i8
  %34 = getelementptr inbounds i8, i8* %26, i64 2
  store i8 %33, i8* %34, align 1, !tbaa !14
  %35 = trunc i32 %2 to i8
  %36 = getelementptr inbounds i8, i8* %26, i64 3
  store i8 %35, i8* %36, align 1, !tbaa !14
  %37 = getelementptr inbounds i8, i8* %26, i64 4
  %38 = bitcast i8* %3 to i32*
  %39 = bitcast i8* %37 to i32*
  %40 = load i32, i32* %38, align 1, !tbaa !14
  store i32 %40, i32* %39, align 1, !tbaa !14
  %41 = icmp eq i32 %2, 0
  br i1 %41, label %44, label %42

42:                                               ; preds = %21
  %43 = getelementptr inbounds i8, i8* %26, i64 8
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %43, i8* align 1 %4, i64 %8, i1 false) #25, !tbaa !14, !alias.scope !143
  br label %44

44:                                               ; preds = %42, %21
  tail call void @_Z26lodepng_chunk_generate_crcPh(i8* noundef nonnull %26) #25
  br label %45

45:                                               ; preds = %5, %11, %16, %44
  %46 = phi i64 [ %7, %5 ], [ %12, %16 ], [ %12, %44 ], [ %7, %11 ]
  %47 = phi i8* [ %6, %5 ], [ %6, %16 ], [ %22, %44 ], [ %6, %11 ]
  %48 = phi i32 [ 77, %5 ], [ 83, %16 ], [ 0, %44 ], [ 77, %11 ]
  store i8* %47, i8** %0, align 8, !tbaa !7
  store i64 %46, i64* %1, align 8, !tbaa !3
  ret i32 %48
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind uwtable willreturn writeonly
define dso_local void @_Z23lodepng_color_mode_initP16LodePNGColorMode(%struct.LodePNGColorMode* nocapture noundef writeonly %0) local_unnamed_addr #14 {
  %2 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %0, i64 0, i32 4
  %3 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %0, i64 0, i32 0
  %4 = bitcast i32* %2 to i8*
  call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(16) %4, i8 0, i64 16, i1 false)
  store i32 6, i32* %3, align 8, !tbaa !147
  %5 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %0, i64 0, i32 1
  store i32 8, i32* %5, align 4, !tbaa !150
  %6 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %0, i64 0, i32 2
  %7 = bitcast i8** %6 to i8*
  call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(16) %7, i8 0, i64 16, i1 false)
  ret void
}

; Function Attrs: mustprogress nounwind uwtable willreturn
define dso_local void @_Z26lodepng_color_mode_cleanupP16LodePNGColorMode(%struct.LodePNGColorMode* nocapture noundef %0) local_unnamed_addr #19 {
  %2 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %0, i64 0, i32 2
  %3 = load i8*, i8** %2, align 8, !tbaa !151
  %4 = icmp eq i8* %3, null
  br i1 %4, label %6, label %5

5:                                                ; preds = %1
  tail call void @free(i8* noundef nonnull %3) #25
  br label %6

6:                                                ; preds = %1, %5
  %7 = bitcast i8** %2 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(16) %7, i8 0, i64 16, i1 false) #25
  ret void
}

; Function Attrs: mustprogress nounwind uwtable willreturn
define dso_local void @_Z21lodepng_palette_clearP16LodePNGColorMode(%struct.LodePNGColorMode* nocapture noundef %0) local_unnamed_addr #19 {
  %2 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %0, i64 0, i32 2
  %3 = load i8*, i8** %2, align 8, !tbaa !151
  %4 = icmp eq i8* %3, null
  br i1 %4, label %6, label %5

5:                                                ; preds = %1
  tail call void @free(i8* noundef nonnull %3) #25
  br label %6

6:                                                ; preds = %5, %1
  %7 = bitcast i8** %2 to i8*
  call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(16) %7, i8 0, i64 16, i1 false)
  ret void
}

; Function Attrs: mustprogress nounwind uwtable willreturn
define dso_local noundef i32 @_Z23lodepng_color_mode_copyP16LodePNGColorModePKS_(%struct.LodePNGColorMode* nocapture noundef %0, %struct.LodePNGColorMode* nocapture noundef readonly %1) local_unnamed_addr #19 {
  %3 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %0, i64 0, i32 2
  %4 = load i8*, i8** %3, align 8, !tbaa !151
  %5 = icmp eq i8* %4, null
  br i1 %5, label %7, label %6

6:                                                ; preds = %2
  tail call void @free(i8* noundef nonnull %4) #25
  br label %7

7:                                                ; preds = %2, %6
  %8 = bitcast i8** %3 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(16) %8, i8 0, i64 16, i1 false) #25
  %9 = bitcast %struct.LodePNGColorMode* %0 to i8*
  %10 = bitcast %struct.LodePNGColorMode* %1 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef nonnull align 1 dereferenceable(40) %9, i8* noundef nonnull align 1 dereferenceable(40) %10, i64 40, i1 false) #25, !tbaa !14, !alias.scope !152
  %11 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %1, i64 0, i32 2
  %12 = load i8*, i8** %11, align 8, !tbaa !151
  %13 = icmp eq i8* %12, null
  br i1 %13, label %27, label %14

14:                                               ; preds = %7
  %15 = tail call noalias dereferenceable_or_null(1024) i8* @malloc(i64 noundef 1024) #25
  store i8* %15, i8** %3, align 8, !tbaa !151
  %16 = icmp eq i8* %15, null
  %17 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %1, i64 0, i32 3
  %18 = load i64, i64* %17, align 8, !tbaa !156
  br i1 %16, label %19, label %22

19:                                               ; preds = %14
  %20 = icmp eq i64 %18, 0
  %21 = select i1 %20, i32 0, i32 83
  br label %27

22:                                               ; preds = %14
  %23 = shl i64 %18, 2
  %24 = icmp eq i64 %23, 0
  br i1 %24, label %27, label %25

25:                                               ; preds = %22
  %26 = load i8*, i8** %11, align 8, !tbaa !151
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %15, i8* align 1 %26, i64 %23, i1 false) #25, !tbaa !14, !alias.scope !157
  br label %27

27:                                               ; preds = %19, %25, %22, %7
  %28 = phi i32 [ 0, %7 ], [ 0, %22 ], [ 0, %25 ], [ %21, %19 ]
  ret i32 %28
}

; Function Attrs: mustprogress nofree nosync nounwind uwtable willreturn writeonly
define dso_local void @_Z23lodepng_color_mode_make16LodePNGColorTypej(%struct.LodePNGColorMode* noalias nocapture writeonly sret(%struct.LodePNGColorMode) align 8 %0, i32 noundef %1, i32 noundef %2) local_unnamed_addr #20 {
  %4 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %0, i64 0, i32 4
  %5 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %0, i64 0, i32 0
  %6 = bitcast i32* %4 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(16) %6, i8 0, i64 16, i1 false) #25
  %7 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %0, i64 0, i32 1
  %8 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %0, i64 0, i32 2
  %9 = bitcast i8** %8 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(16) %9, i8 0, i64 16, i1 false) #25
  store i32 %1, i32* %5, align 8, !tbaa !147
  store i32 %2, i32* %7, align 4, !tbaa !150
  ret void
}

; Function Attrs: nofree nounwind uwtable
define dso_local noundef i32 @_Z19lodepng_palette_addP16LodePNGColorModehhhh(%struct.LodePNGColorMode* nocapture noundef %0, i8 noundef zeroext %1, i8 noundef zeroext %2, i8 noundef zeroext %3, i8 noundef zeroext %4) local_unnamed_addr #0 {
  %6 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %0, i64 0, i32 2
  %7 = load i8*, i8** %6, align 8, !tbaa !151
  %8 = icmp eq i8* %7, null
  br i1 %8, label %9, label %31

9:                                                ; preds = %5
  %10 = tail call noalias dereferenceable_or_null(1024) i8* @malloc(i64 noundef 1024) #25
  store i8* %10, i8** %6, align 8, !tbaa !151
  %11 = icmp eq i8* %10, null
  br i1 %11, label %56, label %12

12:                                               ; preds = %9, %12
  %13 = phi i8* [ %28, %12 ], [ %10, %9 ]
  %14 = phi i64 [ %26, %12 ], [ 0, %9 ]
  %15 = shl i64 %14, 2
  %16 = getelementptr inbounds i8, i8* %13, i64 %15
  store i8 0, i8* %16, align 1, !tbaa !14
  %17 = load i8*, i8** %6, align 8, !tbaa !151
  %18 = or i64 %15, 1
  %19 = getelementptr inbounds i8, i8* %17, i64 %18
  store i8 0, i8* %19, align 1, !tbaa !14
  %20 = load i8*, i8** %6, align 8, !tbaa !151
  %21 = or i64 %15, 2
  %22 = getelementptr inbounds i8, i8* %20, i64 %21
  store i8 0, i8* %22, align 1, !tbaa !14
  %23 = load i8*, i8** %6, align 8, !tbaa !151
  %24 = or i64 %15, 3
  %25 = getelementptr inbounds i8, i8* %23, i64 %24
  store i8 -1, i8* %25, align 1, !tbaa !14
  %26 = add nuw nsw i64 %14, 1
  %27 = icmp eq i64 %26, 256
  %28 = load i8*, i8** %6, align 8, !tbaa !151
  br i1 %27, label %29, label %12

29:                                               ; preds = %12
  %30 = icmp eq i8* %28, null
  br i1 %30, label %56, label %31

31:                                               ; preds = %29, %5
  %32 = phi i8* [ %28, %29 ], [ %7, %5 ]
  %33 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %0, i64 0, i32 3
  %34 = load i64, i64* %33, align 8, !tbaa !156
  %35 = icmp ugt i64 %34, 255
  br i1 %35, label %56, label %36

36:                                               ; preds = %31
  %37 = shl nuw nsw i64 %34, 2
  %38 = getelementptr inbounds i8, i8* %32, i64 %37
  store i8 %1, i8* %38, align 1, !tbaa !14
  %39 = load i8*, i8** %6, align 8, !tbaa !151
  %40 = load i64, i64* %33, align 8, !tbaa !156
  %41 = shl i64 %40, 2
  %42 = or i64 %41, 1
  %43 = getelementptr inbounds i8, i8* %39, i64 %42
  store i8 %2, i8* %43, align 1, !tbaa !14
  %44 = load i8*, i8** %6, align 8, !tbaa !151
  %45 = load i64, i64* %33, align 8, !tbaa !156
  %46 = shl i64 %45, 2
  %47 = or i64 %46, 2
  %48 = getelementptr inbounds i8, i8* %44, i64 %47
  store i8 %3, i8* %48, align 1, !tbaa !14
  %49 = load i8*, i8** %6, align 8, !tbaa !151
  %50 = load i64, i64* %33, align 8, !tbaa !156
  %51 = shl i64 %50, 2
  %52 = or i64 %51, 3
  %53 = getelementptr inbounds i8, i8* %49, i64 %52
  store i8 %4, i8* %53, align 1, !tbaa !14
  %54 = load i64, i64* %33, align 8, !tbaa !156
  %55 = add i64 %54, 1
  store i64 %55, i64* %33, align 8, !tbaa !156
  br label %56

56:                                               ; preds = %9, %31, %29, %36
  %57 = phi i32 [ 0, %36 ], [ 83, %29 ], [ 108, %31 ], [ 83, %9 ]
  ret i32 %57
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind readonly uwtable willreturn
define dso_local noundef i32 @_Z15lodepng_get_bppPK16LodePNGColorMode(%struct.LodePNGColorMode* nocapture noundef readonly %0) local_unnamed_addr #15 {
  %2 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %0, i64 0, i32 0
  %3 = load i32, i32* %2, align 8, !tbaa !147
  %4 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %0, i64 0, i32 1
  %5 = load i32, i32* %4, align 4, !tbaa !150
  switch i32 %3, label %10 [
    i32 0, label %11
    i32 2, label %6
    i32 3, label %11
    i32 4, label %7
    i32 6, label %8
    i32 255, label %9
  ]

6:                                                ; preds = %1
  br label %11

7:                                                ; preds = %1
  br label %11

8:                                                ; preds = %1
  br label %11

9:                                                ; preds = %1
  br label %11

10:                                               ; preds = %1
  br label %11

11:                                               ; preds = %1, %1, %6, %7, %8, %9, %10
  %12 = phi i32 [ 0, %10 ], [ 0, %9 ], [ 4, %8 ], [ 2, %7 ], [ 3, %6 ], [ 1, %1 ], [ 1, %1 ]
  %13 = mul i32 %12, %5
  ret i32 %13
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind readonly uwtable willreturn
define dso_local noundef i32 @_Z20lodepng_get_channelsPK16LodePNGColorMode(%struct.LodePNGColorMode* nocapture noundef readonly %0) local_unnamed_addr #15 {
  %2 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %0, i64 0, i32 0
  %3 = load i32, i32* %2, align 8, !tbaa !147
  switch i32 %3, label %8 [
    i32 0, label %9
    i32 2, label %4
    i32 3, label %9
    i32 4, label %5
    i32 6, label %6
    i32 255, label %7
  ]

4:                                                ; preds = %1
  br label %9

5:                                                ; preds = %1
  br label %9

6:                                                ; preds = %1
  br label %9

7:                                                ; preds = %1
  br label %9

8:                                                ; preds = %1
  br label %9

9:                                                ; preds = %1, %1, %4, %5, %6, %7, %8
  %10 = phi i32 [ 0, %8 ], [ 0, %7 ], [ 4, %6 ], [ 2, %5 ], [ 3, %4 ], [ 1, %1 ], [ 1, %1 ]
  ret i32 %10
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind readonly uwtable willreturn
define dso_local noundef i32 @_Z25lodepng_is_greyscale_typePK16LodePNGColorMode(%struct.LodePNGColorMode* nocapture noundef readonly %0) local_unnamed_addr #15 {
  %2 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %0, i64 0, i32 0
  %3 = load i32, i32* %2, align 8, !tbaa !147
  %4 = and i32 %3, -5
  %5 = icmp eq i32 %4, 0
  %6 = zext i1 %5 to i32
  ret i32 %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind readonly uwtable willreturn
define dso_local noundef i32 @_Z21lodepng_is_alpha_typePK16LodePNGColorMode(%struct.LodePNGColorMode* nocapture noundef readonly %0) local_unnamed_addr #15 {
  %2 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %0, i64 0, i32 0
  %3 = load i32, i32* %2, align 8, !tbaa !147
  %4 = lshr i32 %3, 2
  %5 = and i32 %4, 1
  ret i32 %5
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind readonly uwtable willreturn
define dso_local noundef i32 @_Z23lodepng_is_palette_typePK16LodePNGColorMode(%struct.LodePNGColorMode* nocapture noundef readonly %0) local_unnamed_addr #15 {
  %2 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %0, i64 0, i32 0
  %3 = load i32, i32* %2, align 8, !tbaa !147
  %4 = icmp eq i32 %3, 3
  %5 = zext i1 %4 to i32
  ret i32 %5
}

; Function Attrs: nofree norecurse nosync nounwind readonly uwtable
define dso_local noundef i32 @_Z25lodepng_has_palette_alphaPK16LodePNGColorMode(%struct.LodePNGColorMode* nocapture noundef readonly %0) local_unnamed_addr #13 {
  %2 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %0, i64 0, i32 3
  %3 = load i64, i64* %2, align 8, !tbaa !156
  %4 = icmp eq i64 %3, 0
  br i1 %4, label %18, label %5

5:                                                ; preds = %1
  %6 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %0, i64 0, i32 2
  %7 = load i8*, i8** %6, align 8, !tbaa !151
  br label %10

8:                                                ; preds = %10
  %9 = icmp eq i64 %17, %3
  br i1 %9, label %18, label %10

10:                                               ; preds = %5, %8
  %11 = phi i64 [ 0, %5 ], [ %17, %8 ]
  %12 = shl i64 %11, 2
  %13 = or i64 %12, 3
  %14 = getelementptr inbounds i8, i8* %7, i64 %13
  %15 = load i8, i8* %14, align 1, !tbaa !14
  %16 = icmp eq i8 %15, -1
  %17 = add nuw i64 %11, 1
  br i1 %16, label %8, label %18

18:                                               ; preds = %10, %8, %1
  %19 = phi i32 [ 0, %1 ], [ 0, %8 ], [ 1, %10 ]
  ret i32 %19
}

; Function Attrs: nofree norecurse nosync nounwind readonly uwtable
define dso_local noundef i32 @_Z22lodepng_can_have_alphaPK16LodePNGColorMode(%struct.LodePNGColorMode* nocapture noundef readonly %0) local_unnamed_addr #13 {
  %2 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %0, i64 0, i32 4
  %3 = load i32, i32* %2, align 8, !tbaa !161
  %4 = icmp eq i32 %3, 0
  br i1 %4, label %5, label %27

5:                                                ; preds = %1
  %6 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %0, i64 0, i32 0
  %7 = load i32, i32* %6, align 8, !tbaa !147
  %8 = and i32 %7, 4
  %9 = icmp eq i32 %8, 0
  br i1 %9, label %10, label %27

10:                                               ; preds = %5
  %11 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %0, i64 0, i32 3
  %12 = load i64, i64* %11, align 8, !tbaa !156
  %13 = icmp eq i64 %12, 0
  br i1 %13, label %27, label %14

14:                                               ; preds = %10
  %15 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %0, i64 0, i32 2
  %16 = load i8*, i8** %15, align 8, !tbaa !151
  br label %19

17:                                               ; preds = %19
  %18 = icmp eq i64 %26, %12
  br i1 %18, label %27, label %19

19:                                               ; preds = %17, %14
  %20 = phi i64 [ 0, %14 ], [ %26, %17 ]
  %21 = shl i64 %20, 2
  %22 = or i64 %21, 3
  %23 = getelementptr inbounds i8, i8* %16, i64 %22
  %24 = load i8, i8* %23, align 1, !tbaa !14
  %25 = icmp eq i8 %24, -1
  %26 = add nuw i64 %20, 1
  br i1 %25, label %17, label %27

27:                                               ; preds = %19, %17, %10, %5, %1
  %28 = phi i32 [ 1, %5 ], [ 1, %1 ], [ 0, %10 ], [ 1, %19 ], [ 0, %17 ]
  ret i32 %28
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind readonly uwtable willreturn
define dso_local noundef i64 @_Z20lodepng_get_raw_sizejjPK16LodePNGColorMode(i32 noundef %0, i32 noundef %1, %struct.LodePNGColorMode* nocapture noundef readonly %2) local_unnamed_addr #15 {
  %4 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %2, i64 0, i32 0
  %5 = load i32, i32* %4, align 8, !tbaa !147
  %6 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %2, i64 0, i32 1
  %7 = load i32, i32* %6, align 4, !tbaa !150
  switch i32 %5, label %12 [
    i32 0, label %13
    i32 2, label %8
    i32 3, label %13
    i32 4, label %9
    i32 6, label %10
    i32 255, label %11
  ]

8:                                                ; preds = %3
  br label %13

9:                                                ; preds = %3
  br label %13

10:                                               ; preds = %3
  br label %13

11:                                               ; preds = %3
  br label %13

12:                                               ; preds = %3
  br label %13

13:                                               ; preds = %3, %3, %8, %9, %10, %11, %12
  %14 = phi i32 [ 0, %12 ], [ 0, %11 ], [ 4, %10 ], [ 2, %9 ], [ 3, %8 ], [ 1, %3 ], [ 1, %3 ]
  %15 = mul i32 %14, %7
  %16 = zext i32 %15 to i64
  %17 = zext i32 %0 to i64
  %18 = zext i32 %1 to i64
  %19 = mul nuw i64 %18, %17
  %20 = lshr i64 %19, 3
  %21 = mul i64 %20, %16
  %22 = and i64 %19, 7
  %23 = mul nuw nsw i64 %22, %16
  %24 = add nuw nsw i64 %23, 7
  %25 = lshr i64 %24, 3
  %26 = add i64 %25, %21
  ret i64 %26
}

; Function Attrs: nounwind uwtable
define dso_local noundef i32 @_Z16lodepng_add_textP11LodePNGInfoPKcS2_(%struct.LodePNGInfo* nocapture noundef %0, i8* noundef %1, i8* noundef %2) local_unnamed_addr #3 {
  br label %4

4:                                                ; preds = %4, %3
  %5 = phi i8* [ %2, %3 ], [ %8, %4 ]
  %6 = load i8, i8* %5, align 1, !tbaa !14
  %7 = icmp eq i8 %6, 0
  %8 = getelementptr inbounds i8, i8* %5, i64 1
  br i1 %7, label %9, label %4

9:                                                ; preds = %4
  %10 = ptrtoint i8* %5 to i64
  %11 = ptrtoint i8* %2 to i64
  %12 = sub i64 %10, %11
  %13 = tail call fastcc noundef i32 @_ZL22lodepng_add_text_sizedP11LodePNGInfoPKcS2_m(%struct.LodePNGInfo* noundef %0, i8* noundef %1, i8* noundef %2, i64 noundef %12), !range !127
  ret i32 %13
}

; Function Attrs: nounwind uwtable
define internal fastcc noundef i32 @_ZL22lodepng_add_text_sizedP11LodePNGInfoPKcS2_m(%struct.LodePNGInfo* nocapture noundef %0, i8* noundef %1, i8* nocapture noundef readonly %2, i64 noundef %3) unnamed_addr #3 {
  %5 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %0, i64 0, i32 9
  %6 = bitcast i8*** %5 to i8**
  %7 = load i8*, i8** %6, align 8, !tbaa !162
  %8 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %0, i64 0, i32 8
  %9 = load i64, i64* %8, align 8, !tbaa !165
  %10 = shl i64 %9, 3
  %11 = add i64 %10, 8
  %12 = tail call i8* @realloc(i8* noundef %7, i64 noundef %11) #25
  %13 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %0, i64 0, i32 10
  %14 = bitcast i8*** %13 to i8**
  %15 = load i8*, i8** %14, align 8, !tbaa !166
  %16 = load i64, i64* %8, align 8, !tbaa !165
  %17 = shl i64 %16, 3
  %18 = add i64 %17, 8
  %19 = tail call i8* @realloc(i8* noundef %15, i64 noundef %18) #25
  %20 = icmp eq i8* %12, null
  br i1 %20, label %21, label %23

21:                                               ; preds = %4
  %22 = icmp eq i8* %19, null
  br i1 %22, label %70, label %25

23:                                               ; preds = %4
  store i8* %12, i8** %6, align 8, !tbaa !162
  %24 = icmp eq i8* %19, null
  br i1 %24, label %70, label %26

25:                                               ; preds = %21
  store i8* %19, i8** %14, align 8, !tbaa !166
  br label %70

26:                                               ; preds = %23
  store i8* %19, i8** %14, align 8, !tbaa !166
  %27 = load i64, i64* %8, align 8, !tbaa !165
  %28 = add i64 %27, 1
  store i64 %28, i64* %8, align 8, !tbaa !165
  br label %29

29:                                               ; preds = %29, %26
  %30 = phi i8* [ %1, %26 ], [ %33, %29 ]
  %31 = load i8, i8* %30, align 1, !tbaa !14
  %32 = icmp eq i8 %31, 0
  %33 = getelementptr inbounds i8, i8* %30, i64 1
  br i1 %32, label %34, label %29

34:                                               ; preds = %29
  %35 = ptrtoint i8* %30 to i64
  %36 = ptrtoint i8* %1 to i64
  %37 = sub i64 %35, %36
  %38 = add i64 %37, 1
  %39 = tail call noalias i8* @malloc(i64 noundef %38) #25
  %40 = icmp eq i8* %39, null
  br i1 %40, label %46, label %41

41:                                               ; preds = %34
  %42 = icmp eq i64 %37, 0
  br i1 %42, label %44, label %43

43:                                               ; preds = %41
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %39, i8* align 1 %1, i64 %37, i1 false) #25, !tbaa !14, !alias.scope !167
  br label %44

44:                                               ; preds = %43, %41
  %45 = getelementptr inbounds i8, i8* %39, i64 %37
  store i8 0, i8* %45, align 1, !tbaa !14
  br label %46

46:                                               ; preds = %34, %44
  %47 = load i8**, i8*** %5, align 8, !tbaa !162
  %48 = getelementptr inbounds i8*, i8** %47, i64 %27
  store i8* %39, i8** %48, align 8, !tbaa !7
  %49 = add i64 %3, 1
  %50 = tail call noalias i8* @malloc(i64 noundef %49) #25
  %51 = icmp eq i8* %50, null
  br i1 %51, label %57, label %52

52:                                               ; preds = %46
  %53 = icmp eq i64 %3, 0
  br i1 %53, label %55, label %54

54:                                               ; preds = %52
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %50, i8* align 1 %2, i64 %3, i1 false) #25, !tbaa !14, !alias.scope !171
  br label %55

55:                                               ; preds = %54, %52
  %56 = getelementptr inbounds i8, i8* %50, i64 %3
  store i8 0, i8* %56, align 1, !tbaa !14
  br label %57

57:                                               ; preds = %46, %55
  %58 = load i8**, i8*** %13, align 8, !tbaa !166
  %59 = getelementptr inbounds i8*, i8** %58, i64 %27
  store i8* %50, i8** %59, align 8, !tbaa !7
  %60 = load i8**, i8*** %5, align 8, !tbaa !162
  %61 = getelementptr inbounds i8*, i8** %60, i64 %27
  %62 = load i8*, i8** %61, align 8, !tbaa !7
  %63 = icmp eq i8* %62, null
  br i1 %63, label %70, label %64

64:                                               ; preds = %57
  %65 = load i8**, i8*** %13, align 8, !tbaa !166
  %66 = getelementptr inbounds i8*, i8** %65, i64 %27
  %67 = load i8*, i8** %66, align 8, !tbaa !7
  %68 = icmp eq i8* %67, null
  %69 = select i1 %68, i32 83, i32 0
  br label %70

70:                                               ; preds = %25, %23, %21, %64, %57
  %71 = phi i32 [ 83, %25 ], [ 83, %57 ], [ %69, %64 ], [ 83, %21 ], [ 83, %23 ]
  ret i32 %71
}

; Function Attrs: nounwind uwtable
define dso_local void @_Z18lodepng_clear_textP11LodePNGInfo(%struct.LodePNGInfo* nocapture noundef readonly %0) local_unnamed_addr #3 {
  %2 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %0, i64 0, i32 8
  %3 = load i64, i64* %2, align 8, !tbaa !165
  %4 = icmp eq i64 %3, 0
  br i1 %4, label %19, label %5

5:                                                ; preds = %1
  %6 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %0, i64 0, i32 9
  %7 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %0, i64 0, i32 10
  br label %8

8:                                                ; preds = %8, %5
  %9 = phi i64 [ 0, %5 ], [ %16, %8 ]
  %10 = load i8**, i8*** %6, align 8, !tbaa !162
  %11 = getelementptr inbounds i8*, i8** %10, i64 %9
  %12 = load i8*, i8** %11, align 8, !tbaa !7
  tail call void @free(i8* noundef %12) #25
  store i8* null, i8** %11, align 8, !tbaa !7
  %13 = load i8**, i8*** %7, align 8, !tbaa !166
  %14 = getelementptr inbounds i8*, i8** %13, i64 %9
  %15 = load i8*, i8** %14, align 8, !tbaa !7
  tail call void @free(i8* noundef %15) #25
  store i8* null, i8** %14, align 8, !tbaa !7
  %16 = add i64 %9, 1
  %17 = load i64, i64* %2, align 8, !tbaa !165
  %18 = icmp eq i64 %16, %17
  br i1 %18, label %19, label %8

19:                                               ; preds = %8, %1
  %20 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %0, i64 0, i32 9
  %21 = bitcast i8*** %20 to i8**
  %22 = load i8*, i8** %21, align 8, !tbaa !162
  tail call void @free(i8* noundef %22) #25
  %23 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %0, i64 0, i32 10
  %24 = bitcast i8*** %23 to i8**
  %25 = load i8*, i8** %24, align 8, !tbaa !166
  tail call void @free(i8* noundef %25) #25
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local void @_Z19lodepng_clear_itextP11LodePNGInfo(%struct.LodePNGInfo* nocapture noundef readonly %0) local_unnamed_addr #3 {
  tail call fastcc void @_ZL20LodePNGIText_cleanupP11LodePNGInfo(%struct.LodePNGInfo* noundef %0)
  ret void
}

; Function Attrs: nounwind uwtable
define internal fastcc void @_ZL20LodePNGIText_cleanupP11LodePNGInfo(%struct.LodePNGInfo* nocapture noundef readonly %0) unnamed_addr #3 {
  %2 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %0, i64 0, i32 11
  %3 = load i64, i64* %2, align 8, !tbaa !175
  %4 = icmp eq i64 %3, 0
  br i1 %4, label %27, label %5

5:                                                ; preds = %1
  %6 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %0, i64 0, i32 12
  %7 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %0, i64 0, i32 13
  %8 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %0, i64 0, i32 14
  %9 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %0, i64 0, i32 15
  br label %10

10:                                               ; preds = %5, %10
  %11 = phi i64 [ 0, %5 ], [ %24, %10 ]
  %12 = load i8**, i8*** %6, align 8, !tbaa !176
  %13 = getelementptr inbounds i8*, i8** %12, i64 %11
  %14 = load i8*, i8** %13, align 8, !tbaa !7
  tail call void @free(i8* noundef %14) #25
  store i8* null, i8** %13, align 8, !tbaa !7
  %15 = load i8**, i8*** %7, align 8, !tbaa !177
  %16 = getelementptr inbounds i8*, i8** %15, i64 %11
  %17 = load i8*, i8** %16, align 8, !tbaa !7
  tail call void @free(i8* noundef %17) #25
  store i8* null, i8** %16, align 8, !tbaa !7
  %18 = load i8**, i8*** %8, align 8, !tbaa !178
  %19 = getelementptr inbounds i8*, i8** %18, i64 %11
  %20 = load i8*, i8** %19, align 8, !tbaa !7
  tail call void @free(i8* noundef %20) #25
  store i8* null, i8** %19, align 8, !tbaa !7
  %21 = load i8**, i8*** %9, align 8, !tbaa !179
  %22 = getelementptr inbounds i8*, i8** %21, i64 %11
  %23 = load i8*, i8** %22, align 8, !tbaa !7
  tail call void @free(i8* noundef %23) #25
  store i8* null, i8** %22, align 8, !tbaa !7
  %24 = add i64 %11, 1
  %25 = load i64, i64* %2, align 8, !tbaa !175
  %26 = icmp eq i64 %24, %25
  br i1 %26, label %27, label %10

27:                                               ; preds = %10, %1
  %28 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %0, i64 0, i32 12
  %29 = bitcast i8*** %28 to i8**
  %30 = load i8*, i8** %29, align 8, !tbaa !176
  tail call void @free(i8* noundef %30) #25
  %31 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %0, i64 0, i32 13
  %32 = bitcast i8*** %31 to i8**
  %33 = load i8*, i8** %32, align 8, !tbaa !177
  tail call void @free(i8* noundef %33) #25
  %34 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %0, i64 0, i32 14
  %35 = bitcast i8*** %34 to i8**
  %36 = load i8*, i8** %35, align 8, !tbaa !178
  tail call void @free(i8* noundef %36) #25
  %37 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %0, i64 0, i32 15
  %38 = bitcast i8*** %37 to i8**
  %39 = load i8*, i8** %38, align 8, !tbaa !179
  tail call void @free(i8* noundef %39) #25
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local noundef i32 @_Z17lodepng_add_itextP11LodePNGInfoPKcS2_S2_S2_(%struct.LodePNGInfo* nocapture noundef %0, i8* noundef %1, i8* noundef %2, i8* noundef %3, i8* noundef %4) local_unnamed_addr #3 {
  br label %6

6:                                                ; preds = %6, %5
  %7 = phi i8* [ %4, %5 ], [ %10, %6 ]
  %8 = load i8, i8* %7, align 1, !tbaa !14
  %9 = icmp eq i8 %8, 0
  %10 = getelementptr inbounds i8, i8* %7, i64 1
  br i1 %9, label %11, label %6

11:                                               ; preds = %6
  %12 = ptrtoint i8* %7 to i64
  %13 = ptrtoint i8* %4 to i64
  %14 = sub i64 %12, %13
  %15 = tail call fastcc noundef i32 @_ZL23lodepng_add_itext_sizedP11LodePNGInfoPKcS2_S2_S2_m(%struct.LodePNGInfo* noundef %0, i8* noundef %1, i8* noundef %2, i8* noundef %3, i8* noundef %4, i64 noundef %14), !range !127
  ret i32 %15
}

; Function Attrs: nounwind uwtable
define internal fastcc noundef i32 @_ZL23lodepng_add_itext_sizedP11LodePNGInfoPKcS2_S2_S2_m(%struct.LodePNGInfo* nocapture noundef %0, i8* noundef %1, i8* noundef %2, i8* noundef %3, i8* nocapture noundef readonly %4, i64 noundef %5) unnamed_addr #3 {
  %7 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %0, i64 0, i32 12
  %8 = bitcast i8*** %7 to i8**
  %9 = load i8*, i8** %8, align 8, !tbaa !176
  %10 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %0, i64 0, i32 11
  %11 = load i64, i64* %10, align 8, !tbaa !175
  %12 = shl i64 %11, 3
  %13 = add i64 %12, 8
  %14 = tail call i8* @realloc(i8* noundef %9, i64 noundef %13) #25
  %15 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %0, i64 0, i32 13
  %16 = bitcast i8*** %15 to i8**
  %17 = load i8*, i8** %16, align 8, !tbaa !177
  %18 = load i64, i64* %10, align 8, !tbaa !175
  %19 = shl i64 %18, 3
  %20 = add i64 %19, 8
  %21 = tail call i8* @realloc(i8* noundef %17, i64 noundef %20) #25
  %22 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %0, i64 0, i32 14
  %23 = bitcast i8*** %22 to i8**
  %24 = load i8*, i8** %23, align 8, !tbaa !178
  %25 = load i64, i64* %10, align 8, !tbaa !175
  %26 = shl i64 %25, 3
  %27 = add i64 %26, 8
  %28 = tail call i8* @realloc(i8* noundef %24, i64 noundef %27) #25
  %29 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %0, i64 0, i32 15
  %30 = bitcast i8*** %29 to i8**
  %31 = load i8*, i8** %30, align 8, !tbaa !179
  %32 = load i64, i64* %10, align 8, !tbaa !175
  %33 = shl i64 %32, 3
  %34 = add i64 %33, 8
  %35 = tail call i8* @realloc(i8* noundef %31, i64 noundef %34) #25
  %36 = icmp ne i8* %14, null
  br i1 %36, label %37, label %38

37:                                               ; preds = %6
  store i8* %14, i8** %8, align 8, !tbaa !176
  br label %38

38:                                               ; preds = %37, %6
  %39 = icmp ne i8* %21, null
  br i1 %39, label %40, label %41

40:                                               ; preds = %38
  store i8* %21, i8** %16, align 8, !tbaa !177
  br label %41

41:                                               ; preds = %40, %38
  %42 = icmp ne i8* %28, null
  br i1 %42, label %43, label %44

43:                                               ; preds = %41
  store i8* %28, i8** %23, align 8, !tbaa !178
  br label %44

44:                                               ; preds = %43, %41
  %45 = icmp eq i8* %35, null
  br i1 %45, label %123, label %46

46:                                               ; preds = %44
  store i8* %35, i8** %30, align 8, !tbaa !179
  %47 = and i1 %36, %39
  %48 = and i1 %47, %42
  br i1 %48, label %49, label %123

49:                                               ; preds = %46
  %50 = load i64, i64* %10, align 8, !tbaa !175
  %51 = add i64 %50, 1
  store i64 %51, i64* %10, align 8, !tbaa !175
  br label %52

52:                                               ; preds = %52, %49
  %53 = phi i8* [ %1, %49 ], [ %56, %52 ]
  %54 = load i8, i8* %53, align 1, !tbaa !14
  %55 = icmp eq i8 %54, 0
  %56 = getelementptr inbounds i8, i8* %53, i64 1
  br i1 %55, label %57, label %52

57:                                               ; preds = %52
  %58 = ptrtoint i8* %53 to i64
  %59 = ptrtoint i8* %1 to i64
  %60 = sub i64 %58, %59
  %61 = add i64 %60, 1
  %62 = tail call noalias i8* @malloc(i64 noundef %61) #25
  %63 = icmp eq i8* %62, null
  br i1 %63, label %69, label %64

64:                                               ; preds = %57
  %65 = icmp eq i64 %60, 0
  br i1 %65, label %67, label %66

66:                                               ; preds = %64
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %62, i8* align 1 %1, i64 %60, i1 false) #25, !tbaa !14, !alias.scope !180
  br label %67

67:                                               ; preds = %66, %64
  %68 = getelementptr inbounds i8, i8* %62, i64 %60
  store i8 0, i8* %68, align 1, !tbaa !14
  br label %69

69:                                               ; preds = %57, %67
  %70 = load i8**, i8*** %7, align 8, !tbaa !176
  %71 = getelementptr inbounds i8*, i8** %70, i64 %50
  store i8* %62, i8** %71, align 8, !tbaa !7
  br label %72

72:                                               ; preds = %72, %69
  %73 = phi i8* [ %2, %69 ], [ %76, %72 ]
  %74 = load i8, i8* %73, align 1, !tbaa !14
  %75 = icmp eq i8 %74, 0
  %76 = getelementptr inbounds i8, i8* %73, i64 1
  br i1 %75, label %77, label %72

77:                                               ; preds = %72
  %78 = ptrtoint i8* %73 to i64
  %79 = ptrtoint i8* %2 to i64
  %80 = sub i64 %78, %79
  %81 = add i64 %80, 1
  %82 = tail call noalias i8* @malloc(i64 noundef %81) #25
  %83 = icmp eq i8* %82, null
  br i1 %83, label %89, label %84

84:                                               ; preds = %77
  %85 = icmp eq i64 %80, 0
  br i1 %85, label %87, label %86

86:                                               ; preds = %84
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %82, i8* align 1 %2, i64 %80, i1 false) #25, !tbaa !14, !alias.scope !184
  br label %87

87:                                               ; preds = %86, %84
  %88 = getelementptr inbounds i8, i8* %82, i64 %80
  store i8 0, i8* %88, align 1, !tbaa !14
  br label %89

89:                                               ; preds = %77, %87
  %90 = load i8**, i8*** %15, align 8, !tbaa !177
  %91 = getelementptr inbounds i8*, i8** %90, i64 %50
  store i8* %82, i8** %91, align 8, !tbaa !7
  br label %92

92:                                               ; preds = %92, %89
  %93 = phi i8* [ %3, %89 ], [ %96, %92 ]
  %94 = load i8, i8* %93, align 1, !tbaa !14
  %95 = icmp eq i8 %94, 0
  %96 = getelementptr inbounds i8, i8* %93, i64 1
  br i1 %95, label %97, label %92

97:                                               ; preds = %92
  %98 = ptrtoint i8* %93 to i64
  %99 = ptrtoint i8* %3 to i64
  %100 = sub i64 %98, %99
  %101 = add i64 %100, 1
  %102 = tail call noalias i8* @malloc(i64 noundef %101) #25
  %103 = icmp eq i8* %102, null
  br i1 %103, label %109, label %104

104:                                              ; preds = %97
  %105 = icmp eq i64 %100, 0
  br i1 %105, label %107, label %106

106:                                              ; preds = %104
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %102, i8* align 1 %3, i64 %100, i1 false) #25, !tbaa !14, !alias.scope !188
  br label %107

107:                                              ; preds = %106, %104
  %108 = getelementptr inbounds i8, i8* %102, i64 %100
  store i8 0, i8* %108, align 1, !tbaa !14
  br label %109

109:                                              ; preds = %97, %107
  %110 = load i8**, i8*** %22, align 8, !tbaa !178
  %111 = getelementptr inbounds i8*, i8** %110, i64 %50
  store i8* %102, i8** %111, align 8, !tbaa !7
  %112 = add i64 %5, 1
  %113 = tail call noalias i8* @malloc(i64 noundef %112) #25
  %114 = icmp eq i8* %113, null
  br i1 %114, label %120, label %115

115:                                              ; preds = %109
  %116 = icmp eq i64 %5, 0
  br i1 %116, label %118, label %117

117:                                              ; preds = %115
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %113, i8* align 1 %4, i64 %5, i1 false) #25, !tbaa !14, !alias.scope !192
  br label %118

118:                                              ; preds = %117, %115
  %119 = getelementptr inbounds i8, i8* %113, i64 %5
  store i8 0, i8* %119, align 1, !tbaa !14
  br label %120

120:                                              ; preds = %109, %118
  %121 = load i8**, i8*** %29, align 8, !tbaa !179
  %122 = getelementptr inbounds i8*, i8** %121, i64 %50
  store i8* %113, i8** %122, align 8, !tbaa !7
  br label %123

123:                                              ; preds = %44, %46, %120
  %124 = phi i32 [ 0, %120 ], [ 83, %46 ], [ 83, %44 ]
  ret i32 %124
}

; Function Attrs: nounwind uwtable
define dso_local noundef i32 @_Z15lodepng_set_iccP11LodePNGInfoPKcPKhj(%struct.LodePNGInfo* nocapture noundef %0, i8* noundef %1, i8* nocapture noundef readonly %2, i32 noundef %3) local_unnamed_addr #3 {
  %5 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %0, i64 0, i32 36
  %6 = load i8*, i8** %5, align 8, !tbaa !196
  %7 = icmp eq i8* %6, null
  br i1 %7, label %12, label %8

8:                                                ; preds = %4
  tail call void @free(i8* noundef nonnull %6) #25
  store i8* null, i8** %5, align 8, !tbaa !7
  %9 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %0, i64 0, i32 37
  %10 = load i8*, i8** %9, align 8, !tbaa !197
  tail call void @free(i8* noundef %10) #25
  store i8* null, i8** %9, align 8, !tbaa !197
  %11 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %0, i64 0, i32 38
  store i32 0, i32* %11, align 8, !tbaa !198
  br label %12

12:                                               ; preds = %8, %4
  %13 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %0, i64 0, i32 35
  store i32 1, i32* %13, align 8, !tbaa !199
  %14 = icmp eq i32 %3, 0
  br i1 %14, label %40, label %15

15:                                               ; preds = %12, %15
  %16 = phi i8* [ %19, %15 ], [ %1, %12 ]
  %17 = load i8, i8* %16, align 1, !tbaa !14
  %18 = icmp eq i8 %17, 0
  %19 = getelementptr inbounds i8, i8* %16, i64 1
  br i1 %18, label %20, label %15

20:                                               ; preds = %15
  %21 = ptrtoint i8* %16 to i64
  %22 = ptrtoint i8* %1 to i64
  %23 = sub i64 %21, %22
  %24 = add i64 %23, 1
  %25 = tail call noalias i8* @malloc(i64 noundef %24) #25
  %26 = icmp eq i8* %25, null
  br i1 %26, label %32, label %27

27:                                               ; preds = %20
  %28 = icmp eq i64 %23, 0
  br i1 %28, label %30, label %29

29:                                               ; preds = %27
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %25, i8* align 1 %1, i64 %23, i1 false) #25, !tbaa !14, !alias.scope !200
  br label %30

30:                                               ; preds = %29, %27
  %31 = getelementptr inbounds i8, i8* %25, i64 %23
  store i8 0, i8* %31, align 1, !tbaa !14
  br label %32

32:                                               ; preds = %30, %20
  store i8* %25, i8** %5, align 8, !tbaa !196
  %33 = zext i32 %3 to i64
  %34 = tail call noalias i8* @malloc(i64 noundef %33) #25
  %35 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %0, i64 0, i32 37
  store i8* %34, i8** %35, align 8, !tbaa !197
  %36 = icmp eq i8* %34, null
  %37 = or i1 %26, %36
  br i1 %37, label %40, label %38

38:                                               ; preds = %32
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %34, i8* align 1 %2, i64 %33, i1 false) #25, !tbaa !14, !alias.scope !204
  %39 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %0, i64 0, i32 38
  store i32 %3, i32* %39, align 8, !tbaa !198
  br label %40

40:                                               ; preds = %12, %32, %38
  %41 = phi i32 [ 0, %38 ], [ 100, %12 ], [ 83, %32 ]
  ret i32 %41
}

; Function Attrs: mustprogress nounwind uwtable willreturn
define dso_local void @_Z17lodepng_clear_iccP11LodePNGInfo(%struct.LodePNGInfo* nocapture noundef %0) local_unnamed_addr #19 {
  %2 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %0, i64 0, i32 36
  %3 = load i8*, i8** %2, align 8, !tbaa !7
  tail call void @free(i8* noundef %3) #25
  store i8* null, i8** %2, align 8, !tbaa !7
  %4 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %0, i64 0, i32 37
  %5 = load i8*, i8** %4, align 8, !tbaa !197
  tail call void @free(i8* noundef %5) #25
  store i8* null, i8** %4, align 8, !tbaa !197
  %6 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %0, i64 0, i32 38
  store i32 0, i32* %6, align 8, !tbaa !198
  %7 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %0, i64 0, i32 35
  store i32 0, i32* %7, align 8, !tbaa !199
  ret void
}

; Function Attrs: mustprogress nofree nosync nounwind uwtable willreturn writeonly
define dso_local void @_Z17lodepng_info_initP11LodePNGInfo(%struct.LodePNGInfo* noundef writeonly %0) local_unnamed_addr #20 {
  %2 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %0, i64 0, i32 3, i32 4
  %3 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %0, i64 0, i32 3, i32 0
  %4 = bitcast i32* %2 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(16) %4, i8 0, i64 16, i1 false) #25
  store i32 6, i32* %3, align 8, !tbaa !147
  %5 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %0, i64 0, i32 3, i32 1
  store i32 8, i32* %5, align 4, !tbaa !150
  %6 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %0, i64 0, i32 3, i32 2
  %7 = bitcast i8** %6 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(16) %7, i8 0, i64 16, i1 false) #25
  %8 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %0, i64 0, i32 2
  store i32 0, i32* %8, align 8, !tbaa !208
  %9 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %0, i64 0, i32 0
  store i32 0, i32* %9, align 8, !tbaa !209
  %10 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %0, i64 0, i32 1
  store i32 0, i32* %10, align 4, !tbaa !210
  %11 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %0, i64 0, i32 4
  %12 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %0, i64 0, i32 18
  store i32 0, i32* %12, align 4, !tbaa !211
  %13 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %0, i64 0, i32 22
  store i32 0, i32* %13, align 4, !tbaa !212
  %14 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %0, i64 0, i32 24
  store i32 0, i32* %14, align 4, !tbaa !213
  %15 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %0, i64 0, i32 33
  store i32 0, i32* %15, align 8, !tbaa !214
  %16 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %0, i64 0, i32 35
  store i32 0, i32* %16, align 8, !tbaa !199
  %17 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %0, i64 0, i32 36
  %18 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %0, i64 0, i32 39
  %19 = bitcast i32* %11 to i8*
  call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(84) %19, i8 0, i64 84, i1 false)
  %20 = bitcast i8** %17 to i8*
  call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(16) %20, i8 0, i64 16, i1 false)
  %21 = bitcast i32* %18 to i8*
  call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 4 dereferenceable(68) %21, i8 0, i64 68, i1 false)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local void @_Z20lodepng_info_cleanupP11LodePNGInfo(%struct.LodePNGInfo* nocapture noundef %0) local_unnamed_addr #3 {
  %2 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %0, i64 0, i32 3, i32 2
  %3 = load i8*, i8** %2, align 8, !tbaa !151
  %4 = icmp eq i8* %3, null
  br i1 %4, label %6, label %5

5:                                                ; preds = %1
  tail call void @free(i8* noundef nonnull %3) #25
  br label %6

6:                                                ; preds = %1, %5
  %7 = bitcast i8** %2 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(16) %7, i8 0, i64 16, i1 false) #25
  %8 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %0, i64 0, i32 8
  %9 = load i64, i64* %8, align 8, !tbaa !165
  %10 = icmp eq i64 %9, 0
  br i1 %10, label %25, label %11

11:                                               ; preds = %6
  %12 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %0, i64 0, i32 9
  %13 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %0, i64 0, i32 10
  br label %14

14:                                               ; preds = %14, %11
  %15 = phi i64 [ 0, %11 ], [ %22, %14 ]
  %16 = load i8**, i8*** %12, align 8, !tbaa !162
  %17 = getelementptr inbounds i8*, i8** %16, i64 %15
  %18 = load i8*, i8** %17, align 8, !tbaa !7
  tail call void @free(i8* noundef %18) #25
  store i8* null, i8** %17, align 8, !tbaa !7
  %19 = load i8**, i8*** %13, align 8, !tbaa !166
  %20 = getelementptr inbounds i8*, i8** %19, i64 %15
  %21 = load i8*, i8** %20, align 8, !tbaa !7
  tail call void @free(i8* noundef %21) #25
  store i8* null, i8** %20, align 8, !tbaa !7
  %22 = add i64 %15, 1
  %23 = load i64, i64* %8, align 8, !tbaa !165
  %24 = icmp eq i64 %22, %23
  br i1 %24, label %25, label %14

25:                                               ; preds = %14, %6
  %26 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %0, i64 0, i32 9
  %27 = bitcast i8*** %26 to i8**
  %28 = load i8*, i8** %27, align 8, !tbaa !162
  tail call void @free(i8* noundef %28) #25
  %29 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %0, i64 0, i32 10
  %30 = bitcast i8*** %29 to i8**
  %31 = load i8*, i8** %30, align 8, !tbaa !166
  tail call void @free(i8* noundef %31) #25
  tail call fastcc void @_ZL20LodePNGIText_cleanupP11LodePNGInfo(%struct.LodePNGInfo* noundef nonnull %0)
  %32 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %0, i64 0, i32 36
  %33 = load i8*, i8** %32, align 8, !tbaa !7
  tail call void @free(i8* noundef %33) #25
  store i8* null, i8** %32, align 8, !tbaa !7
  %34 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %0, i64 0, i32 37
  %35 = load i8*, i8** %34, align 8, !tbaa !197
  tail call void @free(i8* noundef %35) #25
  store i8* null, i8** %34, align 8, !tbaa !197
  %36 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %0, i64 0, i32 38
  store i32 0, i32* %36, align 8, !tbaa !198
  %37 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %0, i64 0, i32 35
  store i32 0, i32* %37, align 8, !tbaa !199
  %38 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %0, i64 0, i32 44, i64 0
  %39 = load i8*, i8** %38, align 8, !tbaa !7
  tail call void @free(i8* noundef %39) #25
  %40 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %0, i64 0, i32 44, i64 1
  %41 = load i8*, i8** %40, align 8, !tbaa !7
  tail call void @free(i8* noundef %41) #25
  %42 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %0, i64 0, i32 44, i64 2
  %43 = load i8*, i8** %42, align 8, !tbaa !7
  tail call void @free(i8* noundef %43) #25
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local noundef i32 @_Z17lodepng_info_copyP11LodePNGInfoPKS_(%struct.LodePNGInfo* nocapture noundef %0, %struct.LodePNGInfo* nocapture noundef readonly %1) local_unnamed_addr #3 {
  tail call void @_Z20lodepng_info_cleanupP11LodePNGInfo(%struct.LodePNGInfo* noundef %0)
  %3 = bitcast %struct.LodePNGInfo* %0 to i8*
  %4 = bitcast %struct.LodePNGInfo* %1 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef nonnull align 1 dereferenceable(328) %3, i8* noundef nonnull align 1 dereferenceable(328) %4, i64 328, i1 false) #25, !tbaa !14, !alias.scope !215
  %5 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %0, i64 0, i32 3
  %6 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %0, i64 0, i32 3, i32 4
  %7 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %5, i64 0, i32 0
  %8 = bitcast i32* %6 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(16) %8, i8 0, i64 16, i1 false) #25
  store i32 6, i32* %7, align 8, !tbaa !147
  %9 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %0, i64 0, i32 3, i32 1
  store i32 8, i32* %9, align 4, !tbaa !150
  %10 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %0, i64 0, i32 3, i32 2
  %11 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %1, i64 0, i32 3
  %12 = bitcast %struct.LodePNGColorMode* %5 to i8*
  %13 = bitcast %struct.LodePNGColorMode* %11 to i8*
  %14 = bitcast i8** %10 to i8*
  call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(16) %14, i8 0, i64 16, i1 false)
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef nonnull align 1 dereferenceable(40) %12, i8* noundef nonnull align 1 dereferenceable(40) %13, i64 40, i1 false) #25, !tbaa !14, !alias.scope !219
  %15 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %1, i64 0, i32 3, i32 2
  %16 = load i8*, i8** %15, align 8, !tbaa !151
  %17 = icmp eq i8* %16, null
  br i1 %17, label %30, label %18

18:                                               ; preds = %2
  %19 = tail call noalias dereferenceable_or_null(1024) i8* @malloc(i64 noundef 1024) #25
  store i8* %19, i8** %10, align 8, !tbaa !151
  %20 = icmp eq i8* %19, null
  %21 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %1, i64 0, i32 3, i32 3
  %22 = load i64, i64* %21, align 8, !tbaa !156
  br i1 %20, label %23, label %25

23:                                               ; preds = %18
  %24 = icmp eq i64 %22, 0
  br i1 %24, label %30, label %240

25:                                               ; preds = %18
  %26 = shl i64 %22, 2
  %27 = icmp eq i64 %26, 0
  br i1 %27, label %30, label %28

28:                                               ; preds = %25
  %29 = load i8*, i8** %15, align 8, !tbaa !151
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %19, i8* align 1 %29, i64 %26, i1 false) #25, !tbaa !14, !alias.scope !223
  br label %30

30:                                               ; preds = %23, %2, %25, %28
  %31 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %0, i64 0, i32 8
  %32 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %1, i64 0, i32 8
  %33 = bitcast i64* %31 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(24) %33, i8 0, i64 24, i1 false) #25
  %34 = load i64, i64* %32, align 8, !tbaa !165
  %35 = icmp eq i64 %34, 0
  br i1 %35, label %62, label %36

36:                                               ; preds = %30
  %37 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %1, i64 0, i32 9
  %38 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %1, i64 0, i32 10
  br label %42

39:                                               ; preds = %55
  %40 = load i64, i64* %32, align 8, !tbaa !165
  %41 = icmp eq i64 %61, %40
  br i1 %41, label %62, label %42

42:                                               ; preds = %39, %36
  %43 = phi i64 [ 0, %36 ], [ %61, %39 ]
  %44 = load i8**, i8*** %37, align 8, !tbaa !162
  %45 = getelementptr inbounds i8*, i8** %44, i64 %43
  %46 = load i8*, i8** %45, align 8, !tbaa !7
  %47 = load i8**, i8*** %38, align 8, !tbaa !166
  %48 = getelementptr inbounds i8*, i8** %47, i64 %43
  %49 = load i8*, i8** %48, align 8, !tbaa !7
  br label %50

50:                                               ; preds = %50, %42
  %51 = phi i8* [ %49, %42 ], [ %54, %50 ]
  %52 = load i8, i8* %51, align 1, !tbaa !14
  %53 = icmp eq i8 %52, 0
  %54 = getelementptr inbounds i8, i8* %51, i64 1
  br i1 %53, label %55, label %50

55:                                               ; preds = %50
  %56 = ptrtoint i8* %51 to i64
  %57 = ptrtoint i8* %49 to i64
  %58 = sub i64 %56, %57
  %59 = tail call fastcc noundef i32 @_ZL22lodepng_add_text_sizedP11LodePNGInfoPKcS2_m(%struct.LodePNGInfo* noundef %0, i8* noundef %46, i8* noundef %49, i64 noundef %58) #25, !range !127
  %60 = icmp eq i32 %59, 0
  %61 = add i64 %43, 1
  br i1 %60, label %39, label %240

62:                                               ; preds = %39, %30
  %63 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %0, i64 0, i32 11
  %64 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %1, i64 0, i32 11
  %65 = bitcast i64* %63 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(40) %65, i8 0, i64 40, i1 false) #25
  %66 = load i64, i64* %64, align 8, !tbaa !175
  %67 = icmp eq i64 %66, 0
  br i1 %67, label %102, label %68

68:                                               ; preds = %62
  %69 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %1, i64 0, i32 12
  %70 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %1, i64 0, i32 13
  %71 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %1, i64 0, i32 14
  %72 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %1, i64 0, i32 15
  br label %76

73:                                               ; preds = %95
  %74 = load i64, i64* %64, align 8, !tbaa !175
  %75 = icmp eq i64 %101, %74
  br i1 %75, label %102, label %76

76:                                               ; preds = %73, %68
  %77 = phi i64 [ 0, %68 ], [ %101, %73 ]
  %78 = load i8**, i8*** %69, align 8, !tbaa !176
  %79 = getelementptr inbounds i8*, i8** %78, i64 %77
  %80 = load i8*, i8** %79, align 8, !tbaa !7
  %81 = load i8**, i8*** %70, align 8, !tbaa !177
  %82 = getelementptr inbounds i8*, i8** %81, i64 %77
  %83 = load i8*, i8** %82, align 8, !tbaa !7
  %84 = load i8**, i8*** %71, align 8, !tbaa !178
  %85 = getelementptr inbounds i8*, i8** %84, i64 %77
  %86 = load i8*, i8** %85, align 8, !tbaa !7
  %87 = load i8**, i8*** %72, align 8, !tbaa !179
  %88 = getelementptr inbounds i8*, i8** %87, i64 %77
  %89 = load i8*, i8** %88, align 8, !tbaa !7
  br label %90

90:                                               ; preds = %90, %76
  %91 = phi i8* [ %89, %76 ], [ %94, %90 ]
  %92 = load i8, i8* %91, align 1, !tbaa !14
  %93 = icmp eq i8 %92, 0
  %94 = getelementptr inbounds i8, i8* %91, i64 1
  br i1 %93, label %95, label %90

95:                                               ; preds = %90
  %96 = ptrtoint i8* %91 to i64
  %97 = ptrtoint i8* %89 to i64
  %98 = sub i64 %96, %97
  %99 = tail call fastcc noundef i32 @_ZL23lodepng_add_itext_sizedP11LodePNGInfoPKcS2_S2_S2_m(%struct.LodePNGInfo* noundef %0, i8* noundef %80, i8* noundef %83, i8* noundef %86, i8* noundef %89, i64 noundef %98) #25, !range !127
  %100 = icmp eq i32 %99, 0
  %101 = add i64 %77, 1
  br i1 %100, label %73, label %240

102:                                              ; preds = %73, %62
  %103 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %1, i64 0, i32 35
  %104 = load i32, i32* %103, align 8, !tbaa !199
  %105 = icmp eq i32 %104, 0
  br i1 %105, label %140, label %106

106:                                              ; preds = %102
  %107 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %1, i64 0, i32 36
  %108 = load i8*, i8** %107, align 8, !tbaa !196
  %109 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %1, i64 0, i32 37
  %110 = load i8*, i8** %109, align 8, !tbaa !197
  %111 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %1, i64 0, i32 38
  %112 = load i32, i32* %111, align 8, !tbaa !198
  %113 = icmp eq i32 %112, 0
  br i1 %113, label %240, label %114

114:                                              ; preds = %106, %114
  %115 = phi i8* [ %118, %114 ], [ %108, %106 ]
  %116 = load i8, i8* %115, align 1, !tbaa !14
  %117 = icmp eq i8 %116, 0
  %118 = getelementptr inbounds i8, i8* %115, i64 1
  br i1 %117, label %119, label %114

119:                                              ; preds = %114
  %120 = ptrtoint i8* %115 to i64
  %121 = ptrtoint i8* %108 to i64
  %122 = sub i64 %120, %121
  %123 = add i64 %122, 1
  %124 = tail call noalias i8* @malloc(i64 noundef %123) #25
  %125 = icmp eq i8* %124, null
  br i1 %125, label %131, label %126

126:                                              ; preds = %119
  %127 = icmp eq i64 %122, 0
  br i1 %127, label %129, label %128

128:                                              ; preds = %126
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %124, i8* align 1 %108, i64 %122, i1 false) #25, !tbaa !14, !alias.scope !227
  br label %129

129:                                              ; preds = %128, %126
  %130 = getelementptr inbounds i8, i8* %124, i64 %122
  store i8 0, i8* %130, align 1, !tbaa !14
  br label %131

131:                                              ; preds = %129, %119
  %132 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %0, i64 0, i32 36
  store i8* %124, i8** %132, align 8, !tbaa !196
  %133 = zext i32 %112 to i64
  %134 = tail call noalias i8* @malloc(i64 noundef %133) #25
  %135 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %0, i64 0, i32 37
  store i8* %134, i8** %135, align 8, !tbaa !197
  %136 = icmp eq i8* %134, null
  %137 = or i1 %125, %136
  br i1 %137, label %240, label %138

138:                                              ; preds = %131
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %134, i8* align 1 %110, i64 %133, i1 false) #25, !tbaa !14, !alias.scope !231
  %139 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %0, i64 0, i32 38
  store i32 %112, i32* %139, align 8, !tbaa !198
  br label %140

140:                                              ; preds = %138, %102
  %141 = getelementptr %struct.LodePNGInfo, %struct.LodePNGInfo* %0, i64 0, i32 44, i64 0
  %142 = bitcast i8** %141 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(48) %142, i8 0, i64 48, i1 false) #25
  %143 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %0, i64 0, i32 44, i64 1
  %144 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %0, i64 0, i32 44, i64 2
  %145 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %1, i64 0, i32 45, i64 0
  %146 = load i64, i64* %145, align 8, !tbaa !3
  %147 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %0, i64 0, i32 45, i64 0
  store i64 %146, i64* %147, align 8, !tbaa !3
  %148 = load i64, i64* %145, align 8, !tbaa !3
  %149 = tail call noalias i8* @malloc(i64 noundef %148) #25
  store i8* %149, i8** %141, align 8, !tbaa !7
  %150 = icmp ne i8* %149, null
  %151 = icmp eq i64 %146, 0
  %152 = select i1 %150, i1 true, i1 %151
  br i1 %152, label %153, label %240

153:                                              ; preds = %140
  %154 = icmp eq i64 %148, 0
  br i1 %154, label %176, label %155

155:                                              ; preds = %153
  %156 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %1, i64 0, i32 44, i64 0
  %157 = load i8*, i8** %156, align 8, !tbaa !7
  %158 = load i8, i8* %157, align 1, !tbaa !14
  store i8 %158, i8* %149, align 1, !tbaa !14
  %159 = icmp eq i64 %148, 1
  br i1 %159, label %176, label %160

160:                                              ; preds = %155
  %161 = getelementptr inbounds i8, i8* %157, i64 1
  %162 = load i8, i8* %161, align 1, !tbaa !14
  %163 = getelementptr inbounds i8, i8* %149, i64 1
  store i8 %162, i8* %163, align 1, !tbaa !14
  %164 = load i64, i64* %145, align 8, !tbaa !3
  %165 = icmp ugt i64 %164, 2
  br i1 %165, label %166, label %176

166:                                              ; preds = %160, %166
  %167 = phi i64 [ %173, %166 ], [ 2, %160 ]
  %168 = load i8*, i8** %141, align 8, !tbaa !7
  %169 = load i8*, i8** %156, align 8, !tbaa !7
  %170 = getelementptr inbounds i8, i8* %169, i64 %167
  %171 = load i8, i8* %170, align 1, !tbaa !14
  %172 = getelementptr inbounds i8, i8* %168, i64 %167
  store i8 %171, i8* %172, align 1, !tbaa !14
  %173 = add nuw i64 %167, 1
  %174 = load i64, i64* %145, align 8, !tbaa !3
  %175 = icmp ult i64 %173, %174
  br i1 %175, label %166, label %176

176:                                              ; preds = %166, %160, %155, %153
  %177 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %1, i64 0, i32 45, i64 1
  %178 = load i64, i64* %177, align 8, !tbaa !3
  %179 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %0, i64 0, i32 45, i64 1
  store i64 %178, i64* %179, align 8, !tbaa !3
  %180 = load i64, i64* %177, align 8, !tbaa !3
  %181 = tail call noalias i8* @malloc(i64 noundef %180) #25
  store i8* %181, i8** %143, align 8, !tbaa !7
  %182 = icmp ne i8* %181, null
  %183 = icmp eq i64 %178, 0
  %184 = select i1 %182, i1 true, i1 %183
  br i1 %184, label %185, label %240

185:                                              ; preds = %176
  %186 = icmp eq i64 %180, 0
  br i1 %186, label %208, label %187

187:                                              ; preds = %185
  %188 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %1, i64 0, i32 44, i64 1
  %189 = load i8*, i8** %188, align 8, !tbaa !7
  %190 = load i8, i8* %189, align 1, !tbaa !14
  store i8 %190, i8* %181, align 1, !tbaa !14
  %191 = icmp eq i64 %180, 1
  br i1 %191, label %208, label %192

192:                                              ; preds = %187
  %193 = getelementptr inbounds i8, i8* %189, i64 1
  %194 = load i8, i8* %193, align 1, !tbaa !14
  %195 = getelementptr inbounds i8, i8* %181, i64 1
  store i8 %194, i8* %195, align 1, !tbaa !14
  %196 = load i64, i64* %177, align 8, !tbaa !3
  %197 = icmp ugt i64 %196, 2
  br i1 %197, label %198, label %208

198:                                              ; preds = %192, %198
  %199 = phi i64 [ %205, %198 ], [ 2, %192 ]
  %200 = load i8*, i8** %143, align 8, !tbaa !7
  %201 = load i8*, i8** %188, align 8, !tbaa !7
  %202 = getelementptr inbounds i8, i8* %201, i64 %199
  %203 = load i8, i8* %202, align 1, !tbaa !14
  %204 = getelementptr inbounds i8, i8* %200, i64 %199
  store i8 %203, i8* %204, align 1, !tbaa !14
  %205 = add nuw i64 %199, 1
  %206 = load i64, i64* %177, align 8, !tbaa !3
  %207 = icmp ult i64 %205, %206
  br i1 %207, label %198, label %208

208:                                              ; preds = %198, %192, %187, %185
  %209 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %1, i64 0, i32 45, i64 2
  %210 = load i64, i64* %209, align 8, !tbaa !3
  %211 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %0, i64 0, i32 45, i64 2
  store i64 %210, i64* %211, align 8, !tbaa !3
  %212 = load i64, i64* %209, align 8, !tbaa !3
  %213 = tail call noalias i8* @malloc(i64 noundef %212) #25
  store i8* %213, i8** %144, align 8, !tbaa !7
  %214 = icmp ne i8* %213, null
  %215 = icmp eq i64 %210, 0
  %216 = select i1 %214, i1 true, i1 %215
  br i1 %216, label %217, label %240

217:                                              ; preds = %208
  %218 = icmp eq i64 %212, 0
  br i1 %218, label %240, label %219

219:                                              ; preds = %217
  %220 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %1, i64 0, i32 44, i64 2
  %221 = load i8*, i8** %220, align 8, !tbaa !7
  %222 = load i8, i8* %221, align 1, !tbaa !14
  store i8 %222, i8* %213, align 1, !tbaa !14
  %223 = icmp eq i64 %212, 1
  br i1 %223, label %240, label %224

224:                                              ; preds = %219
  %225 = getelementptr inbounds i8, i8* %221, i64 1
  %226 = load i8, i8* %225, align 1, !tbaa !14
  %227 = getelementptr inbounds i8, i8* %213, i64 1
  store i8 %226, i8* %227, align 1, !tbaa !14
  %228 = load i64, i64* %209, align 8, !tbaa !3
  %229 = icmp ugt i64 %228, 2
  br i1 %229, label %230, label %240

230:                                              ; preds = %224, %230
  %231 = phi i64 [ %237, %230 ], [ 2, %224 ]
  %232 = load i8*, i8** %144, align 8, !tbaa !7
  %233 = load i8*, i8** %220, align 8, !tbaa !7
  %234 = getelementptr inbounds i8, i8* %233, i64 %231
  %235 = load i8, i8* %234, align 1, !tbaa !14
  %236 = getelementptr inbounds i8, i8* %232, i64 %231
  store i8 %235, i8* %236, align 1, !tbaa !14
  %237 = add nuw i64 %231, 1
  %238 = load i64, i64* %209, align 8, !tbaa !3
  %239 = icmp ult i64 %237, %238
  br i1 %239, label %230, label %240

240:                                              ; preds = %55, %95, %230, %224, %219, %217, %208, %176, %140, %23, %131, %106
  %241 = phi i32 [ 83, %131 ], [ 100, %106 ], [ 83, %23 ], [ 83, %140 ], [ 83, %176 ], [ 83, %208 ], [ 0, %217 ], [ 0, %219 ], [ 0, %224 ], [ 0, %230 ], [ %99, %95 ], [ %59, %55 ]
  ret i32 %241
}

; Function Attrs: nounwind uwtable
define dso_local noundef i32 @_Z15lodepng_convertPhPKhPK16LodePNGColorModeS4_jj(i8* noundef %0, i8* noundef %1, %struct.LodePNGColorMode* noundef readonly %2, %struct.LodePNGColorMode* noundef %3, i32 noundef %4, i32 noundef %5) local_unnamed_addr #3 {
  %7 = alloca %struct.ColorTree, align 8
  %8 = alloca i16, align 2
  %9 = alloca i16, align 2
  %10 = alloca i16, align 2
  %11 = alloca i16, align 2
  %12 = alloca i8, align 1
  %13 = alloca i8, align 1
  %14 = alloca i8, align 1
  %15 = alloca i8, align 1
  %16 = bitcast %struct.ColorTree* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 136, i8* nonnull %16) #25
  %17 = zext i32 %4 to i64
  %18 = zext i32 %5 to i64
  %19 = mul nuw i64 %18, %17
  %20 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %3, i64 0, i32 0
  %21 = load i32, i32* %20, align 8, !tbaa !147
  %22 = icmp eq i32 %21, 3
  br i1 %22, label %23, label %27

23:                                               ; preds = %6
  %24 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %3, i64 0, i32 2
  %25 = load i8*, i8** %24, align 8, !tbaa !151
  %26 = icmp eq i8* %25, null
  br i1 %26, label %443, label %27

27:                                               ; preds = %23, %6
  %28 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %2, i64 0, i32 0
  %29 = load i32, i32* %28, align 8, !tbaa !147
  %30 = icmp eq i32 %29, %21
  br i1 %30, label %31, label %127

31:                                               ; preds = %27
  %32 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %2, i64 0, i32 1
  %33 = load i32, i32* %32, align 4, !tbaa !150
  %34 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %3, i64 0, i32 1
  %35 = load i32, i32* %34, align 4, !tbaa !150
  %36 = icmp eq i32 %33, %35
  br i1 %36, label %37, label %127

37:                                               ; preds = %31
  %38 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %2, i64 0, i32 4
  %39 = load i32, i32* %38, align 8, !tbaa !161
  %40 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %3, i64 0, i32 4
  %41 = load i32, i32* %40, align 8, !tbaa !161
  %42 = icmp eq i32 %39, %41
  br i1 %42, label %43, label %127

43:                                               ; preds = %37
  %44 = icmp eq i32 %39, 0
  br i1 %44, label %63, label %45

45:                                               ; preds = %43
  %46 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %2, i64 0, i32 5
  %47 = load i32, i32* %46, align 4, !tbaa !235
  %48 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %3, i64 0, i32 5
  %49 = load i32, i32* %48, align 4, !tbaa !235
  %50 = icmp eq i32 %47, %49
  br i1 %50, label %51, label %127

51:                                               ; preds = %45
  %52 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %2, i64 0, i32 6
  %53 = load i32, i32* %52, align 8, !tbaa !236
  %54 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %3, i64 0, i32 6
  %55 = load i32, i32* %54, align 8, !tbaa !236
  %56 = icmp eq i32 %53, %55
  br i1 %56, label %57, label %127

57:                                               ; preds = %51
  %58 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %2, i64 0, i32 7
  %59 = load i32, i32* %58, align 4, !tbaa !237
  %60 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %3, i64 0, i32 7
  %61 = load i32, i32* %60, align 4, !tbaa !237
  %62 = icmp eq i32 %59, %61
  br i1 %62, label %63, label %127

63:                                               ; preds = %57, %43
  %64 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %2, i64 0, i32 3
  %65 = load i64, i64* %64, align 8, !tbaa !156
  %66 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %3, i64 0, i32 3
  %67 = load i64, i64* %66, align 8, !tbaa !156
  %68 = icmp eq i64 %65, %67
  br i1 %68, label %69, label %127

69:                                               ; preds = %63
  %70 = shl i64 %65, 2
  %71 = icmp eq i64 %70, 0
  br i1 %71, label %108, label %72

72:                                               ; preds = %69
  %73 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %2, i64 0, i32 2
  %74 = load i8*, i8** %73, align 8, !tbaa !151
  %75 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %3, i64 0, i32 2
  %76 = load i8*, i8** %75, align 8, !tbaa !151
  br label %100

77:                                               ; preds = %100
  %78 = getelementptr inbounds i8, i8* %74, i64 %107
  %79 = load i8, i8* %78, align 1, !tbaa !14
  %80 = getelementptr inbounds i8, i8* %76, i64 %107
  %81 = load i8, i8* %80, align 1, !tbaa !14
  %82 = icmp eq i8 %79, %81
  %83 = or i64 %101, 2
  br i1 %82, label %84, label %127

84:                                               ; preds = %77
  %85 = getelementptr inbounds i8, i8* %74, i64 %83
  %86 = load i8, i8* %85, align 1, !tbaa !14
  %87 = getelementptr inbounds i8, i8* %76, i64 %83
  %88 = load i8, i8* %87, align 1, !tbaa !14
  %89 = icmp eq i8 %86, %88
  %90 = or i64 %101, 3
  br i1 %89, label %91, label %127

91:                                               ; preds = %84
  %92 = getelementptr inbounds i8, i8* %74, i64 %90
  %93 = load i8, i8* %92, align 1, !tbaa !14
  %94 = getelementptr inbounds i8, i8* %76, i64 %90
  %95 = load i8, i8* %94, align 1, !tbaa !14
  %96 = icmp eq i8 %93, %95
  %97 = add nuw i64 %101, 4
  br i1 %96, label %98, label %127

98:                                               ; preds = %91
  %99 = icmp eq i64 %97, %70
  br i1 %99, label %108, label %100

100:                                              ; preds = %98, %72
  %101 = phi i64 [ 0, %72 ], [ %97, %98 ]
  %102 = getelementptr inbounds i8, i8* %74, i64 %101
  %103 = load i8, i8* %102, align 1, !tbaa !14
  %104 = getelementptr inbounds i8, i8* %76, i64 %101
  %105 = load i8, i8* %104, align 1, !tbaa !14
  %106 = icmp eq i8 %103, %105
  %107 = or i64 %101, 1
  br i1 %106, label %77, label %127

108:                                              ; preds = %98, %69
  switch i32 %21, label %113 [
    i32 0, label %114
    i32 2, label %109
    i32 3, label %114
    i32 4, label %110
    i32 6, label %111
    i32 255, label %112
  ]

109:                                              ; preds = %108
  br label %114

110:                                              ; preds = %108
  br label %114

111:                                              ; preds = %108
  br label %114

112:                                              ; preds = %108
  br label %114

113:                                              ; preds = %108
  br label %114

114:                                              ; preds = %108, %108, %109, %110, %111, %112, %113
  %115 = phi i32 [ 0, %113 ], [ 0, %112 ], [ 4, %111 ], [ 2, %110 ], [ 3, %109 ], [ 1, %108 ], [ 1, %108 ]
  %116 = mul i32 %115, %33
  %117 = zext i32 %116 to i64
  %118 = lshr i64 %19, 3
  %119 = mul i64 %118, %117
  %120 = and i64 %19, 7
  %121 = mul nuw nsw i64 %120, %117
  %122 = add nuw nsw i64 %121, 7
  %123 = lshr i64 %122, 3
  %124 = add i64 %123, %119
  %125 = icmp eq i64 %124, 0
  br i1 %125, label %443, label %126

126:                                              ; preds = %114
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %0, i8* align 1 %1, i64 %124, i1 false) #25, !tbaa !14, !alias.scope !238
  br label %443

127:                                              ; preds = %100, %77, %84, %91, %27, %31, %37, %45, %51, %57, %63
  %128 = icmp eq i32 %29, 3
  br i1 %128, label %129, label %176

129:                                              ; preds = %127
  %130 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %2, i64 0, i32 3
  %131 = load i64, i64* %130, align 8, !tbaa !156
  %132 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %2, i64 0, i32 2
  %133 = load i8*, i8** %132, align 8, !tbaa !151
  %134 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %2, i64 0, i32 1
  %135 = load i32, i32* %134, align 4, !tbaa !150
  %136 = zext i32 %135 to i64
  %137 = shl nuw i64 1, %136
  %138 = icmp eq i64 %131, 0
  br i1 %138, label %139, label %152

139:                                              ; preds = %129
  %140 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %3, i64 0, i32 3
  %141 = load i64, i64* %140, align 8, !tbaa !156
  %142 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %3, i64 0, i32 2
  %143 = load i8*, i8** %142, align 8, !tbaa !151
  br i1 %22, label %144, label %152

144:                                              ; preds = %139
  %145 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %3, i64 0, i32 1
  %146 = load i32, i32* %145, align 4, !tbaa !150
  %147 = icmp eq i32 %146, %135
  br i1 %147, label %148, label %152

148:                                              ; preds = %144
  %149 = tail call noundef i64 @_Z20lodepng_get_raw_sizejjPK16LodePNGColorMode(i32 noundef %4, i32 noundef %5, %struct.LodePNGColorMode* noundef nonnull %3)
  %150 = icmp eq i64 %149, 0
  br i1 %150, label %443, label %151

151:                                              ; preds = %148
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %0, i8* align 1 %1, i64 %149, i1 false) #25, !tbaa !14, !alias.scope !242
  br label %443

152:                                              ; preds = %139, %144, %129
  %153 = phi i64 [ %141, %144 ], [ %141, %139 ], [ %131, %129 ]
  %154 = phi i8* [ %143, %144 ], [ %143, %139 ], [ %133, %129 ]
  %155 = icmp ult i64 %153, %137
  %156 = select i1 %155, i64 %153, i64 %137
  call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(128) %16, i8 0, i64 128, i1 false) #25, !tbaa !14, !alias.scope !246
  %157 = getelementptr inbounds %struct.ColorTree, %struct.ColorTree* %7, i64 0, i32 1
  store i32 -1, i32* %157, align 8, !tbaa !249
  %158 = icmp eq i64 %156, 0
  br i1 %158, label %176, label %161

159:                                              ; preds = %161
  %160 = icmp eq i64 %175, %156
  br i1 %160, label %176, label %161

161:                                              ; preds = %152, %159
  %162 = phi i64 [ %175, %159 ], [ 0, %152 ]
  %163 = shl i64 %162, 2
  %164 = getelementptr inbounds i8, i8* %154, i64 %163
  %165 = load i8, i8* %164, align 1, !tbaa !14
  %166 = getelementptr inbounds i8, i8* %164, i64 1
  %167 = load i8, i8* %166, align 1, !tbaa !14
  %168 = getelementptr inbounds i8, i8* %164, i64 2
  %169 = load i8, i8* %168, align 1, !tbaa !14
  %170 = getelementptr inbounds i8, i8* %164, i64 3
  %171 = load i8, i8* %170, align 1, !tbaa !14
  %172 = trunc i64 %162 to i32
  %173 = call fastcc noundef i32 @_ZL14color_tree_addP9ColorTreehhhhj(%struct.ColorTree* noundef nonnull %7, i8 noundef zeroext %165, i8 noundef zeroext %167, i8 noundef zeroext %169, i8 noundef zeroext %171, i32 noundef %172)
  %174 = icmp eq i32 %173, 0
  %175 = add nuw i64 %162, 1
  br i1 %174, label %159, label %438

176:                                              ; preds = %159, %152, %127
  %177 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %3, i64 0, i32 1
  %178 = load i32, i32* %177, align 4, !tbaa !150
  %179 = icmp eq i32 %178, 16
  %180 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %2, i64 0, i32 1
  %181 = load i32, i32* %180, align 4, !tbaa !150
  %182 = icmp eq i32 %181, 16
  %183 = select i1 %179, i1 %182, i1 false
  br i1 %183, label %184, label %272

184:                                              ; preds = %176
  %185 = icmp eq i64 %19, 0
  br i1 %185, label %438, label %186

186:                                              ; preds = %184
  %187 = bitcast i16* %8 to i8*
  %188 = bitcast i16* %9 to i8*
  %189 = bitcast i16* %10 to i8*
  %190 = bitcast i16* %11 to i8*
  br label %191

191:                                              ; preds = %186, %269
  %192 = phi i64 [ 0, %186 ], [ %270, %269 ]
  call void @llvm.lifetime.start.p0i8(i64 2, i8* nonnull %187) #25
  store i16 0, i16* %8, align 2, !tbaa !66
  call void @llvm.lifetime.start.p0i8(i64 2, i8* nonnull %188) #25
  store i16 0, i16* %9, align 2, !tbaa !66
  call void @llvm.lifetime.start.p0i8(i64 2, i8* nonnull %189) #25
  store i16 0, i16* %10, align 2, !tbaa !66
  call void @llvm.lifetime.start.p0i8(i64 2, i8* nonnull %190) #25
  store i16 0, i16* %11, align 2, !tbaa !66
  call fastcc void @_ZL19getPixelColorRGBA16PtS_S_S_PKhmPK16LodePNGColorMode(i16* noundef nonnull %8, i16* noundef nonnull %9, i16* noundef nonnull %10, i16* noundef nonnull %11, i8* noundef %1, i64 noundef %192, %struct.LodePNGColorMode* noundef %3)
  %193 = load i16, i16* %8, align 2, !tbaa !66
  %194 = load i16, i16* %9, align 2, !tbaa !66
  %195 = load i16, i16* %10, align 2, !tbaa !66
  %196 = load i16, i16* %11, align 2, !tbaa !66
  %197 = load i32, i32* %28, align 8, !tbaa !147
  switch i32 %197, label %269 [
    i32 0, label %198
    i32 2, label %204
    i32 4, label %224
    i32 6, label %237
  ]

198:                                              ; preds = %191
  %199 = lshr i16 %193, 8
  %200 = trunc i16 %199 to i8
  %201 = shl i64 %192, 1
  %202 = getelementptr inbounds i8, i8* %0, i64 %201
  store i8 %200, i8* %202, align 1, !tbaa !14
  %203 = or i64 %201, 1
  br label %264

204:                                              ; preds = %191
  %205 = lshr i16 %193, 8
  %206 = trunc i16 %205 to i8
  %207 = mul i64 %192, 6
  %208 = getelementptr inbounds i8, i8* %0, i64 %207
  store i8 %206, i8* %208, align 1, !tbaa !14
  %209 = trunc i16 %193 to i8
  %210 = or i64 %207, 1
  %211 = getelementptr inbounds i8, i8* %0, i64 %210
  store i8 %209, i8* %211, align 1, !tbaa !14
  %212 = lshr i16 %194, 8
  %213 = trunc i16 %212 to i8
  %214 = add i64 %207, 2
  %215 = getelementptr inbounds i8, i8* %0, i64 %214
  store i8 %213, i8* %215, align 1, !tbaa !14
  %216 = trunc i16 %194 to i8
  %217 = add i64 %207, 3
  %218 = getelementptr inbounds i8, i8* %0, i64 %217
  store i8 %216, i8* %218, align 1, !tbaa !14
  %219 = lshr i16 %195, 8
  %220 = trunc i16 %219 to i8
  %221 = add i64 %207, 4
  %222 = getelementptr inbounds i8, i8* %0, i64 %221
  store i8 %220, i8* %222, align 1, !tbaa !14
  %223 = add i64 %207, 5
  br label %264

224:                                              ; preds = %191
  %225 = lshr i16 %193, 8
  %226 = trunc i16 %225 to i8
  %227 = shl i64 %192, 2
  %228 = getelementptr inbounds i8, i8* %0, i64 %227
  store i8 %226, i8* %228, align 1, !tbaa !14
  %229 = trunc i16 %193 to i8
  %230 = or i64 %227, 1
  %231 = getelementptr inbounds i8, i8* %0, i64 %230
  store i8 %229, i8* %231, align 1, !tbaa !14
  %232 = lshr i16 %196, 8
  %233 = trunc i16 %232 to i8
  %234 = or i64 %227, 2
  %235 = getelementptr inbounds i8, i8* %0, i64 %234
  store i8 %233, i8* %235, align 1, !tbaa !14
  %236 = or i64 %227, 3
  br label %264

237:                                              ; preds = %191
  %238 = lshr i16 %193, 8
  %239 = trunc i16 %238 to i8
  %240 = shl i64 %192, 3
  %241 = getelementptr inbounds i8, i8* %0, i64 %240
  store i8 %239, i8* %241, align 1, !tbaa !14
  %242 = trunc i16 %193 to i8
  %243 = or i64 %240, 1
  %244 = getelementptr inbounds i8, i8* %0, i64 %243
  store i8 %242, i8* %244, align 1, !tbaa !14
  %245 = lshr i16 %194, 8
  %246 = trunc i16 %245 to i8
  %247 = or i64 %240, 2
  %248 = getelementptr inbounds i8, i8* %0, i64 %247
  store i8 %246, i8* %248, align 1, !tbaa !14
  %249 = trunc i16 %194 to i8
  %250 = or i64 %240, 3
  %251 = getelementptr inbounds i8, i8* %0, i64 %250
  store i8 %249, i8* %251, align 1, !tbaa !14
  %252 = lshr i16 %195, 8
  %253 = trunc i16 %252 to i8
  %254 = or i64 %240, 4
  %255 = getelementptr inbounds i8, i8* %0, i64 %254
  store i8 %253, i8* %255, align 1, !tbaa !14
  %256 = trunc i16 %195 to i8
  %257 = or i64 %240, 5
  %258 = getelementptr inbounds i8, i8* %0, i64 %257
  store i8 %256, i8* %258, align 1, !tbaa !14
  %259 = lshr i16 %196, 8
  %260 = trunc i16 %259 to i8
  %261 = or i64 %240, 6
  %262 = getelementptr inbounds i8, i8* %0, i64 %261
  store i8 %260, i8* %262, align 1, !tbaa !14
  %263 = or i64 %240, 7
  br label %264

264:                                              ; preds = %237, %224, %204, %198
  %265 = phi i64 [ %223, %204 ], [ %263, %237 ], [ %236, %224 ], [ %203, %198 ]
  %266 = phi i16 [ %195, %204 ], [ %196, %237 ], [ %196, %224 ], [ %193, %198 ]
  %267 = trunc i16 %266 to i8
  %268 = getelementptr inbounds i8, i8* %0, i64 %265
  store i8 %267, i8* %268, align 1, !tbaa !14
  br label %269

269:                                              ; preds = %191, %264
  call void @llvm.lifetime.end.p0i8(i64 2, i8* nonnull %190) #25
  call void @llvm.lifetime.end.p0i8(i64 2, i8* nonnull %189) #25
  call void @llvm.lifetime.end.p0i8(i64 2, i8* nonnull %188) #25
  call void @llvm.lifetime.end.p0i8(i64 2, i8* nonnull %187) #25
  %270 = add nuw i64 %192, 1
  %271 = icmp eq i64 %270, %19
  br i1 %271, label %438, label %191

272:                                              ; preds = %176
  %273 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %2, i64 0, i32 1
  %274 = icmp eq i32 %181, 8
  br i1 %274, label %275, label %279

275:                                              ; preds = %272
  %276 = load i32, i32* %28, align 8, !tbaa !147
  switch i32 %276, label %279 [
    i32 6, label %277
    i32 2, label %278
  ]

277:                                              ; preds = %275
  tail call fastcc void @_ZL19getPixelColorsRGBA8PhmPKhPK16LodePNGColorMode(i8* noundef %0, i64 noundef %19, i8* noundef %1, %struct.LodePNGColorMode* noundef nonnull %3)
  br label %438

278:                                              ; preds = %275
  tail call fastcc void @_ZL18getPixelColorsRGB8PhmPKhPK16LodePNGColorMode(i8* noundef %0, i64 noundef %19, i8* noundef %1, %struct.LodePNGColorMode* noundef nonnull %3)
  br label %438

279:                                              ; preds = %275, %272
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %12) #25
  store i8 0, i8* %12, align 1, !tbaa !14
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %13) #25
  store i8 0, i8* %13, align 1, !tbaa !14
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %14) #25
  store i8 0, i8* %14, align 1, !tbaa !14
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %15) #25
  store i8 0, i8* %15, align 1, !tbaa !14
  %280 = icmp eq i64 %19, 0
  br i1 %280, label %436, label %281

281:                                              ; preds = %279, %433
  %282 = phi i64 [ %434, %433 ], [ 0, %279 ]
  call fastcc void @_ZL18getPixelColorRGBA8PhS_S_S_PKhmPK16LodePNGColorMode(i8* noundef nonnull %12, i8* noundef nonnull %13, i8* noundef nonnull %14, i8* noundef nonnull %15, i8* noundef %1, i64 noundef %282, %struct.LodePNGColorMode* noundef %3)
  %283 = load i8, i8* %12, align 1, !tbaa !14
  %284 = load i8, i8* %13, align 1, !tbaa !14
  %285 = load i8, i8* %14, align 1, !tbaa !14
  %286 = load i8, i8* %15, align 1, !tbaa !14
  %287 = load i32, i32* %28, align 8, !tbaa !147
  switch i32 %287, label %433 [
    i32 0, label %288
    i32 2, label %328
    i32 3, label %351
    i32 4, label %388
    i32 6, label %404
  ]

288:                                              ; preds = %281
  %289 = load i32, i32* %273, align 4, !tbaa !150
  switch i32 %289, label %297 [
    i32 8, label %290
    i32 16, label %292
  ]

290:                                              ; preds = %288
  %291 = getelementptr inbounds i8, i8* %0, i64 %282
  store i8 %283, i8* %291, align 1, !tbaa !14
  br label %433

292:                                              ; preds = %288
  %293 = shl i64 %282, 1
  %294 = or i64 %293, 1
  %295 = getelementptr inbounds i8, i8* %0, i64 %294
  store i8 %283, i8* %295, align 1, !tbaa !14
  %296 = getelementptr inbounds i8, i8* %0, i64 %293
  store i8 %283, i8* %296, align 1, !tbaa !14
  br label %433

297:                                              ; preds = %288
  %298 = zext i8 %283 to i32
  %299 = sub i32 8, %289
  %300 = lshr i32 %298, %299
  %301 = shl nsw i32 -1, %289
  %302 = xor i32 %301, -1
  %303 = and i32 %300, %302
  %304 = icmp eq i32 %289, 1
  %305 = icmp eq i32 %289, 2
  %306 = select i1 %305, i32 3, i32 1
  %307 = select i1 %304, i32 7, i32 %306
  %308 = trunc i64 %282 to i32
  %309 = and i32 %307, %308
  %310 = sub nsw i32 %307, %309
  %311 = mul i32 %310, %289
  %312 = shl i32 %303, %311
  %313 = icmp eq i32 %309, 0
  br i1 %313, label %314, label %320

314:                                              ; preds = %297
  %315 = trunc i32 %312 to i8
  %316 = zext i32 %289 to i64
  %317 = mul i64 %282, %316
  %318 = lshr i64 %317, 3
  %319 = getelementptr inbounds i8, i8* %0, i64 %318
  store i8 %315, i8* %319, align 1, !tbaa !14
  br label %433

320:                                              ; preds = %297
  %321 = zext i32 %289 to i64
  %322 = mul i64 %282, %321
  %323 = lshr i64 %322, 3
  %324 = getelementptr inbounds i8, i8* %0, i64 %323
  %325 = load i8, i8* %324, align 1, !tbaa !14
  %326 = trunc i32 %312 to i8
  %327 = or i8 %325, %326
  store i8 %327, i8* %324, align 1, !tbaa !14
  br label %433

328:                                              ; preds = %281
  %329 = load i32, i32* %273, align 4, !tbaa !150
  %330 = icmp eq i32 %329, 8
  br i1 %330, label %331, label %338

331:                                              ; preds = %328
  %332 = mul i64 %282, 3
  %333 = getelementptr inbounds i8, i8* %0, i64 %332
  store i8 %283, i8* %333, align 1, !tbaa !14
  %334 = add i64 %332, 1
  %335 = getelementptr inbounds i8, i8* %0, i64 %334
  store i8 %284, i8* %335, align 1, !tbaa !14
  %336 = add i64 %332, 2
  %337 = getelementptr inbounds i8, i8* %0, i64 %336
  store i8 %285, i8* %337, align 1, !tbaa !14
  br label %433

338:                                              ; preds = %328
  %339 = mul i64 %282, 6
  %340 = or i64 %339, 1
  %341 = getelementptr inbounds i8, i8* %0, i64 %340
  store i8 %283, i8* %341, align 1, !tbaa !14
  %342 = getelementptr inbounds i8, i8* %0, i64 %339
  store i8 %283, i8* %342, align 1, !tbaa !14
  %343 = add i64 %339, 3
  %344 = getelementptr inbounds i8, i8* %0, i64 %343
  store i8 %284, i8* %344, align 1, !tbaa !14
  %345 = add i64 %339, 2
  %346 = getelementptr inbounds i8, i8* %0, i64 %345
  store i8 %284, i8* %346, align 1, !tbaa !14
  %347 = add i64 %339, 5
  %348 = getelementptr inbounds i8, i8* %0, i64 %347
  store i8 %285, i8* %348, align 1, !tbaa !14
  %349 = add i64 %339, 4
  %350 = getelementptr inbounds i8, i8* %0, i64 %349
  store i8 %285, i8* %350, align 1, !tbaa !14
  br label %433

351:                                              ; preds = %281
  %352 = call fastcc noundef i32 @_ZL14color_tree_getP9ColorTreehhhh(%struct.ColorTree* noundef nonnull %7, i8 noundef zeroext %283, i8 noundef zeroext %284, i8 noundef zeroext %285, i8 noundef zeroext %286) #25
  %353 = icmp slt i32 %352, 0
  br i1 %353, label %436, label %354

354:                                              ; preds = %351
  %355 = load i32, i32* %273, align 4, !tbaa !150
  %356 = icmp eq i32 %355, 8
  br i1 %356, label %357, label %360

357:                                              ; preds = %354
  %358 = trunc i32 %352 to i8
  %359 = getelementptr inbounds i8, i8* %0, i64 %282
  store i8 %358, i8* %359, align 1, !tbaa !14
  br label %433

360:                                              ; preds = %354
  %361 = icmp eq i32 %355, 1
  %362 = icmp eq i32 %355, 2
  %363 = select i1 %362, i32 3, i32 1
  %364 = select i1 %361, i32 7, i32 %363
  %365 = trunc i64 %282 to i32
  %366 = and i32 %364, %365
  %367 = shl nsw i32 -1, %355
  %368 = xor i32 %367, -1
  %369 = and i32 %352, %368
  %370 = sub nsw i32 %364, %366
  %371 = mul i32 %370, %355
  %372 = shl i32 %369, %371
  %373 = icmp eq i32 %366, 0
  br i1 %373, label %374, label %380

374:                                              ; preds = %360
  %375 = trunc i32 %372 to i8
  %376 = zext i32 %355 to i64
  %377 = mul i64 %282, %376
  %378 = lshr i64 %377, 3
  %379 = getelementptr inbounds i8, i8* %0, i64 %378
  store i8 %375, i8* %379, align 1, !tbaa !14
  br label %433

380:                                              ; preds = %360
  %381 = zext i32 %355 to i64
  %382 = mul i64 %282, %381
  %383 = lshr i64 %382, 3
  %384 = getelementptr inbounds i8, i8* %0, i64 %383
  %385 = load i8, i8* %384, align 1, !tbaa !14
  %386 = trunc i32 %372 to i8
  %387 = or i8 %385, %386
  store i8 %387, i8* %384, align 1, !tbaa !14
  br label %433

388:                                              ; preds = %281
  %389 = load i32, i32* %273, align 4, !tbaa !150
  switch i32 %389, label %433 [
    i32 8, label %390
    i32 16, label %395
  ]

390:                                              ; preds = %388
  %391 = shl i64 %282, 1
  %392 = getelementptr inbounds i8, i8* %0, i64 %391
  store i8 %283, i8* %392, align 1, !tbaa !14
  %393 = or i64 %391, 1
  %394 = getelementptr inbounds i8, i8* %0, i64 %393
  store i8 %286, i8* %394, align 1, !tbaa !14
  br label %433

395:                                              ; preds = %388
  %396 = shl i64 %282, 2
  %397 = or i64 %396, 1
  %398 = getelementptr inbounds i8, i8* %0, i64 %397
  store i8 %283, i8* %398, align 1, !tbaa !14
  %399 = getelementptr inbounds i8, i8* %0, i64 %396
  store i8 %283, i8* %399, align 1, !tbaa !14
  %400 = or i64 %396, 3
  %401 = getelementptr inbounds i8, i8* %0, i64 %400
  store i8 %286, i8* %401, align 1, !tbaa !14
  %402 = or i64 %396, 2
  %403 = getelementptr inbounds i8, i8* %0, i64 %402
  store i8 %286, i8* %403, align 1, !tbaa !14
  br label %433

404:                                              ; preds = %281
  %405 = load i32, i32* %273, align 4, !tbaa !150
  %406 = icmp eq i32 %405, 8
  br i1 %406, label %407, label %416

407:                                              ; preds = %404
  %408 = shl i64 %282, 2
  %409 = getelementptr inbounds i8, i8* %0, i64 %408
  store i8 %283, i8* %409, align 1, !tbaa !14
  %410 = or i64 %408, 1
  %411 = getelementptr inbounds i8, i8* %0, i64 %410
  store i8 %284, i8* %411, align 1, !tbaa !14
  %412 = or i64 %408, 2
  %413 = getelementptr inbounds i8, i8* %0, i64 %412
  store i8 %285, i8* %413, align 1, !tbaa !14
  %414 = or i64 %408, 3
  %415 = getelementptr inbounds i8, i8* %0, i64 %414
  store i8 %286, i8* %415, align 1, !tbaa !14
  br label %433

416:                                              ; preds = %404
  %417 = shl i64 %282, 3
  %418 = or i64 %417, 1
  %419 = getelementptr inbounds i8, i8* %0, i64 %418
  store i8 %283, i8* %419, align 1, !tbaa !14
  %420 = getelementptr inbounds i8, i8* %0, i64 %417
  store i8 %283, i8* %420, align 1, !tbaa !14
  %421 = or i64 %417, 3
  %422 = getelementptr inbounds i8, i8* %0, i64 %421
  store i8 %284, i8* %422, align 1, !tbaa !14
  %423 = or i64 %417, 2
  %424 = getelementptr inbounds i8, i8* %0, i64 %423
  store i8 %284, i8* %424, align 1, !tbaa !14
  %425 = or i64 %417, 5
  %426 = getelementptr inbounds i8, i8* %0, i64 %425
  store i8 %285, i8* %426, align 1, !tbaa !14
  %427 = or i64 %417, 4
  %428 = getelementptr inbounds i8, i8* %0, i64 %427
  store i8 %285, i8* %428, align 1, !tbaa !14
  %429 = or i64 %417, 7
  %430 = getelementptr inbounds i8, i8* %0, i64 %429
  store i8 %286, i8* %430, align 1, !tbaa !14
  %431 = or i64 %417, 6
  %432 = getelementptr inbounds i8, i8* %0, i64 %431
  store i8 %286, i8* %432, align 1, !tbaa !14
  br label %433

433:                                              ; preds = %320, %314, %281, %390, %395, %388, %290, %292, %338, %331, %407, %416, %380, %374, %357
  %434 = add nuw i64 %282, 1
  %435 = icmp eq i64 %434, %19
  br i1 %435, label %436, label %281

436:                                              ; preds = %433, %351, %279
  %437 = phi i32 [ 0, %279 ], [ 82, %351 ], [ 0, %433 ]
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %15) #25
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %14) #25
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %13) #25
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %12) #25
  br label %438

438:                                              ; preds = %161, %269, %184, %278, %436, %277
  %439 = phi i32 [ 0, %277 ], [ 0, %278 ], [ %437, %436 ], [ 0, %184 ], [ 0, %269 ], [ %173, %161 ]
  %440 = load i32, i32* %28, align 8, !tbaa !147
  %441 = icmp eq i32 %440, 3
  br i1 %441, label %442, label %443

442:                                              ; preds = %438
  call fastcc void @_ZL18color_tree_cleanupP9ColorTree(%struct.ColorTree* noundef nonnull %7)
  br label %443

443:                                              ; preds = %148, %151, %126, %114, %438, %442, %23
  %444 = phi i32 [ 107, %23 ], [ %439, %442 ], [ %439, %438 ], [ 0, %114 ], [ 0, %126 ], [ 0, %151 ], [ 0, %148 ]
  call void @llvm.lifetime.end.p0i8(i64 136, i8* nonnull %16) #25
  ret i32 %444
}

; Function Attrs: nofree nounwind uwtable
define internal fastcc noundef i32 @_ZL14color_tree_addP9ColorTreehhhhj(%struct.ColorTree* nocapture noundef %0, i8 noundef zeroext %1, i8 noundef zeroext %2, i8 noundef zeroext %3, i8 noundef zeroext %4, i32 noundef %5) unnamed_addr #0 {
  %7 = zext i8 %1 to i32
  %8 = zext i8 %2 to i32
  %9 = zext i8 %3 to i32
  %10 = zext i8 %4 to i32
  %11 = shl nuw nsw i32 %7, 3
  %12 = and i32 %11, 8
  %13 = shl nuw nsw i32 %8, 2
  %14 = and i32 %13, 4
  %15 = shl nuw nsw i32 %9, 1
  %16 = and i32 %15, 2
  %17 = and i32 %10, 1
  %18 = or i32 %14, %17
  %19 = or i32 %18, %12
  %20 = or i32 %19, %16
  %21 = zext i32 %20 to i64
  %22 = getelementptr inbounds %struct.ColorTree, %struct.ColorTree* %0, i64 0, i32 0, i64 %21
  %23 = load %struct.ColorTree*, %struct.ColorTree** %22, align 8, !tbaa !7
  %24 = icmp eq %struct.ColorTree* %23, null
  br i1 %24, label %25, label %32

25:                                               ; preds = %6
  %26 = tail call noalias dereferenceable_or_null(136) i8* @malloc(i64 noundef 136) #25
  %27 = bitcast %struct.ColorTree** %22 to i8**
  store i8* %26, i8** %27, align 8, !tbaa !7
  %28 = icmp eq i8* %26, null
  %29 = bitcast i8* %26 to %struct.ColorTree*
  br i1 %28, label %206, label %30

30:                                               ; preds = %25
  tail call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 1 dereferenceable(128) %26, i8 0, i64 128, i1 false) #25, !tbaa !14, !alias.scope !251
  %31 = getelementptr inbounds %struct.ColorTree, %struct.ColorTree* %29, i64 0, i32 1
  store i32 -1, i32* %31, align 8, !tbaa !249
  br label %32

32:                                               ; preds = %6, %30
  %33 = phi %struct.ColorTree* [ %23, %6 ], [ %29, %30 ]
  %34 = shl nuw nsw i32 %7, 2
  %35 = and i32 %34, 8
  %36 = shl nuw nsw i32 %8, 1
  %37 = and i32 %36, 4
  %38 = and i32 %9, 2
  %39 = lshr i32 %10, 1
  %40 = and i32 %39, 1
  %41 = or i32 %37, %40
  %42 = or i32 %41, %35
  %43 = or i32 %42, %38
  %44 = zext i32 %43 to i64
  %45 = getelementptr inbounds %struct.ColorTree, %struct.ColorTree* %33, i64 0, i32 0, i64 %44
  %46 = load %struct.ColorTree*, %struct.ColorTree** %45, align 8, !tbaa !7
  %47 = icmp eq %struct.ColorTree* %46, null
  br i1 %47, label %48, label %56

48:                                               ; preds = %32
  %49 = tail call noalias dereferenceable_or_null(136) i8* @malloc(i64 noundef 136) #25
  %50 = bitcast %struct.ColorTree** %45 to i8**
  store i8* %49, i8** %50, align 8, !tbaa !7
  %51 = icmp eq i8* %49, null
  br i1 %51, label %206, label %52

52:                                               ; preds = %48
  %53 = bitcast i8* %49 to %struct.ColorTree*
  tail call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 1 dereferenceable(128) %49, i8 0, i64 128, i1 false) #25, !tbaa !14, !alias.scope !251
  %54 = getelementptr inbounds %struct.ColorTree, %struct.ColorTree* %53, i64 0, i32 1
  store i32 -1, i32* %54, align 8, !tbaa !249
  %55 = load %struct.ColorTree*, %struct.ColorTree** %45, align 8, !tbaa !7
  br label %56

56:                                               ; preds = %52, %32
  %57 = phi %struct.ColorTree* [ %55, %52 ], [ %46, %32 ]
  %58 = shl nuw nsw i32 %7, 1
  %59 = and i32 %58, 8
  %60 = and i32 %8, 4
  %61 = lshr i32 %9, 1
  %62 = and i32 %61, 2
  %63 = lshr i32 %10, 2
  %64 = and i32 %63, 1
  %65 = or i32 %60, %64
  %66 = or i32 %65, %59
  %67 = or i32 %66, %62
  %68 = zext i32 %67 to i64
  %69 = getelementptr inbounds %struct.ColorTree, %struct.ColorTree* %57, i64 0, i32 0, i64 %68
  %70 = load %struct.ColorTree*, %struct.ColorTree** %69, align 8, !tbaa !7
  %71 = icmp eq %struct.ColorTree* %70, null
  br i1 %71, label %72, label %80

72:                                               ; preds = %56
  %73 = tail call noalias dereferenceable_or_null(136) i8* @malloc(i64 noundef 136) #25
  %74 = bitcast %struct.ColorTree** %69 to i8**
  store i8* %73, i8** %74, align 8, !tbaa !7
  %75 = icmp eq i8* %73, null
  br i1 %75, label %206, label %76

76:                                               ; preds = %72
  %77 = bitcast i8* %73 to %struct.ColorTree*
  tail call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 1 dereferenceable(128) %73, i8 0, i64 128, i1 false) #25, !tbaa !14, !alias.scope !251
  %78 = getelementptr inbounds %struct.ColorTree, %struct.ColorTree* %77, i64 0, i32 1
  store i32 -1, i32* %78, align 8, !tbaa !249
  %79 = load %struct.ColorTree*, %struct.ColorTree** %69, align 8, !tbaa !7
  br label %80

80:                                               ; preds = %76, %56
  %81 = phi %struct.ColorTree* [ %79, %76 ], [ %70, %56 ]
  %82 = and i32 %7, 8
  %83 = lshr i32 %8, 1
  %84 = and i32 %83, 4
  %85 = lshr i32 %9, 2
  %86 = and i32 %85, 2
  %87 = lshr i32 %10, 3
  %88 = and i32 %87, 1
  %89 = or i32 %84, %88
  %90 = or i32 %89, %82
  %91 = or i32 %90, %86
  %92 = zext i32 %91 to i64
  %93 = getelementptr inbounds %struct.ColorTree, %struct.ColorTree* %81, i64 0, i32 0, i64 %92
  %94 = load %struct.ColorTree*, %struct.ColorTree** %93, align 8, !tbaa !7
  %95 = icmp eq %struct.ColorTree* %94, null
  br i1 %95, label %96, label %104

96:                                               ; preds = %80
  %97 = tail call noalias dereferenceable_or_null(136) i8* @malloc(i64 noundef 136) #25
  %98 = bitcast %struct.ColorTree** %93 to i8**
  store i8* %97, i8** %98, align 8, !tbaa !7
  %99 = icmp eq i8* %97, null
  br i1 %99, label %206, label %100

100:                                              ; preds = %96
  %101 = bitcast i8* %97 to %struct.ColorTree*
  tail call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 1 dereferenceable(128) %97, i8 0, i64 128, i1 false) #25, !tbaa !14, !alias.scope !251
  %102 = getelementptr inbounds %struct.ColorTree, %struct.ColorTree* %101, i64 0, i32 1
  store i32 -1, i32* %102, align 8, !tbaa !249
  %103 = load %struct.ColorTree*, %struct.ColorTree** %93, align 8, !tbaa !7
  br label %104

104:                                              ; preds = %100, %80
  %105 = phi %struct.ColorTree* [ %103, %100 ], [ %94, %80 ]
  %106 = lshr i32 %7, 1
  %107 = and i32 %106, 8
  %108 = lshr i32 %8, 2
  %109 = and i32 %108, 4
  %110 = lshr i32 %9, 3
  %111 = and i32 %110, 2
  %112 = lshr i32 %10, 4
  %113 = and i32 %112, 1
  %114 = or i32 %109, %113
  %115 = or i32 %114, %107
  %116 = or i32 %115, %111
  %117 = zext i32 %116 to i64
  %118 = getelementptr inbounds %struct.ColorTree, %struct.ColorTree* %105, i64 0, i32 0, i64 %117
  %119 = load %struct.ColorTree*, %struct.ColorTree** %118, align 8, !tbaa !7
  %120 = icmp eq %struct.ColorTree* %119, null
  br i1 %120, label %121, label %129

121:                                              ; preds = %104
  %122 = tail call noalias dereferenceable_or_null(136) i8* @malloc(i64 noundef 136) #25
  %123 = bitcast %struct.ColorTree** %118 to i8**
  store i8* %122, i8** %123, align 8, !tbaa !7
  %124 = icmp eq i8* %122, null
  br i1 %124, label %206, label %125

125:                                              ; preds = %121
  %126 = bitcast i8* %122 to %struct.ColorTree*
  tail call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 1 dereferenceable(128) %122, i8 0, i64 128, i1 false) #25, !tbaa !14, !alias.scope !251
  %127 = getelementptr inbounds %struct.ColorTree, %struct.ColorTree* %126, i64 0, i32 1
  store i32 -1, i32* %127, align 8, !tbaa !249
  %128 = load %struct.ColorTree*, %struct.ColorTree** %118, align 8, !tbaa !7
  br label %129

129:                                              ; preds = %125, %104
  %130 = phi %struct.ColorTree* [ %128, %125 ], [ %119, %104 ]
  %131 = lshr i32 %7, 2
  %132 = and i32 %131, 8
  %133 = lshr i32 %8, 3
  %134 = and i32 %133, 4
  %135 = lshr i32 %9, 4
  %136 = and i32 %135, 2
  %137 = lshr i32 %10, 5
  %138 = and i32 %137, 1
  %139 = or i32 %134, %138
  %140 = or i32 %139, %132
  %141 = or i32 %140, %136
  %142 = zext i32 %141 to i64
  %143 = getelementptr inbounds %struct.ColorTree, %struct.ColorTree* %130, i64 0, i32 0, i64 %142
  %144 = load %struct.ColorTree*, %struct.ColorTree** %143, align 8, !tbaa !7
  %145 = icmp eq %struct.ColorTree* %144, null
  br i1 %145, label %146, label %154

146:                                              ; preds = %129
  %147 = tail call noalias dereferenceable_or_null(136) i8* @malloc(i64 noundef 136) #25
  %148 = bitcast %struct.ColorTree** %143 to i8**
  store i8* %147, i8** %148, align 8, !tbaa !7
  %149 = icmp eq i8* %147, null
  br i1 %149, label %206, label %150

150:                                              ; preds = %146
  %151 = bitcast i8* %147 to %struct.ColorTree*
  tail call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 1 dereferenceable(128) %147, i8 0, i64 128, i1 false) #25, !tbaa !14, !alias.scope !251
  %152 = getelementptr inbounds %struct.ColorTree, %struct.ColorTree* %151, i64 0, i32 1
  store i32 -1, i32* %152, align 8, !tbaa !249
  %153 = load %struct.ColorTree*, %struct.ColorTree** %143, align 8, !tbaa !7
  br label %154

154:                                              ; preds = %150, %129
  %155 = phi %struct.ColorTree* [ %153, %150 ], [ %144, %129 ]
  %156 = lshr i32 %7, 3
  %157 = and i32 %156, 8
  %158 = lshr i32 %8, 4
  %159 = and i32 %158, 4
  %160 = lshr i32 %9, 5
  %161 = and i32 %160, 2
  %162 = lshr i32 %10, 6
  %163 = and i32 %162, 1
  %164 = or i32 %159, %163
  %165 = or i32 %164, %157
  %166 = or i32 %165, %161
  %167 = zext i32 %166 to i64
  %168 = getelementptr inbounds %struct.ColorTree, %struct.ColorTree* %155, i64 0, i32 0, i64 %167
  %169 = load %struct.ColorTree*, %struct.ColorTree** %168, align 8, !tbaa !7
  %170 = icmp eq %struct.ColorTree* %169, null
  br i1 %170, label %171, label %179

171:                                              ; preds = %154
  %172 = tail call noalias dereferenceable_or_null(136) i8* @malloc(i64 noundef 136) #25
  %173 = bitcast %struct.ColorTree** %168 to i8**
  store i8* %172, i8** %173, align 8, !tbaa !7
  %174 = icmp eq i8* %172, null
  br i1 %174, label %206, label %175

175:                                              ; preds = %171
  %176 = bitcast i8* %172 to %struct.ColorTree*
  tail call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 1 dereferenceable(128) %172, i8 0, i64 128, i1 false) #25, !tbaa !14, !alias.scope !251
  %177 = getelementptr inbounds %struct.ColorTree, %struct.ColorTree* %176, i64 0, i32 1
  store i32 -1, i32* %177, align 8, !tbaa !249
  %178 = load %struct.ColorTree*, %struct.ColorTree** %168, align 8, !tbaa !7
  br label %179

179:                                              ; preds = %175, %154
  %180 = phi %struct.ColorTree* [ %178, %175 ], [ %169, %154 ]
  %181 = lshr i32 %7, 4
  %182 = and i32 %181, 8
  %183 = lshr i32 %8, 5
  %184 = and i32 %183, 4
  %185 = lshr i32 %9, 6
  %186 = and i32 %185, 2
  %187 = lshr i32 %10, 7
  %188 = or i32 %184, %187
  %189 = or i32 %188, %182
  %190 = or i32 %189, %186
  %191 = zext i32 %190 to i64
  %192 = getelementptr inbounds %struct.ColorTree, %struct.ColorTree* %180, i64 0, i32 0, i64 %191
  %193 = load %struct.ColorTree*, %struct.ColorTree** %192, align 8, !tbaa !7
  %194 = icmp eq %struct.ColorTree* %193, null
  br i1 %194, label %195, label %203

195:                                              ; preds = %179
  %196 = tail call noalias dereferenceable_or_null(136) i8* @malloc(i64 noundef 136) #25
  %197 = bitcast %struct.ColorTree** %192 to i8**
  store i8* %196, i8** %197, align 8, !tbaa !7
  %198 = icmp eq i8* %196, null
  br i1 %198, label %206, label %199

199:                                              ; preds = %195
  %200 = bitcast i8* %196 to %struct.ColorTree*
  tail call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 1 dereferenceable(128) %196, i8 0, i64 128, i1 false) #25, !tbaa !14, !alias.scope !251
  %201 = getelementptr inbounds %struct.ColorTree, %struct.ColorTree* %200, i64 0, i32 1
  store i32 -1, i32* %201, align 8, !tbaa !249
  %202 = load %struct.ColorTree*, %struct.ColorTree** %192, align 8, !tbaa !7
  br label %203

203:                                              ; preds = %199, %179
  %204 = phi %struct.ColorTree* [ %202, %199 ], [ %193, %179 ]
  %205 = getelementptr inbounds %struct.ColorTree, %struct.ColorTree* %204, i64 0, i32 1
  store i32 %5, i32* %205, align 8, !tbaa !249
  br label %206

206:                                              ; preds = %25, %48, %72, %96, %121, %146, %171, %195, %203
  %207 = phi i32 [ 0, %203 ], [ 83, %195 ], [ 83, %171 ], [ 83, %146 ], [ 83, %121 ], [ 83, %96 ], [ 83, %72 ], [ 83, %48 ], [ 83, %25 ]
  ret i32 %207
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind uwtable willreturn
define internal fastcc void @_ZL19getPixelColorRGBA16PtS_S_S_PKhmPK16LodePNGColorMode(i16* nocapture noundef writeonly %0, i16* nocapture noundef writeonly %1, i16* nocapture noundef writeonly %2, i16* nocapture noundef writeonly %3, i8* nocapture noundef readonly %4, i64 noundef %5, %struct.LodePNGColorMode* nocapture noundef readonly %6) unnamed_addr #21 {
  %8 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %6, i64 0, i32 0
  %9 = load i32, i32* %8, align 8, !tbaa !147
  switch i32 %9, label %164 [
    i32 0, label %10
    i32 2, label %35
    i32 4, label %100
    i32 6, label %121
  ]

10:                                               ; preds = %7
  %11 = shl i64 %5, 1
  %12 = getelementptr inbounds i8, i8* %4, i64 %11
  %13 = load i8, i8* %12, align 1, !tbaa !14
  %14 = zext i8 %13 to i16
  %15 = shl nuw i16 %14, 8
  %16 = or i64 %11, 1
  %17 = getelementptr inbounds i8, i8* %4, i64 %16
  %18 = load i8, i8* %17, align 1, !tbaa !14
  %19 = zext i8 %18 to i16
  %20 = or i16 %15, %19
  store i16 %20, i16* %2, align 2, !tbaa !66
  store i16 %20, i16* %1, align 2, !tbaa !66
  store i16 %20, i16* %0, align 2, !tbaa !66
  %21 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %6, i64 0, i32 4
  %22 = load i32, i32* %21, align 8, !tbaa !161
  %23 = icmp eq i32 %22, 0
  br i1 %23, label %34, label %24

24:                                               ; preds = %10
  %25 = load i8, i8* %12, align 1, !tbaa !14
  %26 = zext i8 %25 to i32
  %27 = shl nuw nsw i32 %26, 8
  %28 = load i8, i8* %17, align 1, !tbaa !14
  %29 = zext i8 %28 to i32
  %30 = or i32 %27, %29
  %31 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %6, i64 0, i32 5
  %32 = load i32, i32* %31, align 4, !tbaa !235
  %33 = icmp eq i32 %30, %32
  br i1 %33, label %162, label %34

34:                                               ; preds = %24, %10
  br label %162

35:                                               ; preds = %7
  %36 = mul i64 %5, 6
  %37 = getelementptr inbounds i8, i8* %4, i64 %36
  %38 = load i8, i8* %37, align 1, !tbaa !14
  %39 = zext i8 %38 to i16
  %40 = shl nuw i16 %39, 8
  %41 = or i64 %36, 1
  %42 = getelementptr inbounds i8, i8* %4, i64 %41
  %43 = load i8, i8* %42, align 1, !tbaa !14
  %44 = zext i8 %43 to i16
  %45 = or i16 %40, %44
  store i16 %45, i16* %0, align 2, !tbaa !66
  %46 = add i64 %36, 2
  %47 = getelementptr inbounds i8, i8* %4, i64 %46
  %48 = load i8, i8* %47, align 1, !tbaa !14
  %49 = zext i8 %48 to i16
  %50 = shl nuw i16 %49, 8
  %51 = add i64 %36, 3
  %52 = getelementptr inbounds i8, i8* %4, i64 %51
  %53 = load i8, i8* %52, align 1, !tbaa !14
  %54 = zext i8 %53 to i16
  %55 = or i16 %50, %54
  store i16 %55, i16* %1, align 2, !tbaa !66
  %56 = add i64 %36, 4
  %57 = getelementptr inbounds i8, i8* %4, i64 %56
  %58 = load i8, i8* %57, align 1, !tbaa !14
  %59 = zext i8 %58 to i16
  %60 = shl nuw i16 %59, 8
  %61 = add i64 %36, 5
  %62 = getelementptr inbounds i8, i8* %4, i64 %61
  %63 = load i8, i8* %62, align 1, !tbaa !14
  %64 = zext i8 %63 to i16
  %65 = or i16 %60, %64
  store i16 %65, i16* %2, align 2, !tbaa !66
  %66 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %6, i64 0, i32 4
  %67 = load i32, i32* %66, align 8, !tbaa !161
  %68 = icmp eq i32 %67, 0
  br i1 %68, label %99, label %69

69:                                               ; preds = %35
  %70 = load i8, i8* %37, align 1, !tbaa !14
  %71 = zext i8 %70 to i32
  %72 = shl nuw nsw i32 %71, 8
  %73 = load i8, i8* %42, align 1, !tbaa !14
  %74 = zext i8 %73 to i32
  %75 = or i32 %72, %74
  %76 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %6, i64 0, i32 5
  %77 = load i32, i32* %76, align 4, !tbaa !235
  %78 = icmp eq i32 %75, %77
  br i1 %78, label %79, label %99

79:                                               ; preds = %69
  %80 = load i8, i8* %47, align 1, !tbaa !14
  %81 = zext i8 %80 to i32
  %82 = shl nuw nsw i32 %81, 8
  %83 = load i8, i8* %52, align 1, !tbaa !14
  %84 = zext i8 %83 to i32
  %85 = or i32 %82, %84
  %86 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %6, i64 0, i32 6
  %87 = load i32, i32* %86, align 8, !tbaa !236
  %88 = icmp eq i32 %85, %87
  br i1 %88, label %89, label %99

89:                                               ; preds = %79
  %90 = load i8, i8* %57, align 1, !tbaa !14
  %91 = zext i8 %90 to i32
  %92 = shl nuw nsw i32 %91, 8
  %93 = load i8, i8* %62, align 1, !tbaa !14
  %94 = zext i8 %93 to i32
  %95 = or i32 %92, %94
  %96 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %6, i64 0, i32 7
  %97 = load i32, i32* %96, align 4, !tbaa !237
  %98 = icmp eq i32 %95, %97
  br i1 %98, label %162, label %99

99:                                               ; preds = %89, %79, %69, %35
  br label %162

100:                                              ; preds = %7
  %101 = shl i64 %5, 2
  %102 = getelementptr inbounds i8, i8* %4, i64 %101
  %103 = load i8, i8* %102, align 1, !tbaa !14
  %104 = zext i8 %103 to i16
  %105 = shl nuw i16 %104, 8
  %106 = or i64 %101, 1
  %107 = getelementptr inbounds i8, i8* %4, i64 %106
  %108 = load i8, i8* %107, align 1, !tbaa !14
  %109 = zext i8 %108 to i16
  %110 = or i16 %105, %109
  store i16 %110, i16* %2, align 2, !tbaa !66
  store i16 %110, i16* %1, align 2, !tbaa !66
  store i16 %110, i16* %0, align 2, !tbaa !66
  %111 = or i64 %101, 2
  %112 = getelementptr inbounds i8, i8* %4, i64 %111
  %113 = load i8, i8* %112, align 1, !tbaa !14
  %114 = zext i8 %113 to i16
  %115 = shl nuw i16 %114, 8
  %116 = or i64 %101, 3
  %117 = getelementptr inbounds i8, i8* %4, i64 %116
  %118 = load i8, i8* %117, align 1, !tbaa !14
  %119 = zext i8 %118 to i16
  %120 = or i16 %115, %119
  br label %162

121:                                              ; preds = %7
  %122 = shl i64 %5, 3
  %123 = getelementptr inbounds i8, i8* %4, i64 %122
  %124 = load i8, i8* %123, align 1, !tbaa !14
  %125 = zext i8 %124 to i16
  %126 = shl nuw i16 %125, 8
  %127 = or i64 %122, 1
  %128 = getelementptr inbounds i8, i8* %4, i64 %127
  %129 = load i8, i8* %128, align 1, !tbaa !14
  %130 = zext i8 %129 to i16
  %131 = or i16 %126, %130
  store i16 %131, i16* %0, align 2, !tbaa !66
  %132 = or i64 %122, 2
  %133 = getelementptr inbounds i8, i8* %4, i64 %132
  %134 = load i8, i8* %133, align 1, !tbaa !14
  %135 = zext i8 %134 to i16
  %136 = shl nuw i16 %135, 8
  %137 = or i64 %122, 3
  %138 = getelementptr inbounds i8, i8* %4, i64 %137
  %139 = load i8, i8* %138, align 1, !tbaa !14
  %140 = zext i8 %139 to i16
  %141 = or i16 %136, %140
  store i16 %141, i16* %1, align 2, !tbaa !66
  %142 = or i64 %122, 4
  %143 = getelementptr inbounds i8, i8* %4, i64 %142
  %144 = load i8, i8* %143, align 1, !tbaa !14
  %145 = zext i8 %144 to i16
  %146 = shl nuw i16 %145, 8
  %147 = or i64 %122, 5
  %148 = getelementptr inbounds i8, i8* %4, i64 %147
  %149 = load i8, i8* %148, align 1, !tbaa !14
  %150 = zext i8 %149 to i16
  %151 = or i16 %146, %150
  store i16 %151, i16* %2, align 2, !tbaa !66
  %152 = or i64 %122, 6
  %153 = getelementptr inbounds i8, i8* %4, i64 %152
  %154 = load i8, i8* %153, align 1, !tbaa !14
  %155 = zext i8 %154 to i16
  %156 = shl nuw i16 %155, 8
  %157 = or i64 %122, 7
  %158 = getelementptr inbounds i8, i8* %4, i64 %157
  %159 = load i8, i8* %158, align 1, !tbaa !14
  %160 = zext i8 %159 to i16
  %161 = or i16 %156, %160
  br label %162

162:                                              ; preds = %89, %24, %34, %100, %121, %99
  %163 = phi i16 [ -1, %99 ], [ %161, %121 ], [ %120, %100 ], [ -1, %34 ], [ 0, %24 ], [ 0, %89 ]
  store i16 %163, i16* %3, align 2, !tbaa !66
  br label %164

164:                                              ; preds = %162, %7
  ret void
}

; Function Attrs: nofree nosync nounwind uwtable
define internal fastcc void @_ZL19getPixelColorsRGBA8PhmPKhPK16LodePNGColorMode(i8* noalias nocapture noundef %0, i64 noundef %1, i8* noalias noundef readonly %2, %struct.LodePNGColorMode* noundef readonly %3) unnamed_addr #8 {
  %5 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %3, i64 0, i32 0
  %6 = load i32, i32* %5, align 8, !tbaa !147
  switch i32 %6, label %775 [
    i32 0, label %7
    i32 2, label %224
    i32 3, label %359
    i32 4, label %566
    i32 6, label %639
  ]

7:                                                ; preds = %4
  %8 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %3, i64 0, i32 1
  %9 = load i32, i32* %8, align 4, !tbaa !150
  switch i32 %9, label %138 [
    i32 8, label %17
    i32 16, label %10
  ]

10:                                               ; preds = %7
  %11 = icmp eq i64 %1, 0
  br i1 %11, label %775, label %12

12:                                               ; preds = %10
  %13 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %3, i64 0, i32 4
  %14 = load i32, i32* %13, align 8, !tbaa !161
  %15 = icmp eq i32 %14, 0
  %16 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %3, i64 0, i32 5
  br label %112

17:                                               ; preds = %7
  %18 = icmp eq i64 %1, 0
  br i1 %18, label %775, label %19

19:                                               ; preds = %17
  %20 = add i64 %1, -1
  %21 = and i64 %1, 3
  %22 = icmp ult i64 %20, 3
  br i1 %22, label %59, label %23

23:                                               ; preds = %19
  %24 = and i64 %1, -4
  br label %25

25:                                               ; preds = %25, %23
  %26 = phi i8* [ %0, %23 ], [ %56, %25 ]
  %27 = phi i64 [ 0, %23 ], [ %55, %25 ]
  %28 = phi i64 [ 0, %23 ], [ %57, %25 ]
  %29 = getelementptr inbounds i8, i8* %2, i64 %27
  %30 = load i8, i8* %29, align 1, !tbaa !14
  %31 = getelementptr inbounds i8, i8* %26, i64 2
  store i8 %30, i8* %31, align 1, !tbaa !14
  %32 = getelementptr inbounds i8, i8* %26, i64 1
  store i8 %30, i8* %32, align 1, !tbaa !14
  store i8 %30, i8* %26, align 1, !tbaa !14
  %33 = getelementptr inbounds i8, i8* %26, i64 3
  store i8 -1, i8* %33, align 1, !tbaa !14
  %34 = or i64 %27, 1
  %35 = getelementptr inbounds i8, i8* %26, i64 4
  %36 = getelementptr inbounds i8, i8* %2, i64 %34
  %37 = load i8, i8* %36, align 1, !tbaa !14
  %38 = getelementptr inbounds i8, i8* %26, i64 6
  store i8 %37, i8* %38, align 1, !tbaa !14
  %39 = getelementptr inbounds i8, i8* %26, i64 5
  store i8 %37, i8* %39, align 1, !tbaa !14
  store i8 %37, i8* %35, align 1, !tbaa !14
  %40 = getelementptr inbounds i8, i8* %26, i64 7
  store i8 -1, i8* %40, align 1, !tbaa !14
  %41 = or i64 %27, 2
  %42 = getelementptr inbounds i8, i8* %26, i64 8
  %43 = getelementptr inbounds i8, i8* %2, i64 %41
  %44 = load i8, i8* %43, align 1, !tbaa !14
  %45 = getelementptr inbounds i8, i8* %26, i64 10
  store i8 %44, i8* %45, align 1, !tbaa !14
  %46 = getelementptr inbounds i8, i8* %26, i64 9
  store i8 %44, i8* %46, align 1, !tbaa !14
  store i8 %44, i8* %42, align 1, !tbaa !14
  %47 = getelementptr inbounds i8, i8* %26, i64 11
  store i8 -1, i8* %47, align 1, !tbaa !14
  %48 = or i64 %27, 3
  %49 = getelementptr inbounds i8, i8* %26, i64 12
  %50 = getelementptr inbounds i8, i8* %2, i64 %48
  %51 = load i8, i8* %50, align 1, !tbaa !14
  %52 = getelementptr inbounds i8, i8* %26, i64 14
  store i8 %51, i8* %52, align 1, !tbaa !14
  %53 = getelementptr inbounds i8, i8* %26, i64 13
  store i8 %51, i8* %53, align 1, !tbaa !14
  store i8 %51, i8* %49, align 1, !tbaa !14
  %54 = getelementptr inbounds i8, i8* %26, i64 15
  store i8 -1, i8* %54, align 1, !tbaa !14
  %55 = add nuw i64 %27, 4
  %56 = getelementptr inbounds i8, i8* %26, i64 16
  %57 = add i64 %28, 4
  %58 = icmp eq i64 %57, %24
  br i1 %58, label %59, label %25

59:                                               ; preds = %25, %19
  %60 = phi i8* [ undef, %19 ], [ %56, %25 ]
  %61 = phi i8* [ %0, %19 ], [ %56, %25 ]
  %62 = phi i64 [ 0, %19 ], [ %55, %25 ]
  %63 = icmp eq i64 %21, 0
  br i1 %63, label %77, label %64

64:                                               ; preds = %59, %64
  %65 = phi i8* [ %74, %64 ], [ %61, %59 ]
  %66 = phi i64 [ %73, %64 ], [ %62, %59 ]
  %67 = phi i64 [ %75, %64 ], [ 0, %59 ]
  %68 = getelementptr inbounds i8, i8* %2, i64 %66
  %69 = load i8, i8* %68, align 1, !tbaa !14
  %70 = getelementptr inbounds i8, i8* %65, i64 2
  store i8 %69, i8* %70, align 1, !tbaa !14
  %71 = getelementptr inbounds i8, i8* %65, i64 1
  store i8 %69, i8* %71, align 1, !tbaa !14
  store i8 %69, i8* %65, align 1, !tbaa !14
  %72 = getelementptr inbounds i8, i8* %65, i64 3
  store i8 -1, i8* %72, align 1, !tbaa !14
  %73 = add nuw i64 %66, 1
  %74 = getelementptr inbounds i8, i8* %65, i64 4
  %75 = add i64 %67, 1
  %76 = icmp eq i64 %75, %21
  br i1 %76, label %77, label %64, !llvm.loop !254

77:                                               ; preds = %64, %59
  %78 = phi i8* [ %60, %59 ], [ %74, %64 ]
  %79 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %3, i64 0, i32 4
  %80 = load i32, i32* %79, align 8, !tbaa !161
  %81 = icmp eq i32 %80, 0
  %82 = or i1 %81, %18
  br i1 %82, label %775, label %83

83:                                               ; preds = %77
  %84 = mul i64 %1, -4
  %85 = getelementptr inbounds i8, i8* %78, i64 %84
  %86 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %3, i64 0, i32 5
  %87 = and i64 %1, 1
  %88 = icmp eq i64 %20, 0
  br i1 %88, label %694, label %89

89:                                               ; preds = %83
  %90 = and i64 %1, -2
  br label %91

91:                                               ; preds = %108, %89
  %92 = phi i8* [ %85, %89 ], [ %109, %108 ]
  %93 = phi i64 [ 0, %89 ], [ %110, %108 ]
  %94 = load i8, i8* %92, align 1, !tbaa !14
  %95 = zext i8 %94 to i32
  %96 = load i32, i32* %86, align 4, !tbaa !235
  %97 = icmp eq i32 %96, %95
  br i1 %97, label %98, label %100

98:                                               ; preds = %91
  %99 = getelementptr inbounds i8, i8* %92, i64 3
  store i8 0, i8* %99, align 1, !tbaa !14
  br label %100

100:                                              ; preds = %91, %98
  %101 = getelementptr inbounds i8, i8* %92, i64 4
  %102 = load i8, i8* %101, align 1, !tbaa !14
  %103 = zext i8 %102 to i32
  %104 = load i32, i32* %86, align 4, !tbaa !235
  %105 = icmp eq i32 %104, %103
  br i1 %105, label %106, label %108

106:                                              ; preds = %100
  %107 = getelementptr inbounds i8, i8* %92, i64 7
  store i8 0, i8* %107, align 1, !tbaa !14
  br label %108

108:                                              ; preds = %106, %100
  %109 = getelementptr inbounds i8, i8* %92, i64 8
  %110 = add i64 %93, 2
  %111 = icmp eq i64 %110, %90
  br i1 %111, label %694, label %91

112:                                              ; preds = %12, %130
  %113 = phi i8* [ %0, %12 ], [ %136, %130 ]
  %114 = phi i64 [ 0, %12 ], [ %135, %130 ]
  %115 = shl i64 %114, 1
  %116 = getelementptr inbounds i8, i8* %2, i64 %115
  %117 = load i8, i8* %116, align 1, !tbaa !14
  %118 = getelementptr inbounds i8, i8* %113, i64 2
  store i8 %117, i8* %118, align 1, !tbaa !14
  %119 = getelementptr inbounds i8, i8* %113, i64 1
  store i8 %117, i8* %119, align 1, !tbaa !14
  store i8 %117, i8* %113, align 1, !tbaa !14
  br i1 %15, label %130, label %120

120:                                              ; preds = %112
  %121 = zext i8 %117 to i32
  %122 = shl nuw nsw i32 %121, 8
  %123 = or i64 %115, 1
  %124 = getelementptr inbounds i8, i8* %2, i64 %123
  %125 = load i8, i8* %124, align 1, !tbaa !14
  %126 = zext i8 %125 to i32
  %127 = or i32 %122, %126
  %128 = load i32, i32* %16, align 4, !tbaa !235
  %129 = icmp eq i32 %127, %128
  br label %130

130:                                              ; preds = %120, %112
  %131 = phi i1 [ false, %112 ], [ %129, %120 ]
  %132 = xor i1 %131, true
  %133 = sext i1 %132 to i8
  %134 = getelementptr inbounds i8, i8* %113, i64 3
  store i8 %133, i8* %134, align 1, !tbaa !14
  %135 = add nuw i64 %114, 1
  %136 = getelementptr inbounds i8, i8* %113, i64 4
  %137 = icmp eq i64 %135, %1
  br i1 %137, label %775, label %112

138:                                              ; preds = %7
  %139 = shl nsw i32 -1, %9
  %140 = xor i32 %139, -1
  %141 = icmp eq i64 %1, 0
  br i1 %141, label %775, label %142

142:                                              ; preds = %138
  %143 = zext i32 %9 to i64
  %144 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %3, i64 0, i32 4
  %145 = load i32, i32* %144, align 8, !tbaa !161
  %146 = icmp eq i32 %145, 0
  %147 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %3, i64 0, i32 5
  %148 = and i64 %143, 1
  %149 = icmp eq i32 %9, 1
  %150 = and i64 %143, 4294967294
  %151 = icmp eq i64 %148, 0
  br label %152

152:                                              ; preds = %142, %216
  %153 = phi i8* [ %0, %142 ], [ %222, %216 ]
  %154 = phi i64 [ 0, %142 ], [ %221, %216 ]
  %155 = phi i64 [ 0, %142 ], [ %206, %216 ]
  switch i32 %9, label %156 [
    i32 0, label %205
    i32 1, label %186
  ]

156:                                              ; preds = %152, %156
  %157 = phi i64 [ %181, %156 ], [ %155, %152 ]
  %158 = phi i32 [ %183, %156 ], [ 0, %152 ]
  %159 = phi i64 [ %184, %156 ], [ 0, %152 ]
  %160 = lshr i64 %157, 3
  %161 = getelementptr inbounds i8, i8* %2, i64 %160
  %162 = load i8, i8* %161, align 1, !tbaa !14
  %163 = trunc i64 %157 to i8
  %164 = and i8 %163, 7
  %165 = xor i8 %164, 7
  %166 = lshr i8 %162, %165
  %167 = add i64 %157, 1
  %168 = shl i32 %158, 2
  %169 = shl i8 %166, 1
  %170 = and i8 %169, 2
  %171 = zext i8 %170 to i32
  %172 = or i32 %168, %171
  %173 = lshr i64 %167, 3
  %174 = getelementptr inbounds i8, i8* %2, i64 %173
  %175 = load i8, i8* %174, align 1, !tbaa !14
  %176 = trunc i64 %167 to i8
  %177 = and i8 %176, 7
  %178 = xor i8 %177, 7
  %179 = lshr i8 %175, %178
  %180 = and i8 %179, 1
  %181 = add i64 %157, 2
  %182 = zext i8 %180 to i32
  %183 = or i32 %172, %182
  %184 = add i64 %159, 2
  %185 = icmp eq i64 %184, %150
  br i1 %185, label %186, label %156

186:                                              ; preds = %156, %152
  %187 = phi i32 [ undef, %152 ], [ %183, %156 ]
  %188 = phi i64 [ %155, %152 ], [ %181, %156 ]
  %189 = phi i32 [ 0, %152 ], [ %183, %156 ]
  br i1 %151, label %202, label %190

190:                                              ; preds = %186
  %191 = shl i32 %189, 1
  %192 = lshr i64 %188, 3
  %193 = getelementptr inbounds i8, i8* %2, i64 %192
  %194 = load i8, i8* %193, align 1, !tbaa !14
  %195 = trunc i64 %188 to i8
  %196 = and i8 %195, 7
  %197 = xor i8 %196, 7
  %198 = lshr i8 %194, %197
  %199 = and i8 %198, 1
  %200 = zext i8 %199 to i32
  %201 = or i32 %191, %200
  br label %202

202:                                              ; preds = %186, %190
  %203 = phi i32 [ %187, %186 ], [ %201, %190 ]
  %204 = add i64 %155, %143
  br label %205

205:                                              ; preds = %152, %202
  %206 = phi i64 [ %155, %152 ], [ %204, %202 ]
  %207 = phi i32 [ 0, %152 ], [ %203, %202 ]
  %208 = mul i32 %207, 255
  %209 = udiv i32 %208, %140
  %210 = trunc i32 %209 to i8
  %211 = getelementptr inbounds i8, i8* %153, i64 2
  store i8 %210, i8* %211, align 1, !tbaa !14
  %212 = getelementptr inbounds i8, i8* %153, i64 1
  store i8 %210, i8* %212, align 1, !tbaa !14
  store i8 %210, i8* %153, align 1, !tbaa !14
  br i1 %146, label %216, label %213

213:                                              ; preds = %205
  %214 = load i32, i32* %147, align 4, !tbaa !235
  %215 = icmp eq i32 %207, %214
  br label %216

216:                                              ; preds = %213, %205
  %217 = phi i1 [ false, %205 ], [ %215, %213 ]
  %218 = xor i1 %217, true
  %219 = sext i1 %218 to i8
  %220 = getelementptr inbounds i8, i8* %153, i64 3
  store i8 %219, i8* %220, align 1, !tbaa !14
  %221 = add nuw i64 %154, 1
  %222 = getelementptr inbounds i8, i8* %153, i64 4
  %223 = icmp eq i64 %221, %1
  br i1 %223, label %775, label %152

224:                                              ; preds = %4
  %225 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %3, i64 0, i32 1
  %226 = load i32, i32* %225, align 4, !tbaa !150
  %227 = icmp eq i32 %226, 8
  %228 = icmp eq i64 %1, 0
  br i1 %227, label %237, label %229

229:                                              ; preds = %224
  br i1 %228, label %775, label %230

230:                                              ; preds = %229
  %231 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %3, i64 0, i32 4
  %232 = load i32, i32* %231, align 8, !tbaa !161
  %233 = icmp eq i32 %232, 0
  %234 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %3, i64 0, i32 5
  %235 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %3, i64 0, i32 6
  %236 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %3, i64 0, i32 7
  br label %307

237:                                              ; preds = %224
  br i1 %228, label %775, label %238

238:                                              ; preds = %237
  %239 = and i64 %1, 1
  %240 = icmp eq i64 %1, 1
  br i1 %240, label %261, label %241

241:                                              ; preds = %238
  %242 = and i64 %1, -2
  br label %243

243:                                              ; preds = %243, %241
  %244 = phi i8* [ %0, %241 ], [ %256, %243 ]
  %245 = phi i64 [ 0, %241 ], [ %255, %243 ]
  %246 = phi i64 [ 0, %241 ], [ %257, %243 ]
  %247 = mul i64 %245, 3
  %248 = getelementptr inbounds i8, i8* %2, i64 %247
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef nonnull align 1 dereferenceable(3) %244, i8* noundef nonnull align 1 dereferenceable(3) %248, i64 3, i1 false) #25, !tbaa !14, !alias.scope !255
  %249 = getelementptr inbounds i8, i8* %244, i64 3
  store i8 -1, i8* %249, align 1, !tbaa !14
  %250 = or i64 %245, 1
  %251 = getelementptr inbounds i8, i8* %244, i64 4
  %252 = mul i64 %250, 3
  %253 = getelementptr inbounds i8, i8* %2, i64 %252
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef nonnull align 1 dereferenceable(3) %251, i8* noundef nonnull align 1 dereferenceable(3) %253, i64 3, i1 false) #25, !tbaa !14, !alias.scope !255
  %254 = getelementptr inbounds i8, i8* %244, i64 7
  store i8 -1, i8* %254, align 1, !tbaa !14
  %255 = add nuw i64 %245, 2
  %256 = getelementptr inbounds i8, i8* %244, i64 8
  %257 = add i64 %246, 2
  %258 = icmp eq i64 %257, %242
  br i1 %258, label %259, label %243

259:                                              ; preds = %243
  %260 = mul i64 %255, 3
  br label %261

261:                                              ; preds = %259, %238
  %262 = phi i8* [ undef, %238 ], [ %256, %259 ]
  %263 = phi i8* [ %0, %238 ], [ %256, %259 ]
  %264 = phi i64 [ 0, %238 ], [ %260, %259 ]
  %265 = icmp eq i64 %239, 0
  br i1 %265, label %270, label %266

266:                                              ; preds = %261
  %267 = getelementptr inbounds i8, i8* %2, i64 %264
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef nonnull align 1 dereferenceable(3) %263, i8* noundef nonnull align 1 dereferenceable(3) %267, i64 3, i1 false) #25, !tbaa !14, !alias.scope !255
  %268 = getelementptr inbounds i8, i8* %263, i64 3
  store i8 -1, i8* %268, align 1, !tbaa !14
  %269 = getelementptr inbounds i8, i8* %263, i64 4
  br label %270

270:                                              ; preds = %261, %266
  %271 = phi i8* [ %262, %261 ], [ %269, %266 ]
  %272 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %3, i64 0, i32 4
  %273 = load i32, i32* %272, align 8, !tbaa !161
  %274 = icmp eq i32 %273, 0
  %275 = or i1 %274, %228
  br i1 %275, label %775, label %276

276:                                              ; preds = %270
  %277 = mul i64 %1, -4
  %278 = getelementptr inbounds i8, i8* %271, i64 %277
  %279 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %3, i64 0, i32 5
  %280 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %3, i64 0, i32 6
  %281 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %3, i64 0, i32 7
  br label %282

282:                                              ; preds = %276, %303
  %283 = phi i8* [ %278, %276 ], [ %305, %303 ]
  %284 = phi i64 [ 0, %276 ], [ %304, %303 ]
  %285 = load i8, i8* %283, align 1, !tbaa !14
  %286 = zext i8 %285 to i32
  %287 = load i32, i32* %279, align 4, !tbaa !235
  %288 = icmp eq i32 %287, %286
  br i1 %288, label %289, label %303

289:                                              ; preds = %282
  %290 = getelementptr inbounds i8, i8* %283, i64 1
  %291 = load i8, i8* %290, align 1, !tbaa !14
  %292 = zext i8 %291 to i32
  %293 = load i32, i32* %280, align 8, !tbaa !236
  %294 = icmp eq i32 %293, %292
  br i1 %294, label %295, label %303

295:                                              ; preds = %289
  %296 = getelementptr inbounds i8, i8* %283, i64 2
  %297 = load i8, i8* %296, align 1, !tbaa !14
  %298 = zext i8 %297 to i32
  %299 = load i32, i32* %281, align 4, !tbaa !237
  %300 = icmp eq i32 %299, %298
  br i1 %300, label %301, label %303

301:                                              ; preds = %295
  %302 = getelementptr inbounds i8, i8* %283, i64 3
  store i8 0, i8* %302, align 1, !tbaa !14
  br label %303

303:                                              ; preds = %282, %289, %295, %301
  %304 = add nuw i64 %284, 1
  %305 = getelementptr inbounds i8, i8* %283, i64 4
  %306 = icmp eq i64 %304, %1
  br i1 %306, label %775, label %282

307:                                              ; preds = %230, %351
  %308 = phi i8* [ %0, %230 ], [ %357, %351 ]
  %309 = phi i64 [ 0, %230 ], [ %356, %351 ]
  %310 = mul i64 %309, 6
  %311 = getelementptr inbounds i8, i8* %2, i64 %310
  %312 = load i8, i8* %311, align 1, !tbaa !14
  store i8 %312, i8* %308, align 1, !tbaa !14
  %313 = add i64 %310, 2
  %314 = getelementptr inbounds i8, i8* %2, i64 %313
  %315 = load i8, i8* %314, align 1, !tbaa !14
  %316 = getelementptr inbounds i8, i8* %308, i64 1
  store i8 %315, i8* %316, align 1, !tbaa !14
  %317 = add i64 %310, 4
  %318 = getelementptr inbounds i8, i8* %2, i64 %317
  %319 = load i8, i8* %318, align 1, !tbaa !14
  %320 = getelementptr inbounds i8, i8* %308, i64 2
  store i8 %319, i8* %320, align 1, !tbaa !14
  br i1 %233, label %351, label %321

321:                                              ; preds = %307
  %322 = zext i8 %312 to i32
  %323 = shl nuw nsw i32 %322, 8
  %324 = or i64 %310, 1
  %325 = getelementptr inbounds i8, i8* %2, i64 %324
  %326 = load i8, i8* %325, align 1, !tbaa !14
  %327 = zext i8 %326 to i32
  %328 = or i32 %323, %327
  %329 = load i32, i32* %234, align 4, !tbaa !235
  %330 = icmp eq i32 %328, %329
  br i1 %330, label %331, label %351

331:                                              ; preds = %321
  %332 = zext i8 %315 to i32
  %333 = shl nuw nsw i32 %332, 8
  %334 = add i64 %310, 3
  %335 = getelementptr inbounds i8, i8* %2, i64 %334
  %336 = load i8, i8* %335, align 1, !tbaa !14
  %337 = zext i8 %336 to i32
  %338 = or i32 %333, %337
  %339 = load i32, i32* %235, align 8, !tbaa !236
  %340 = icmp eq i32 %338, %339
  br i1 %340, label %341, label %351

341:                                              ; preds = %331
  %342 = zext i8 %319 to i32
  %343 = shl nuw nsw i32 %342, 8
  %344 = add i64 %310, 5
  %345 = getelementptr inbounds i8, i8* %2, i64 %344
  %346 = load i8, i8* %345, align 1, !tbaa !14
  %347 = zext i8 %346 to i32
  %348 = or i32 %343, %347
  %349 = load i32, i32* %236, align 4, !tbaa !237
  %350 = icmp eq i32 %348, %349
  br label %351

351:                                              ; preds = %341, %331, %321, %307
  %352 = phi i1 [ false, %331 ], [ false, %321 ], [ false, %307 ], [ %350, %341 ]
  %353 = xor i1 %352, true
  %354 = sext i1 %353 to i8
  %355 = getelementptr inbounds i8, i8* %308, i64 3
  store i8 %354, i8* %355, align 1, !tbaa !14
  %356 = add nuw i64 %309, 1
  %357 = getelementptr inbounds i8, i8* %308, i64 4
  %358 = icmp eq i64 %356, %1
  br i1 %358, label %775, label %307

359:                                              ; preds = %4
  %360 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %3, i64 0, i32 1
  %361 = load i32, i32* %360, align 4, !tbaa !150
  %362 = icmp eq i32 %361, 8
  %363 = icmp eq i64 %1, 0
  br i1 %362, label %449, label %364

364:                                              ; preds = %359
  br i1 %363, label %775, label %365

365:                                              ; preds = %364
  %366 = zext i32 %361 to i64
  %367 = icmp eq i32 %361, 0
  %368 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %3, i64 0, i32 2
  %369 = load i8*, i8** %368, align 8, !tbaa !151
  br i1 %367, label %375, label %370

370:                                              ; preds = %365
  %371 = and i64 %366, 1
  %372 = icmp eq i32 %361, 1
  %373 = and i64 %366, 4294967294
  %374 = icmp eq i64 %371, 0
  br label %504

375:                                              ; preds = %365
  %376 = bitcast i8* %369 to i32*
  %377 = load i32, i32* %376, align 1, !tbaa !14
  %378 = icmp ult i64 %1, 8
  br i1 %378, label %439, label %379

379:                                              ; preds = %375
  %380 = and i64 %1, -8
  %381 = shl i64 %380, 2
  %382 = getelementptr i8, i8* %0, i64 %381
  %383 = insertelement <4 x i32> poison, i32 %377, i64 0
  %384 = shufflevector <4 x i32> %383, <4 x i32> poison, <4 x i32> zeroinitializer
  %385 = insertelement <4 x i32> poison, i32 %377, i64 0
  %386 = shufflevector <4 x i32> %385, <4 x i32> poison, <4 x i32> zeroinitializer
  %387 = add i64 %380, -8
  %388 = lshr exact i64 %387, 3
  %389 = add nuw nsw i64 %388, 1
  %390 = and i64 %389, 3
  %391 = icmp ult i64 %387, 24
  br i1 %391, label %423, label %392

392:                                              ; preds = %379
  %393 = and i64 %389, 4611686018427387900
  br label %394

394:                                              ; preds = %394, %392
  %395 = phi i64 [ 0, %392 ], [ %420, %394 ]
  %396 = phi i64 [ 0, %392 ], [ %421, %394 ]
  %397 = shl i64 %395, 2
  %398 = getelementptr i8, i8* %0, i64 %397
  %399 = bitcast i8* %398 to <4 x i32>*
  store <4 x i32> %384, <4 x i32>* %399, align 1, !tbaa !14
  %400 = getelementptr i8, i8* %398, i64 16
  %401 = bitcast i8* %400 to <4 x i32>*
  store <4 x i32> %386, <4 x i32>* %401, align 1, !tbaa !14
  %402 = shl i64 %395, 2
  %403 = or i64 %402, 32
  %404 = getelementptr i8, i8* %0, i64 %403
  %405 = bitcast i8* %404 to <4 x i32>*
  store <4 x i32> %384, <4 x i32>* %405, align 1, !tbaa !14
  %406 = getelementptr i8, i8* %404, i64 16
  %407 = bitcast i8* %406 to <4 x i32>*
  store <4 x i32> %386, <4 x i32>* %407, align 1, !tbaa !14
  %408 = shl i64 %395, 2
  %409 = or i64 %408, 64
  %410 = getelementptr i8, i8* %0, i64 %409
  %411 = bitcast i8* %410 to <4 x i32>*
  store <4 x i32> %384, <4 x i32>* %411, align 1, !tbaa !14
  %412 = getelementptr i8, i8* %410, i64 16
  %413 = bitcast i8* %412 to <4 x i32>*
  store <4 x i32> %386, <4 x i32>* %413, align 1, !tbaa !14
  %414 = shl i64 %395, 2
  %415 = or i64 %414, 96
  %416 = getelementptr i8, i8* %0, i64 %415
  %417 = bitcast i8* %416 to <4 x i32>*
  store <4 x i32> %384, <4 x i32>* %417, align 1, !tbaa !14
  %418 = getelementptr i8, i8* %416, i64 16
  %419 = bitcast i8* %418 to <4 x i32>*
  store <4 x i32> %386, <4 x i32>* %419, align 1, !tbaa !14
  %420 = add nuw i64 %395, 32
  %421 = add i64 %396, 4
  %422 = icmp eq i64 %421, %393
  br i1 %422, label %423, label %394, !llvm.loop !259

423:                                              ; preds = %394, %379
  %424 = phi i64 [ 0, %379 ], [ %420, %394 ]
  %425 = icmp eq i64 %390, 0
  br i1 %425, label %437, label %426

426:                                              ; preds = %423, %426
  %427 = phi i64 [ %434, %426 ], [ %424, %423 ]
  %428 = phi i64 [ %435, %426 ], [ 0, %423 ]
  %429 = shl i64 %427, 2
  %430 = getelementptr i8, i8* %0, i64 %429
  %431 = bitcast i8* %430 to <4 x i32>*
  store <4 x i32> %384, <4 x i32>* %431, align 1, !tbaa !14
  %432 = getelementptr i8, i8* %430, i64 16
  %433 = bitcast i8* %432 to <4 x i32>*
  store <4 x i32> %386, <4 x i32>* %433, align 1, !tbaa !14
  %434 = add nuw i64 %427, 8
  %435 = add i64 %428, 1
  %436 = icmp eq i64 %435, %390
  br i1 %436, label %437, label %426, !llvm.loop !260

437:                                              ; preds = %426, %423
  %438 = icmp eq i64 %380, %1
  br i1 %438, label %775, label %439

439:                                              ; preds = %375, %437
  %440 = phi i8* [ %0, %375 ], [ %382, %437 ]
  %441 = phi i64 [ 0, %375 ], [ %380, %437 ]
  br label %442

442:                                              ; preds = %439, %442
  %443 = phi i8* [ %447, %442 ], [ %440, %439 ]
  %444 = phi i64 [ %446, %442 ], [ %441, %439 ]
  %445 = bitcast i8* %443 to i32*
  store i32 %377, i32* %445, align 1, !tbaa !14
  %446 = add nuw i64 %444, 1
  %447 = getelementptr inbounds i8, i8* %443, i64 4
  %448 = icmp eq i64 %446, %1
  br i1 %448, label %775, label %442, !llvm.loop !261

449:                                              ; preds = %359
  br i1 %363, label %775, label %450

450:                                              ; preds = %449
  %451 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %3, i64 0, i32 2
  %452 = load i8*, i8** %451, align 8, !tbaa !151
  %453 = add i64 %1, -1
  %454 = and i64 %1, 3
  %455 = icmp ult i64 %453, 3
  br i1 %455, label %704, label %456

456:                                              ; preds = %450
  %457 = and i64 %1, -4
  br label %458

458:                                              ; preds = %458, %456
  %459 = phi i8* [ %0, %456 ], [ %501, %458 ]
  %460 = phi i64 [ 0, %456 ], [ %500, %458 ]
  %461 = phi i64 [ 0, %456 ], [ %502, %458 ]
  %462 = getelementptr inbounds i8, i8* %2, i64 %460
  %463 = load i8, i8* %462, align 1, !tbaa !14
  %464 = zext i8 %463 to i64
  %465 = shl nuw nsw i64 %464, 2
  %466 = getelementptr inbounds i8, i8* %452, i64 %465
  %467 = bitcast i8* %466 to i32*
  %468 = bitcast i8* %459 to i32*
  %469 = load i32, i32* %467, align 1, !tbaa !14
  store i32 %469, i32* %468, align 1, !tbaa !14
  %470 = or i64 %460, 1
  %471 = getelementptr inbounds i8, i8* %459, i64 4
  %472 = getelementptr inbounds i8, i8* %2, i64 %470
  %473 = load i8, i8* %472, align 1, !tbaa !14
  %474 = zext i8 %473 to i64
  %475 = shl nuw nsw i64 %474, 2
  %476 = getelementptr inbounds i8, i8* %452, i64 %475
  %477 = bitcast i8* %476 to i32*
  %478 = bitcast i8* %471 to i32*
  %479 = load i32, i32* %477, align 1, !tbaa !14
  store i32 %479, i32* %478, align 1, !tbaa !14
  %480 = or i64 %460, 2
  %481 = getelementptr inbounds i8, i8* %459, i64 8
  %482 = getelementptr inbounds i8, i8* %2, i64 %480
  %483 = load i8, i8* %482, align 1, !tbaa !14
  %484 = zext i8 %483 to i64
  %485 = shl nuw nsw i64 %484, 2
  %486 = getelementptr inbounds i8, i8* %452, i64 %485
  %487 = bitcast i8* %486 to i32*
  %488 = bitcast i8* %481 to i32*
  %489 = load i32, i32* %487, align 1, !tbaa !14
  store i32 %489, i32* %488, align 1, !tbaa !14
  %490 = or i64 %460, 3
  %491 = getelementptr inbounds i8, i8* %459, i64 12
  %492 = getelementptr inbounds i8, i8* %2, i64 %490
  %493 = load i8, i8* %492, align 1, !tbaa !14
  %494 = zext i8 %493 to i64
  %495 = shl nuw nsw i64 %494, 2
  %496 = getelementptr inbounds i8, i8* %452, i64 %495
  %497 = bitcast i8* %496 to i32*
  %498 = bitcast i8* %491 to i32*
  %499 = load i32, i32* %497, align 1, !tbaa !14
  store i32 %499, i32* %498, align 1, !tbaa !14
  %500 = add nuw i64 %460, 4
  %501 = getelementptr inbounds i8, i8* %459, i64 16
  %502 = add i64 %461, 4
  %503 = icmp eq i64 %502, %457
  br i1 %503, label %704, label %458

504:                                              ; preds = %370, %554
  %505 = phi i8* [ %564, %554 ], [ %0, %370 ]
  %506 = phi i64 [ %563, %554 ], [ 0, %370 ]
  %507 = phi i64 [ %556, %554 ], [ 0, %370 ]
  br i1 %372, label %538, label %508

508:                                              ; preds = %504, %508
  %509 = phi i64 [ %533, %508 ], [ %507, %504 ]
  %510 = phi i32 [ %535, %508 ], [ 0, %504 ]
  %511 = phi i64 [ %536, %508 ], [ 0, %504 ]
  %512 = lshr i64 %509, 3
  %513 = getelementptr inbounds i8, i8* %2, i64 %512
  %514 = load i8, i8* %513, align 1, !tbaa !14
  %515 = trunc i64 %509 to i8
  %516 = and i8 %515, 7
  %517 = xor i8 %516, 7
  %518 = lshr i8 %514, %517
  %519 = add i64 %509, 1
  %520 = shl i32 %510, 2
  %521 = shl i8 %518, 1
  %522 = and i8 %521, 2
  %523 = zext i8 %522 to i32
  %524 = or i32 %520, %523
  %525 = lshr i64 %519, 3
  %526 = getelementptr inbounds i8, i8* %2, i64 %525
  %527 = load i8, i8* %526, align 1, !tbaa !14
  %528 = trunc i64 %519 to i8
  %529 = and i8 %528, 7
  %530 = xor i8 %529, 7
  %531 = lshr i8 %527, %530
  %532 = and i8 %531, 1
  %533 = add i64 %509, 2
  %534 = zext i8 %532 to i32
  %535 = or i32 %524, %534
  %536 = add i64 %511, 2
  %537 = icmp eq i64 %536, %373
  br i1 %537, label %538, label %508

538:                                              ; preds = %508, %504
  %539 = phi i32 [ undef, %504 ], [ %535, %508 ]
  %540 = phi i64 [ %507, %504 ], [ %533, %508 ]
  %541 = phi i32 [ 0, %504 ], [ %535, %508 ]
  br i1 %374, label %554, label %542

542:                                              ; preds = %538
  %543 = shl i32 %541, 1
  %544 = lshr i64 %540, 3
  %545 = getelementptr inbounds i8, i8* %2, i64 %544
  %546 = load i8, i8* %545, align 1, !tbaa !14
  %547 = trunc i64 %540 to i8
  %548 = and i8 %547, 7
  %549 = xor i8 %548, 7
  %550 = lshr i8 %546, %549
  %551 = and i8 %550, 1
  %552 = zext i8 %551 to i32
  %553 = or i32 %543, %552
  br label %554

554:                                              ; preds = %538, %542
  %555 = phi i32 [ %539, %538 ], [ %553, %542 ]
  %556 = add i64 %507, %366
  %557 = shl i32 %555, 2
  %558 = zext i32 %557 to i64
  %559 = getelementptr inbounds i8, i8* %369, i64 %558
  %560 = bitcast i8* %559 to i32*
  %561 = bitcast i8* %505 to i32*
  %562 = load i32, i32* %560, align 1, !tbaa !14
  store i32 %562, i32* %561, align 1, !tbaa !14
  %563 = add nuw i64 %506, 1
  %564 = getelementptr inbounds i8, i8* %505, i64 4
  %565 = icmp eq i64 %563, %1
  br i1 %565, label %775, label %504

566:                                              ; preds = %4
  %567 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %3, i64 0, i32 1
  %568 = load i32, i32* %567, align 4, !tbaa !150
  %569 = icmp eq i32 %568, 8
  %570 = icmp eq i64 %1, 0
  br i1 %569, label %577, label %571

571:                                              ; preds = %566
  br i1 %570, label %775, label %572

572:                                              ; preds = %571
  %573 = and i64 %1, 1
  %574 = icmp eq i64 %1, 1
  br i1 %574, label %741, label %575

575:                                              ; preds = %572
  %576 = and i64 %1, -2
  br label %611

577:                                              ; preds = %566
  br i1 %570, label %775, label %578

578:                                              ; preds = %577
  %579 = and i64 %1, 1
  %580 = icmp eq i64 %1, 1
  br i1 %580, label %726, label %581

581:                                              ; preds = %578
  %582 = and i64 %1, -2
  br label %583

583:                                              ; preds = %583, %581
  %584 = phi i8* [ %0, %581 ], [ %608, %583 ]
  %585 = phi i64 [ 0, %581 ], [ %607, %583 ]
  %586 = phi i64 [ 0, %581 ], [ %609, %583 ]
  %587 = shl i64 %585, 1
  %588 = getelementptr inbounds i8, i8* %2, i64 %587
  %589 = load i8, i8* %588, align 1, !tbaa !14
  %590 = getelementptr inbounds i8, i8* %584, i64 2
  store i8 %589, i8* %590, align 1, !tbaa !14
  %591 = getelementptr inbounds i8, i8* %584, i64 1
  store i8 %589, i8* %591, align 1, !tbaa !14
  store i8 %589, i8* %584, align 1, !tbaa !14
  %592 = or i64 %587, 1
  %593 = getelementptr inbounds i8, i8* %2, i64 %592
  %594 = load i8, i8* %593, align 1, !tbaa !14
  %595 = getelementptr inbounds i8, i8* %584, i64 3
  store i8 %594, i8* %595, align 1, !tbaa !14
  %596 = getelementptr inbounds i8, i8* %584, i64 4
  %597 = shl i64 %585, 1
  %598 = or i64 %597, 2
  %599 = getelementptr inbounds i8, i8* %2, i64 %598
  %600 = load i8, i8* %599, align 1, !tbaa !14
  %601 = getelementptr inbounds i8, i8* %584, i64 6
  store i8 %600, i8* %601, align 1, !tbaa !14
  %602 = getelementptr inbounds i8, i8* %584, i64 5
  store i8 %600, i8* %602, align 1, !tbaa !14
  store i8 %600, i8* %596, align 1, !tbaa !14
  %603 = or i64 %597, 3
  %604 = getelementptr inbounds i8, i8* %2, i64 %603
  %605 = load i8, i8* %604, align 1, !tbaa !14
  %606 = getelementptr inbounds i8, i8* %584, i64 7
  store i8 %605, i8* %606, align 1, !tbaa !14
  %607 = add nuw i64 %585, 2
  %608 = getelementptr inbounds i8, i8* %584, i64 8
  %609 = add i64 %586, 2
  %610 = icmp eq i64 %609, %582
  br i1 %610, label %724, label %583

611:                                              ; preds = %611, %575
  %612 = phi i8* [ %0, %575 ], [ %636, %611 ]
  %613 = phi i64 [ 0, %575 ], [ %635, %611 ]
  %614 = phi i64 [ 0, %575 ], [ %637, %611 ]
  %615 = shl i64 %613, 2
  %616 = getelementptr inbounds i8, i8* %2, i64 %615
  %617 = load i8, i8* %616, align 1, !tbaa !14
  %618 = getelementptr inbounds i8, i8* %612, i64 2
  store i8 %617, i8* %618, align 1, !tbaa !14
  %619 = getelementptr inbounds i8, i8* %612, i64 1
  store i8 %617, i8* %619, align 1, !tbaa !14
  store i8 %617, i8* %612, align 1, !tbaa !14
  %620 = or i64 %615, 2
  %621 = getelementptr inbounds i8, i8* %2, i64 %620
  %622 = load i8, i8* %621, align 1, !tbaa !14
  %623 = getelementptr inbounds i8, i8* %612, i64 3
  store i8 %622, i8* %623, align 1, !tbaa !14
  %624 = getelementptr inbounds i8, i8* %612, i64 4
  %625 = shl i64 %613, 2
  %626 = or i64 %625, 4
  %627 = getelementptr inbounds i8, i8* %2, i64 %626
  %628 = load i8, i8* %627, align 1, !tbaa !14
  %629 = getelementptr inbounds i8, i8* %612, i64 6
  store i8 %628, i8* %629, align 1, !tbaa !14
  %630 = getelementptr inbounds i8, i8* %612, i64 5
  store i8 %628, i8* %630, align 1, !tbaa !14
  store i8 %628, i8* %624, align 1, !tbaa !14
  %631 = or i64 %625, 6
  %632 = getelementptr inbounds i8, i8* %2, i64 %631
  %633 = load i8, i8* %632, align 1, !tbaa !14
  %634 = getelementptr inbounds i8, i8* %612, i64 7
  store i8 %633, i8* %634, align 1, !tbaa !14
  %635 = add nuw i64 %613, 2
  %636 = getelementptr inbounds i8, i8* %612, i64 8
  %637 = add i64 %614, 2
  %638 = icmp eq i64 %637, %576
  br i1 %638, label %739, label %611

639:                                              ; preds = %4
  %640 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %3, i64 0, i32 1
  %641 = load i32, i32* %640, align 4, !tbaa !150
  %642 = icmp eq i32 %641, 8
  br i1 %642, label %650, label %643

643:                                              ; preds = %639
  %644 = icmp eq i64 %1, 0
  br i1 %644, label %775, label %645

645:                                              ; preds = %643
  %646 = and i64 %1, 1
  %647 = icmp eq i64 %1, 1
  br i1 %647, label %756, label %648

648:                                              ; preds = %645
  %649 = and i64 %1, -2
  br label %654

650:                                              ; preds = %639
  %651 = shl i64 %1, 2
  %652 = icmp eq i64 %651, 0
  br i1 %652, label %775, label %653

653:                                              ; preds = %650
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %0, i8* align 1 %2, i64 %651, i1 false) #25, !tbaa !14, !alias.scope !262
  br label %775

654:                                              ; preds = %654, %648
  %655 = phi i8* [ %0, %648 ], [ %691, %654 ]
  %656 = phi i64 [ 0, %648 ], [ %690, %654 ]
  %657 = phi i64 [ 0, %648 ], [ %692, %654 ]
  %658 = shl i64 %656, 3
  %659 = getelementptr inbounds i8, i8* %2, i64 %658
  %660 = load i8, i8* %659, align 1, !tbaa !14
  store i8 %660, i8* %655, align 1, !tbaa !14
  %661 = or i64 %658, 2
  %662 = getelementptr inbounds i8, i8* %2, i64 %661
  %663 = load i8, i8* %662, align 1, !tbaa !14
  %664 = getelementptr inbounds i8, i8* %655, i64 1
  store i8 %663, i8* %664, align 1, !tbaa !14
  %665 = or i64 %658, 4
  %666 = getelementptr inbounds i8, i8* %2, i64 %665
  %667 = load i8, i8* %666, align 1, !tbaa !14
  %668 = getelementptr inbounds i8, i8* %655, i64 2
  store i8 %667, i8* %668, align 1, !tbaa !14
  %669 = or i64 %658, 6
  %670 = getelementptr inbounds i8, i8* %2, i64 %669
  %671 = load i8, i8* %670, align 1, !tbaa !14
  %672 = getelementptr inbounds i8, i8* %655, i64 3
  store i8 %671, i8* %672, align 1, !tbaa !14
  %673 = getelementptr inbounds i8, i8* %655, i64 4
  %674 = shl i64 %656, 3
  %675 = or i64 %674, 8
  %676 = getelementptr inbounds i8, i8* %2, i64 %675
  %677 = load i8, i8* %676, align 1, !tbaa !14
  store i8 %677, i8* %673, align 1, !tbaa !14
  %678 = or i64 %674, 10
  %679 = getelementptr inbounds i8, i8* %2, i64 %678
  %680 = load i8, i8* %679, align 1, !tbaa !14
  %681 = getelementptr inbounds i8, i8* %655, i64 5
  store i8 %680, i8* %681, align 1, !tbaa !14
  %682 = or i64 %674, 12
  %683 = getelementptr inbounds i8, i8* %2, i64 %682
  %684 = load i8, i8* %683, align 1, !tbaa !14
  %685 = getelementptr inbounds i8, i8* %655, i64 6
  store i8 %684, i8* %685, align 1, !tbaa !14
  %686 = or i64 %674, 14
  %687 = getelementptr inbounds i8, i8* %2, i64 %686
  %688 = load i8, i8* %687, align 1, !tbaa !14
  %689 = getelementptr inbounds i8, i8* %655, i64 7
  store i8 %688, i8* %689, align 1, !tbaa !14
  %690 = add nuw i64 %656, 2
  %691 = getelementptr inbounds i8, i8* %655, i64 8
  %692 = add i64 %657, 2
  %693 = icmp eq i64 %692, %649
  br i1 %693, label %754, label %654

694:                                              ; preds = %108, %83
  %695 = phi i8* [ %85, %83 ], [ %109, %108 ]
  %696 = icmp eq i64 %87, 0
  br i1 %696, label %775, label %697

697:                                              ; preds = %694
  %698 = load i8, i8* %695, align 1, !tbaa !14
  %699 = zext i8 %698 to i32
  %700 = load i32, i32* %86, align 4, !tbaa !235
  %701 = icmp eq i32 %700, %699
  br i1 %701, label %702, label %775

702:                                              ; preds = %697
  %703 = getelementptr inbounds i8, i8* %695, i64 3
  store i8 0, i8* %703, align 1, !tbaa !14
  br label %775

704:                                              ; preds = %458, %450
  %705 = phi i8* [ %0, %450 ], [ %501, %458 ]
  %706 = phi i64 [ 0, %450 ], [ %500, %458 ]
  %707 = icmp eq i64 %454, 0
  br i1 %707, label %775, label %708

708:                                              ; preds = %704, %708
  %709 = phi i8* [ %721, %708 ], [ %705, %704 ]
  %710 = phi i64 [ %720, %708 ], [ %706, %704 ]
  %711 = phi i64 [ %722, %708 ], [ 0, %704 ]
  %712 = getelementptr inbounds i8, i8* %2, i64 %710
  %713 = load i8, i8* %712, align 1, !tbaa !14
  %714 = zext i8 %713 to i64
  %715 = shl nuw nsw i64 %714, 2
  %716 = getelementptr inbounds i8, i8* %452, i64 %715
  %717 = bitcast i8* %716 to i32*
  %718 = bitcast i8* %709 to i32*
  %719 = load i32, i32* %717, align 1, !tbaa !14
  store i32 %719, i32* %718, align 1, !tbaa !14
  %720 = add nuw i64 %710, 1
  %721 = getelementptr inbounds i8, i8* %709, i64 4
  %722 = add i64 %711, 1
  %723 = icmp eq i64 %722, %454
  br i1 %723, label %775, label %708, !llvm.loop !266

724:                                              ; preds = %583
  %725 = shl i64 %607, 1
  br label %726

726:                                              ; preds = %724, %578
  %727 = phi i8* [ %0, %578 ], [ %608, %724 ]
  %728 = phi i64 [ 0, %578 ], [ %725, %724 ]
  %729 = icmp eq i64 %579, 0
  br i1 %729, label %775, label %730

730:                                              ; preds = %726
  %731 = getelementptr inbounds i8, i8* %2, i64 %728
  %732 = load i8, i8* %731, align 1, !tbaa !14
  %733 = getelementptr inbounds i8, i8* %727, i64 2
  store i8 %732, i8* %733, align 1, !tbaa !14
  %734 = getelementptr inbounds i8, i8* %727, i64 1
  store i8 %732, i8* %734, align 1, !tbaa !14
  store i8 %732, i8* %727, align 1, !tbaa !14
  %735 = or i64 %728, 1
  %736 = getelementptr inbounds i8, i8* %2, i64 %735
  %737 = load i8, i8* %736, align 1, !tbaa !14
  %738 = getelementptr inbounds i8, i8* %727, i64 3
  store i8 %737, i8* %738, align 1, !tbaa !14
  br label %775

739:                                              ; preds = %611
  %740 = shl i64 %635, 2
  br label %741

741:                                              ; preds = %739, %572
  %742 = phi i8* [ %0, %572 ], [ %636, %739 ]
  %743 = phi i64 [ 0, %572 ], [ %740, %739 ]
  %744 = icmp eq i64 %573, 0
  br i1 %744, label %775, label %745

745:                                              ; preds = %741
  %746 = getelementptr inbounds i8, i8* %2, i64 %743
  %747 = load i8, i8* %746, align 1, !tbaa !14
  %748 = getelementptr inbounds i8, i8* %742, i64 2
  store i8 %747, i8* %748, align 1, !tbaa !14
  %749 = getelementptr inbounds i8, i8* %742, i64 1
  store i8 %747, i8* %749, align 1, !tbaa !14
  store i8 %747, i8* %742, align 1, !tbaa !14
  %750 = or i64 %743, 2
  %751 = getelementptr inbounds i8, i8* %2, i64 %750
  %752 = load i8, i8* %751, align 1, !tbaa !14
  %753 = getelementptr inbounds i8, i8* %742, i64 3
  store i8 %752, i8* %753, align 1, !tbaa !14
  br label %775

754:                                              ; preds = %654
  %755 = shl i64 %690, 3
  br label %756

756:                                              ; preds = %754, %645
  %757 = phi i8* [ %0, %645 ], [ %691, %754 ]
  %758 = phi i64 [ 0, %645 ], [ %755, %754 ]
  %759 = icmp eq i64 %646, 0
  br i1 %759, label %775, label %760

760:                                              ; preds = %756
  %761 = getelementptr inbounds i8, i8* %2, i64 %758
  %762 = load i8, i8* %761, align 1, !tbaa !14
  store i8 %762, i8* %757, align 1, !tbaa !14
  %763 = or i64 %758, 2
  %764 = getelementptr inbounds i8, i8* %2, i64 %763
  %765 = load i8, i8* %764, align 1, !tbaa !14
  %766 = getelementptr inbounds i8, i8* %757, i64 1
  store i8 %765, i8* %766, align 1, !tbaa !14
  %767 = or i64 %758, 4
  %768 = getelementptr inbounds i8, i8* %2, i64 %767
  %769 = load i8, i8* %768, align 1, !tbaa !14
  %770 = getelementptr inbounds i8, i8* %757, i64 2
  store i8 %769, i8* %770, align 1, !tbaa !14
  %771 = or i64 %758, 6
  %772 = getelementptr inbounds i8, i8* %2, i64 %771
  %773 = load i8, i8* %772, align 1, !tbaa !14
  %774 = getelementptr inbounds i8, i8* %757, i64 3
  store i8 %773, i8* %774, align 1, !tbaa !14
  br label %775

775:                                              ; preds = %760, %756, %745, %741, %730, %726, %554, %442, %704, %708, %351, %303, %130, %694, %702, %697, %216, %437, %270, %237, %77, %17, %643, %571, %577, %364, %449, %229, %10, %138, %653, %650, %4
  ret void
}

; Function Attrs: nofree nosync nounwind uwtable
define internal fastcc void @_ZL18getPixelColorsRGB8PhmPKhPK16LodePNGColorMode(i8* noalias nocapture noundef writeonly %0, i64 noundef %1, i8* noalias nocapture noundef readonly %2, %struct.LodePNGColorMode* nocapture noundef readonly %3) unnamed_addr #8 {
  %5 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %3, i64 0, i32 0
  %6 = load i32, i32* %5, align 8, !tbaa !147
  switch i32 %6, label %622 [
    i32 0, label %7
    i32 2, label %164
    i32 3, label %211
    i32 4, label %329
    i32 6, label %416
  ]

7:                                                ; preds = %4
  %8 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %3, i64 0, i32 1
  %9 = load i32, i32* %8, align 4, !tbaa !150
  switch i32 %9, label %90 [
    i32 8, label %18
    i32 16, label %10
  ]

10:                                               ; preds = %7
  %11 = icmp eq i64 %1, 0
  br i1 %11, label %622, label %12

12:                                               ; preds = %10
  %13 = add i64 %1, -1
  %14 = and i64 %1, 3
  %15 = icmp ult i64 %13, 3
  br i1 %15, label %504, label %16

16:                                               ; preds = %12
  %17 = and i64 %1, -4
  br label %56

18:                                               ; preds = %7
  %19 = icmp eq i64 %1, 0
  br i1 %19, label %622, label %20

20:                                               ; preds = %18
  %21 = add i64 %1, -1
  %22 = and i64 %1, 3
  %23 = icmp ult i64 %21, 3
  br i1 %23, label %488, label %24

24:                                               ; preds = %20
  %25 = and i64 %1, -4
  br label %26

26:                                               ; preds = %26, %24
  %27 = phi i8* [ %0, %24 ], [ %53, %26 ]
  %28 = phi i64 [ 0, %24 ], [ %52, %26 ]
  %29 = phi i64 [ 0, %24 ], [ %54, %26 ]
  %30 = getelementptr inbounds i8, i8* %2, i64 %28
  %31 = load i8, i8* %30, align 1, !tbaa !14
  %32 = getelementptr inbounds i8, i8* %27, i64 2
  store i8 %31, i8* %32, align 1, !tbaa !14
  %33 = getelementptr inbounds i8, i8* %27, i64 1
  store i8 %31, i8* %33, align 1, !tbaa !14
  store i8 %31, i8* %27, align 1, !tbaa !14
  %34 = or i64 %28, 1
  %35 = getelementptr inbounds i8, i8* %27, i64 3
  %36 = getelementptr inbounds i8, i8* %2, i64 %34
  %37 = load i8, i8* %36, align 1, !tbaa !14
  %38 = getelementptr inbounds i8, i8* %27, i64 5
  store i8 %37, i8* %38, align 1, !tbaa !14
  %39 = getelementptr inbounds i8, i8* %27, i64 4
  store i8 %37, i8* %39, align 1, !tbaa !14
  store i8 %37, i8* %35, align 1, !tbaa !14
  %40 = or i64 %28, 2
  %41 = getelementptr inbounds i8, i8* %27, i64 6
  %42 = getelementptr inbounds i8, i8* %2, i64 %40
  %43 = load i8, i8* %42, align 1, !tbaa !14
  %44 = getelementptr inbounds i8, i8* %27, i64 8
  store i8 %43, i8* %44, align 1, !tbaa !14
  %45 = getelementptr inbounds i8, i8* %27, i64 7
  store i8 %43, i8* %45, align 1, !tbaa !14
  store i8 %43, i8* %41, align 1, !tbaa !14
  %46 = or i64 %28, 3
  %47 = getelementptr inbounds i8, i8* %27, i64 9
  %48 = getelementptr inbounds i8, i8* %2, i64 %46
  %49 = load i8, i8* %48, align 1, !tbaa !14
  %50 = getelementptr inbounds i8, i8* %27, i64 11
  store i8 %49, i8* %50, align 1, !tbaa !14
  %51 = getelementptr inbounds i8, i8* %27, i64 10
  store i8 %49, i8* %51, align 1, !tbaa !14
  store i8 %49, i8* %47, align 1, !tbaa !14
  %52 = add nuw i64 %28, 4
  %53 = getelementptr inbounds i8, i8* %27, i64 12
  %54 = add i64 %29, 4
  %55 = icmp eq i64 %54, %25
  br i1 %55, label %488, label %26

56:                                               ; preds = %56, %16
  %57 = phi i8* [ %0, %16 ], [ %87, %56 ]
  %58 = phi i64 [ 0, %16 ], [ %86, %56 ]
  %59 = phi i64 [ 0, %16 ], [ %88, %56 ]
  %60 = shl i64 %58, 1
  %61 = getelementptr inbounds i8, i8* %2, i64 %60
  %62 = load i8, i8* %61, align 1, !tbaa !14
  %63 = getelementptr inbounds i8, i8* %57, i64 2
  store i8 %62, i8* %63, align 1, !tbaa !14
  %64 = getelementptr inbounds i8, i8* %57, i64 1
  store i8 %62, i8* %64, align 1, !tbaa !14
  store i8 %62, i8* %57, align 1, !tbaa !14
  %65 = getelementptr inbounds i8, i8* %57, i64 3
  %66 = shl i64 %58, 1
  %67 = or i64 %66, 2
  %68 = getelementptr inbounds i8, i8* %2, i64 %67
  %69 = load i8, i8* %68, align 1, !tbaa !14
  %70 = getelementptr inbounds i8, i8* %57, i64 5
  store i8 %69, i8* %70, align 1, !tbaa !14
  %71 = getelementptr inbounds i8, i8* %57, i64 4
  store i8 %69, i8* %71, align 1, !tbaa !14
  store i8 %69, i8* %65, align 1, !tbaa !14
  %72 = getelementptr inbounds i8, i8* %57, i64 6
  %73 = shl i64 %58, 1
  %74 = or i64 %73, 4
  %75 = getelementptr inbounds i8, i8* %2, i64 %74
  %76 = load i8, i8* %75, align 1, !tbaa !14
  %77 = getelementptr inbounds i8, i8* %57, i64 8
  store i8 %76, i8* %77, align 1, !tbaa !14
  %78 = getelementptr inbounds i8, i8* %57, i64 7
  store i8 %76, i8* %78, align 1, !tbaa !14
  store i8 %76, i8* %72, align 1, !tbaa !14
  %79 = getelementptr inbounds i8, i8* %57, i64 9
  %80 = shl i64 %58, 1
  %81 = or i64 %80, 6
  %82 = getelementptr inbounds i8, i8* %2, i64 %81
  %83 = load i8, i8* %82, align 1, !tbaa !14
  %84 = getelementptr inbounds i8, i8* %57, i64 11
  store i8 %83, i8* %84, align 1, !tbaa !14
  %85 = getelementptr inbounds i8, i8* %57, i64 10
  store i8 %83, i8* %85, align 1, !tbaa !14
  store i8 %83, i8* %79, align 1, !tbaa !14
  %86 = add nuw i64 %58, 4
  %87 = getelementptr inbounds i8, i8* %57, i64 12
  %88 = add i64 %59, 4
  %89 = icmp eq i64 %88, %17
  br i1 %89, label %504, label %56

90:                                               ; preds = %7
  %91 = shl nsw i32 -1, %9
  %92 = xor i32 %91, -1
  %93 = icmp eq i64 %1, 0
  br i1 %93, label %622, label %94

94:                                               ; preds = %90
  %95 = zext i32 %9 to i64
  %96 = and i64 %95, 1
  %97 = icmp eq i32 %9, 1
  %98 = and i64 %95, 4294967294
  %99 = icmp eq i64 %96, 0
  br label %100

100:                                              ; preds = %94, %153
  %101 = phi i8* [ %0, %94 ], [ %162, %153 ]
  %102 = phi i64 [ 0, %94 ], [ %161, %153 ]
  %103 = phi i64 [ 0, %94 ], [ %154, %153 ]
  switch i32 %9, label %104 [
    i32 0, label %153
    i32 1, label %134
  ]

104:                                              ; preds = %100, %104
  %105 = phi i64 [ %129, %104 ], [ %103, %100 ]
  %106 = phi i32 [ %131, %104 ], [ 0, %100 ]
  %107 = phi i64 [ %132, %104 ], [ 0, %100 ]
  %108 = lshr i64 %105, 3
  %109 = getelementptr inbounds i8, i8* %2, i64 %108
  %110 = load i8, i8* %109, align 1, !tbaa !14
  %111 = trunc i64 %105 to i8
  %112 = and i8 %111, 7
  %113 = xor i8 %112, 7
  %114 = lshr i8 %110, %113
  %115 = add i64 %105, 1
  %116 = shl i32 %106, 2
  %117 = shl i8 %114, 1
  %118 = and i8 %117, 2
  %119 = zext i8 %118 to i32
  %120 = or i32 %116, %119
  %121 = lshr i64 %115, 3
  %122 = getelementptr inbounds i8, i8* %2, i64 %121
  %123 = load i8, i8* %122, align 1, !tbaa !14
  %124 = trunc i64 %115 to i8
  %125 = and i8 %124, 7
  %126 = xor i8 %125, 7
  %127 = lshr i8 %123, %126
  %128 = and i8 %127, 1
  %129 = add i64 %105, 2
  %130 = zext i8 %128 to i32
  %131 = or i32 %120, %130
  %132 = add i64 %107, 2
  %133 = icmp eq i64 %132, %98
  br i1 %133, label %134, label %104

134:                                              ; preds = %104, %100
  %135 = phi i32 [ undef, %100 ], [ %131, %104 ]
  %136 = phi i64 [ %103, %100 ], [ %129, %104 ]
  %137 = phi i32 [ 0, %100 ], [ %131, %104 ]
  br i1 %99, label %150, label %138

138:                                              ; preds = %134
  %139 = shl i32 %137, 1
  %140 = lshr i64 %136, 3
  %141 = getelementptr inbounds i8, i8* %2, i64 %140
  %142 = load i8, i8* %141, align 1, !tbaa !14
  %143 = trunc i64 %136 to i8
  %144 = and i8 %143, 7
  %145 = xor i8 %144, 7
  %146 = lshr i8 %142, %145
  %147 = and i8 %146, 1
  %148 = zext i8 %147 to i32
  %149 = or i32 %139, %148
  br label %150

150:                                              ; preds = %134, %138
  %151 = phi i32 [ %135, %134 ], [ %149, %138 ]
  %152 = add i64 %103, %95
  br label %153

153:                                              ; preds = %100, %150
  %154 = phi i64 [ %103, %100 ], [ %152, %150 ]
  %155 = phi i32 [ 0, %100 ], [ %151, %150 ]
  %156 = mul i32 %155, 255
  %157 = udiv i32 %156, %92
  %158 = trunc i32 %157 to i8
  %159 = getelementptr inbounds i8, i8* %101, i64 2
  store i8 %158, i8* %159, align 1, !tbaa !14
  %160 = getelementptr inbounds i8, i8* %101, i64 1
  store i8 %158, i8* %160, align 1, !tbaa !14
  store i8 %158, i8* %101, align 1, !tbaa !14
  %161 = add nuw i64 %102, 1
  %162 = getelementptr inbounds i8, i8* %101, i64 3
  %163 = icmp eq i64 %161, %1
  br i1 %163, label %622, label %100

164:                                              ; preds = %4
  %165 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %3, i64 0, i32 1
  %166 = load i32, i32* %165, align 4, !tbaa !150
  %167 = icmp eq i32 %166, 8
  br i1 %167, label %175, label %168

168:                                              ; preds = %164
  %169 = icmp eq i64 %1, 0
  br i1 %169, label %622, label %170

170:                                              ; preds = %168
  %171 = and i64 %1, 1
  %172 = icmp eq i64 %1, 1
  br i1 %172, label %523, label %173

173:                                              ; preds = %170
  %174 = and i64 %1, -2
  br label %179

175:                                              ; preds = %164
  %176 = mul i64 %1, 3
  %177 = icmp eq i64 %176, 0
  br i1 %177, label %622, label %178

178:                                              ; preds = %175
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %0, i8* align 1 %2, i64 %176, i1 false) #25, !tbaa !14, !alias.scope !267
  br label %622

179:                                              ; preds = %179, %173
  %180 = phi i8* [ %0, %173 ], [ %208, %179 ]
  %181 = phi i64 [ 0, %173 ], [ %207, %179 ]
  %182 = phi i64 [ 0, %173 ], [ %209, %179 ]
  %183 = mul i64 %181, 6
  %184 = getelementptr inbounds i8, i8* %2, i64 %183
  %185 = load i8, i8* %184, align 1, !tbaa !14
  store i8 %185, i8* %180, align 1, !tbaa !14
  %186 = or i64 %183, 2
  %187 = getelementptr inbounds i8, i8* %2, i64 %186
  %188 = load i8, i8* %187, align 1, !tbaa !14
  %189 = getelementptr inbounds i8, i8* %180, i64 1
  store i8 %188, i8* %189, align 1, !tbaa !14
  %190 = add i64 %183, 4
  %191 = getelementptr inbounds i8, i8* %2, i64 %190
  %192 = load i8, i8* %191, align 1, !tbaa !14
  %193 = getelementptr inbounds i8, i8* %180, i64 2
  store i8 %192, i8* %193, align 1, !tbaa !14
  %194 = or i64 %181, 1
  %195 = getelementptr inbounds i8, i8* %180, i64 3
  %196 = mul i64 %194, 6
  %197 = getelementptr inbounds i8, i8* %2, i64 %196
  %198 = load i8, i8* %197, align 1, !tbaa !14
  store i8 %198, i8* %195, align 1, !tbaa !14
  %199 = add i64 %196, 2
  %200 = getelementptr inbounds i8, i8* %2, i64 %199
  %201 = load i8, i8* %200, align 1, !tbaa !14
  %202 = getelementptr inbounds i8, i8* %180, i64 4
  store i8 %201, i8* %202, align 1, !tbaa !14
  %203 = add i64 %196, 4
  %204 = getelementptr inbounds i8, i8* %2, i64 %203
  %205 = load i8, i8* %204, align 1, !tbaa !14
  %206 = getelementptr inbounds i8, i8* %180, i64 5
  store i8 %205, i8* %206, align 1, !tbaa !14
  %207 = add nuw i64 %181, 2
  %208 = getelementptr inbounds i8, i8* %180, i64 6
  %209 = add i64 %182, 2
  %210 = icmp eq i64 %209, %174
  br i1 %210, label %521, label %179

211:                                              ; preds = %4
  %212 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %3, i64 0, i32 1
  %213 = load i32, i32* %212, align 4, !tbaa !150
  %214 = icmp eq i32 %213, 8
  %215 = icmp eq i64 %1, 0
  br i1 %214, label %242, label %216

216:                                              ; preds = %211
  br i1 %215, label %622, label %217

217:                                              ; preds = %216
  %218 = zext i32 %213 to i64
  %219 = icmp eq i32 %213, 0
  %220 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %3, i64 0, i32 2
  %221 = load i8*, i8** %220, align 8, !tbaa !151
  br i1 %219, label %227, label %222

222:                                              ; preds = %217
  %223 = and i64 %218, 1
  %224 = icmp eq i32 %213, 1
  %225 = and i64 %218, 4294967294
  %226 = icmp eq i64 %223, 0
  br label %270

227:                                              ; preds = %217
  %228 = add i64 %1, -1
  %229 = and i64 %1, 3
  %230 = icmp ult i64 %228, 3
  br i1 %230, label %548, label %231

231:                                              ; preds = %227
  %232 = and i64 %1, -4
  br label %233

233:                                              ; preds = %233, %231
  %234 = phi i8* [ %0, %231 ], [ %239, %233 ]
  %235 = phi i64 [ 0, %231 ], [ %240, %233 ]
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef nonnull align 1 dereferenceable(3) %234, i8* noundef nonnull align 1 dereferenceable(3) %221, i64 3, i1 false) #25, !tbaa !14, !alias.scope !271
  %236 = getelementptr inbounds i8, i8* %234, i64 3
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef nonnull align 1 dereferenceable(3) %236, i8* noundef nonnull align 1 dereferenceable(3) %221, i64 3, i1 false) #25, !tbaa !14, !alias.scope !271
  %237 = getelementptr inbounds i8, i8* %234, i64 6
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef nonnull align 1 dereferenceable(3) %237, i8* noundef nonnull align 1 dereferenceable(3) %221, i64 3, i1 false) #25, !tbaa !14, !alias.scope !271
  %238 = getelementptr inbounds i8, i8* %234, i64 9
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef nonnull align 1 dereferenceable(3) %238, i8* noundef nonnull align 1 dereferenceable(3) %221, i64 3, i1 false) #25, !tbaa !14, !alias.scope !271
  %239 = getelementptr inbounds i8, i8* %234, i64 12
  %240 = add i64 %235, 4
  %241 = icmp eq i64 %240, %232
  br i1 %241, label %548, label %233

242:                                              ; preds = %211
  br i1 %215, label %622, label %243

243:                                              ; preds = %242
  %244 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %3, i64 0, i32 2
  %245 = load i8*, i8** %244, align 8, !tbaa !151
  %246 = and i64 %1, 1
  %247 = icmp eq i64 %1, 1
  br i1 %247, label %538, label %248

248:                                              ; preds = %243
  %249 = and i64 %1, -2
  br label %250

250:                                              ; preds = %250, %248
  %251 = phi i8* [ %0, %248 ], [ %267, %250 ]
  %252 = phi i64 [ 0, %248 ], [ %266, %250 ]
  %253 = phi i64 [ 0, %248 ], [ %268, %250 ]
  %254 = getelementptr inbounds i8, i8* %2, i64 %252
  %255 = load i8, i8* %254, align 1, !tbaa !14
  %256 = zext i8 %255 to i64
  %257 = shl nuw nsw i64 %256, 2
  %258 = getelementptr inbounds i8, i8* %245, i64 %257
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef nonnull align 1 dereferenceable(3) %251, i8* noundef nonnull align 1 dereferenceable(3) %258, i64 3, i1 false) #25, !tbaa !14, !alias.scope !275
  %259 = or i64 %252, 1
  %260 = getelementptr inbounds i8, i8* %251, i64 3
  %261 = getelementptr inbounds i8, i8* %2, i64 %259
  %262 = load i8, i8* %261, align 1, !tbaa !14
  %263 = zext i8 %262 to i64
  %264 = shl nuw nsw i64 %263, 2
  %265 = getelementptr inbounds i8, i8* %245, i64 %264
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef nonnull align 1 dereferenceable(3) %260, i8* noundef nonnull align 1 dereferenceable(3) %265, i64 3, i1 false) #25, !tbaa !14, !alias.scope !275
  %266 = add nuw i64 %252, 2
  %267 = getelementptr inbounds i8, i8* %251, i64 6
  %268 = add i64 %253, 2
  %269 = icmp eq i64 %268, %249
  br i1 %269, label %538, label %250

270:                                              ; preds = %222, %320
  %271 = phi i8* [ %327, %320 ], [ %0, %222 ]
  %272 = phi i64 [ %326, %320 ], [ 0, %222 ]
  %273 = phi i64 [ %322, %320 ], [ 0, %222 ]
  br i1 %224, label %304, label %274

274:                                              ; preds = %270, %274
  %275 = phi i64 [ %299, %274 ], [ %273, %270 ]
  %276 = phi i32 [ %301, %274 ], [ 0, %270 ]
  %277 = phi i64 [ %302, %274 ], [ 0, %270 ]
  %278 = lshr i64 %275, 3
  %279 = getelementptr inbounds i8, i8* %2, i64 %278
  %280 = load i8, i8* %279, align 1, !tbaa !14
  %281 = trunc i64 %275 to i8
  %282 = and i8 %281, 7
  %283 = xor i8 %282, 7
  %284 = lshr i8 %280, %283
  %285 = add i64 %275, 1
  %286 = shl i32 %276, 2
  %287 = shl i8 %284, 1
  %288 = and i8 %287, 2
  %289 = zext i8 %288 to i32
  %290 = or i32 %286, %289
  %291 = lshr i64 %285, 3
  %292 = getelementptr inbounds i8, i8* %2, i64 %291
  %293 = load i8, i8* %292, align 1, !tbaa !14
  %294 = trunc i64 %285 to i8
  %295 = and i8 %294, 7
  %296 = xor i8 %295, 7
  %297 = lshr i8 %293, %296
  %298 = and i8 %297, 1
  %299 = add i64 %275, 2
  %300 = zext i8 %298 to i32
  %301 = or i32 %290, %300
  %302 = add i64 %277, 2
  %303 = icmp eq i64 %302, %225
  br i1 %303, label %304, label %274

304:                                              ; preds = %274, %270
  %305 = phi i32 [ undef, %270 ], [ %301, %274 ]
  %306 = phi i64 [ %273, %270 ], [ %299, %274 ]
  %307 = phi i32 [ 0, %270 ], [ %301, %274 ]
  br i1 %226, label %320, label %308

308:                                              ; preds = %304
  %309 = shl i32 %307, 1
  %310 = lshr i64 %306, 3
  %311 = getelementptr inbounds i8, i8* %2, i64 %310
  %312 = load i8, i8* %311, align 1, !tbaa !14
  %313 = trunc i64 %306 to i8
  %314 = and i8 %313, 7
  %315 = xor i8 %314, 7
  %316 = lshr i8 %312, %315
  %317 = and i8 %316, 1
  %318 = zext i8 %317 to i32
  %319 = or i32 %309, %318
  br label %320

320:                                              ; preds = %304, %308
  %321 = phi i32 [ %305, %304 ], [ %319, %308 ]
  %322 = add i64 %273, %218
  %323 = shl i32 %321, 2
  %324 = zext i32 %323 to i64
  %325 = getelementptr inbounds i8, i8* %221, i64 %324
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef nonnull align 1 dereferenceable(3) %271, i8* noundef nonnull align 1 dereferenceable(3) %325, i64 3, i1 false) #25, !tbaa !14, !alias.scope !271
  %326 = add nuw i64 %272, 1
  %327 = getelementptr inbounds i8, i8* %271, i64 3
  %328 = icmp eq i64 %326, %1
  br i1 %328, label %622, label %270

329:                                              ; preds = %4
  %330 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %3, i64 0, i32 1
  %331 = load i32, i32* %330, align 4, !tbaa !150
  %332 = icmp eq i32 %331, 8
  %333 = icmp eq i64 %1, 0
  br i1 %332, label %341, label %334

334:                                              ; preds = %329
  br i1 %333, label %622, label %335

335:                                              ; preds = %334
  %336 = add i64 %1, -1
  %337 = and i64 %1, 3
  %338 = icmp ult i64 %336, 3
  br i1 %338, label %574, label %339

339:                                              ; preds = %335
  %340 = and i64 %1, -4
  br label %382

341:                                              ; preds = %329
  br i1 %333, label %622, label %342

342:                                              ; preds = %341
  %343 = add i64 %1, -1
  %344 = and i64 %1, 3
  %345 = icmp ult i64 %343, 3
  br i1 %345, label %557, label %346

346:                                              ; preds = %342
  %347 = and i64 %1, -4
  br label %348

348:                                              ; preds = %348, %346
  %349 = phi i8* [ %0, %346 ], [ %379, %348 ]
  %350 = phi i64 [ 0, %346 ], [ %378, %348 ]
  %351 = phi i64 [ 0, %346 ], [ %380, %348 ]
  %352 = shl i64 %350, 1
  %353 = getelementptr inbounds i8, i8* %2, i64 %352
  %354 = load i8, i8* %353, align 1, !tbaa !14
  %355 = getelementptr inbounds i8, i8* %349, i64 2
  store i8 %354, i8* %355, align 1, !tbaa !14
  %356 = getelementptr inbounds i8, i8* %349, i64 1
  store i8 %354, i8* %356, align 1, !tbaa !14
  store i8 %354, i8* %349, align 1, !tbaa !14
  %357 = getelementptr inbounds i8, i8* %349, i64 3
  %358 = shl i64 %350, 1
  %359 = or i64 %358, 2
  %360 = getelementptr inbounds i8, i8* %2, i64 %359
  %361 = load i8, i8* %360, align 1, !tbaa !14
  %362 = getelementptr inbounds i8, i8* %349, i64 5
  store i8 %361, i8* %362, align 1, !tbaa !14
  %363 = getelementptr inbounds i8, i8* %349, i64 4
  store i8 %361, i8* %363, align 1, !tbaa !14
  store i8 %361, i8* %357, align 1, !tbaa !14
  %364 = getelementptr inbounds i8, i8* %349, i64 6
  %365 = shl i64 %350, 1
  %366 = or i64 %365, 4
  %367 = getelementptr inbounds i8, i8* %2, i64 %366
  %368 = load i8, i8* %367, align 1, !tbaa !14
  %369 = getelementptr inbounds i8, i8* %349, i64 8
  store i8 %368, i8* %369, align 1, !tbaa !14
  %370 = getelementptr inbounds i8, i8* %349, i64 7
  store i8 %368, i8* %370, align 1, !tbaa !14
  store i8 %368, i8* %364, align 1, !tbaa !14
  %371 = getelementptr inbounds i8, i8* %349, i64 9
  %372 = shl i64 %350, 1
  %373 = or i64 %372, 6
  %374 = getelementptr inbounds i8, i8* %2, i64 %373
  %375 = load i8, i8* %374, align 1, !tbaa !14
  %376 = getelementptr inbounds i8, i8* %349, i64 11
  store i8 %375, i8* %376, align 1, !tbaa !14
  %377 = getelementptr inbounds i8, i8* %349, i64 10
  store i8 %375, i8* %377, align 1, !tbaa !14
  store i8 %375, i8* %371, align 1, !tbaa !14
  %378 = add nuw i64 %350, 4
  %379 = getelementptr inbounds i8, i8* %349, i64 12
  %380 = add i64 %351, 4
  %381 = icmp eq i64 %380, %347
  br i1 %381, label %557, label %348

382:                                              ; preds = %382, %339
  %383 = phi i8* [ %0, %339 ], [ %413, %382 ]
  %384 = phi i64 [ 0, %339 ], [ %412, %382 ]
  %385 = phi i64 [ 0, %339 ], [ %414, %382 ]
  %386 = shl i64 %384, 2
  %387 = getelementptr inbounds i8, i8* %2, i64 %386
  %388 = load i8, i8* %387, align 1, !tbaa !14
  %389 = getelementptr inbounds i8, i8* %383, i64 2
  store i8 %388, i8* %389, align 1, !tbaa !14
  %390 = getelementptr inbounds i8, i8* %383, i64 1
  store i8 %388, i8* %390, align 1, !tbaa !14
  store i8 %388, i8* %383, align 1, !tbaa !14
  %391 = getelementptr inbounds i8, i8* %383, i64 3
  %392 = shl i64 %384, 2
  %393 = or i64 %392, 4
  %394 = getelementptr inbounds i8, i8* %2, i64 %393
  %395 = load i8, i8* %394, align 1, !tbaa !14
  %396 = getelementptr inbounds i8, i8* %383, i64 5
  store i8 %395, i8* %396, align 1, !tbaa !14
  %397 = getelementptr inbounds i8, i8* %383, i64 4
  store i8 %395, i8* %397, align 1, !tbaa !14
  store i8 %395, i8* %391, align 1, !tbaa !14
  %398 = getelementptr inbounds i8, i8* %383, i64 6
  %399 = shl i64 %384, 2
  %400 = or i64 %399, 8
  %401 = getelementptr inbounds i8, i8* %2, i64 %400
  %402 = load i8, i8* %401, align 1, !tbaa !14
  %403 = getelementptr inbounds i8, i8* %383, i64 8
  store i8 %402, i8* %403, align 1, !tbaa !14
  %404 = getelementptr inbounds i8, i8* %383, i64 7
  store i8 %402, i8* %404, align 1, !tbaa !14
  store i8 %402, i8* %398, align 1, !tbaa !14
  %405 = getelementptr inbounds i8, i8* %383, i64 9
  %406 = shl i64 %384, 2
  %407 = or i64 %406, 12
  %408 = getelementptr inbounds i8, i8* %2, i64 %407
  %409 = load i8, i8* %408, align 1, !tbaa !14
  %410 = getelementptr inbounds i8, i8* %383, i64 11
  store i8 %409, i8* %410, align 1, !tbaa !14
  %411 = getelementptr inbounds i8, i8* %383, i64 10
  store i8 %409, i8* %411, align 1, !tbaa !14
  store i8 %409, i8* %405, align 1, !tbaa !14
  %412 = add nuw i64 %384, 4
  %413 = getelementptr inbounds i8, i8* %383, i64 12
  %414 = add i64 %385, 4
  %415 = icmp eq i64 %414, %340
  br i1 %415, label %574, label %382

416:                                              ; preds = %4
  %417 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %3, i64 0, i32 1
  %418 = load i32, i32* %417, align 4, !tbaa !150
  %419 = icmp eq i32 %418, 8
  %420 = icmp eq i64 %1, 0
  br i1 %419, label %427, label %421

421:                                              ; preds = %416
  br i1 %420, label %622, label %422

422:                                              ; preds = %421
  %423 = and i64 %1, 1
  %424 = icmp eq i64 %1, 1
  br i1 %424, label %607, label %425

425:                                              ; preds = %422
  %426 = and i64 %1, -2
  br label %456

427:                                              ; preds = %416
  br i1 %420, label %622, label %428

428:                                              ; preds = %427
  %429 = add i64 %1, -1
  %430 = and i64 %1, 3
  %431 = icmp ult i64 %429, 3
  br i1 %431, label %591, label %432

432:                                              ; preds = %428
  %433 = and i64 %1, -4
  br label %434

434:                                              ; preds = %434, %432
  %435 = phi i8* [ %0, %432 ], [ %453, %434 ]
  %436 = phi i64 [ 0, %432 ], [ %452, %434 ]
  %437 = phi i64 [ 0, %432 ], [ %454, %434 ]
  %438 = shl i64 %436, 2
  %439 = getelementptr inbounds i8, i8* %2, i64 %438
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef nonnull align 1 dereferenceable(3) %435, i8* noundef nonnull align 1 dereferenceable(3) %439, i64 3, i1 false) #25, !tbaa !14, !alias.scope !279
  %440 = getelementptr inbounds i8, i8* %435, i64 3
  %441 = shl i64 %436, 2
  %442 = or i64 %441, 4
  %443 = getelementptr inbounds i8, i8* %2, i64 %442
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef nonnull align 1 dereferenceable(3) %440, i8* noundef nonnull align 1 dereferenceable(3) %443, i64 3, i1 false) #25, !tbaa !14, !alias.scope !279
  %444 = getelementptr inbounds i8, i8* %435, i64 6
  %445 = shl i64 %436, 2
  %446 = or i64 %445, 8
  %447 = getelementptr inbounds i8, i8* %2, i64 %446
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef nonnull align 1 dereferenceable(3) %444, i8* noundef nonnull align 1 dereferenceable(3) %447, i64 3, i1 false) #25, !tbaa !14, !alias.scope !279
  %448 = getelementptr inbounds i8, i8* %435, i64 9
  %449 = shl i64 %436, 2
  %450 = or i64 %449, 12
  %451 = getelementptr inbounds i8, i8* %2, i64 %450
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef nonnull align 1 dereferenceable(3) %448, i8* noundef nonnull align 1 dereferenceable(3) %451, i64 3, i1 false) #25, !tbaa !14, !alias.scope !279
  %452 = add nuw i64 %436, 4
  %453 = getelementptr inbounds i8, i8* %435, i64 12
  %454 = add i64 %437, 4
  %455 = icmp eq i64 %454, %433
  br i1 %455, label %591, label %434

456:                                              ; preds = %456, %425
  %457 = phi i8* [ %0, %425 ], [ %485, %456 ]
  %458 = phi i64 [ 0, %425 ], [ %484, %456 ]
  %459 = phi i64 [ 0, %425 ], [ %486, %456 ]
  %460 = shl i64 %458, 3
  %461 = getelementptr inbounds i8, i8* %2, i64 %460
  %462 = load i8, i8* %461, align 1, !tbaa !14
  store i8 %462, i8* %457, align 1, !tbaa !14
  %463 = or i64 %460, 2
  %464 = getelementptr inbounds i8, i8* %2, i64 %463
  %465 = load i8, i8* %464, align 1, !tbaa !14
  %466 = getelementptr inbounds i8, i8* %457, i64 1
  store i8 %465, i8* %466, align 1, !tbaa !14
  %467 = or i64 %460, 4
  %468 = getelementptr inbounds i8, i8* %2, i64 %467
  %469 = load i8, i8* %468, align 1, !tbaa !14
  %470 = getelementptr inbounds i8, i8* %457, i64 2
  store i8 %469, i8* %470, align 1, !tbaa !14
  %471 = getelementptr inbounds i8, i8* %457, i64 3
  %472 = shl i64 %458, 3
  %473 = or i64 %472, 8
  %474 = getelementptr inbounds i8, i8* %2, i64 %473
  %475 = load i8, i8* %474, align 1, !tbaa !14
  store i8 %475, i8* %471, align 1, !tbaa !14
  %476 = or i64 %472, 10
  %477 = getelementptr inbounds i8, i8* %2, i64 %476
  %478 = load i8, i8* %477, align 1, !tbaa !14
  %479 = getelementptr inbounds i8, i8* %457, i64 4
  store i8 %478, i8* %479, align 1, !tbaa !14
  %480 = or i64 %472, 12
  %481 = getelementptr inbounds i8, i8* %2, i64 %480
  %482 = load i8, i8* %481, align 1, !tbaa !14
  %483 = getelementptr inbounds i8, i8* %457, i64 5
  store i8 %482, i8* %483, align 1, !tbaa !14
  %484 = add nuw i64 %458, 2
  %485 = getelementptr inbounds i8, i8* %457, i64 6
  %486 = add i64 %459, 2
  %487 = icmp eq i64 %486, %426
  br i1 %487, label %605, label %456

488:                                              ; preds = %26, %20
  %489 = phi i8* [ %0, %20 ], [ %53, %26 ]
  %490 = phi i64 [ 0, %20 ], [ %52, %26 ]
  %491 = icmp eq i64 %22, 0
  br i1 %491, label %622, label %492

492:                                              ; preds = %488, %492
  %493 = phi i8* [ %501, %492 ], [ %489, %488 ]
  %494 = phi i64 [ %500, %492 ], [ %490, %488 ]
  %495 = phi i64 [ %502, %492 ], [ 0, %488 ]
  %496 = getelementptr inbounds i8, i8* %2, i64 %494
  %497 = load i8, i8* %496, align 1, !tbaa !14
  %498 = getelementptr inbounds i8, i8* %493, i64 2
  store i8 %497, i8* %498, align 1, !tbaa !14
  %499 = getelementptr inbounds i8, i8* %493, i64 1
  store i8 %497, i8* %499, align 1, !tbaa !14
  store i8 %497, i8* %493, align 1, !tbaa !14
  %500 = add nuw i64 %494, 1
  %501 = getelementptr inbounds i8, i8* %493, i64 3
  %502 = add i64 %495, 1
  %503 = icmp eq i64 %502, %22
  br i1 %503, label %622, label %492, !llvm.loop !283

504:                                              ; preds = %56, %12
  %505 = phi i8* [ %0, %12 ], [ %87, %56 ]
  %506 = phi i64 [ 0, %12 ], [ %86, %56 ]
  %507 = icmp eq i64 %14, 0
  br i1 %507, label %622, label %508

508:                                              ; preds = %504, %508
  %509 = phi i8* [ %518, %508 ], [ %505, %504 ]
  %510 = phi i64 [ %517, %508 ], [ %506, %504 ]
  %511 = phi i64 [ %519, %508 ], [ 0, %504 ]
  %512 = shl i64 %510, 1
  %513 = getelementptr inbounds i8, i8* %2, i64 %512
  %514 = load i8, i8* %513, align 1, !tbaa !14
  %515 = getelementptr inbounds i8, i8* %509, i64 2
  store i8 %514, i8* %515, align 1, !tbaa !14
  %516 = getelementptr inbounds i8, i8* %509, i64 1
  store i8 %514, i8* %516, align 1, !tbaa !14
  store i8 %514, i8* %509, align 1, !tbaa !14
  %517 = add nuw i64 %510, 1
  %518 = getelementptr inbounds i8, i8* %509, i64 3
  %519 = add i64 %511, 1
  %520 = icmp eq i64 %519, %14
  br i1 %520, label %622, label %508, !llvm.loop !284

521:                                              ; preds = %179
  %522 = mul i64 %207, 6
  br label %523

523:                                              ; preds = %521, %170
  %524 = phi i8* [ %0, %170 ], [ %208, %521 ]
  %525 = phi i64 [ 0, %170 ], [ %522, %521 ]
  %526 = icmp eq i64 %171, 0
  br i1 %526, label %622, label %527

527:                                              ; preds = %523
  %528 = getelementptr inbounds i8, i8* %2, i64 %525
  %529 = load i8, i8* %528, align 1, !tbaa !14
  store i8 %529, i8* %524, align 1, !tbaa !14
  %530 = add i64 %525, 2
  %531 = getelementptr inbounds i8, i8* %2, i64 %530
  %532 = load i8, i8* %531, align 1, !tbaa !14
  %533 = getelementptr inbounds i8, i8* %524, i64 1
  store i8 %532, i8* %533, align 1, !tbaa !14
  %534 = add i64 %525, 4
  %535 = getelementptr inbounds i8, i8* %2, i64 %534
  %536 = load i8, i8* %535, align 1, !tbaa !14
  %537 = getelementptr inbounds i8, i8* %524, i64 2
  store i8 %536, i8* %537, align 1, !tbaa !14
  br label %622

538:                                              ; preds = %250, %243
  %539 = phi i8* [ %0, %243 ], [ %267, %250 ]
  %540 = phi i64 [ 0, %243 ], [ %266, %250 ]
  %541 = icmp eq i64 %246, 0
  br i1 %541, label %622, label %542

542:                                              ; preds = %538
  %543 = getelementptr inbounds i8, i8* %2, i64 %540
  %544 = load i8, i8* %543, align 1, !tbaa !14
  %545 = zext i8 %544 to i64
  %546 = shl nuw nsw i64 %545, 2
  %547 = getelementptr inbounds i8, i8* %245, i64 %546
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef nonnull align 1 dereferenceable(3) %539, i8* noundef nonnull align 1 dereferenceable(3) %547, i64 3, i1 false) #25, !tbaa !14, !alias.scope !275
  br label %622

548:                                              ; preds = %233, %227
  %549 = phi i8* [ %0, %227 ], [ %239, %233 ]
  %550 = icmp eq i64 %229, 0
  br i1 %550, label %622, label %551

551:                                              ; preds = %548, %551
  %552 = phi i8* [ %554, %551 ], [ %549, %548 ]
  %553 = phi i64 [ %555, %551 ], [ 0, %548 ]
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef nonnull align 1 dereferenceable(3) %552, i8* noundef nonnull align 1 dereferenceable(3) %221, i64 3, i1 false) #25, !tbaa !14, !alias.scope !271
  %554 = getelementptr inbounds i8, i8* %552, i64 3
  %555 = add i64 %553, 1
  %556 = icmp eq i64 %555, %229
  br i1 %556, label %622, label %551, !llvm.loop !285

557:                                              ; preds = %348, %342
  %558 = phi i8* [ %0, %342 ], [ %379, %348 ]
  %559 = phi i64 [ 0, %342 ], [ %378, %348 ]
  %560 = icmp eq i64 %344, 0
  br i1 %560, label %622, label %561

561:                                              ; preds = %557, %561
  %562 = phi i8* [ %571, %561 ], [ %558, %557 ]
  %563 = phi i64 [ %570, %561 ], [ %559, %557 ]
  %564 = phi i64 [ %572, %561 ], [ 0, %557 ]
  %565 = shl i64 %563, 1
  %566 = getelementptr inbounds i8, i8* %2, i64 %565
  %567 = load i8, i8* %566, align 1, !tbaa !14
  %568 = getelementptr inbounds i8, i8* %562, i64 2
  store i8 %567, i8* %568, align 1, !tbaa !14
  %569 = getelementptr inbounds i8, i8* %562, i64 1
  store i8 %567, i8* %569, align 1, !tbaa !14
  store i8 %567, i8* %562, align 1, !tbaa !14
  %570 = add nuw i64 %563, 1
  %571 = getelementptr inbounds i8, i8* %562, i64 3
  %572 = add i64 %564, 1
  %573 = icmp eq i64 %572, %344
  br i1 %573, label %622, label %561, !llvm.loop !286

574:                                              ; preds = %382, %335
  %575 = phi i8* [ %0, %335 ], [ %413, %382 ]
  %576 = phi i64 [ 0, %335 ], [ %412, %382 ]
  %577 = icmp eq i64 %337, 0
  br i1 %577, label %622, label %578

578:                                              ; preds = %574, %578
  %579 = phi i8* [ %588, %578 ], [ %575, %574 ]
  %580 = phi i64 [ %587, %578 ], [ %576, %574 ]
  %581 = phi i64 [ %589, %578 ], [ 0, %574 ]
  %582 = shl i64 %580, 2
  %583 = getelementptr inbounds i8, i8* %2, i64 %582
  %584 = load i8, i8* %583, align 1, !tbaa !14
  %585 = getelementptr inbounds i8, i8* %579, i64 2
  store i8 %584, i8* %585, align 1, !tbaa !14
  %586 = getelementptr inbounds i8, i8* %579, i64 1
  store i8 %584, i8* %586, align 1, !tbaa !14
  store i8 %584, i8* %579, align 1, !tbaa !14
  %587 = add nuw i64 %580, 1
  %588 = getelementptr inbounds i8, i8* %579, i64 3
  %589 = add i64 %581, 1
  %590 = icmp eq i64 %589, %337
  br i1 %590, label %622, label %578, !llvm.loop !287

591:                                              ; preds = %434, %428
  %592 = phi i8* [ %0, %428 ], [ %453, %434 ]
  %593 = phi i64 [ 0, %428 ], [ %452, %434 ]
  %594 = icmp eq i64 %430, 0
  br i1 %594, label %622, label %595

595:                                              ; preds = %591, %595
  %596 = phi i8* [ %602, %595 ], [ %592, %591 ]
  %597 = phi i64 [ %601, %595 ], [ %593, %591 ]
  %598 = phi i64 [ %603, %595 ], [ 0, %591 ]
  %599 = shl i64 %597, 2
  %600 = getelementptr inbounds i8, i8* %2, i64 %599
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef nonnull align 1 dereferenceable(3) %596, i8* noundef nonnull align 1 dereferenceable(3) %600, i64 3, i1 false) #25, !tbaa !14, !alias.scope !279
  %601 = add nuw i64 %597, 1
  %602 = getelementptr inbounds i8, i8* %596, i64 3
  %603 = add i64 %598, 1
  %604 = icmp eq i64 %603, %430
  br i1 %604, label %622, label %595, !llvm.loop !288

605:                                              ; preds = %456
  %606 = shl i64 %484, 3
  br label %607

607:                                              ; preds = %605, %422
  %608 = phi i8* [ %0, %422 ], [ %485, %605 ]
  %609 = phi i64 [ 0, %422 ], [ %606, %605 ]
  %610 = icmp eq i64 %423, 0
  br i1 %610, label %622, label %611

611:                                              ; preds = %607
  %612 = getelementptr inbounds i8, i8* %2, i64 %609
  %613 = load i8, i8* %612, align 1, !tbaa !14
  store i8 %613, i8* %608, align 1, !tbaa !14
  %614 = or i64 %609, 2
  %615 = getelementptr inbounds i8, i8* %2, i64 %614
  %616 = load i8, i8* %615, align 1, !tbaa !14
  %617 = getelementptr inbounds i8, i8* %608, i64 1
  store i8 %616, i8* %617, align 1, !tbaa !14
  %618 = or i64 %609, 4
  %619 = getelementptr inbounds i8, i8* %2, i64 %618
  %620 = load i8, i8* %619, align 1, !tbaa !14
  %621 = getelementptr inbounds i8, i8* %608, i64 2
  store i8 %620, i8* %621, align 1, !tbaa !14
  br label %622

622:                                              ; preds = %611, %607, %591, %595, %574, %578, %557, %561, %320, %548, %551, %542, %538, %527, %523, %504, %508, %488, %492, %153, %421, %427, %334, %341, %216, %242, %168, %10, %18, %90, %178, %175, %4
  ret void
}

; Function Attrs: nofree nosync nounwind uwtable
define internal fastcc void @_ZL18getPixelColorRGBA8PhS_S_S_PKhmPK16LodePNGColorMode(i8* nocapture noundef %0, i8* nocapture noundef %1, i8* nocapture noundef writeonly %2, i8* nocapture noundef writeonly %3, i8* noundef readonly %4, i64 noundef %5, %struct.LodePNGColorMode* noundef readonly %6) unnamed_addr #8 {
  %8 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %6, i64 0, i32 0
  %9 = load i32, i32* %8, align 8, !tbaa !147
  switch i32 %9, label %340 [
    i32 0, label %10
    i32 2, label %117
    i32 3, label %202
    i32 4, label %290
    i32 6, label %308
  ]

10:                                               ; preds = %7
  %11 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %6, i64 0, i32 1
  %12 = load i32, i32* %11, align 4, !tbaa !150
  switch i32 %12, label %45 [
    i32 8, label %13
    i32 16, label %25
  ]

13:                                               ; preds = %10
  %14 = getelementptr inbounds i8, i8* %4, i64 %5
  %15 = load i8, i8* %14, align 1, !tbaa !14
  store i8 %15, i8* %2, align 1, !tbaa !14
  store i8 %15, i8* %1, align 1, !tbaa !14
  store i8 %15, i8* %0, align 1, !tbaa !14
  %16 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %6, i64 0, i32 4
  %17 = load i32, i32* %16, align 8, !tbaa !161
  %18 = icmp eq i32 %17, 0
  br i1 %18, label %24, label %19

19:                                               ; preds = %13
  %20 = zext i8 %15 to i32
  %21 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %6, i64 0, i32 5
  %22 = load i32, i32* %21, align 4, !tbaa !235
  %23 = icmp eq i32 %22, %20
  br i1 %23, label %338, label %24

24:                                               ; preds = %19, %13
  br label %338

25:                                               ; preds = %10
  %26 = shl i64 %5, 1
  %27 = getelementptr inbounds i8, i8* %4, i64 %26
  %28 = load i8, i8* %27, align 1, !tbaa !14
  store i8 %28, i8* %2, align 1, !tbaa !14
  store i8 %28, i8* %1, align 1, !tbaa !14
  store i8 %28, i8* %0, align 1, !tbaa !14
  %29 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %6, i64 0, i32 4
  %30 = load i32, i32* %29, align 8, !tbaa !161
  %31 = icmp eq i32 %30, 0
  br i1 %31, label %44, label %32

32:                                               ; preds = %25
  %33 = load i8, i8* %27, align 1, !tbaa !14
  %34 = zext i8 %33 to i32
  %35 = shl nuw nsw i32 %34, 8
  %36 = or i64 %26, 1
  %37 = getelementptr inbounds i8, i8* %4, i64 %36
  %38 = load i8, i8* %37, align 1, !tbaa !14
  %39 = zext i8 %38 to i32
  %40 = or i32 %35, %39
  %41 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %6, i64 0, i32 5
  %42 = load i32, i32* %41, align 4, !tbaa !235
  %43 = icmp eq i32 %40, %42
  br i1 %43, label %338, label %44

44:                                               ; preds = %32, %25
  br label %338

45:                                               ; preds = %10
  %46 = shl nsw i32 -1, %12
  %47 = xor i32 %46, -1
  %48 = zext i32 %12 to i64
  %49 = icmp eq i32 %12, 0
  br i1 %49, label %104, label %50

50:                                               ; preds = %45
  %51 = mul i64 %48, %5
  %52 = and i64 %48, 1
  %53 = icmp eq i32 %12, 1
  br i1 %53, label %88, label %54

54:                                               ; preds = %50
  %55 = and i64 %48, 4294967294
  br label %56

56:                                               ; preds = %56, %54
  %57 = phi i64 [ %51, %54 ], [ %81, %56 ]
  %58 = phi i32 [ 0, %54 ], [ %83, %56 ]
  %59 = phi i64 [ 0, %54 ], [ %84, %56 ]
  %60 = lshr i64 %57, 3
  %61 = getelementptr inbounds i8, i8* %4, i64 %60
  %62 = load i8, i8* %61, align 1, !tbaa !14
  %63 = trunc i64 %57 to i8
  %64 = and i8 %63, 7
  %65 = xor i8 %64, 7
  %66 = lshr i8 %62, %65
  %67 = add i64 %57, 1
  %68 = shl i32 %58, 2
  %69 = shl i8 %66, 1
  %70 = and i8 %69, 2
  %71 = zext i8 %70 to i32
  %72 = or i32 %68, %71
  %73 = lshr i64 %67, 3
  %74 = getelementptr inbounds i8, i8* %4, i64 %73
  %75 = load i8, i8* %74, align 1, !tbaa !14
  %76 = trunc i64 %67 to i8
  %77 = and i8 %76, 7
  %78 = xor i8 %77, 7
  %79 = lshr i8 %75, %78
  %80 = and i8 %79, 1
  %81 = add i64 %57, 2
  %82 = zext i8 %80 to i32
  %83 = or i32 %72, %82
  %84 = add i64 %59, 2
  %85 = icmp eq i64 %84, %55
  br i1 %85, label %86, label %56

86:                                               ; preds = %56
  %87 = shl i32 %83, 1
  br label %88

88:                                               ; preds = %86, %50
  %89 = phi i32 [ undef, %50 ], [ %83, %86 ]
  %90 = phi i64 [ %51, %50 ], [ %81, %86 ]
  %91 = phi i32 [ 0, %50 ], [ %87, %86 ]
  %92 = icmp eq i64 %52, 0
  br i1 %92, label %104, label %93

93:                                               ; preds = %88
  %94 = lshr i64 %90, 3
  %95 = getelementptr inbounds i8, i8* %4, i64 %94
  %96 = load i8, i8* %95, align 1, !tbaa !14
  %97 = trunc i64 %90 to i8
  %98 = and i8 %97, 7
  %99 = xor i8 %98, 7
  %100 = lshr i8 %96, %99
  %101 = and i8 %100, 1
  %102 = zext i8 %101 to i32
  %103 = or i32 %91, %102
  br label %104

104:                                              ; preds = %93, %88, %45
  %105 = phi i32 [ 0, %45 ], [ %89, %88 ], [ %103, %93 ]
  %106 = mul i32 %105, 255
  %107 = udiv i32 %106, %47
  %108 = trunc i32 %107 to i8
  store i8 %108, i8* %2, align 1, !tbaa !14
  store i8 %108, i8* %1, align 1, !tbaa !14
  store i8 %108, i8* %0, align 1, !tbaa !14
  %109 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %6, i64 0, i32 4
  %110 = load i32, i32* %109, align 8, !tbaa !161
  %111 = icmp eq i32 %110, 0
  br i1 %111, label %116, label %112

112:                                              ; preds = %104
  %113 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %6, i64 0, i32 5
  %114 = load i32, i32* %113, align 4, !tbaa !235
  %115 = icmp eq i32 %105, %114
  br i1 %115, label %338, label %116

116:                                              ; preds = %112, %104
  br label %338

117:                                              ; preds = %7
  %118 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %6, i64 0, i32 1
  %119 = load i32, i32* %118, align 4, !tbaa !150
  %120 = icmp eq i32 %119, 8
  br i1 %120, label %121, label %152

121:                                              ; preds = %117
  %122 = mul i64 %5, 3
  %123 = getelementptr inbounds i8, i8* %4, i64 %122
  %124 = load i8, i8* %123, align 1, !tbaa !14
  store i8 %124, i8* %0, align 1, !tbaa !14
  %125 = add i64 %122, 1
  %126 = getelementptr inbounds i8, i8* %4, i64 %125
  %127 = load i8, i8* %126, align 1, !tbaa !14
  store i8 %127, i8* %1, align 1, !tbaa !14
  %128 = add i64 %122, 2
  %129 = getelementptr inbounds i8, i8* %4, i64 %128
  %130 = load i8, i8* %129, align 1, !tbaa !14
  store i8 %130, i8* %2, align 1, !tbaa !14
  %131 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %6, i64 0, i32 4
  %132 = load i32, i32* %131, align 8, !tbaa !161
  %133 = icmp eq i32 %132, 0
  br i1 %133, label %151, label %134

134:                                              ; preds = %121
  %135 = load i8, i8* %0, align 1, !tbaa !14
  %136 = zext i8 %135 to i32
  %137 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %6, i64 0, i32 5
  %138 = load i32, i32* %137, align 4, !tbaa !235
  %139 = icmp eq i32 %138, %136
  br i1 %139, label %140, label %151

140:                                              ; preds = %134
  %141 = load i8, i8* %1, align 1, !tbaa !14
  %142 = zext i8 %141 to i32
  %143 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %6, i64 0, i32 6
  %144 = load i32, i32* %143, align 8, !tbaa !236
  %145 = icmp eq i32 %144, %142
  br i1 %145, label %146, label %151

146:                                              ; preds = %140
  %147 = zext i8 %130 to i32
  %148 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %6, i64 0, i32 7
  %149 = load i32, i32* %148, align 4, !tbaa !237
  %150 = icmp eq i32 %149, %147
  br i1 %150, label %338, label %151

151:                                              ; preds = %146, %140, %134, %121
  br label %338

152:                                              ; preds = %117
  %153 = mul i64 %5, 6
  %154 = getelementptr inbounds i8, i8* %4, i64 %153
  %155 = load i8, i8* %154, align 1, !tbaa !14
  store i8 %155, i8* %0, align 1, !tbaa !14
  %156 = add i64 %153, 2
  %157 = getelementptr inbounds i8, i8* %4, i64 %156
  %158 = load i8, i8* %157, align 1, !tbaa !14
  store i8 %158, i8* %1, align 1, !tbaa !14
  %159 = add i64 %153, 4
  %160 = getelementptr inbounds i8, i8* %4, i64 %159
  %161 = load i8, i8* %160, align 1, !tbaa !14
  store i8 %161, i8* %2, align 1, !tbaa !14
  %162 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %6, i64 0, i32 4
  %163 = load i32, i32* %162, align 8, !tbaa !161
  %164 = icmp eq i32 %163, 0
  br i1 %164, label %201, label %165

165:                                              ; preds = %152
  %166 = load i8, i8* %154, align 1, !tbaa !14
  %167 = zext i8 %166 to i32
  %168 = shl nuw nsw i32 %167, 8
  %169 = or i64 %153, 1
  %170 = getelementptr inbounds i8, i8* %4, i64 %169
  %171 = load i8, i8* %170, align 1, !tbaa !14
  %172 = zext i8 %171 to i32
  %173 = or i32 %168, %172
  %174 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %6, i64 0, i32 5
  %175 = load i32, i32* %174, align 4, !tbaa !235
  %176 = icmp eq i32 %173, %175
  br i1 %176, label %177, label %201

177:                                              ; preds = %165
  %178 = load i8, i8* %157, align 1, !tbaa !14
  %179 = zext i8 %178 to i32
  %180 = shl nuw nsw i32 %179, 8
  %181 = add i64 %153, 3
  %182 = getelementptr inbounds i8, i8* %4, i64 %181
  %183 = load i8, i8* %182, align 1, !tbaa !14
  %184 = zext i8 %183 to i32
  %185 = or i32 %180, %184
  %186 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %6, i64 0, i32 6
  %187 = load i32, i32* %186, align 8, !tbaa !236
  %188 = icmp eq i32 %185, %187
  br i1 %188, label %189, label %201

189:                                              ; preds = %177
  %190 = load i8, i8* %160, align 1, !tbaa !14
  %191 = zext i8 %190 to i32
  %192 = shl nuw nsw i32 %191, 8
  %193 = add i64 %153, 5
  %194 = getelementptr inbounds i8, i8* %4, i64 %193
  %195 = load i8, i8* %194, align 1, !tbaa !14
  %196 = zext i8 %195 to i32
  %197 = or i32 %192, %196
  %198 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %6, i64 0, i32 7
  %199 = load i32, i32* %198, align 4, !tbaa !237
  %200 = icmp eq i32 %197, %199
  br i1 %200, label %338, label %201

201:                                              ; preds = %189, %177, %165, %152
  br label %338

202:                                              ; preds = %7
  %203 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %6, i64 0, i32 1
  %204 = load i32, i32* %203, align 4, !tbaa !150
  %205 = icmp eq i32 %204, 8
  br i1 %205, label %206, label %210

206:                                              ; preds = %202
  %207 = getelementptr inbounds i8, i8* %4, i64 %5
  %208 = load i8, i8* %207, align 1, !tbaa !14
  %209 = zext i8 %208 to i32
  br label %267

210:                                              ; preds = %202
  %211 = zext i32 %204 to i64
  %212 = icmp eq i32 %204, 0
  br i1 %212, label %267, label %213

213:                                              ; preds = %210
  %214 = mul i64 %211, %5
  %215 = and i64 %211, 1
  %216 = icmp eq i32 %204, 1
  br i1 %216, label %251, label %217

217:                                              ; preds = %213
  %218 = and i64 %211, 4294967294
  br label %219

219:                                              ; preds = %219, %217
  %220 = phi i64 [ %214, %217 ], [ %244, %219 ]
  %221 = phi i32 [ 0, %217 ], [ %246, %219 ]
  %222 = phi i64 [ 0, %217 ], [ %247, %219 ]
  %223 = lshr i64 %220, 3
  %224 = getelementptr inbounds i8, i8* %4, i64 %223
  %225 = load i8, i8* %224, align 1, !tbaa !14
  %226 = trunc i64 %220 to i8
  %227 = and i8 %226, 7
  %228 = xor i8 %227, 7
  %229 = lshr i8 %225, %228
  %230 = add i64 %220, 1
  %231 = shl i32 %221, 2
  %232 = shl i8 %229, 1
  %233 = and i8 %232, 2
  %234 = zext i8 %233 to i32
  %235 = or i32 %231, %234
  %236 = lshr i64 %230, 3
  %237 = getelementptr inbounds i8, i8* %4, i64 %236
  %238 = load i8, i8* %237, align 1, !tbaa !14
  %239 = trunc i64 %230 to i8
  %240 = and i8 %239, 7
  %241 = xor i8 %240, 7
  %242 = lshr i8 %238, %241
  %243 = and i8 %242, 1
  %244 = add i64 %220, 2
  %245 = zext i8 %243 to i32
  %246 = or i32 %235, %245
  %247 = add i64 %222, 2
  %248 = icmp eq i64 %247, %218
  br i1 %248, label %249, label %219

249:                                              ; preds = %219
  %250 = shl i32 %246, 1
  br label %251

251:                                              ; preds = %249, %213
  %252 = phi i32 [ undef, %213 ], [ %246, %249 ]
  %253 = phi i64 [ %214, %213 ], [ %244, %249 ]
  %254 = phi i32 [ 0, %213 ], [ %250, %249 ]
  %255 = icmp eq i64 %215, 0
  br i1 %255, label %267, label %256

256:                                              ; preds = %251
  %257 = lshr i64 %253, 3
  %258 = getelementptr inbounds i8, i8* %4, i64 %257
  %259 = load i8, i8* %258, align 1, !tbaa !14
  %260 = trunc i64 %253 to i8
  %261 = and i8 %260, 7
  %262 = xor i8 %261, 7
  %263 = lshr i8 %259, %262
  %264 = and i8 %263, 1
  %265 = zext i8 %264 to i32
  %266 = or i32 %254, %265
  br label %267

267:                                              ; preds = %256, %251, %210, %206
  %268 = phi i32 [ %209, %206 ], [ 0, %210 ], [ %252, %251 ], [ %266, %256 ]
  %269 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %6, i64 0, i32 2
  %270 = load i8*, i8** %269, align 8, !tbaa !151
  %271 = shl i32 %268, 2
  %272 = zext i32 %271 to i64
  %273 = getelementptr inbounds i8, i8* %270, i64 %272
  %274 = load i8, i8* %273, align 1, !tbaa !14
  store i8 %274, i8* %0, align 1, !tbaa !14
  %275 = load i8*, i8** %269, align 8, !tbaa !151
  %276 = or i32 %271, 1
  %277 = zext i32 %276 to i64
  %278 = getelementptr inbounds i8, i8* %275, i64 %277
  %279 = load i8, i8* %278, align 1, !tbaa !14
  store i8 %279, i8* %1, align 1, !tbaa !14
  %280 = load i8*, i8** %269, align 8, !tbaa !151
  %281 = or i32 %271, 2
  %282 = zext i32 %281 to i64
  %283 = getelementptr inbounds i8, i8* %280, i64 %282
  %284 = load i8, i8* %283, align 1, !tbaa !14
  store i8 %284, i8* %2, align 1, !tbaa !14
  %285 = load i8*, i8** %269, align 8, !tbaa !151
  %286 = or i32 %271, 3
  %287 = zext i32 %286 to i64
  %288 = getelementptr inbounds i8, i8* %285, i64 %287
  %289 = load i8, i8* %288, align 1, !tbaa !14
  br label %338

290:                                              ; preds = %7
  %291 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %6, i64 0, i32 1
  %292 = load i32, i32* %291, align 4, !tbaa !150
  %293 = icmp eq i32 %292, 8
  br i1 %293, label %294, label %301

294:                                              ; preds = %290
  %295 = shl i64 %5, 1
  %296 = getelementptr inbounds i8, i8* %4, i64 %295
  %297 = load i8, i8* %296, align 1, !tbaa !14
  store i8 %297, i8* %2, align 1, !tbaa !14
  store i8 %297, i8* %1, align 1, !tbaa !14
  store i8 %297, i8* %0, align 1, !tbaa !14
  %298 = or i64 %295, 1
  %299 = getelementptr inbounds i8, i8* %4, i64 %298
  %300 = load i8, i8* %299, align 1, !tbaa !14
  br label %338

301:                                              ; preds = %290
  %302 = shl i64 %5, 2
  %303 = getelementptr inbounds i8, i8* %4, i64 %302
  %304 = load i8, i8* %303, align 1, !tbaa !14
  store i8 %304, i8* %2, align 1, !tbaa !14
  store i8 %304, i8* %1, align 1, !tbaa !14
  store i8 %304, i8* %0, align 1, !tbaa !14
  %305 = or i64 %302, 2
  %306 = getelementptr inbounds i8, i8* %4, i64 %305
  %307 = load i8, i8* %306, align 1, !tbaa !14
  br label %338

308:                                              ; preds = %7
  %309 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %6, i64 0, i32 1
  %310 = load i32, i32* %309, align 4, !tbaa !150
  %311 = icmp eq i32 %310, 8
  br i1 %311, label %312, label %325

312:                                              ; preds = %308
  %313 = shl i64 %5, 2
  %314 = getelementptr inbounds i8, i8* %4, i64 %313
  %315 = load i8, i8* %314, align 1, !tbaa !14
  store i8 %315, i8* %0, align 1, !tbaa !14
  %316 = or i64 %313, 1
  %317 = getelementptr inbounds i8, i8* %4, i64 %316
  %318 = load i8, i8* %317, align 1, !tbaa !14
  store i8 %318, i8* %1, align 1, !tbaa !14
  %319 = or i64 %313, 2
  %320 = getelementptr inbounds i8, i8* %4, i64 %319
  %321 = load i8, i8* %320, align 1, !tbaa !14
  store i8 %321, i8* %2, align 1, !tbaa !14
  %322 = or i64 %313, 3
  %323 = getelementptr inbounds i8, i8* %4, i64 %322
  %324 = load i8, i8* %323, align 1, !tbaa !14
  br label %338

325:                                              ; preds = %308
  %326 = shl i64 %5, 3
  %327 = getelementptr inbounds i8, i8* %4, i64 %326
  %328 = load i8, i8* %327, align 1, !tbaa !14
  store i8 %328, i8* %0, align 1, !tbaa !14
  %329 = or i64 %326, 2
  %330 = getelementptr inbounds i8, i8* %4, i64 %329
  %331 = load i8, i8* %330, align 1, !tbaa !14
  store i8 %331, i8* %1, align 1, !tbaa !14
  %332 = or i64 %326, 4
  %333 = getelementptr inbounds i8, i8* %4, i64 %332
  %334 = load i8, i8* %333, align 1, !tbaa !14
  store i8 %334, i8* %2, align 1, !tbaa !14
  %335 = or i64 %326, 6
  %336 = getelementptr inbounds i8, i8* %4, i64 %335
  %337 = load i8, i8* %336, align 1, !tbaa !14
  br label %338

338:                                              ; preds = %189, %146, %116, %112, %32, %19, %44, %24, %267, %325, %312, %294, %301, %151, %201
  %339 = phi i8 [ -1, %201 ], [ -1, %151 ], [ %307, %301 ], [ %300, %294 ], [ %324, %312 ], [ %337, %325 ], [ %289, %267 ], [ -1, %24 ], [ -1, %44 ], [ 0, %19 ], [ 0, %32 ], [ -1, %116 ], [ 0, %112 ], [ 0, %146 ], [ 0, %189 ]
  store i8 %339, i8* %3, align 1, !tbaa !14
  br label %340

340:                                              ; preds = %338, %7
  ret void
}

; Function Attrs: nofree norecurse nosync nounwind readonly uwtable
define internal fastcc noundef i32 @_ZL14color_tree_getP9ColorTreehhhh(%struct.ColorTree* noundef readonly %0, i8 noundef zeroext %1, i8 noundef zeroext %2, i8 noundef zeroext %3, i8 noundef zeroext %4) unnamed_addr #13 {
  %6 = zext i8 %1 to i32
  %7 = zext i8 %2 to i32
  %8 = zext i8 %3 to i32
  %9 = zext i8 %4 to i32
  %10 = shl nuw nsw i32 %6, 3
  %11 = and i32 %10, 8
  %12 = shl nuw nsw i32 %7, 2
  %13 = and i32 %12, 4
  %14 = shl nuw nsw i32 %8, 1
  %15 = and i32 %14, 2
  %16 = and i32 %9, 1
  %17 = or i32 %13, %16
  %18 = or i32 %17, %11
  %19 = or i32 %18, %15
  %20 = zext i32 %19 to i64
  %21 = getelementptr inbounds %struct.ColorTree, %struct.ColorTree* %0, i64 0, i32 0, i64 %20
  %22 = load %struct.ColorTree*, %struct.ColorTree** %21, align 8, !tbaa !7
  %23 = icmp eq %struct.ColorTree* %22, null
  br i1 %23, label %135, label %24

24:                                               ; preds = %5
  %25 = shl nuw nsw i32 %6, 2
  %26 = and i32 %25, 8
  %27 = shl nuw nsw i32 %7, 1
  %28 = and i32 %27, 4
  %29 = and i32 %8, 2
  %30 = lshr i32 %9, 1
  %31 = and i32 %30, 1
  %32 = or i32 %28, %31
  %33 = or i32 %32, %26
  %34 = or i32 %33, %29
  %35 = zext i32 %34 to i64
  %36 = getelementptr inbounds %struct.ColorTree, %struct.ColorTree* %22, i64 0, i32 0, i64 %35
  %37 = load %struct.ColorTree*, %struct.ColorTree** %36, align 8, !tbaa !7
  %38 = icmp eq %struct.ColorTree* %37, null
  br i1 %38, label %135, label %39

39:                                               ; preds = %24
  %40 = shl nuw nsw i32 %6, 1
  %41 = and i32 %40, 8
  %42 = and i32 %7, 4
  %43 = lshr i32 %8, 1
  %44 = and i32 %43, 2
  %45 = lshr i32 %9, 2
  %46 = and i32 %45, 1
  %47 = or i32 %42, %46
  %48 = or i32 %47, %41
  %49 = or i32 %48, %44
  %50 = zext i32 %49 to i64
  %51 = getelementptr inbounds %struct.ColorTree, %struct.ColorTree* %37, i64 0, i32 0, i64 %50
  %52 = load %struct.ColorTree*, %struct.ColorTree** %51, align 8, !tbaa !7
  %53 = icmp eq %struct.ColorTree* %52, null
  br i1 %53, label %135, label %54

54:                                               ; preds = %39
  %55 = and i32 %6, 8
  %56 = lshr i32 %7, 1
  %57 = and i32 %56, 4
  %58 = lshr i32 %8, 2
  %59 = and i32 %58, 2
  %60 = lshr i32 %9, 3
  %61 = and i32 %60, 1
  %62 = or i32 %57, %61
  %63 = or i32 %62, %55
  %64 = or i32 %63, %59
  %65 = zext i32 %64 to i64
  %66 = getelementptr inbounds %struct.ColorTree, %struct.ColorTree* %52, i64 0, i32 0, i64 %65
  %67 = load %struct.ColorTree*, %struct.ColorTree** %66, align 8, !tbaa !7
  %68 = icmp eq %struct.ColorTree* %67, null
  br i1 %68, label %135, label %69

69:                                               ; preds = %54
  %70 = lshr i32 %6, 1
  %71 = and i32 %70, 8
  %72 = lshr i32 %7, 2
  %73 = and i32 %72, 4
  %74 = lshr i32 %8, 3
  %75 = and i32 %74, 2
  %76 = lshr i32 %9, 4
  %77 = and i32 %76, 1
  %78 = or i32 %73, %77
  %79 = or i32 %78, %71
  %80 = or i32 %79, %75
  %81 = zext i32 %80 to i64
  %82 = getelementptr inbounds %struct.ColorTree, %struct.ColorTree* %67, i64 0, i32 0, i64 %81
  %83 = load %struct.ColorTree*, %struct.ColorTree** %82, align 8, !tbaa !7
  %84 = icmp eq %struct.ColorTree* %83, null
  br i1 %84, label %135, label %85

85:                                               ; preds = %69
  %86 = lshr i32 %6, 2
  %87 = and i32 %86, 8
  %88 = lshr i32 %7, 3
  %89 = and i32 %88, 4
  %90 = lshr i32 %8, 4
  %91 = and i32 %90, 2
  %92 = lshr i32 %9, 5
  %93 = and i32 %92, 1
  %94 = or i32 %89, %93
  %95 = or i32 %94, %87
  %96 = or i32 %95, %91
  %97 = zext i32 %96 to i64
  %98 = getelementptr inbounds %struct.ColorTree, %struct.ColorTree* %83, i64 0, i32 0, i64 %97
  %99 = load %struct.ColorTree*, %struct.ColorTree** %98, align 8, !tbaa !7
  %100 = icmp eq %struct.ColorTree* %99, null
  br i1 %100, label %135, label %101

101:                                              ; preds = %85
  %102 = lshr i32 %6, 3
  %103 = and i32 %102, 8
  %104 = lshr i32 %7, 4
  %105 = and i32 %104, 4
  %106 = lshr i32 %8, 5
  %107 = and i32 %106, 2
  %108 = lshr i32 %9, 6
  %109 = and i32 %108, 1
  %110 = or i32 %105, %109
  %111 = or i32 %110, %103
  %112 = or i32 %111, %107
  %113 = zext i32 %112 to i64
  %114 = getelementptr inbounds %struct.ColorTree, %struct.ColorTree* %99, i64 0, i32 0, i64 %113
  %115 = load %struct.ColorTree*, %struct.ColorTree** %114, align 8, !tbaa !7
  %116 = icmp eq %struct.ColorTree* %115, null
  br i1 %116, label %135, label %117

117:                                              ; preds = %101
  %118 = lshr i32 %6, 4
  %119 = and i32 %118, 8
  %120 = lshr i32 %7, 5
  %121 = and i32 %120, 4
  %122 = lshr i32 %8, 6
  %123 = and i32 %122, 2
  %124 = lshr i32 %9, 7
  %125 = or i32 %121, %124
  %126 = or i32 %125, %119
  %127 = or i32 %126, %123
  %128 = zext i32 %127 to i64
  %129 = getelementptr inbounds %struct.ColorTree, %struct.ColorTree* %115, i64 0, i32 0, i64 %128
  %130 = load %struct.ColorTree*, %struct.ColorTree** %129, align 8, !tbaa !7
  %131 = icmp eq %struct.ColorTree* %130, null
  br i1 %131, label %135, label %132

132:                                              ; preds = %117
  %133 = getelementptr inbounds %struct.ColorTree, %struct.ColorTree* %130, i64 0, i32 1
  %134 = load i32, i32* %133, align 8, !tbaa !249
  br label %135

135:                                              ; preds = %5, %24, %39, %54, %69, %85, %101, %117, %132
  %136 = phi i32 [ %134, %132 ], [ -1, %117 ], [ -1, %101 ], [ -1, %85 ], [ -1, %69 ], [ -1, %54 ], [ -1, %39 ], [ -1, %24 ], [ -1, %5 ]
  ret i32 %136
}

; Function Attrs: nounwind uwtable
define internal fastcc void @_ZL18color_tree_cleanupP9ColorTree(%struct.ColorTree* nocapture noundef readonly %0) unnamed_addr #3 {
  %2 = getelementptr inbounds %struct.ColorTree, %struct.ColorTree* %0, i64 0, i32 0, i64 0
  %3 = load %struct.ColorTree*, %struct.ColorTree** %2, align 8, !tbaa !7
  %4 = icmp eq %struct.ColorTree* %3, null
  br i1 %4, label %8, label %5

5:                                                ; preds = %1
  tail call fastcc void @_ZL18color_tree_cleanupP9ColorTree(%struct.ColorTree* noundef nonnull %3)
  %6 = bitcast %struct.ColorTree* %0 to i8**
  %7 = load i8*, i8** %6, align 8, !tbaa !7
  tail call void @free(i8* noundef %7) #25
  br label %8

8:                                                ; preds = %1, %5
  %9 = getelementptr inbounds %struct.ColorTree, %struct.ColorTree* %0, i64 0, i32 0, i64 1
  %10 = load %struct.ColorTree*, %struct.ColorTree** %9, align 8, !tbaa !7
  %11 = icmp eq %struct.ColorTree* %10, null
  br i1 %11, label %15, label %12

12:                                               ; preds = %8
  tail call fastcc void @_ZL18color_tree_cleanupP9ColorTree(%struct.ColorTree* noundef nonnull %10)
  %13 = bitcast %struct.ColorTree** %9 to i8**
  %14 = load i8*, i8** %13, align 8, !tbaa !7
  tail call void @free(i8* noundef %14) #25
  br label %15

15:                                               ; preds = %12, %8
  %16 = getelementptr inbounds %struct.ColorTree, %struct.ColorTree* %0, i64 0, i32 0, i64 2
  %17 = load %struct.ColorTree*, %struct.ColorTree** %16, align 8, !tbaa !7
  %18 = icmp eq %struct.ColorTree* %17, null
  br i1 %18, label %22, label %19

19:                                               ; preds = %15
  tail call fastcc void @_ZL18color_tree_cleanupP9ColorTree(%struct.ColorTree* noundef nonnull %17)
  %20 = bitcast %struct.ColorTree** %16 to i8**
  %21 = load i8*, i8** %20, align 8, !tbaa !7
  tail call void @free(i8* noundef %21) #25
  br label %22

22:                                               ; preds = %19, %15
  %23 = getelementptr inbounds %struct.ColorTree, %struct.ColorTree* %0, i64 0, i32 0, i64 3
  %24 = load %struct.ColorTree*, %struct.ColorTree** %23, align 8, !tbaa !7
  %25 = icmp eq %struct.ColorTree* %24, null
  br i1 %25, label %29, label %26

26:                                               ; preds = %22
  tail call fastcc void @_ZL18color_tree_cleanupP9ColorTree(%struct.ColorTree* noundef nonnull %24)
  %27 = bitcast %struct.ColorTree** %23 to i8**
  %28 = load i8*, i8** %27, align 8, !tbaa !7
  tail call void @free(i8* noundef %28) #25
  br label %29

29:                                               ; preds = %26, %22
  %30 = getelementptr inbounds %struct.ColorTree, %struct.ColorTree* %0, i64 0, i32 0, i64 4
  %31 = load %struct.ColorTree*, %struct.ColorTree** %30, align 8, !tbaa !7
  %32 = icmp eq %struct.ColorTree* %31, null
  br i1 %32, label %36, label %33

33:                                               ; preds = %29
  tail call fastcc void @_ZL18color_tree_cleanupP9ColorTree(%struct.ColorTree* noundef nonnull %31)
  %34 = bitcast %struct.ColorTree** %30 to i8**
  %35 = load i8*, i8** %34, align 8, !tbaa !7
  tail call void @free(i8* noundef %35) #25
  br label %36

36:                                               ; preds = %33, %29
  %37 = getelementptr inbounds %struct.ColorTree, %struct.ColorTree* %0, i64 0, i32 0, i64 5
  %38 = load %struct.ColorTree*, %struct.ColorTree** %37, align 8, !tbaa !7
  %39 = icmp eq %struct.ColorTree* %38, null
  br i1 %39, label %43, label %40

40:                                               ; preds = %36
  tail call fastcc void @_ZL18color_tree_cleanupP9ColorTree(%struct.ColorTree* noundef nonnull %38)
  %41 = bitcast %struct.ColorTree** %37 to i8**
  %42 = load i8*, i8** %41, align 8, !tbaa !7
  tail call void @free(i8* noundef %42) #25
  br label %43

43:                                               ; preds = %40, %36
  %44 = getelementptr inbounds %struct.ColorTree, %struct.ColorTree* %0, i64 0, i32 0, i64 6
  %45 = load %struct.ColorTree*, %struct.ColorTree** %44, align 8, !tbaa !7
  %46 = icmp eq %struct.ColorTree* %45, null
  br i1 %46, label %50, label %47

47:                                               ; preds = %43
  tail call fastcc void @_ZL18color_tree_cleanupP9ColorTree(%struct.ColorTree* noundef nonnull %45)
  %48 = bitcast %struct.ColorTree** %44 to i8**
  %49 = load i8*, i8** %48, align 8, !tbaa !7
  tail call void @free(i8* noundef %49) #25
  br label %50

50:                                               ; preds = %47, %43
  %51 = getelementptr inbounds %struct.ColorTree, %struct.ColorTree* %0, i64 0, i32 0, i64 7
  %52 = load %struct.ColorTree*, %struct.ColorTree** %51, align 8, !tbaa !7
  %53 = icmp eq %struct.ColorTree* %52, null
  br i1 %53, label %57, label %54

54:                                               ; preds = %50
  tail call fastcc void @_ZL18color_tree_cleanupP9ColorTree(%struct.ColorTree* noundef nonnull %52)
  %55 = bitcast %struct.ColorTree** %51 to i8**
  %56 = load i8*, i8** %55, align 8, !tbaa !7
  tail call void @free(i8* noundef %56) #25
  br label %57

57:                                               ; preds = %54, %50
  %58 = getelementptr inbounds %struct.ColorTree, %struct.ColorTree* %0, i64 0, i32 0, i64 8
  %59 = load %struct.ColorTree*, %struct.ColorTree** %58, align 8, !tbaa !7
  %60 = icmp eq %struct.ColorTree* %59, null
  br i1 %60, label %64, label %61

61:                                               ; preds = %57
  tail call fastcc void @_ZL18color_tree_cleanupP9ColorTree(%struct.ColorTree* noundef nonnull %59)
  %62 = bitcast %struct.ColorTree** %58 to i8**
  %63 = load i8*, i8** %62, align 8, !tbaa !7
  tail call void @free(i8* noundef %63) #25
  br label %64

64:                                               ; preds = %61, %57
  %65 = getelementptr inbounds %struct.ColorTree, %struct.ColorTree* %0, i64 0, i32 0, i64 9
  %66 = load %struct.ColorTree*, %struct.ColorTree** %65, align 8, !tbaa !7
  %67 = icmp eq %struct.ColorTree* %66, null
  br i1 %67, label %71, label %68

68:                                               ; preds = %64
  tail call fastcc void @_ZL18color_tree_cleanupP9ColorTree(%struct.ColorTree* noundef nonnull %66)
  %69 = bitcast %struct.ColorTree** %65 to i8**
  %70 = load i8*, i8** %69, align 8, !tbaa !7
  tail call void @free(i8* noundef %70) #25
  br label %71

71:                                               ; preds = %68, %64
  %72 = getelementptr inbounds %struct.ColorTree, %struct.ColorTree* %0, i64 0, i32 0, i64 10
  %73 = load %struct.ColorTree*, %struct.ColorTree** %72, align 8, !tbaa !7
  %74 = icmp eq %struct.ColorTree* %73, null
  br i1 %74, label %78, label %75

75:                                               ; preds = %71
  tail call fastcc void @_ZL18color_tree_cleanupP9ColorTree(%struct.ColorTree* noundef nonnull %73)
  %76 = bitcast %struct.ColorTree** %72 to i8**
  %77 = load i8*, i8** %76, align 8, !tbaa !7
  tail call void @free(i8* noundef %77) #25
  br label %78

78:                                               ; preds = %75, %71
  %79 = getelementptr inbounds %struct.ColorTree, %struct.ColorTree* %0, i64 0, i32 0, i64 11
  %80 = load %struct.ColorTree*, %struct.ColorTree** %79, align 8, !tbaa !7
  %81 = icmp eq %struct.ColorTree* %80, null
  br i1 %81, label %85, label %82

82:                                               ; preds = %78
  tail call fastcc void @_ZL18color_tree_cleanupP9ColorTree(%struct.ColorTree* noundef nonnull %80)
  %83 = bitcast %struct.ColorTree** %79 to i8**
  %84 = load i8*, i8** %83, align 8, !tbaa !7
  tail call void @free(i8* noundef %84) #25
  br label %85

85:                                               ; preds = %82, %78
  %86 = getelementptr inbounds %struct.ColorTree, %struct.ColorTree* %0, i64 0, i32 0, i64 12
  %87 = load %struct.ColorTree*, %struct.ColorTree** %86, align 8, !tbaa !7
  %88 = icmp eq %struct.ColorTree* %87, null
  br i1 %88, label %92, label %89

89:                                               ; preds = %85
  tail call fastcc void @_ZL18color_tree_cleanupP9ColorTree(%struct.ColorTree* noundef nonnull %87)
  %90 = bitcast %struct.ColorTree** %86 to i8**
  %91 = load i8*, i8** %90, align 8, !tbaa !7
  tail call void @free(i8* noundef %91) #25
  br label %92

92:                                               ; preds = %89, %85
  %93 = getelementptr inbounds %struct.ColorTree, %struct.ColorTree* %0, i64 0, i32 0, i64 13
  %94 = load %struct.ColorTree*, %struct.ColorTree** %93, align 8, !tbaa !7
  %95 = icmp eq %struct.ColorTree* %94, null
  br i1 %95, label %99, label %96

96:                                               ; preds = %92
  tail call fastcc void @_ZL18color_tree_cleanupP9ColorTree(%struct.ColorTree* noundef nonnull %94)
  %97 = bitcast %struct.ColorTree** %93 to i8**
  %98 = load i8*, i8** %97, align 8, !tbaa !7
  tail call void @free(i8* noundef %98) #25
  br label %99

99:                                               ; preds = %96, %92
  %100 = getelementptr inbounds %struct.ColorTree, %struct.ColorTree* %0, i64 0, i32 0, i64 14
  %101 = load %struct.ColorTree*, %struct.ColorTree** %100, align 8, !tbaa !7
  %102 = icmp eq %struct.ColorTree* %101, null
  br i1 %102, label %106, label %103

103:                                              ; preds = %99
  tail call fastcc void @_ZL18color_tree_cleanupP9ColorTree(%struct.ColorTree* noundef nonnull %101)
  %104 = bitcast %struct.ColorTree** %100 to i8**
  %105 = load i8*, i8** %104, align 8, !tbaa !7
  tail call void @free(i8* noundef %105) #25
  br label %106

106:                                              ; preds = %103, %99
  %107 = getelementptr inbounds %struct.ColorTree, %struct.ColorTree* %0, i64 0, i32 0, i64 15
  %108 = load %struct.ColorTree*, %struct.ColorTree** %107, align 8, !tbaa !7
  %109 = icmp eq %struct.ColorTree* %108, null
  br i1 %109, label %113, label %110

110:                                              ; preds = %106
  tail call fastcc void @_ZL18color_tree_cleanupP9ColorTree(%struct.ColorTree* noundef nonnull %108)
  %111 = bitcast %struct.ColorTree** %107 to i8**
  %112 = load i8*, i8** %111, align 8, !tbaa !7
  tail call void @free(i8* noundef %112) #25
  br label %113

113:                                              ; preds = %110, %106
  ret void
}

; Function Attrs: nofree norecurse nosync nounwind uwtable
define dso_local noundef i32 @_Z19lodepng_convert_rgbPjS_S_jjjPK16LodePNGColorModeS2_(i32* nocapture noundef writeonly %0, i32* nocapture noundef writeonly %1, i32* nocapture noundef writeonly %2, i32 noundef %3, i32 noundef %4, i32 noundef %5, %struct.LodePNGColorMode* nocapture noundef readonly %6, %struct.LodePNGColorMode* nocapture noundef readonly %7) local_unnamed_addr #16 {
  %9 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %7, i64 0, i32 1
  %10 = load i32, i32* %9, align 4, !tbaa !150
  %11 = shl nsw i32 -1, %10
  %12 = xor i32 %11, -1
  %13 = udiv i32 65535, %12
  %14 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %6, i64 0, i32 1
  %15 = load i32, i32* %14, align 4, !tbaa !150
  %16 = sub i32 16, %15
  %17 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %7, i64 0, i32 0
  %18 = load i32, i32* %17, align 8, !tbaa !147
  switch i32 %18, label %109 [
    i32 0, label %19
    i32 4, label %19
    i32 2, label %21
    i32 6, label %21
    i32 3, label %25
  ]

19:                                               ; preds = %8, %8
  %20 = mul i32 %13, %3
  br label %51

21:                                               ; preds = %8, %8
  %22 = mul i32 %13, %3
  %23 = mul i32 %13, %4
  %24 = mul i32 %13, %5
  br label %51

25:                                               ; preds = %8
  %26 = zext i32 %3 to i64
  %27 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %7, i64 0, i32 3
  %28 = load i64, i64* %27, align 8, !tbaa !156
  %29 = icmp ugt i64 %28, %26
  br i1 %29, label %30, label %109

30:                                               ; preds = %25
  %31 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %7, i64 0, i32 2
  %32 = load i8*, i8** %31, align 8, !tbaa !151
  %33 = shl i32 %3, 2
  %34 = zext i32 %33 to i64
  %35 = getelementptr inbounds i8, i8* %32, i64 %34
  %36 = load i8, i8* %35, align 1, !tbaa !14
  %37 = zext i8 %36 to i32
  %38 = mul nuw nsw i32 %37, 257
  %39 = or i32 %33, 1
  %40 = zext i32 %39 to i64
  %41 = getelementptr inbounds i8, i8* %32, i64 %40
  %42 = load i8, i8* %41, align 1, !tbaa !14
  %43 = zext i8 %42 to i32
  %44 = mul nuw nsw i32 %43, 257
  %45 = or i32 %33, 2
  %46 = zext i32 %45 to i64
  %47 = getelementptr inbounds i8, i8* %32, i64 %46
  %48 = load i8, i8* %47, align 1, !tbaa !14
  %49 = zext i8 %48 to i32
  %50 = mul nuw nsw i32 %49, 257
  br label %51

51:                                               ; preds = %21, %30, %19
  %52 = phi i32 [ %20, %19 ], [ %24, %21 ], [ %50, %30 ]
  %53 = phi i32 [ %20, %19 ], [ %23, %21 ], [ %44, %30 ]
  %54 = phi i32 [ %20, %19 ], [ %22, %21 ], [ %38, %30 ]
  %55 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %6, i64 0, i32 0
  %56 = load i32, i32* %55, align 8, !tbaa !147
  switch i32 %56, label %109 [
    i32 0, label %57
    i32 4, label %57
    i32 2, label %59
    i32 6, label %59
    i32 3, label %63
  ]

57:                                               ; preds = %51, %51
  %58 = lshr i32 %54, %16
  store i32 %58, i32* %0, align 4, !tbaa !9
  br label %109

59:                                               ; preds = %51, %51
  %60 = lshr i32 %54, %16
  store i32 %60, i32* %0, align 4, !tbaa !9
  %61 = lshr i32 %53, %16
  store i32 %61, i32* %1, align 4, !tbaa !9
  %62 = lshr i32 %52, %16
  store i32 %62, i32* %2, align 4, !tbaa !9
  br label %109

63:                                               ; preds = %51
  %64 = lshr i32 %54, 8
  %65 = and i32 %54, 255
  %66 = icmp eq i32 %64, %65
  br i1 %66, label %67, label %109

67:                                               ; preds = %63
  %68 = lshr i32 %53, 8
  %69 = and i32 %53, 255
  %70 = icmp eq i32 %68, %69
  br i1 %70, label %71, label %109

71:                                               ; preds = %67
  %72 = lshr i32 %52, 8
  %73 = and i32 %52, 255
  %74 = icmp eq i32 %72, %73
  br i1 %74, label %75, label %109

75:                                               ; preds = %71
  %76 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %6, i64 0, i32 3
  %77 = load i64, i64* %76, align 8, !tbaa !156
  %78 = icmp eq i64 %77, 0
  br i1 %78, label %109, label %79

79:                                               ; preds = %75
  %80 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %6, i64 0, i32 2
  %81 = load i8*, i8** %80, align 8, !tbaa !151
  br label %82

82:                                               ; preds = %79, %105
  %83 = phi i32 [ 0, %79 ], [ %106, %105 ]
  %84 = shl i32 %83, 2
  %85 = zext i32 %84 to i64
  %86 = getelementptr inbounds i8, i8* %81, i64 %85
  %87 = load i8, i8* %86, align 1, !tbaa !14
  %88 = zext i8 %87 to i32
  %89 = icmp eq i32 %64, %88
  br i1 %89, label %90, label %105

90:                                               ; preds = %82
  %91 = or i32 %84, 1
  %92 = zext i32 %91 to i64
  %93 = getelementptr inbounds i8, i8* %81, i64 %92
  %94 = load i8, i8* %93, align 1, !tbaa !14
  %95 = zext i8 %94 to i32
  %96 = icmp eq i32 %68, %95
  br i1 %96, label %97, label %105

97:                                               ; preds = %90
  %98 = or i32 %84, 2
  %99 = zext i32 %98 to i64
  %100 = getelementptr inbounds i8, i8* %81, i64 %99
  %101 = load i8, i8* %100, align 1, !tbaa !14
  %102 = zext i8 %101 to i32
  %103 = icmp eq i32 %72, %102
  br i1 %103, label %104, label %105

104:                                              ; preds = %97
  store i32 %83, i32* %0, align 4, !tbaa !9
  br label %109

105:                                              ; preds = %97, %90, %82
  %106 = add i32 %83, 1
  %107 = zext i32 %106 to i64
  %108 = icmp ugt i64 %77, %107
  br i1 %108, label %82, label %109

109:                                              ; preds = %105, %75, %57, %59, %51, %71, %67, %63, %104, %8, %25
  %110 = phi i32 [ 82, %25 ], [ 31, %8 ], [ 82, %71 ], [ 82, %67 ], [ 82, %63 ], [ 0, %104 ], [ 31, %51 ], [ 0, %59 ], [ 0, %57 ], [ 82, %75 ], [ 82, %105 ]
  ret i32 %110
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind uwtable willreturn writeonly
define dso_local void @_Z24lodepng_color_stats_initP17LodePNGColorStats(%struct.LodePNGColorStats* nocapture noundef writeonly %0) local_unnamed_addr #14 {
  %2 = getelementptr inbounds %struct.LodePNGColorStats, %struct.LodePNGColorStats* %0, i64 0, i32 5
  store i32 0, i32* %2, align 8, !tbaa !289
  %3 = getelementptr inbounds %struct.LodePNGColorStats, %struct.LodePNGColorStats* %0, i64 0, i32 6
  store i32 0, i32* %3, align 4, !tbaa !291
  %4 = getelementptr inbounds %struct.LodePNGColorStats, %struct.LodePNGColorStats* %0, i64 0, i32 8
  %5 = bitcast %struct.LodePNGColorStats* %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(14) %5, i8 0, i64 14, i1 false)
  store i32 1, i32* %4, align 8, !tbaa !292
  %6 = getelementptr inbounds %struct.LodePNGColorStats, %struct.LodePNGColorStats* %0, i64 0, i32 9
  store i64 0, i64* %6, align 8, !tbaa !293
  %7 = getelementptr inbounds %struct.LodePNGColorStats, %struct.LodePNGColorStats* %0, i64 0, i32 10
  store i32 1, i32* %7, align 8, !tbaa !294
  %8 = getelementptr inbounds %struct.LodePNGColorStats, %struct.LodePNGColorStats* %0, i64 0, i32 11
  store i32 1, i32* %8, align 4, !tbaa !295
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local noundef i32 @_Z27lodepng_compute_color_statsP17LodePNGColorStatsPKhjjPK16LodePNGColorMode(%struct.LodePNGColorStats* noundef %0, i8* noundef %1, i32 noundef %2, i32 noundef %3, %struct.LodePNGColorMode* noundef %4) local_unnamed_addr #3 {
  %6 = alloca %struct.ColorTree, align 8
  %7 = alloca i16, align 2
  %8 = alloca i16, align 2
  %9 = alloca i16, align 2
  %10 = alloca i16, align 2
  %11 = alloca i16, align 2
  %12 = alloca i16, align 2
  %13 = alloca i16, align 2
  %14 = alloca i16, align 2
  %15 = alloca i8, align 1
  %16 = alloca i8, align 1
  %17 = alloca i8, align 1
  %18 = alloca i8, align 1
  %19 = bitcast %struct.ColorTree* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 136, i8* nonnull %19) #25
  %20 = zext i32 %2 to i64
  %21 = zext i32 %3 to i64
  %22 = mul nuw i64 %21, %20
  %23 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %4, i64 0, i32 0
  %24 = load i32, i32* %23, align 8, !tbaa !147
  %25 = and i32 %24, -5
  %26 = icmp eq i32 %25, 0
  %27 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %4, i64 0, i32 4
  %28 = load i32, i32* %27, align 8, !tbaa !161
  %29 = icmp eq i32 %28, 0
  %30 = and i32 %24, 4
  %31 = icmp eq i32 %30, 0
  %32 = select i1 %29, i1 %31, i1 false
  br i1 %32, label %33, label %50

33:                                               ; preds = %5
  %34 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %4, i64 0, i32 3
  %35 = load i64, i64* %34, align 8, !tbaa !156
  %36 = icmp eq i64 %35, 0
  br i1 %36, label %50, label %37

37:                                               ; preds = %33
  %38 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %4, i64 0, i32 2
  %39 = load i8*, i8** %38, align 8, !tbaa !151
  br label %42

40:                                               ; preds = %42
  %41 = icmp eq i64 %49, %35
  br i1 %41, label %50, label %42

42:                                               ; preds = %40, %37
  %43 = phi i64 [ 0, %37 ], [ %49, %40 ]
  %44 = shl i64 %43, 2
  %45 = or i64 %44, 3
  %46 = getelementptr inbounds i8, i8* %39, i64 %45
  %47 = load i8, i8* %46, align 1, !tbaa !14
  %48 = icmp eq i8 %47, -1
  %49 = add nuw i64 %43, 1
  br i1 %48, label %40, label %50

50:                                               ; preds = %40, %42, %5, %33
  %51 = phi i32 [ 0, %5 ], [ 1, %33 ], [ 1, %40 ], [ 0, %42 ]
  %52 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %4, i64 0, i32 1
  %53 = load i32, i32* %52, align 4, !tbaa !150
  switch i32 %24, label %58 [
    i32 0, label %59
    i32 2, label %54
    i32 3, label %59
    i32 4, label %55
    i32 6, label %56
    i32 255, label %57
  ]

54:                                               ; preds = %50
  br label %59

55:                                               ; preds = %50
  br label %59

56:                                               ; preds = %50
  br label %59

57:                                               ; preds = %50
  br label %59

58:                                               ; preds = %50
  br label %59

59:                                               ; preds = %50, %50, %54, %55, %56, %57, %58
  %60 = phi i32 [ 0, %58 ], [ 0, %57 ], [ 4, %56 ], [ 2, %55 ], [ 3, %54 ], [ 1, %50 ], [ 1, %50 ]
  %61 = mul i32 %60, %53
  %62 = getelementptr inbounds %struct.LodePNGColorStats, %struct.LodePNGColorStats* %0, i64 0, i32 8
  %63 = load i32, i32* %62, align 8, !tbaa !292
  %64 = icmp eq i32 %63, 1
  %65 = icmp eq i32 %61, 1
  %66 = and i1 %64, %65
  %67 = icmp ult i32 %61, 9
  %68 = getelementptr inbounds %struct.LodePNGColorStats, %struct.LodePNGColorStats* %0, i64 0, i32 6
  %69 = load i32, i32* %68, align 4, !tbaa !291
  %70 = shl nuw nsw i32 1, %61
  %71 = add i32 %69, %70
  %72 = icmp ult i32 %71, 257
  %73 = select i1 %67, i1 %72, i1 false
  %74 = select i1 %73, i32 %71, i32 257
  %75 = getelementptr inbounds %struct.LodePNGColorStats, %struct.LodePNGColorStats* %0, i64 0, i32 9
  %76 = load i64, i64* %75, align 8, !tbaa !293
  %77 = add i64 %76, %22
  store i64 %77, i64* %75, align 8, !tbaa !293
  %78 = getelementptr inbounds %struct.LodePNGColorStats, %struct.LodePNGColorStats* %0, i64 0, i32 10
  %79 = load i32, i32* %78, align 8, !tbaa !294
  %80 = icmp eq i32 %79, 0
  call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(128) %19, i8 0, i64 128, i1 false) #25, !tbaa !14, !alias.scope !296
  %81 = getelementptr inbounds %struct.ColorTree, %struct.ColorTree* %6, i64 0, i32 1
  store i32 -1, i32* %81, align 8, !tbaa !249
  %82 = getelementptr inbounds %struct.LodePNGColorStats, %struct.LodePNGColorStats* %0, i64 0, i32 5
  %83 = load i32, i32* %82, align 8, !tbaa !289
  %84 = icmp eq i32 %83, 0
  %85 = select i1 %84, i32 %51, i32 1
  %86 = getelementptr inbounds %struct.LodePNGColorStats, %struct.LodePNGColorStats* %0, i64 0, i32 0
  %87 = load i32, i32* %86, align 8, !tbaa !299
  %88 = icmp ne i32 %87, 0
  %89 = select i1 %88, i1 true, i1 %26
  %90 = zext i1 %89 to i32
  %91 = icmp eq i32 %63, 16
  %92 = icmp uge i32 %63, %61
  %93 = or i1 %92, %66
  %94 = getelementptr inbounds %struct.LodePNGColorStats, %struct.LodePNGColorStats* %0, i64 0, i32 6
  %95 = icmp uge i32 %69, %74
  %96 = select i1 %95, i1 true, i1 %91
  %97 = select i1 %96, i1 true, i1 %80
  %98 = zext i1 %97 to i32
  %99 = icmp eq i32 %69, 0
  %100 = select i1 %97, i1 true, i1 %99
  br i1 %100, label %122, label %105

101:                                              ; preds = %105
  %102 = load i32, i32* %94, align 4, !tbaa !291
  %103 = zext i32 %102 to i64
  %104 = icmp ult i64 %119, %103
  br i1 %104, label %105, label %120

105:                                              ; preds = %59, %101
  %106 = phi i64 [ %119, %101 ], [ 0, %59 ]
  %107 = shl i64 %106, 2
  %108 = getelementptr inbounds %struct.LodePNGColorStats, %struct.LodePNGColorStats* %0, i64 0, i32 7, i64 %107
  %109 = load i8, i8* %108, align 1, !tbaa !14
  %110 = getelementptr inbounds i8, i8* %108, i64 1
  %111 = load i8, i8* %110, align 1, !tbaa !14
  %112 = getelementptr inbounds i8, i8* %108, i64 2
  %113 = load i8, i8* %112, align 1, !tbaa !14
  %114 = getelementptr inbounds i8, i8* %108, i64 3
  %115 = load i8, i8* %114, align 1, !tbaa !14
  %116 = trunc i64 %106 to i32
  %117 = call fastcc noundef i32 @_ZL14color_tree_addP9ColorTreehhhhj(%struct.ColorTree* noundef nonnull %6, i8 noundef zeroext %109, i8 noundef zeroext %111, i8 noundef zeroext %113, i8 noundef zeroext %115, i32 noundef %116)
  %118 = icmp eq i32 %117, 0
  %119 = add nuw nsw i64 %106, 1
  br i1 %118, label %101, label %443

120:                                              ; preds = %101
  %121 = load i32, i32* %52, align 4, !tbaa !150
  br label %122

122:                                              ; preds = %120, %59
  %123 = phi i32 [ %121, %120 ], [ %53, %59 ]
  %124 = icmp eq i32 %123, 16
  br i1 %124, label %125, label %255

125:                                              ; preds = %122
  %126 = bitcast i16* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 2, i8* nonnull %126) #25
  store i16 0, i16* %7, align 2, !tbaa !66
  %127 = bitcast i16* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 2, i8* nonnull %127) #25
  store i16 0, i16* %8, align 2, !tbaa !66
  %128 = bitcast i16* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 2, i8* nonnull %128) #25
  store i16 0, i16* %9, align 2, !tbaa !66
  %129 = bitcast i16* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 2, i8* nonnull %129) #25
  store i16 0, i16* %10, align 2, !tbaa !66
  %130 = icmp eq i64 %22, 0
  br i1 %130, label %133, label %134

131:                                              ; preds = %153
  %132 = icmp eq i64 %159, %22
  br i1 %132, label %133, label %134

133:                                              ; preds = %131, %125
  call void @llvm.lifetime.end.p0i8(i64 2, i8* nonnull %129) #25
  call void @llvm.lifetime.end.p0i8(i64 2, i8* nonnull %128) #25
  call void @llvm.lifetime.end.p0i8(i64 2, i8* nonnull %127) #25
  call void @llvm.lifetime.end.p0i8(i64 2, i8* nonnull %126) #25
  br label %255

134:                                              ; preds = %125, %131
  %135 = phi i64 [ %159, %131 ], [ 0, %125 ]
  call fastcc void @_ZL19getPixelColorRGBA16PtS_S_S_PKhmPK16LodePNGColorMode(i16* noundef nonnull %7, i16* noundef nonnull %8, i16* noundef nonnull %9, i16* noundef nonnull %10, i8* noundef %1, i64 noundef %135, %struct.LodePNGColorMode* noundef %4)
  %136 = load i16, i16* %7, align 2, !tbaa !66
  %137 = zext i16 %136 to i32
  %138 = and i32 %137, 255
  %139 = lshr i32 %137, 8
  %140 = icmp eq i32 %138, %139
  br i1 %140, label %141, label %160

141:                                              ; preds = %134
  %142 = load i16, i16* %8, align 2, !tbaa !66
  %143 = zext i16 %142 to i32
  %144 = and i32 %143, 255
  %145 = lshr i32 %143, 8
  %146 = icmp eq i32 %144, %145
  br i1 %146, label %147, label %160

147:                                              ; preds = %141
  %148 = load i16, i16* %9, align 2, !tbaa !66
  %149 = zext i16 %148 to i32
  %150 = and i32 %149, 255
  %151 = lshr i32 %149, 8
  %152 = icmp eq i32 %150, %151
  br i1 %152, label %153, label %160

153:                                              ; preds = %147
  %154 = load i16, i16* %10, align 2, !tbaa !66
  %155 = zext i16 %154 to i32
  %156 = and i32 %155, 255
  %157 = lshr i32 %155, 8
  %158 = icmp eq i32 %156, %157
  %159 = add nuw i64 %135, 1
  br i1 %158, label %131, label %160

160:                                              ; preds = %134, %141, %147, %153
  store i32 16, i32* %62, align 8, !tbaa !292
  call void @llvm.lifetime.end.p0i8(i64 2, i8* nonnull %129) #25
  call void @llvm.lifetime.end.p0i8(i64 2, i8* nonnull %128) #25
  call void @llvm.lifetime.end.p0i8(i64 2, i8* nonnull %127) #25
  call void @llvm.lifetime.end.p0i8(i64 2, i8* nonnull %126) #25
  %161 = bitcast i16* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 2, i8* nonnull %161) #25
  store i16 0, i16* %11, align 2, !tbaa !66
  %162 = bitcast i16* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 2, i8* nonnull %162) #25
  store i16 0, i16* %12, align 2, !tbaa !66
  %163 = bitcast i16* %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 2, i8* nonnull %163) #25
  store i16 0, i16* %13, align 2, !tbaa !66
  %164 = bitcast i16* %14 to i8*
  call void @llvm.lifetime.start.p0i8(i64 2, i8* nonnull %164) #25
  store i16 0, i16* %14, align 2, !tbaa !66
  %165 = getelementptr inbounds %struct.LodePNGColorStats, %struct.LodePNGColorStats* %0, i64 0, i32 2
  %166 = getelementptr inbounds %struct.LodePNGColorStats, %struct.LodePNGColorStats* %0, i64 0, i32 3
  %167 = getelementptr inbounds %struct.LodePNGColorStats, %struct.LodePNGColorStats* %0, i64 0, i32 4
  %168 = getelementptr inbounds %struct.LodePNGColorStats, %struct.LodePNGColorStats* %0, i64 0, i32 1
  br label %169

169:                                              ; preds = %160, %219
  %170 = phi i64 [ 0, %160 ], [ %221, %219 ]
  %171 = phi i32 [ %90, %160 ], [ %184, %219 ]
  %172 = phi i32 [ %85, %160 ], [ %220, %219 ]
  call fastcc void @_ZL19getPixelColorRGBA16PtS_S_S_PKhmPK16LodePNGColorMode(i16* noundef nonnull %11, i16* noundef nonnull %12, i16* noundef nonnull %13, i16* noundef nonnull %14, i8* noundef %1, i64 noundef %170, %struct.LodePNGColorMode* noundef %4)
  %173 = icmp eq i32 %171, 0
  br i1 %173, label %174, label %182

174:                                              ; preds = %169
  %175 = load i16, i16* %11, align 2, !tbaa !66
  %176 = load i16, i16* %12, align 2, !tbaa !66
  %177 = icmp eq i16 %175, %176
  %178 = load i16, i16* %13, align 2
  %179 = icmp eq i16 %175, %178
  %180 = select i1 %177, i1 %179, i1 false
  br i1 %180, label %182, label %181

181:                                              ; preds = %174
  store i32 1, i32* %86, align 8, !tbaa !299
  br label %182

182:                                              ; preds = %174, %181, %169
  %183 = phi i1 [ true, %181 ], [ true, %169 ], [ false, %174 ]
  %184 = phi i32 [ 1, %181 ], [ 1, %169 ], [ 0, %174 ]
  %185 = icmp eq i32 %172, 0
  br i1 %185, label %186, label %218

186:                                              ; preds = %182
  %187 = load i16, i16* %11, align 2, !tbaa !66
  %188 = load i16, i16* %165, align 8, !tbaa !300
  %189 = icmp eq i16 %187, %188
  br i1 %189, label %190, label %198

190:                                              ; preds = %186
  %191 = load i16, i16* %12, align 2, !tbaa !66
  %192 = load i16, i16* %166, align 2, !tbaa !301
  %193 = icmp eq i16 %191, %192
  br i1 %193, label %194, label %198

194:                                              ; preds = %190
  %195 = load i16, i16* %13, align 2, !tbaa !66
  %196 = load i16, i16* %167, align 4, !tbaa !302
  %197 = icmp eq i16 %195, %196
  br label %198

198:                                              ; preds = %194, %190, %186
  %199 = phi i1 [ false, %190 ], [ false, %186 ], [ %197, %194 ]
  %200 = load i16, i16* %14, align 2, !tbaa !66
  switch i16 %200, label %217 [
    i16 -1, label %213
    i16 0, label %201
  ]

201:                                              ; preds = %198
  %202 = load i32, i32* %168, align 4, !tbaa !303
  %203 = icmp eq i32 %202, 0
  %204 = select i1 %203, i1 true, i1 %199
  br i1 %204, label %205, label %217

205:                                              ; preds = %201
  %206 = load i32, i32* %82, align 8, !tbaa !289
  %207 = icmp ne i32 %206, 0
  %208 = xor i1 %203, true
  %209 = select i1 %207, i1 true, i1 %208
  br i1 %209, label %219, label %210

210:                                              ; preds = %205
  store i32 1, i32* %168, align 4, !tbaa !303
  store i16 %187, i16* %165, align 8, !tbaa !300
  %211 = load i16, i16* %12, align 2, !tbaa !66
  store i16 %211, i16* %166, align 2, !tbaa !301
  %212 = load i16, i16* %13, align 2, !tbaa !66
  store i16 %212, i16* %167, align 4, !tbaa !302
  br label %219

213:                                              ; preds = %198
  %214 = load i32, i32* %168, align 4, !tbaa !303
  %215 = icmp ne i32 %214, 0
  %216 = select i1 %215, i1 %199, i1 false
  br i1 %216, label %217, label %219

217:                                              ; preds = %213, %201, %198
  store i32 1, i32* %82, align 8, !tbaa !289
  store i32 0, i32* %168, align 4, !tbaa !303
  br label %218

218:                                              ; preds = %217, %182
  br i1 %183, label %223, label %219

219:                                              ; preds = %205, %210, %213, %218
  %220 = phi i32 [ 1, %218 ], [ 0, %213 ], [ 0, %210 ], [ 0, %205 ]
  %221 = add i64 %170, 1
  %222 = icmp eq i64 %221, %22
  br i1 %222, label %223, label %169

223:                                              ; preds = %219, %218
  %224 = getelementptr inbounds %struct.LodePNGColorStats, %struct.LodePNGColorStats* %0, i64 0, i32 1
  %225 = load i32, i32* %224, align 4, !tbaa !303
  %226 = icmp eq i32 %225, 0
  br i1 %226, label %254, label %227

227:                                              ; preds = %223
  %228 = load i32, i32* %82, align 8, !tbaa !289
  %229 = icmp eq i32 %228, 0
  br i1 %229, label %230, label %254

230:                                              ; preds = %227
  %231 = getelementptr inbounds %struct.LodePNGColorStats, %struct.LodePNGColorStats* %0, i64 0, i32 2
  %232 = getelementptr inbounds %struct.LodePNGColorStats, %struct.LodePNGColorStats* %0, i64 0, i32 3
  %233 = getelementptr inbounds %struct.LodePNGColorStats, %struct.LodePNGColorStats* %0, i64 0, i32 4
  br label %234

234:                                              ; preds = %230, %251
  %235 = phi i64 [ 0, %230 ], [ %252, %251 ]
  call fastcc void @_ZL19getPixelColorRGBA16PtS_S_S_PKhmPK16LodePNGColorMode(i16* noundef nonnull %11, i16* noundef nonnull %12, i16* noundef nonnull %13, i16* noundef nonnull %14, i8* noundef %1, i64 noundef %235, %struct.LodePNGColorMode* noundef %4)
  %236 = load i16, i16* %14, align 2, !tbaa !66
  %237 = icmp eq i16 %236, 0
  br i1 %237, label %251, label %238

238:                                              ; preds = %234
  %239 = load i16, i16* %11, align 2, !tbaa !66
  %240 = load i16, i16* %231, align 8, !tbaa !300
  %241 = icmp eq i16 %239, %240
  br i1 %241, label %242, label %251

242:                                              ; preds = %238
  %243 = load i16, i16* %12, align 2, !tbaa !66
  %244 = load i16, i16* %232, align 2, !tbaa !301
  %245 = icmp eq i16 %243, %244
  br i1 %245, label %246, label %251

246:                                              ; preds = %242
  %247 = load i16, i16* %13, align 2, !tbaa !66
  %248 = load i16, i16* %233, align 4, !tbaa !302
  %249 = icmp eq i16 %247, %248
  br i1 %249, label %250, label %251

250:                                              ; preds = %246
  store i32 1, i32* %82, align 8, !tbaa !289
  store i32 0, i32* %224, align 4, !tbaa !303
  br label %251

251:                                              ; preds = %234, %238, %242, %246, %250
  %252 = add i64 %235, 1
  %253 = icmp eq i64 %252, %22
  br i1 %253, label %254, label %234

254:                                              ; preds = %251, %227, %223
  call void @llvm.lifetime.end.p0i8(i64 2, i8* nonnull %164) #25
  call void @llvm.lifetime.end.p0i8(i64 2, i8* nonnull %163) #25
  call void @llvm.lifetime.end.p0i8(i64 2, i8* nonnull %162) #25
  call void @llvm.lifetime.end.p0i8(i64 2, i8* nonnull %161) #25
  br label %443

255:                                              ; preds = %122, %133
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %15) #25
  store i8 0, i8* %15, align 1, !tbaa !14
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %16) #25
  store i8 0, i8* %16, align 1, !tbaa !14
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %17) #25
  store i8 0, i8* %17, align 1, !tbaa !14
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %18) #25
  store i8 0, i8* %18, align 1, !tbaa !14
  %256 = icmp eq i64 %22, 0
  br i1 %256, label %393, label %257

257:                                              ; preds = %255
  %258 = getelementptr inbounds %struct.LodePNGColorStats, %struct.LodePNGColorStats* %0, i64 0, i32 2
  %259 = getelementptr inbounds %struct.LodePNGColorStats, %struct.LodePNGColorStats* %0, i64 0, i32 3
  %260 = getelementptr inbounds %struct.LodePNGColorStats, %struct.LodePNGColorStats* %0, i64 0, i32 4
  %261 = getelementptr inbounds %struct.LodePNGColorStats, %struct.LodePNGColorStats* %0, i64 0, i32 1
  br label %262

262:                                              ; preds = %257, %389
  %263 = phi i64 [ 0, %257 ], [ %391, %389 ]
  %264 = phi i32 [ %90, %257 ], [ %304, %389 ]
  %265 = phi i32 [ %85, %257 ], [ %350, %389 ]
  %266 = phi i32 [ %98, %257 ], [ %390, %389 ]
  %267 = phi i1 [ %93, %257 ], [ %289, %389 ]
  call fastcc void @_ZL18getPixelColorRGBA8PhS_S_S_PKhmPK16LodePNGColorMode(i8* noundef nonnull %15, i8* noundef nonnull %16, i8* noundef nonnull %17, i8* noundef nonnull %18, i8* noundef %1, i64 noundef %263, %struct.LodePNGColorMode* noundef %4)
  %268 = load i32, i32* %62, align 8, !tbaa !292
  %269 = xor i1 %267, true
  %270 = icmp ult i32 %268, 8
  %271 = select i1 %269, i1 %270, i1 false
  br i1 %271, label %272, label %287

272:                                              ; preds = %262
  %273 = load i8, i8* %15, align 1, !tbaa !14
  %274 = add i8 %273, 1
  %275 = icmp ult i8 %274, 2
  br i1 %275, label %283, label %276

276:                                              ; preds = %272
  %277 = urem i8 %273, 17
  %278 = icmp eq i8 %277, 0
  br i1 %278, label %279, label %283

279:                                              ; preds = %276
  %280 = urem i8 %273, 85
  %281 = icmp eq i8 %280, 0
  %282 = select i1 %281, i32 2, i32 4
  br label %283

283:                                              ; preds = %272, %276, %279
  %284 = phi i32 [ %282, %279 ], [ 1, %272 ], [ 8, %276 ]
  %285 = icmp ugt i32 %284, %268
  br i1 %285, label %286, label %287

286:                                              ; preds = %283
  store i32 %284, i32* %62, align 8, !tbaa !292
  br label %287

287:                                              ; preds = %262, %283, %286
  %288 = phi i32 [ %284, %286 ], [ %268, %283 ], [ %268, %262 ]
  %289 = icmp uge i32 %288, %61
  %290 = icmp eq i32 %264, 0
  br i1 %290, label %291, label %301

291:                                              ; preds = %287
  %292 = load i8, i8* %15, align 1, !tbaa !14
  %293 = load i8, i8* %16, align 1, !tbaa !14
  %294 = icmp eq i8 %292, %293
  %295 = load i8, i8* %17, align 1
  %296 = icmp eq i8 %292, %295
  %297 = select i1 %294, i1 %296, i1 false
  br i1 %297, label %301, label %298

298:                                              ; preds = %291
  store i32 1, i32* %86, align 8, !tbaa !299
  %299 = icmp ult i32 %288, 8
  br i1 %299, label %300, label %301

300:                                              ; preds = %298
  store i32 8, i32* %62, align 8, !tbaa !292
  br label %301

301:                                              ; preds = %291, %298, %300, %287
  %302 = phi i32 [ %288, %298 ], [ 8, %300 ], [ %288, %287 ], [ %288, %291 ]
  %303 = phi i1 [ true, %298 ], [ true, %300 ], [ true, %287 ], [ false, %291 ]
  %304 = phi i32 [ 1, %298 ], [ 1, %300 ], [ 1, %287 ], [ 0, %291 ]
  %305 = icmp eq i32 %265, 0
  br i1 %305, label %306, label %348

306:                                              ; preds = %301
  %307 = load i8, i8* %15, align 1, !tbaa !14
  %308 = load i16, i16* %258, align 8, !tbaa !300
  %309 = zext i8 %307 to i16
  %310 = icmp eq i16 %308, %309
  br i1 %310, label %311, label %321

311:                                              ; preds = %306
  %312 = load i8, i8* %16, align 1, !tbaa !14
  %313 = load i16, i16* %259, align 2, !tbaa !301
  %314 = zext i8 %312 to i16
  %315 = icmp eq i16 %313, %314
  br i1 %315, label %316, label %321

316:                                              ; preds = %311
  %317 = load i8, i8* %17, align 1, !tbaa !14
  %318 = load i16, i16* %260, align 4, !tbaa !302
  %319 = zext i8 %317 to i16
  %320 = icmp eq i16 %318, %319
  br label %321

321:                                              ; preds = %316, %311, %306
  %322 = phi i1 [ false, %311 ], [ false, %306 ], [ %320, %316 ]
  %323 = load i8, i8* %18, align 1, !tbaa !14
  switch i8 %323, label %328 [
    i8 -1, label %341
    i8 0, label %324
  ]

324:                                              ; preds = %321
  %325 = load i32, i32* %261, align 4, !tbaa !303
  %326 = icmp eq i32 %325, 0
  %327 = select i1 %326, i1 true, i1 %322
  br i1 %327, label %331, label %328

328:                                              ; preds = %321, %324
  store i32 1, i32* %82, align 8, !tbaa !289
  store i32 0, i32* %261, align 4, !tbaa !303
  %329 = icmp ult i32 %302, 8
  br i1 %329, label %330, label %348

330:                                              ; preds = %328
  store i32 8, i32* %62, align 8, !tbaa !292
  br label %348

331:                                              ; preds = %324
  %332 = load i32, i32* %82, align 8, !tbaa !289
  %333 = icmp ne i32 %332, 0
  %334 = xor i1 %326, true
  %335 = select i1 %333, i1 true, i1 %334
  br i1 %335, label %348, label %336

336:                                              ; preds = %331
  store i32 1, i32* %261, align 4, !tbaa !303
  store i16 %309, i16* %258, align 8, !tbaa !300
  %337 = load i8, i8* %16, align 1, !tbaa !14
  %338 = zext i8 %337 to i16
  store i16 %338, i16* %259, align 2, !tbaa !301
  %339 = load i8, i8* %17, align 1, !tbaa !14
  %340 = zext i8 %339 to i16
  store i16 %340, i16* %260, align 4, !tbaa !302
  br label %348

341:                                              ; preds = %321
  %342 = load i32, i32* %261, align 4, !tbaa !303
  %343 = icmp ne i32 %342, 0
  %344 = select i1 %343, i1 %322, i1 false
  br i1 %344, label %345, label %348

345:                                              ; preds = %341
  store i32 1, i32* %82, align 8, !tbaa !289
  store i32 0, i32* %261, align 4, !tbaa !303
  %346 = icmp ult i32 %302, 8
  br i1 %346, label %347, label %348

347:                                              ; preds = %345
  store i32 8, i32* %62, align 8, !tbaa !292
  br label %348

348:                                              ; preds = %331, %330, %328, %341, %347, %345, %336, %301
  %349 = phi i1 [ false, %331 ], [ true, %330 ], [ true, %328 ], [ false, %341 ], [ true, %347 ], [ true, %345 ], [ false, %336 ], [ true, %301 ]
  %350 = phi i32 [ 0, %331 ], [ 1, %330 ], [ 1, %328 ], [ 0, %341 ], [ 1, %347 ], [ 1, %345 ], [ 0, %336 ], [ 1, %301 ]
  %351 = icmp eq i32 %266, 0
  br i1 %351, label %352, label %383

352:                                              ; preds = %348
  %353 = load i8, i8* %15, align 1, !tbaa !14
  %354 = load i8, i8* %16, align 1, !tbaa !14
  %355 = load i8, i8* %17, align 1, !tbaa !14
  %356 = load i8, i8* %18, align 1, !tbaa !14
  %357 = call fastcc noundef i32 @_ZL14color_tree_getP9ColorTreehhhh(%struct.ColorTree* noundef nonnull %6, i8 noundef zeroext %353, i8 noundef zeroext %354, i8 noundef zeroext %355, i8 noundef zeroext %356) #25
  %358 = icmp slt i32 %357, 0
  br i1 %358, label %359, label %389

359:                                              ; preds = %352
  %360 = load i32, i32* %94, align 4, !tbaa !291
  %361 = call fastcc noundef i32 @_ZL14color_tree_addP9ColorTreehhhhj(%struct.ColorTree* noundef nonnull %6, i8 noundef zeroext %353, i8 noundef zeroext %354, i8 noundef zeroext %355, i8 noundef zeroext %356, i32 noundef %360)
  %362 = icmp eq i32 %361, 0
  br i1 %362, label %363, label %441

363:                                              ; preds = %359
  %364 = load i32, i32* %94, align 4, !tbaa !291
  %365 = icmp ult i32 %364, 256
  br i1 %365, label %366, label %379

366:                                              ; preds = %363
  %367 = shl nuw nsw i32 %364, 2
  %368 = zext i32 %367 to i64
  %369 = getelementptr inbounds %struct.LodePNGColorStats, %struct.LodePNGColorStats* %0, i64 0, i32 7, i64 %368
  store i8 %353, i8* %369, align 1, !tbaa !14
  %370 = or i32 %367, 1
  %371 = zext i32 %370 to i64
  %372 = getelementptr inbounds %struct.LodePNGColorStats, %struct.LodePNGColorStats* %0, i64 0, i32 7, i64 %371
  store i8 %354, i8* %372, align 1, !tbaa !14
  %373 = or i32 %367, 2
  %374 = zext i32 %373 to i64
  %375 = getelementptr inbounds %struct.LodePNGColorStats, %struct.LodePNGColorStats* %0, i64 0, i32 7, i64 %374
  store i8 %355, i8* %375, align 1, !tbaa !14
  %376 = or i32 %367, 3
  %377 = zext i32 %376 to i64
  %378 = getelementptr inbounds %struct.LodePNGColorStats, %struct.LodePNGColorStats* %0, i64 0, i32 7, i64 %377
  store i8 %356, i8* %378, align 1, !tbaa !14
  br label %379

379:                                              ; preds = %366, %363
  %380 = add i32 %364, 1
  store i32 %380, i32* %94, align 4, !tbaa !291
  %381 = icmp uge i32 %380, %74
  %382 = zext i1 %381 to i32
  br label %383

383:                                              ; preds = %379, %348
  %384 = phi i32 [ 1, %348 ], [ %382, %379 ]
  %385 = icmp ne i32 %384, 0
  %386 = select i1 %349, i1 %385, i1 false
  %387 = and i1 %303, %386
  %388 = select i1 %387, i1 %289, i1 false
  br i1 %388, label %393, label %389

389:                                              ; preds = %352, %383
  %390 = phi i32 [ %384, %383 ], [ 0, %352 ]
  %391 = add nuw i64 %263, 1
  %392 = icmp eq i64 %391, %22
  br i1 %392, label %393, label %262

393:                                              ; preds = %389, %383, %255
  %394 = getelementptr inbounds %struct.LodePNGColorStats, %struct.LodePNGColorStats* %0, i64 0, i32 1
  %395 = load i32, i32* %394, align 4, !tbaa !303
  %396 = icmp eq i32 %395, 0
  br i1 %396, label %431, label %397

397:                                              ; preds = %393
  %398 = load i32, i32* %82, align 8, !tbaa !289
  %399 = icmp ne i32 %398, 0
  %400 = select i1 %399, i1 true, i1 %256
  br i1 %400, label %431, label %401

401:                                              ; preds = %397
  %402 = getelementptr inbounds %struct.LodePNGColorStats, %struct.LodePNGColorStats* %0, i64 0, i32 2
  %403 = getelementptr inbounds %struct.LodePNGColorStats, %struct.LodePNGColorStats* %0, i64 0, i32 3
  %404 = getelementptr inbounds %struct.LodePNGColorStats, %struct.LodePNGColorStats* %0, i64 0, i32 4
  br label %405

405:                                              ; preds = %401, %428
  %406 = phi i64 [ 0, %401 ], [ %429, %428 ]
  call fastcc void @_ZL18getPixelColorRGBA8PhS_S_S_PKhmPK16LodePNGColorMode(i8* noundef nonnull %15, i8* noundef nonnull %16, i8* noundef nonnull %17, i8* noundef nonnull %18, i8* noundef %1, i64 noundef %406, %struct.LodePNGColorMode* noundef %4)
  %407 = load i8, i8* %18, align 1, !tbaa !14
  %408 = icmp eq i8 %407, 0
  br i1 %408, label %428, label %409

409:                                              ; preds = %405
  %410 = load i8, i8* %15, align 1, !tbaa !14
  %411 = load i16, i16* %402, align 8, !tbaa !300
  %412 = zext i8 %410 to i16
  %413 = icmp eq i16 %411, %412
  br i1 %413, label %414, label %428

414:                                              ; preds = %409
  %415 = load i8, i8* %16, align 1, !tbaa !14
  %416 = load i16, i16* %403, align 2, !tbaa !301
  %417 = zext i8 %415 to i16
  %418 = icmp eq i16 %416, %417
  br i1 %418, label %419, label %428

419:                                              ; preds = %414
  %420 = load i8, i8* %17, align 1, !tbaa !14
  %421 = load i16, i16* %404, align 4, !tbaa !302
  %422 = zext i8 %420 to i16
  %423 = icmp eq i16 %421, %422
  br i1 %423, label %424, label %428

424:                                              ; preds = %419
  store i32 1, i32* %82, align 8, !tbaa !289
  store i32 0, i32* %394, align 4, !tbaa !303
  %425 = load i32, i32* %62, align 8, !tbaa !292
  %426 = icmp ult i32 %425, 8
  br i1 %426, label %427, label %428

427:                                              ; preds = %424
  store i32 8, i32* %62, align 8, !tbaa !292
  br label %428

428:                                              ; preds = %405, %409, %414, %419, %427, %424
  %429 = add nuw i64 %406, 1
  %430 = icmp eq i64 %429, %22
  br i1 %430, label %431, label %405

431:                                              ; preds = %428, %397, %393
  %432 = getelementptr inbounds %struct.LodePNGColorStats, %struct.LodePNGColorStats* %0, i64 0, i32 2
  %433 = load i16, i16* %432, align 8, !tbaa !300
  %434 = mul i16 %433, 257
  store i16 %434, i16* %432, align 8, !tbaa !300
  %435 = getelementptr inbounds %struct.LodePNGColorStats, %struct.LodePNGColorStats* %0, i64 0, i32 3
  %436 = load i16, i16* %435, align 2, !tbaa !301
  %437 = mul i16 %436, 257
  store i16 %437, i16* %435, align 2, !tbaa !301
  %438 = getelementptr inbounds %struct.LodePNGColorStats, %struct.LodePNGColorStats* %0, i64 0, i32 4
  %439 = load i16, i16* %438, align 4, !tbaa !302
  %440 = mul i16 %439, 257
  store i16 %440, i16* %438, align 4, !tbaa !302
  br label %441

441:                                              ; preds = %359, %431
  %442 = phi i32 [ 0, %431 ], [ %361, %359 ]
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %18) #25
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %17) #25
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %16) #25
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %15) #25
  br label %443

443:                                              ; preds = %105, %254, %441
  %444 = phi i32 [ 0, %254 ], [ %442, %441 ], [ %117, %105 ]
  call fastcc void @_ZL18color_tree_cleanupP9ColorTree(%struct.ColorTree* noundef nonnull %6)
  call void @llvm.lifetime.end.p0i8(i64 136, i8* nonnull %19) #25
  ret i32 %444
}

; Function Attrs: nounwind uwtable
define dso_local noundef i32 @_Z15lodepng_inspectPjS_P12LodePNGStatePKhm(i32* noundef writeonly %0, i32* noundef writeonly %1, %struct.LodePNGState* nocapture noundef %2, i8* noundef readonly %3, i64 noundef %4) local_unnamed_addr #3 {
  %6 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %2, i64 0, i32 3
  %7 = icmp eq i64 %4, 0
  %8 = icmp eq i8* %3, null
  %9 = or i1 %8, %7
  br i1 %9, label %10, label %12

10:                                               ; preds = %5
  %11 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %2, i64 0, i32 4
  store i32 48, i32* %11, align 8, !tbaa !304
  br label %199

12:                                               ; preds = %5
  %13 = icmp ult i64 %4, 33
  br i1 %13, label %14, label %16

14:                                               ; preds = %12
  %15 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %2, i64 0, i32 4
  store i32 27, i32* %15, align 8, !tbaa !304
  br label %199

16:                                               ; preds = %12
  tail call void @_Z20lodepng_info_cleanupP11LodePNGInfo(%struct.LodePNGInfo* noundef nonnull %6)
  %17 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %2, i64 0, i32 3, i32 3, i32 4
  %18 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %2, i64 0, i32 3, i32 3, i32 0
  %19 = bitcast i32* %17 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(16) %19, i8 0, i64 16, i1 false) #25
  store i32 6, i32* %18, align 8, !tbaa !147
  %20 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %2, i64 0, i32 3, i32 3, i32 1
  store i32 8, i32* %20, align 4, !tbaa !150
  %21 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %2, i64 0, i32 3, i32 3, i32 2
  %22 = bitcast i8** %21 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(16) %22, i8 0, i64 16, i1 false) #25
  %23 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %2, i64 0, i32 3, i32 2
  store i32 0, i32* %23, align 8, !tbaa !208
  %24 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %6, i64 0, i32 0
  store i32 0, i32* %24, align 8, !tbaa !209
  %25 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %2, i64 0, i32 3, i32 1
  store i32 0, i32* %25, align 4, !tbaa !210
  %26 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %2, i64 0, i32 3, i32 4
  %27 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %2, i64 0, i32 3, i32 18
  store i32 0, i32* %27, align 4, !tbaa !211
  %28 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %2, i64 0, i32 3, i32 22
  store i32 0, i32* %28, align 4, !tbaa !212
  %29 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %2, i64 0, i32 3, i32 24
  store i32 0, i32* %29, align 4, !tbaa !213
  %30 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %2, i64 0, i32 3, i32 33
  store i32 0, i32* %30, align 8, !tbaa !214
  %31 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %2, i64 0, i32 3, i32 35
  store i32 0, i32* %31, align 8, !tbaa !199
  %32 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %2, i64 0, i32 3, i32 36
  %33 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %2, i64 0, i32 3, i32 39
  %34 = bitcast i32* %26 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(84) %34, i8 0, i64 84, i1 false) #25
  %35 = bitcast i8** %32 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(16) %35, i8 0, i64 16, i1 false) #25
  %36 = bitcast i32* %33 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 4 dereferenceable(68) %36, i8 0, i64 68, i1 false) #25
  %37 = load i8, i8* %3, align 1, !tbaa !14
  %38 = icmp eq i8 %37, -119
  br i1 %38, label %39, label %67

39:                                               ; preds = %16
  %40 = getelementptr inbounds i8, i8* %3, i64 1
  %41 = load i8, i8* %40, align 1, !tbaa !14
  %42 = icmp eq i8 %41, 80
  br i1 %42, label %43, label %67

43:                                               ; preds = %39
  %44 = getelementptr inbounds i8, i8* %3, i64 2
  %45 = load i8, i8* %44, align 1, !tbaa !14
  %46 = icmp eq i8 %45, 78
  br i1 %46, label %47, label %67

47:                                               ; preds = %43
  %48 = getelementptr inbounds i8, i8* %3, i64 3
  %49 = load i8, i8* %48, align 1, !tbaa !14
  %50 = icmp eq i8 %49, 71
  br i1 %50, label %51, label %67

51:                                               ; preds = %47
  %52 = getelementptr inbounds i8, i8* %3, i64 4
  %53 = load i8, i8* %52, align 1, !tbaa !14
  %54 = icmp eq i8 %53, 13
  br i1 %54, label %55, label %67

55:                                               ; preds = %51
  %56 = getelementptr inbounds i8, i8* %3, i64 5
  %57 = load i8, i8* %56, align 1, !tbaa !14
  %58 = icmp eq i8 %57, 10
  br i1 %58, label %59, label %67

59:                                               ; preds = %55
  %60 = getelementptr inbounds i8, i8* %3, i64 6
  %61 = load i8, i8* %60, align 1, !tbaa !14
  %62 = icmp eq i8 %61, 26
  br i1 %62, label %63, label %67

63:                                               ; preds = %59
  %64 = getelementptr inbounds i8, i8* %3, i64 7
  %65 = load i8, i8* %64, align 1, !tbaa !14
  %66 = icmp eq i8 %65, 10
  br i1 %66, label %69, label %67

67:                                               ; preds = %63, %59, %55, %51, %47, %43, %39, %16
  %68 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %2, i64 0, i32 4
  store i32 28, i32* %68, align 8, !tbaa !304
  br label %199

69:                                               ; preds = %63
  %70 = getelementptr inbounds i8, i8* %3, i64 8
  %71 = load i8, i8* %70, align 1, !tbaa !14
  %72 = zext i8 %71 to i32
  %73 = shl nuw i32 %72, 24
  %74 = getelementptr inbounds i8, i8* %3, i64 9
  %75 = load i8, i8* %74, align 1, !tbaa !14
  %76 = zext i8 %75 to i32
  %77 = shl nuw nsw i32 %76, 16
  %78 = or i32 %77, %73
  %79 = getelementptr inbounds i8, i8* %3, i64 10
  %80 = load i8, i8* %79, align 1, !tbaa !14
  %81 = zext i8 %80 to i32
  %82 = shl nuw nsw i32 %81, 8
  %83 = or i32 %78, %82
  %84 = getelementptr inbounds i8, i8* %3, i64 11
  %85 = load i8, i8* %84, align 1, !tbaa !14
  %86 = zext i8 %85 to i32
  %87 = or i32 %83, %86
  %88 = icmp eq i32 %87, 13
  br i1 %88, label %91, label %89

89:                                               ; preds = %69
  %90 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %2, i64 0, i32 4
  store i32 94, i32* %90, align 8, !tbaa !304
  br label %199

91:                                               ; preds = %69
  %92 = tail call noundef zeroext i8 @_Z25lodepng_chunk_type_equalsPKhPKc(i8* noundef nonnull %70, i8* noundef getelementptr inbounds ([5 x i8], [5 x i8]* @.str.2, i64 0, i64 0)), !range !309
  %93 = icmp eq i8 %92, 0
  br i1 %93, label %94, label %96

94:                                               ; preds = %91
  %95 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %2, i64 0, i32 4
  store i32 29, i32* %95, align 8, !tbaa !304
  br label %199

96:                                               ; preds = %91
  %97 = getelementptr inbounds i8, i8* %3, i64 16
  %98 = load i8, i8* %97, align 1, !tbaa !14
  %99 = zext i8 %98 to i32
  %100 = shl nuw i32 %99, 24
  %101 = getelementptr inbounds i8, i8* %3, i64 17
  %102 = load i8, i8* %101, align 1, !tbaa !14
  %103 = zext i8 %102 to i32
  %104 = shl nuw nsw i32 %103, 16
  %105 = or i32 %104, %100
  %106 = getelementptr inbounds i8, i8* %3, i64 18
  %107 = load i8, i8* %106, align 1, !tbaa !14
  %108 = zext i8 %107 to i32
  %109 = shl nuw nsw i32 %108, 8
  %110 = or i32 %105, %109
  %111 = getelementptr inbounds i8, i8* %3, i64 19
  %112 = load i8, i8* %111, align 1, !tbaa !14
  %113 = zext i8 %112 to i32
  %114 = or i32 %110, %113
  %115 = getelementptr inbounds i8, i8* %3, i64 20
  %116 = load i8, i8* %115, align 1, !tbaa !14
  %117 = zext i8 %116 to i32
  %118 = shl nuw i32 %117, 24
  %119 = getelementptr inbounds i8, i8* %3, i64 21
  %120 = load i8, i8* %119, align 1, !tbaa !14
  %121 = zext i8 %120 to i32
  %122 = shl nuw nsw i32 %121, 16
  %123 = or i32 %122, %118
  %124 = getelementptr inbounds i8, i8* %3, i64 22
  %125 = load i8, i8* %124, align 1, !tbaa !14
  %126 = zext i8 %125 to i32
  %127 = shl nuw nsw i32 %126, 8
  %128 = or i32 %123, %127
  %129 = getelementptr inbounds i8, i8* %3, i64 23
  %130 = load i8, i8* %129, align 1, !tbaa !14
  %131 = zext i8 %130 to i32
  %132 = or i32 %128, %131
  %133 = icmp eq i32* %0, null
  br i1 %133, label %135, label %134

134:                                              ; preds = %96
  store i32 %114, i32* %0, align 4, !tbaa !9
  br label %135

135:                                              ; preds = %134, %96
  %136 = icmp eq i32* %1, null
  br i1 %136, label %138, label %137

137:                                              ; preds = %135
  store i32 %132, i32* %1, align 4, !tbaa !9
  br label %138

138:                                              ; preds = %137, %135
  %139 = getelementptr inbounds i8, i8* %3, i64 24
  %140 = load i8, i8* %139, align 1, !tbaa !14
  %141 = zext i8 %140 to i32
  store i32 %141, i32* %20, align 4, !tbaa !310
  %142 = getelementptr inbounds i8, i8* %3, i64 25
  %143 = load i8, i8* %142, align 1, !tbaa !14
  %144 = zext i8 %143 to i32
  store i32 %144, i32* %18, align 8, !tbaa !311
  %145 = getelementptr inbounds i8, i8* %3, i64 26
  %146 = load i8, i8* %145, align 1, !tbaa !14
  %147 = zext i8 %146 to i32
  store i32 %147, i32* %24, align 8, !tbaa !209
  %148 = getelementptr inbounds i8, i8* %3, i64 27
  %149 = load i8, i8* %148, align 1, !tbaa !14
  %150 = zext i8 %149 to i32
  store i32 %150, i32* %25, align 4, !tbaa !210
  %151 = getelementptr inbounds i8, i8* %3, i64 28
  %152 = load i8, i8* %151, align 1, !tbaa !14
  %153 = zext i8 %152 to i32
  store i32 %153, i32* %23, align 8, !tbaa !208
  %154 = icmp eq i32 %114, 0
  %155 = icmp eq i32 %132, 0
  %156 = or i1 %154, %155
  br i1 %156, label %157, label %159

157:                                              ; preds = %138
  %158 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %2, i64 0, i32 4
  store i32 93, i32* %158, align 8, !tbaa !304
  br label %199

159:                                              ; preds = %138
  %160 = tail call fastcc noundef i32 @_ZL18checkColorValidity16LodePNGColorTypej(i32 noundef %144, i32 noundef %141), !range !312
  %161 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %2, i64 0, i32 4
  store i32 %160, i32* %161, align 8, !tbaa !304
  %162 = icmp eq i32 %160, 0
  br i1 %162, label %163, label %199

163:                                              ; preds = %159
  %164 = icmp eq i8 %146, 0
  br i1 %164, label %166, label %165

165:                                              ; preds = %163
  store i32 32, i32* %161, align 8, !tbaa !304
  br label %199

166:                                              ; preds = %163
  %167 = icmp eq i8 %149, 0
  br i1 %167, label %169, label %168

168:                                              ; preds = %166
  store i32 33, i32* %161, align 8, !tbaa !304
  br label %199

169:                                              ; preds = %166
  %170 = icmp ugt i8 %152, 1
  br i1 %170, label %171, label %172

171:                                              ; preds = %169
  store i32 34, i32* %161, align 8, !tbaa !304
  br label %199

172:                                              ; preds = %169
  %173 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %2, i64 0, i32 0, i32 1
  %174 = load i32, i32* %173, align 8, !tbaa !313
  %175 = icmp eq i32 %174, 0
  br i1 %175, label %176, label %199

176:                                              ; preds = %172
  %177 = getelementptr inbounds i8, i8* %3, i64 29
  %178 = load i8, i8* %177, align 1, !tbaa !14
  %179 = zext i8 %178 to i32
  %180 = shl nuw i32 %179, 24
  %181 = getelementptr inbounds i8, i8* %3, i64 30
  %182 = load i8, i8* %181, align 1, !tbaa !14
  %183 = zext i8 %182 to i32
  %184 = shl nuw nsw i32 %183, 16
  %185 = or i32 %184, %180
  %186 = getelementptr inbounds i8, i8* %3, i64 31
  %187 = load i8, i8* %186, align 1, !tbaa !14
  %188 = zext i8 %187 to i32
  %189 = shl nuw nsw i32 %188, 8
  %190 = or i32 %185, %189
  %191 = getelementptr inbounds i8, i8* %3, i64 32
  %192 = load i8, i8* %191, align 1, !tbaa !14
  %193 = zext i8 %192 to i32
  %194 = or i32 %190, %193
  %195 = getelementptr inbounds i8, i8* %3, i64 12
  %196 = tail call noundef i32 @_Z13lodepng_crc32PKhm(i8* noundef nonnull %195, i64 noundef 17)
  %197 = icmp eq i32 %194, %196
  br i1 %197, label %199, label %198

198:                                              ; preds = %176
  store i32 57, i32* %161, align 8, !tbaa !304
  br label %199

199:                                              ; preds = %172, %176, %198, %159, %171, %168, %165, %157, %94, %89, %67, %14, %10
  %200 = phi i32 [ 48, %10 ], [ 27, %14 ], [ 28, %67 ], [ 94, %89 ], [ 93, %157 ], [ 32, %165 ], [ 33, %168 ], [ 34, %171 ], [ 57, %198 ], [ 29, %94 ], [ %160, %159 ], [ 0, %176 ], [ 0, %172 ]
  ret i32 %200
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind readnone uwtable willreturn
define internal fastcc noundef i32 @_ZL18checkColorValidity16LodePNGColorTypej(i32 noundef %0, i32 noundef %1) unnamed_addr #17 {
  switch i32 %0, label %27 [
    i32 0, label %3
    i32 2, label %4
    i32 3, label %9
    i32 4, label %12
    i32 6, label %17
  ]

3:                                                ; preds = %2
  switch i32 %1, label %27 [
    i32 16, label %22
    i32 8, label %22
    i32 4, label %22
    i32 2, label %22
    i32 1, label %22
  ]

4:                                                ; preds = %2
  %5 = icmp eq i32 %1, 16
  %6 = icmp eq i32 %1, 8
  %7 = or i1 %5, %6
  %8 = select i1 %7, i32 0, i32 37
  br label %27

9:                                                ; preds = %2
  %10 = add i32 %1, -1
  %11 = icmp ult i32 %10, 8
  br i1 %11, label %23, label %27

12:                                               ; preds = %2
  %13 = icmp eq i32 %1, 16
  %14 = icmp eq i32 %1, 8
  %15 = or i1 %13, %14
  %16 = select i1 %15, i32 0, i32 37
  br label %27

17:                                               ; preds = %2
  %18 = icmp eq i32 %1, 16
  %19 = icmp eq i32 %1, 8
  %20 = or i1 %18, %19
  %21 = select i1 %20, i32 0, i32 37
  br label %27

22:                                               ; preds = %3, %3, %3, %3, %3
  br label %27

23:                                               ; preds = %9
  %24 = sext i32 %10 to i64
  %25 = getelementptr inbounds [8 x i32], [8 x i32]* @switch.table._ZL18checkColorValidity16LodePNGColorTypej, i64 0, i64 %24
  %26 = load i32, i32* %25, align 4
  br label %27

27:                                               ; preds = %23, %9, %17, %12, %4, %2, %3, %22
  %28 = phi i32 [ 0, %22 ], [ 37, %3 ], [ 37, %9 ], [ 31, %2 ], [ %8, %4 ], [ %16, %12 ], [ %21, %17 ], [ %26, %23 ]
  ret i32 %28
}

; Function Attrs: uwtable
define dso_local noundef i32 @_Z21lodepng_inspect_chunkP12LodePNGStatemPKhm(%struct.LodePNGState* noundef %0, i64 noundef %1, i8* noundef %2, i64 noundef %3) local_unnamed_addr #12 {
  %5 = getelementptr inbounds i8, i8* %2, i64 %1
  %6 = add i64 %1, 4
  %7 = icmp ugt i64 %6, %3
  br i1 %7, label %263, label %8

8:                                                ; preds = %4
  %9 = load i8, i8* %5, align 1, !tbaa !14
  %10 = zext i8 %9 to i32
  %11 = shl nuw i32 %10, 24
  %12 = getelementptr inbounds i8, i8* %5, i64 1
  %13 = load i8, i8* %12, align 1, !tbaa !14
  %14 = zext i8 %13 to i32
  %15 = shl nuw nsw i32 %14, 16
  %16 = or i32 %15, %11
  %17 = getelementptr inbounds i8, i8* %5, i64 2
  %18 = load i8, i8* %17, align 1, !tbaa !14
  %19 = zext i8 %18 to i32
  %20 = shl nuw nsw i32 %19, 8
  %21 = or i32 %16, %20
  %22 = getelementptr inbounds i8, i8* %5, i64 3
  %23 = load i8, i8* %22, align 1, !tbaa !14
  %24 = zext i8 %23 to i32
  %25 = or i32 %21, %24
  %26 = icmp slt i32 %25, 0
  br i1 %26, label %263, label %27

27:                                               ; preds = %8
  %28 = getelementptr inbounds i8, i8* %5, i64 8
  %29 = add nuw i32 %25, 12
  %30 = zext i32 %29 to i64
  %31 = sub i64 %3, %1
  %32 = icmp ult i64 %31, %30
  br i1 %32, label %263, label %33

33:                                               ; preds = %27
  %34 = getelementptr inbounds i8, i8* %5, i64 4
  %35 = load i8, i8* %34, align 1, !tbaa !14
  %36 = icmp eq i8 %35, 80
  br i1 %36, label %37, label %53

37:                                               ; preds = %33
  %38 = getelementptr inbounds i8, i8* %5, i64 5
  %39 = load i8, i8* %38, align 1, !tbaa !14
  %40 = icmp eq i8 %39, 76
  br i1 %40, label %41, label %53

41:                                               ; preds = %37
  %42 = getelementptr inbounds i8, i8* %5, i64 6
  %43 = load i8, i8* %42, align 1, !tbaa !14
  %44 = icmp eq i8 %43, 84
  br i1 %44, label %45, label %53

45:                                               ; preds = %41
  %46 = getelementptr inbounds i8, i8* %5, i64 7
  %47 = load i8, i8* %46, align 1, !tbaa !14
  %48 = icmp eq i8 %47, 69
  br i1 %48, label %49, label %53

49:                                               ; preds = %45
  %50 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %0, i64 0, i32 3, i32 3
  %51 = zext i32 %25 to i64
  %52 = tail call fastcc noundef i32 @_ZL14readChunk_PLTEP16LodePNGColorModePKhm(%struct.LodePNGColorMode* noundef nonnull %50, i8* noundef nonnull %28, i64 noundef %51), !range !127
  br label %251

53:                                               ; preds = %45, %41, %37, %33
  %54 = getelementptr inbounds i8, i8* %5, i64 4
  %55 = load i8, i8* %54, align 1, !tbaa !14
  %56 = icmp eq i8 %55, 116
  br i1 %56, label %57, label %137

57:                                               ; preds = %53
  %58 = getelementptr inbounds i8, i8* %5, i64 5
  %59 = load i8, i8* %58, align 1, !tbaa !14
  %60 = icmp eq i8 %59, 82
  br i1 %60, label %61, label %137

61:                                               ; preds = %57
  %62 = getelementptr inbounds i8, i8* %5, i64 6
  %63 = load i8, i8* %62, align 1, !tbaa !14
  %64 = icmp eq i8 %63, 78
  br i1 %64, label %65, label %137

65:                                               ; preds = %61
  %66 = getelementptr inbounds i8, i8* %5, i64 7
  %67 = load i8, i8* %66, align 1, !tbaa !14
  %68 = icmp eq i8 %67, 83
  br i1 %68, label %69, label %137

69:                                               ; preds = %65
  %70 = zext i32 %25 to i64
  %71 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %0, i64 0, i32 3, i32 3, i32 0
  %72 = load i32, i32* %71, align 8, !tbaa !147
  switch i32 %72, label %261 [
    i32 3, label %73
    i32 0, label %93
    i32 2, label %107
  ]

73:                                               ; preds = %69
  %74 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %0, i64 0, i32 3, i32 3, i32 3
  %75 = load i64, i64* %74, align 8, !tbaa !156
  %76 = icmp ult i64 %75, %70
  br i1 %76, label %261, label %77

77:                                               ; preds = %73
  %78 = icmp eq i32 %25, 0
  br i1 %78, label %254, label %79

79:                                               ; preds = %77
  %80 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %0, i64 0, i32 3, i32 3, i32 2
  br label %81

81:                                               ; preds = %81, %79
  %82 = phi i64 [ 0, %79 ], [ %91, %81 ]
  %83 = getelementptr inbounds i8, i8* %28, i64 %82
  %84 = load i8, i8* %83, align 1, !tbaa !14
  %85 = load i8*, i8** %80, align 8, !tbaa !151
  %86 = shl nuw nsw i64 %82, 2
  %87 = and i64 %86, 4294967292
  %88 = or i64 %87, 3
  %89 = getelementptr inbounds i8, i8* %85, i64 %88
  store i8 %84, i8* %89, align 1, !tbaa !14
  %90 = add nuw nsw i64 %82, 1
  %91 = and i64 %90, 4294967295
  %92 = icmp eq i64 %91, %70
  br i1 %92, label %254, label %81

93:                                               ; preds = %69
  %94 = icmp eq i32 %25, 2
  br i1 %94, label %95, label %261

95:                                               ; preds = %93
  %96 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %0, i64 0, i32 3, i32 3, i32 4
  store i32 1, i32* %96, align 8, !tbaa !161
  %97 = load i8, i8* %28, align 1, !tbaa !14
  %98 = zext i8 %97 to i32
  %99 = shl nuw nsw i32 %98, 8
  %100 = getelementptr inbounds i8, i8* %28, i64 1
  %101 = load i8, i8* %100, align 1, !tbaa !14
  %102 = zext i8 %101 to i32
  %103 = or i32 %99, %102
  %104 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %0, i64 0, i32 3, i32 3, i32 7
  store i32 %103, i32* %104, align 4, !tbaa !237
  %105 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %0, i64 0, i32 3, i32 3, i32 6
  store i32 %103, i32* %105, align 8, !tbaa !236
  %106 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %0, i64 0, i32 3, i32 3, i32 5
  store i32 %103, i32* %106, align 4, !tbaa !235
  br label %254

107:                                              ; preds = %69
  %108 = icmp eq i32 %25, 6
  br i1 %108, label %109, label %261

109:                                              ; preds = %107
  %110 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %0, i64 0, i32 3, i32 3, i32 4
  store i32 1, i32* %110, align 8, !tbaa !161
  %111 = load i8, i8* %28, align 1, !tbaa !14
  %112 = zext i8 %111 to i32
  %113 = shl nuw nsw i32 %112, 8
  %114 = getelementptr inbounds i8, i8* %28, i64 1
  %115 = load i8, i8* %114, align 1, !tbaa !14
  %116 = zext i8 %115 to i32
  %117 = or i32 %113, %116
  %118 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %0, i64 0, i32 3, i32 3, i32 5
  store i32 %117, i32* %118, align 4, !tbaa !235
  %119 = getelementptr inbounds i8, i8* %28, i64 2
  %120 = load i8, i8* %119, align 1, !tbaa !14
  %121 = zext i8 %120 to i32
  %122 = shl nuw nsw i32 %121, 8
  %123 = getelementptr inbounds i8, i8* %28, i64 3
  %124 = load i8, i8* %123, align 1, !tbaa !14
  %125 = zext i8 %124 to i32
  %126 = or i32 %122, %125
  %127 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %0, i64 0, i32 3, i32 3, i32 6
  store i32 %126, i32* %127, align 8, !tbaa !236
  %128 = getelementptr inbounds i8, i8* %28, i64 4
  %129 = load i8, i8* %128, align 1, !tbaa !14
  %130 = zext i8 %129 to i32
  %131 = shl nuw nsw i32 %130, 8
  %132 = getelementptr inbounds i8, i8* %28, i64 5
  %133 = load i8, i8* %132, align 1, !tbaa !14
  %134 = zext i8 %133 to i32
  %135 = or i32 %131, %134
  %136 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %0, i64 0, i32 3, i32 3, i32 7
  store i32 %135, i32* %136, align 4, !tbaa !237
  br label %254

137:                                              ; preds = %65, %61, %57, %53
  %138 = getelementptr inbounds i8, i8* %5, i64 4
  %139 = load i8, i8* %138, align 1, !tbaa !14
  %140 = icmp eq i8 %139, 98
  br i1 %140, label %141, label %157

141:                                              ; preds = %137
  %142 = getelementptr inbounds i8, i8* %5, i64 5
  %143 = load i8, i8* %142, align 1, !tbaa !14
  %144 = icmp eq i8 %143, 75
  br i1 %144, label %145, label %157

145:                                              ; preds = %141
  %146 = getelementptr inbounds i8, i8* %5, i64 6
  %147 = load i8, i8* %146, align 1, !tbaa !14
  %148 = icmp eq i8 %147, 71
  br i1 %148, label %149, label %157

149:                                              ; preds = %145
  %150 = getelementptr inbounds i8, i8* %5, i64 7
  %151 = load i8, i8* %150, align 1, !tbaa !14
  %152 = icmp eq i8 %151, 68
  br i1 %152, label %153, label %157

153:                                              ; preds = %149
  %154 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %0, i64 0, i32 3
  %155 = zext i32 %25 to i64
  %156 = tail call fastcc noundef i32 @_ZL14readChunk_bKGDP11LodePNGInfoPKhm(%struct.LodePNGInfo* noundef nonnull %154, i8* noundef nonnull %28, i64 noundef %155), !range !314
  br label %251

157:                                              ; preds = %137, %141, %145, %149
  %158 = tail call noundef zeroext i8 @_Z25lodepng_chunk_type_equalsPKhPKc(i8* noundef nonnull %5, i8* noundef getelementptr inbounds ([5 x i8], [5 x i8]* @.str.6, i64 0, i64 0)), !range !309
  %159 = icmp eq i8 %158, 0
  br i1 %159, label %164, label %160

160:                                              ; preds = %157
  %161 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %0, i64 0, i32 3
  %162 = zext i32 %25 to i64
  %163 = tail call fastcc noundef i32 @_ZL14readChunk_tEXtP11LodePNGInfoPKhm(%struct.LodePNGInfo* noundef nonnull %161, i8* noundef nonnull %28, i64 noundef %162), !range !315
  br label %251

164:                                              ; preds = %157
  %165 = tail call noundef zeroext i8 @_Z25lodepng_chunk_type_equalsPKhPKc(i8* noundef nonnull %5, i8* noundef getelementptr inbounds ([5 x i8], [5 x i8]* @.str.7, i64 0, i64 0)), !range !309
  %166 = icmp eq i8 %165, 0
  br i1 %166, label %172, label %167

167:                                              ; preds = %164
  %168 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %0, i64 0, i32 3
  %169 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %0, i64 0, i32 0
  %170 = zext i32 %25 to i64
  %171 = tail call fastcc noundef i32 @_ZL14readChunk_zTXtP11LodePNGInfoPK22LodePNGDecoderSettingsPKhm(%struct.LodePNGInfo* noundef nonnull %168, %struct.LodePNGDecoderSettings* noundef %169, i8* noundef nonnull %28, i64 noundef %170)
  br label %251

172:                                              ; preds = %164
  %173 = tail call noundef zeroext i8 @_Z25lodepng_chunk_type_equalsPKhPKc(i8* noundef nonnull %5, i8* noundef getelementptr inbounds ([5 x i8], [5 x i8]* @.str.8, i64 0, i64 0)), !range !309
  %174 = icmp eq i8 %173, 0
  br i1 %174, label %180, label %175

175:                                              ; preds = %172
  %176 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %0, i64 0, i32 3
  %177 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %0, i64 0, i32 0
  %178 = zext i32 %25 to i64
  %179 = tail call fastcc noundef i32 @_ZL14readChunk_iTXtP11LodePNGInfoPK22LodePNGDecoderSettingsPKhm(%struct.LodePNGInfo* noundef nonnull %176, %struct.LodePNGDecoderSettings* noundef %177, i8* noundef nonnull %28, i64 noundef %178)
  br label %251

180:                                              ; preds = %172
  %181 = tail call noundef zeroext i8 @_Z25lodepng_chunk_type_equalsPKhPKc(i8* noundef nonnull %5, i8* noundef getelementptr inbounds ([5 x i8], [5 x i8]* @.str.9, i64 0, i64 0)), !range !309
  %182 = icmp eq i8 %181, 0
  br i1 %182, label %187, label %183

183:                                              ; preds = %180
  %184 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %0, i64 0, i32 3
  %185 = zext i32 %25 to i64
  %186 = tail call fastcc noundef i32 @_ZL14readChunk_tIMEP11LodePNGInfoPKhm(%struct.LodePNGInfo* noundef nonnull %184, i8* noundef nonnull %28, i64 noundef %185), !range !316
  br label %251

187:                                              ; preds = %180
  %188 = tail call noundef zeroext i8 @_Z25lodepng_chunk_type_equalsPKhPKc(i8* noundef nonnull %5, i8* noundef getelementptr inbounds ([5 x i8], [5 x i8]* @.str.10, i64 0, i64 0)), !range !309
  %189 = icmp eq i8 %188, 0
  br i1 %189, label %194, label %190

190:                                              ; preds = %187
  %191 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %0, i64 0, i32 3
  %192 = zext i32 %25 to i64
  %193 = tail call fastcc noundef i32 @_ZL14readChunk_pHYsP11LodePNGInfoPKhm(%struct.LodePNGInfo* noundef nonnull %191, i8* noundef nonnull %28, i64 noundef %192), !range !317
  br label %251

194:                                              ; preds = %187
  %195 = tail call noundef zeroext i8 @_Z25lodepng_chunk_type_equalsPKhPKc(i8* noundef nonnull %5, i8* noundef getelementptr inbounds ([5 x i8], [5 x i8]* @.str.11, i64 0, i64 0)), !range !309
  %196 = icmp eq i8 %195, 0
  br i1 %196, label %219, label %197

197:                                              ; preds = %194
  %198 = icmp eq i32 %25, 4
  br i1 %198, label %199, label %261

199:                                              ; preds = %197
  %200 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %0, i64 0, i32 3, i32 22
  store i32 1, i32* %200, align 4, !tbaa !212
  %201 = load i8, i8* %28, align 1, !tbaa !14
  %202 = zext i8 %201 to i32
  %203 = shl nuw i32 %202, 24
  %204 = getelementptr inbounds i8, i8* %28, i64 1
  %205 = load i8, i8* %204, align 1, !tbaa !14
  %206 = zext i8 %205 to i32
  %207 = shl nuw nsw i32 %206, 16
  %208 = or i32 %207, %203
  %209 = getelementptr inbounds i8, i8* %28, i64 2
  %210 = load i8, i8* %209, align 1, !tbaa !14
  %211 = zext i8 %210 to i32
  %212 = shl nuw nsw i32 %211, 8
  %213 = or i32 %208, %212
  %214 = getelementptr inbounds i8, i8* %28, i64 3
  %215 = load i8, i8* %214, align 1, !tbaa !14
  %216 = zext i8 %215 to i32
  %217 = or i32 %213, %216
  %218 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %0, i64 0, i32 3, i32 23
  store i32 %217, i32* %218, align 8, !tbaa !318
  br label %254

219:                                              ; preds = %194
  %220 = tail call noundef zeroext i8 @_Z25lodepng_chunk_type_equalsPKhPKc(i8* noundef nonnull %5, i8* noundef getelementptr inbounds ([5 x i8], [5 x i8]* @.str.12, i64 0, i64 0)), !range !309
  %221 = icmp eq i8 %220, 0
  br i1 %221, label %226, label %222

222:                                              ; preds = %219
  %223 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %0, i64 0, i32 3
  %224 = zext i32 %25 to i64
  %225 = tail call fastcc noundef i32 @_ZL14readChunk_cHRMP11LodePNGInfoPKhm(%struct.LodePNGInfo* noundef nonnull %223, i8* noundef nonnull %28, i64 noundef %224), !range !319
  br label %251

226:                                              ; preds = %219
  %227 = tail call noundef zeroext i8 @_Z25lodepng_chunk_type_equalsPKhPKc(i8* noundef nonnull %5, i8* noundef getelementptr inbounds ([5 x i8], [5 x i8]* @.str.13, i64 0, i64 0)), !range !309
  %228 = icmp eq i8 %227, 0
  br i1 %228, label %236, label %229

229:                                              ; preds = %226
  %230 = icmp eq i32 %25, 1
  br i1 %230, label %231, label %261

231:                                              ; preds = %229
  %232 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %0, i64 0, i32 3, i32 33
  store i32 1, i32* %232, align 8, !tbaa !214
  %233 = load i8, i8* %28, align 1, !tbaa !14
  %234 = zext i8 %233 to i32
  %235 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %0, i64 0, i32 3, i32 34
  store i32 %234, i32* %235, align 4, !tbaa !320
  br label %254

236:                                              ; preds = %226
  %237 = tail call noundef zeroext i8 @_Z25lodepng_chunk_type_equalsPKhPKc(i8* noundef nonnull %5, i8* noundef getelementptr inbounds ([5 x i8], [5 x i8]* @.str.14, i64 0, i64 0)), !range !309
  %238 = icmp eq i8 %237, 0
  br i1 %238, label %244, label %239

239:                                              ; preds = %236
  %240 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %0, i64 0, i32 3
  %241 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %0, i64 0, i32 0
  %242 = zext i32 %25 to i64
  %243 = tail call fastcc noundef i32 @_ZL14readChunk_iCCPP11LodePNGInfoPK22LodePNGDecoderSettingsPKhm(%struct.LodePNGInfo* noundef nonnull %240, %struct.LodePNGDecoderSettings* noundef %241, i8* noundef nonnull %28, i64 noundef %242)
  br label %251

244:                                              ; preds = %236
  %245 = tail call noundef zeroext i8 @_Z25lodepng_chunk_type_equalsPKhPKc(i8* noundef nonnull %5, i8* noundef getelementptr inbounds ([5 x i8], [5 x i8]* @.str.15, i64 0, i64 0)), !range !309
  %246 = icmp eq i8 %245, 0
  br i1 %246, label %261, label %247

247:                                              ; preds = %244
  %248 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %0, i64 0, i32 3
  %249 = zext i32 %25 to i64
  %250 = tail call fastcc noundef i32 @_ZL14readChunk_sBITP11LodePNGInfoPKhm(%struct.LodePNGInfo* noundef nonnull %248, i8* noundef nonnull %28, i64 noundef %249), !range !321
  br label %251

251:                                              ; preds = %160, %175, %190, %222, %239, %247, %183, %167, %153, %49
  %252 = phi i32 [ %163, %160 ], [ %179, %175 ], [ %193, %190 ], [ %225, %222 ], [ %243, %239 ], [ %250, %247 ], [ %186, %183 ], [ %171, %167 ], [ %156, %153 ], [ %52, %49 ]
  %253 = icmp eq i32 %252, 0
  br i1 %253, label %254, label %261

254:                                              ; preds = %81, %231, %199, %77, %109, %95, %251
  %255 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %0, i64 0, i32 0, i32 1
  %256 = load i32, i32* %255, align 8, !tbaa !313
  %257 = icmp eq i32 %256, 0
  br i1 %257, label %258, label %261

258:                                              ; preds = %254
  %259 = tail call noundef i32 @_Z23lodepng_chunk_check_crcPKh(i8* noundef nonnull %5), !range !322
  %260 = icmp eq i32 %259, 0
  br i1 %260, label %261, label %263

261:                                              ; preds = %244, %229, %197, %69, %107, %93, %73, %258, %254, %251
  %262 = phi i32 [ 0, %258 ], [ 0, %254 ], [ %252, %251 ], [ 98, %229 ], [ 96, %197 ], [ 42, %69 ], [ 41, %107 ], [ 30, %93 ], [ 39, %73 ], [ 0, %244 ]
  br label %263

263:                                              ; preds = %258, %27, %8, %4, %261
  %264 = phi i32 [ %262, %261 ], [ 30, %4 ], [ 63, %8 ], [ 30, %27 ], [ 57, %258 ]
  ret i32 %264
}

; Function Attrs: nofree nounwind uwtable
define internal fastcc noundef i32 @_ZL14readChunk_PLTEP16LodePNGColorModePKhm(%struct.LodePNGColorMode* nocapture noundef %0, i8* nocapture noundef readonly %1, i64 noundef %2) unnamed_addr #0 {
  %4 = udiv i64 %2, 3
  %5 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %0, i64 0, i32 3
  store i64 %4, i64* %5, align 8, !tbaa !156
  %6 = add i64 %2, -771
  %7 = icmp ult i64 %6, -768
  br i1 %7, label %80, label %8

8:                                                ; preds = %3
  %9 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %0, i64 0, i32 2
  %10 = load i8*, i8** %9, align 8, !tbaa !151
  %11 = icmp eq i8* %10, null
  br i1 %11, label %12, label %15

12:                                               ; preds = %8
  %13 = tail call noalias dereferenceable_or_null(1024) i8* @malloc(i64 noundef 1024) #25
  store i8* %13, i8** %9, align 8, !tbaa !151
  %14 = icmp eq i8* %13, null
  br i1 %14, label %37, label %15

15:                                               ; preds = %12, %8
  %16 = phi i8* [ %10, %8 ], [ %13, %12 ]
  br label %17

17:                                               ; preds = %15, %17
  %18 = phi i8* [ %33, %17 ], [ %16, %15 ]
  %19 = phi i64 [ %31, %17 ], [ 0, %15 ]
  %20 = shl i64 %19, 2
  %21 = getelementptr inbounds i8, i8* %18, i64 %20
  store i8 0, i8* %21, align 1, !tbaa !14
  %22 = load i8*, i8** %9, align 8, !tbaa !151
  %23 = or i64 %20, 1
  %24 = getelementptr inbounds i8, i8* %22, i64 %23
  store i8 0, i8* %24, align 1, !tbaa !14
  %25 = load i8*, i8** %9, align 8, !tbaa !151
  %26 = or i64 %20, 2
  %27 = getelementptr inbounds i8, i8* %25, i64 %26
  store i8 0, i8* %27, align 1, !tbaa !14
  %28 = load i8*, i8** %9, align 8, !tbaa !151
  %29 = or i64 %20, 3
  %30 = getelementptr inbounds i8, i8* %28, i64 %29
  store i8 -1, i8* %30, align 1, !tbaa !14
  %31 = add nuw nsw i64 %19, 1
  %32 = icmp eq i64 %31, 256
  %33 = load i8*, i8** %9, align 8, !tbaa !151
  br i1 %32, label %34, label %17

34:                                               ; preds = %17
  %35 = icmp eq i8* %33, null
  %36 = load i64, i64* %5, align 8, !tbaa !156
  br i1 %35, label %37, label %41

37:                                               ; preds = %34, %12
  %38 = phi i64 [ %4, %12 ], [ %36, %34 ]
  %39 = icmp eq i64 %38, 0
  br i1 %39, label %80, label %40

40:                                               ; preds = %37
  store i64 0, i64* %5, align 8, !tbaa !156
  br label %80

41:                                               ; preds = %34
  %42 = icmp eq i64 %36, 0
  br i1 %42, label %80, label %43

43:                                               ; preds = %41, %77
  %44 = phi i8* [ %79, %77 ], [ %33, %41 ]
  %45 = phi i32 [ %73, %77 ], [ 0, %41 ]
  %46 = phi i32 [ %78, %77 ], [ 0, %41 ]
  %47 = add i32 %46, 1
  %48 = zext i32 %46 to i64
  %49 = getelementptr inbounds i8, i8* %1, i64 %48
  %50 = load i8, i8* %49, align 1, !tbaa !14
  %51 = shl i32 %45, 2
  %52 = zext i32 %51 to i64
  %53 = getelementptr inbounds i8, i8* %44, i64 %52
  store i8 %50, i8* %53, align 1, !tbaa !14
  %54 = add i32 %46, 2
  %55 = zext i32 %47 to i64
  %56 = getelementptr inbounds i8, i8* %1, i64 %55
  %57 = load i8, i8* %56, align 1, !tbaa !14
  %58 = load i8*, i8** %9, align 8, !tbaa !151
  %59 = or i32 %51, 1
  %60 = zext i32 %59 to i64
  %61 = getelementptr inbounds i8, i8* %58, i64 %60
  store i8 %57, i8* %61, align 1, !tbaa !14
  %62 = zext i32 %54 to i64
  %63 = getelementptr inbounds i8, i8* %1, i64 %62
  %64 = load i8, i8* %63, align 1, !tbaa !14
  %65 = load i8*, i8** %9, align 8, !tbaa !151
  %66 = or i32 %51, 2
  %67 = zext i32 %66 to i64
  %68 = getelementptr inbounds i8, i8* %65, i64 %67
  store i8 %64, i8* %68, align 1, !tbaa !14
  %69 = load i8*, i8** %9, align 8, !tbaa !151
  %70 = or i32 %51, 3
  %71 = zext i32 %70 to i64
  %72 = getelementptr inbounds i8, i8* %69, i64 %71
  store i8 -1, i8* %72, align 1, !tbaa !14
  %73 = add i32 %45, 1
  %74 = zext i32 %73 to i64
  %75 = load i64, i64* %5, align 8, !tbaa !156
  %76 = icmp eq i64 %75, %74
  br i1 %76, label %80, label %77

77:                                               ; preds = %43
  %78 = add i32 %46, 3
  %79 = load i8*, i8** %9, align 8, !tbaa !151
  br label %43

80:                                               ; preds = %43, %37, %41, %3, %40
  %81 = phi i32 [ 83, %40 ], [ 38, %3 ], [ 0, %41 ], [ 0, %37 ], [ 0, %43 ]
  ret i32 %81
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind uwtable willreturn
define internal fastcc noundef i32 @_ZL14readChunk_bKGDP11LodePNGInfoPKhm(%struct.LodePNGInfo* nocapture noundef %0, i8* nocapture noundef readonly %1, i64 noundef %2) unnamed_addr #21 {
  %4 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %0, i64 0, i32 3, i32 0
  %5 = load i32, i32* %4, align 8, !tbaa !311
  switch i32 %5, label %65 [
    i32 3, label %6
    i32 0, label %21
    i32 4, label %21
    i32 2, label %35
    i32 6, label %35
  ]

6:                                                ; preds = %3
  %7 = icmp eq i64 %2, 1
  br i1 %7, label %8, label %65

8:                                                ; preds = %6
  %9 = load i8, i8* %1, align 1, !tbaa !14
  %10 = zext i8 %9 to i64
  %11 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %0, i64 0, i32 3, i32 3
  %12 = load i64, i64* %11, align 8, !tbaa !323
  %13 = icmp ugt i64 %12, %10
  br i1 %13, label %14, label %65

14:                                               ; preds = %8
  %15 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %0, i64 0, i32 4
  store i32 1, i32* %15, align 8, !tbaa !324
  %16 = load i8, i8* %1, align 1, !tbaa !14
  %17 = zext i8 %16 to i32
  %18 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %0, i64 0, i32 7
  store i32 %17, i32* %18, align 4, !tbaa !325
  %19 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %0, i64 0, i32 6
  store i32 %17, i32* %19, align 8, !tbaa !326
  %20 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %0, i64 0, i32 5
  store i32 %17, i32* %20, align 4, !tbaa !327
  br label %65

21:                                               ; preds = %3, %3
  %22 = icmp eq i64 %2, 2
  br i1 %22, label %23, label %65

23:                                               ; preds = %21
  %24 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %0, i64 0, i32 4
  store i32 1, i32* %24, align 8, !tbaa !324
  %25 = load i8, i8* %1, align 1, !tbaa !14
  %26 = zext i8 %25 to i32
  %27 = shl nuw nsw i32 %26, 8
  %28 = getelementptr inbounds i8, i8* %1, i64 1
  %29 = load i8, i8* %28, align 1, !tbaa !14
  %30 = zext i8 %29 to i32
  %31 = or i32 %27, %30
  %32 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %0, i64 0, i32 7
  store i32 %31, i32* %32, align 4, !tbaa !325
  %33 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %0, i64 0, i32 6
  store i32 %31, i32* %33, align 8, !tbaa !326
  %34 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %0, i64 0, i32 5
  store i32 %31, i32* %34, align 4, !tbaa !327
  br label %65

35:                                               ; preds = %3, %3
  %36 = icmp eq i64 %2, 6
  br i1 %36, label %37, label %65

37:                                               ; preds = %35
  %38 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %0, i64 0, i32 4
  store i32 1, i32* %38, align 8, !tbaa !324
  %39 = load i8, i8* %1, align 1, !tbaa !14
  %40 = zext i8 %39 to i32
  %41 = shl nuw nsw i32 %40, 8
  %42 = getelementptr inbounds i8, i8* %1, i64 1
  %43 = load i8, i8* %42, align 1, !tbaa !14
  %44 = zext i8 %43 to i32
  %45 = or i32 %41, %44
  %46 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %0, i64 0, i32 5
  store i32 %45, i32* %46, align 4, !tbaa !327
  %47 = getelementptr inbounds i8, i8* %1, i64 2
  %48 = load i8, i8* %47, align 1, !tbaa !14
  %49 = zext i8 %48 to i32
  %50 = shl nuw nsw i32 %49, 8
  %51 = getelementptr inbounds i8, i8* %1, i64 3
  %52 = load i8, i8* %51, align 1, !tbaa !14
  %53 = zext i8 %52 to i32
  %54 = or i32 %50, %53
  %55 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %0, i64 0, i32 6
  store i32 %54, i32* %55, align 8, !tbaa !326
  %56 = getelementptr inbounds i8, i8* %1, i64 4
  %57 = load i8, i8* %56, align 1, !tbaa !14
  %58 = zext i8 %57 to i32
  %59 = shl nuw nsw i32 %58, 8
  %60 = getelementptr inbounds i8, i8* %1, i64 5
  %61 = load i8, i8* %60, align 1, !tbaa !14
  %62 = zext i8 %61 to i32
  %63 = or i32 %59, %62
  %64 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %0, i64 0, i32 7
  store i32 %63, i32* %64, align 4, !tbaa !325
  br label %65

65:                                               ; preds = %14, %37, %23, %3, %35, %21, %8, %6
  %66 = phi i32 [ 43, %6 ], [ 103, %8 ], [ 44, %21 ], [ 45, %35 ], [ 0, %3 ], [ 0, %23 ], [ 0, %37 ], [ 0, %14 ]
  ret i32 %66
}

; Function Attrs: nounwind uwtable
define internal fastcc noundef i32 @_ZL14readChunk_tEXtP11LodePNGInfoPKhm(%struct.LodePNGInfo* nocapture noundef %0, i8* nocapture noundef readonly %1, i64 noundef %2) unnamed_addr #3 {
  %4 = icmp eq i64 %2, 0
  br i1 %4, label %51, label %5

5:                                                ; preds = %3, %11
  %6 = phi i64 [ %13, %11 ], [ 0, %3 ]
  %7 = getelementptr inbounds i8, i8* %1, i64 %6
  %8 = load i8, i8* %7, align 1, !tbaa !14
  %9 = icmp eq i8 %8, 0
  %10 = trunc i64 %6 to i32
  br i1 %9, label %15, label %11

11:                                               ; preds = %5
  %12 = add i32 %10, 1
  %13 = zext i32 %12 to i64
  %14 = icmp ult i64 %13, %2
  br i1 %14, label %5, label %17

15:                                               ; preds = %5
  %16 = trunc i64 %6 to i32
  br label %17

17:                                               ; preds = %11, %15
  %18 = phi i32 [ %16, %15 ], [ %12, %11 ]
  %19 = zext i32 %18 to i64
  %20 = add i32 %18, -80
  %21 = icmp ult i32 %20, -79
  br i1 %21, label %51, label %22

22:                                               ; preds = %17
  %23 = add nuw nsw i32 %18, 1
  %24 = zext i32 %23 to i64
  %25 = tail call noalias i8* @malloc(i64 noundef %24) #25
  %26 = icmp eq i8* %25, null
  br i1 %26, label %51, label %27

27:                                               ; preds = %22
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %25, i8* nonnull align 1 %1, i64 %19, i1 false) #25, !tbaa !14, !alias.scope !328
  %28 = getelementptr inbounds i8, i8* %25, i64 %19
  store i8 0, i8* %28, align 1, !tbaa !14
  %29 = tail call i64 @llvm.usub.sat.i64(i64 %2, i64 %24)
  %30 = add nuw i64 %29, 1
  %31 = and i64 %30, 4294967295
  %32 = tail call noalias i8* @malloc(i64 noundef %31) #25
  %33 = icmp eq i8* %32, null
  br i1 %33, label %51, label %34

34:                                               ; preds = %27
  %35 = and i64 %29, 4294967295
  %36 = icmp eq i64 %35, 0
  br i1 %36, label %39, label %37

37:                                               ; preds = %34
  %38 = getelementptr inbounds i8, i8* %1, i64 %24
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %32, i8* align 1 %38, i64 %35, i1 false) #25, !tbaa !14, !alias.scope !332
  br label %39

39:                                               ; preds = %34, %37
  %40 = getelementptr inbounds i8, i8* %32, i64 %35
  store i8 0, i8* %40, align 1, !tbaa !14
  br label %41

41:                                               ; preds = %41, %39
  %42 = phi i8* [ %32, %39 ], [ %45, %41 ]
  %43 = load i8, i8* %42, align 1, !tbaa !14
  %44 = icmp eq i8 %43, 0
  %45 = getelementptr inbounds i8, i8* %42, i64 1
  br i1 %44, label %46, label %41

46:                                               ; preds = %41
  %47 = ptrtoint i8* %42 to i64
  %48 = ptrtoint i8* %32 to i64
  %49 = sub i64 %47, %48
  %50 = tail call fastcc noundef i32 @_ZL22lodepng_add_text_sizedP11LodePNGInfoPKcS2_m(%struct.LodePNGInfo* noundef %0, i8* noundef nonnull %25, i8* noundef nonnull %32, i64 noundef %49) #25, !range !127
  br label %51

51:                                               ; preds = %3, %46, %17, %22, %27
  %52 = phi i8* [ %25, %46 ], [ null, %17 ], [ null, %22 ], [ %25, %27 ], [ null, %3 ]
  %53 = phi i8* [ %32, %46 ], [ null, %17 ], [ null, %22 ], [ null, %27 ], [ null, %3 ]
  %54 = phi i32 [ %50, %46 ], [ 89, %17 ], [ 83, %22 ], [ 83, %27 ], [ 89, %3 ]
  tail call void @free(i8* noundef %52) #25
  tail call void @free(i8* noundef %53) #25
  ret i32 %54
}

; Function Attrs: uwtable
define internal fastcc noundef i32 @_ZL14readChunk_zTXtP11LodePNGInfoPK22LodePNGDecoderSettingsPKhm(%struct.LodePNGInfo* nocapture noundef %0, %struct.LodePNGDecoderSettings* nocapture noundef readonly %1, i8* noundef %2, i64 noundef %3) unnamed_addr #12 {
  %5 = alloca %struct.ucvector, align 8
  %6 = alloca %struct.LodePNGDecompressSettings, align 8
  %7 = alloca i8*, align 8
  %8 = alloca i64, align 8
  %9 = bitcast %struct.LodePNGDecompressSettings* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %9) #25
  %10 = bitcast %struct.LodePNGDecoderSettings* %1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(40) %9, i8* noundef nonnull align 8 dereferenceable(40) %10, i64 40, i1 false), !tbaa.struct !336
  %11 = bitcast i8** %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %11) #25
  store i8* null, i8** %7, align 8, !tbaa !7
  %12 = bitcast i64* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %12) #25
  store i64 0, i64* %8, align 8, !tbaa !3
  %13 = icmp eq i64 %3, 0
  br i1 %13, label %26, label %14

14:                                               ; preds = %4, %20
  %15 = phi i64 [ %22, %20 ], [ 0, %4 ]
  %16 = getelementptr inbounds i8, i8* %2, i64 %15
  %17 = load i8, i8* %16, align 1, !tbaa !14
  %18 = icmp eq i8 %17, 0
  %19 = trunc i64 %15 to i32
  br i1 %18, label %24, label %20

20:                                               ; preds = %14
  %21 = add i32 %19, 1
  %22 = zext i32 %21 to i64
  %23 = icmp ult i64 %22, %3
  br i1 %23, label %14, label %26

24:                                               ; preds = %14
  %25 = trunc i64 %15 to i32
  br label %26

26:                                               ; preds = %24, %20, %4
  %27 = phi i32 [ 0, %4 ], [ %25, %24 ], [ %21, %20 ]
  %28 = zext i32 %27 to i64
  %29 = add i32 %27, 2
  %30 = zext i32 %29 to i64
  %31 = icmp ult i64 %30, %3
  br i1 %31, label %32, label %91

32:                                               ; preds = %26
  %33 = add i32 %27, -80
  %34 = icmp ult i32 %33, -79
  br i1 %34, label %91, label %35

35:                                               ; preds = %32
  %36 = add nuw nsw i32 %27, 1
  %37 = zext i32 %36 to i64
  %38 = tail call noalias i8* @malloc(i64 noundef %37) #25
  %39 = icmp eq i8* %38, null
  br i1 %39, label %91, label %40

40:                                               ; preds = %35
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %38, i8* align 1 %2, i64 %28, i1 false) #25, !tbaa !14, !alias.scope !337
  %41 = getelementptr inbounds i8, i8* %38, i64 %28
  store i8 0, i8* %41, align 1, !tbaa !14
  %42 = getelementptr inbounds i8, i8* %2, i64 %37
  %43 = load i8, i8* %42, align 1, !tbaa !14
  %44 = icmp eq i8 %43, 0
  br i1 %44, label %45, label %91

45:                                               ; preds = %40
  %46 = icmp ugt i64 %30, %3
  br i1 %46, label %91, label %47

47:                                               ; preds = %45
  %48 = trunc i64 %3 to i32
  %49 = sub i32 %48, %29
  %50 = getelementptr inbounds %struct.LodePNGDecoderSettings, %struct.LodePNGDecoderSettings* %1, i64 0, i32 7
  %51 = load i64, i64* %50, align 8, !tbaa !341
  %52 = getelementptr inbounds %struct.LodePNGDecompressSettings, %struct.LodePNGDecompressSettings* %6, i64 0, i32 2
  store i64 %51, i64* %52, align 8, !tbaa !52
  %53 = getelementptr inbounds i8, i8* %2, i64 %30
  %54 = zext i32 %49 to i64
  %55 = getelementptr inbounds %struct.LodePNGDecompressSettings, %struct.LodePNGDecompressSettings* %6, i64 0, i32 3
  %56 = bitcast {}** %55 to i32 (i8**, i64*, i8*, i64, %struct.LodePNGDecompressSettings*)**
  %57 = load i32 (i8**, i64*, i8*, i64, %struct.LodePNGDecompressSettings*)*, i32 (i8**, i64*, i8*, i64, %struct.LodePNGDecompressSettings*)** %56, align 8, !tbaa !342
  %58 = icmp eq i32 (i8**, i64*, i8*, i64, %struct.LodePNGDecompressSettings*)* %57, null
  br i1 %58, label %73, label %59

59:                                               ; preds = %47
  %60 = call noundef i32 %57(i8** noundef nonnull %7, i64* noundef nonnull %8, i8* noundef %53, i64 noundef %54, %struct.LodePNGDecompressSettings* noundef nonnull %6)
  %61 = icmp eq i32 %60, 0
  br i1 %61, label %62, label %65

62:                                               ; preds = %59
  %63 = load i64, i64* %8, align 8
  %64 = load i8*, i8** %7, align 8, !tbaa !7
  br label %87

65:                                               ; preds = %59
  %66 = load i64, i64* %52, align 8
  %67 = icmp eq i64 %66, 0
  %68 = load i64, i64* %8, align 8
  %69 = icmp ugt i64 %68, %66
  %70 = select i1 %69, i32 109, i32 110
  %71 = select i1 %67, i32 110, i32 %70
  %72 = select i1 %69, i32 112, i32 %71
  br label %91

73:                                               ; preds = %47
  %74 = bitcast %struct.ucvector* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %74) #25
  %75 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %5, i64 0, i32 0
  %76 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %5, i64 0, i32 1
  %77 = bitcast %struct.ucvector* %5 to i8*
  call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(24) %77, i8 0, i64 24, i1 false)
  %78 = call fastcc noundef i32 @_ZL24lodepng_zlib_decompressvP8ucvectorPKhmPK25LodePNGDecompressSettings(%struct.ucvector* noundef nonnull %5, i8* noundef %53, i64 noundef %54, %struct.LodePNGDecompressSettings* noundef nonnull %6)
  %79 = load i8*, i8** %75, align 8, !tbaa !39
  store i8* %79, i8** %7, align 8, !tbaa !7
  %80 = load i64, i64* %76, align 8, !tbaa !44
  store i64 %80, i64* %8, align 8, !tbaa !3
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %74) #25
  %81 = icmp eq i32 %78, 0
  %82 = load i64, i64* %52, align 8
  %83 = icmp ugt i64 %80, %82
  %84 = select i1 %83, i32 112, i32 %78
  %85 = icmp eq i32 %84, 0
  %86 = select i1 %81, i1 true, i1 %85
  br i1 %86, label %87, label %91

87:                                               ; preds = %62, %73
  %88 = phi i8* [ %64, %62 ], [ %79, %73 ]
  %89 = phi i64 [ %63, %62 ], [ %80, %73 ]
  %90 = call fastcc noundef i32 @_ZL22lodepng_add_text_sizedP11LodePNGInfoPKcS2_m(%struct.LodePNGInfo* noundef %0, i8* noundef nonnull %38, i8* noundef %88, i64 noundef %89), !range !127
  br label %91

91:                                               ; preds = %73, %65, %45, %40, %35, %32, %26, %87
  %92 = phi i32 [ %90, %87 ], [ 75, %26 ], [ 89, %32 ], [ 83, %35 ], [ 72, %40 ], [ 75, %45 ], [ %72, %65 ], [ %84, %73 ]
  %93 = phi i8* [ %38, %87 ], [ null, %26 ], [ null, %32 ], [ null, %35 ], [ %38, %40 ], [ %38, %45 ], [ %38, %65 ], [ %38, %73 ]
  call void @free(i8* noundef %93) #25
  %94 = load i8*, i8** %7, align 8, !tbaa !7
  call void @free(i8* noundef %94) #25
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %12) #25
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %11) #25
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %9) #25
  ret i32 %92
}

; Function Attrs: uwtable
define internal fastcc noundef i32 @_ZL14readChunk_iTXtP11LodePNGInfoPK22LodePNGDecoderSettingsPKhm(%struct.LodePNGInfo* nocapture noundef %0, %struct.LodePNGDecoderSettings* nocapture noundef readonly %1, i8* noundef %2, i64 noundef %3) unnamed_addr #12 {
  %5 = alloca %struct.LodePNGDecompressSettings, align 8
  %6 = alloca i8*, align 8
  %7 = alloca i64, align 8
  %8 = bitcast %struct.LodePNGDecompressSettings* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %8) #25
  %9 = bitcast %struct.LodePNGDecoderSettings* %1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(40) %8, i8* noundef nonnull align 8 dereferenceable(40) %9, i64 40, i1 false), !tbaa.struct !336
  %10 = icmp ult i64 %3, 5
  br i1 %10, label %129, label %11

11:                                               ; preds = %4, %17
  %12 = phi i64 [ %19, %17 ], [ 0, %4 ]
  %13 = getelementptr inbounds i8, i8* %2, i64 %12
  %14 = load i8, i8* %13, align 1, !tbaa !14
  %15 = icmp eq i8 %14, 0
  %16 = trunc i64 %12 to i32
  br i1 %15, label %21, label %17

17:                                               ; preds = %11
  %18 = add i32 %16, 1
  %19 = zext i32 %18 to i64
  %20 = icmp ult i64 %19, %3
  br i1 %20, label %11, label %23

21:                                               ; preds = %11
  %22 = trunc i64 %12 to i32
  br label %23

23:                                               ; preds = %17, %21
  %24 = phi i32 [ %22, %21 ], [ %18, %17 ]
  %25 = zext i32 %24 to i64
  %26 = add i32 %24, 3
  %27 = zext i32 %26 to i64
  %28 = icmp ult i64 %27, %3
  br i1 %28, label %29, label %129

29:                                               ; preds = %23
  %30 = add i32 %24, -80
  %31 = icmp ult i32 %30, -79
  br i1 %31, label %129, label %32

32:                                               ; preds = %29
  %33 = add nuw nsw i32 %24, 1
  %34 = zext i32 %33 to i64
  %35 = tail call noalias i8* @malloc(i64 noundef %34) #25
  %36 = icmp eq i8* %35, null
  br i1 %36, label %129, label %37

37:                                               ; preds = %32
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %35, i8* nonnull align 1 %2, i64 %25, i1 false) #25, !tbaa !14, !alias.scope !343
  %38 = getelementptr inbounds i8, i8* %35, i64 %25
  store i8 0, i8* %38, align 1, !tbaa !14
  %39 = getelementptr inbounds i8, i8* %2, i64 %34
  %40 = load i8, i8* %39, align 1, !tbaa !14
  %41 = add nuw nsw i32 %24, 2
  %42 = zext i32 %41 to i64
  %43 = getelementptr inbounds i8, i8* %2, i64 %42
  %44 = load i8, i8* %43, align 1, !tbaa !14
  %45 = icmp eq i8 %44, 0
  br i1 %45, label %46, label %129

46:                                               ; preds = %37, %52
  %47 = phi i64 [ %55, %52 ], [ %27, %37 ]
  %48 = phi i32 [ %53, %52 ], [ 0, %37 ]
  %49 = getelementptr inbounds i8, i8* %2, i64 %47
  %50 = load i8, i8* %49, align 1, !tbaa !14
  %51 = icmp eq i8 %50, 0
  br i1 %51, label %57, label %52

52:                                               ; preds = %46
  %53 = add i32 %48, 1
  %54 = add nuw nsw i64 %47, 1
  %55 = and i64 %54, 4294967295
  %56 = icmp ult i64 %55, %3
  br i1 %56, label %46, label %57

57:                                               ; preds = %46, %52
  %58 = phi i32 [ %48, %46 ], [ %53, %52 ]
  %59 = add i32 %58, 1
  %60 = zext i32 %59 to i64
  %61 = tail call noalias i8* @malloc(i64 noundef %60) #25
  %62 = icmp eq i8* %61, null
  br i1 %62, label %129, label %63

63:                                               ; preds = %57
  %64 = zext i32 %58 to i64
  %65 = icmp eq i32 %58, 0
  br i1 %65, label %68, label %66

66:                                               ; preds = %63
  %67 = getelementptr inbounds i8, i8* %2, i64 %27
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %61, i8* align 1 %67, i64 %64, i1 false) #25, !tbaa !14, !alias.scope !347
  br label %68

68:                                               ; preds = %63, %66
  %69 = getelementptr inbounds i8, i8* %61, i64 %64
  store i8 0, i8* %69, align 1, !tbaa !14
  %70 = add i32 %59, %26
  %71 = zext i32 %70 to i64
  %72 = icmp ult i64 %71, %3
  br i1 %72, label %73, label %84

73:                                               ; preds = %68, %79
  %74 = phi i64 [ %82, %79 ], [ %71, %68 ]
  %75 = phi i32 [ %80, %79 ], [ 0, %68 ]
  %76 = getelementptr inbounds i8, i8* %2, i64 %74
  %77 = load i8, i8* %76, align 1, !tbaa !14
  %78 = icmp eq i8 %77, 0
  br i1 %78, label %84, label %79

79:                                               ; preds = %73
  %80 = add i32 %75, 1
  %81 = add nuw nsw i64 %74, 1
  %82 = and i64 %81, 4294967295
  %83 = icmp ult i64 %82, %3
  br i1 %83, label %73, label %84

84:                                               ; preds = %73, %79, %68
  %85 = phi i32 [ 0, %68 ], [ %80, %79 ], [ %75, %73 ]
  %86 = add i32 %85, 1
  %87 = zext i32 %86 to i64
  %88 = tail call noalias i8* @malloc(i64 noundef %87) #25
  %89 = icmp eq i8* %88, null
  br i1 %89, label %129, label %90

90:                                               ; preds = %84
  %91 = zext i32 %85 to i64
  %92 = icmp eq i32 %85, 0
  br i1 %92, label %95, label %93

93:                                               ; preds = %90
  %94 = getelementptr inbounds i8, i8* %2, i64 %71
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %88, i8* align 1 %94, i64 %91, i1 false) #25, !tbaa !14, !alias.scope !351
  br label %95

95:                                               ; preds = %90, %93
  %96 = getelementptr inbounds i8, i8* %88, i64 %91
  store i8 0, i8* %96, align 1, !tbaa !14
  %97 = add i32 %86, %70
  %98 = trunc i64 %3 to i32
  %99 = tail call i32 @llvm.usub.sat.i32(i32 %98, i32 %97)
  %100 = icmp eq i8 %40, 0
  br i1 %100, label %124, label %101

101:                                              ; preds = %95
  %102 = bitcast i8** %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %102) #25
  store i8* null, i8** %6, align 8, !tbaa !7
  %103 = bitcast i64* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %103) #25
  store i64 0, i64* %7, align 8, !tbaa !3
  %104 = getelementptr inbounds %struct.LodePNGDecoderSettings, %struct.LodePNGDecoderSettings* %1, i64 0, i32 7
  %105 = load i64, i64* %104, align 8, !tbaa !341
  %106 = getelementptr inbounds %struct.LodePNGDecompressSettings, %struct.LodePNGDecompressSettings* %5, i64 0, i32 2
  store i64 %105, i64* %106, align 8, !tbaa !52
  %107 = zext i32 %97 to i64
  %108 = getelementptr inbounds i8, i8* %2, i64 %107
  %109 = zext i32 %99 to i64
  %110 = call fastcc noundef i32 @_ZL15zlib_decompressPPhPmmPKhmPK25LodePNGDecompressSettings(i8** noundef nonnull %6, i64* noundef nonnull %7, i64 noundef 0, i8* noundef %108, i64 noundef %109, %struct.LodePNGDecompressSettings* noundef nonnull %5)
  %111 = icmp eq i32 %110, 0
  %112 = load i64, i64* %7, align 8
  %113 = load i64, i64* %106, align 8
  %114 = icmp ugt i64 %112, %113
  %115 = select i1 %114, i32 112, i32 %110
  %116 = select i1 %111, i32 0, i32 %115
  %117 = icmp eq i32 %116, 0
  br i1 %117, label %118, label %121

118:                                              ; preds = %101
  %119 = load i8*, i8** %6, align 8, !tbaa !7
  %120 = call fastcc noundef i32 @_ZL23lodepng_add_itext_sizedP11LodePNGInfoPKcS2_S2_S2_m(%struct.LodePNGInfo* noundef %0, i8* noundef nonnull %35, i8* noundef nonnull %61, i8* noundef nonnull %88, i8* noundef %119, i64 noundef %112), !range !127
  br label %121

121:                                              ; preds = %118, %101
  %122 = phi i32 [ %116, %101 ], [ %120, %118 ]
  %123 = load i8*, i8** %6, align 8, !tbaa !7
  call void @free(i8* noundef %123) #25
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %103) #25
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %102) #25
  br label %129

124:                                              ; preds = %95
  %125 = zext i32 %97 to i64
  %126 = getelementptr inbounds i8, i8* %2, i64 %125
  %127 = zext i32 %99 to i64
  %128 = tail call fastcc noundef i32 @_ZL23lodepng_add_itext_sizedP11LodePNGInfoPKcS2_S2_S2_m(%struct.LodePNGInfo* noundef %0, i8* noundef nonnull %35, i8* noundef nonnull %61, i8* noundef nonnull %88, i8* noundef %126, i64 noundef %127), !range !127
  br label %129

129:                                              ; preds = %84, %57, %37, %32, %29, %23, %4, %121, %124
  %130 = phi i32 [ %122, %121 ], [ %128, %124 ], [ 30, %4 ], [ 75, %23 ], [ 89, %29 ], [ 83, %32 ], [ 72, %37 ], [ 83, %57 ], [ 83, %84 ]
  %131 = phi i8* [ %35, %121 ], [ %35, %124 ], [ null, %4 ], [ null, %23 ], [ null, %29 ], [ null, %32 ], [ %35, %37 ], [ %35, %57 ], [ %35, %84 ]
  %132 = phi i8* [ %61, %121 ], [ %61, %124 ], [ null, %4 ], [ null, %23 ], [ null, %29 ], [ null, %32 ], [ null, %37 ], [ null, %57 ], [ %61, %84 ]
  %133 = phi i8* [ %88, %121 ], [ %88, %124 ], [ null, %4 ], [ null, %23 ], [ null, %29 ], [ null, %32 ], [ null, %37 ], [ null, %57 ], [ null, %84 ]
  call void @free(i8* noundef %131) #25
  call void @free(i8* noundef %132) #25
  call void @free(i8* noundef %133) #25
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %8) #25
  ret i32 %130
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind uwtable willreturn
define internal fastcc noundef i32 @_ZL14readChunk_tIMEP11LodePNGInfoPKhm(%struct.LodePNGInfo* nocapture noundef writeonly %0, i8* nocapture noundef readonly %1, i64 noundef %2) unnamed_addr #21 {
  %4 = icmp eq i64 %2, 7
  br i1 %4, label %5, label %35

5:                                                ; preds = %3
  %6 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %0, i64 0, i32 16
  store i32 1, i32* %6, align 8, !tbaa !355
  %7 = load i8, i8* %1, align 1, !tbaa !14
  %8 = zext i8 %7 to i32
  %9 = shl nuw nsw i32 %8, 8
  %10 = getelementptr inbounds i8, i8* %1, i64 1
  %11 = load i8, i8* %10, align 1, !tbaa !14
  %12 = zext i8 %11 to i32
  %13 = or i32 %9, %12
  %14 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %0, i64 0, i32 17, i32 0
  store i32 %13, i32* %14, align 4, !tbaa !356
  %15 = getelementptr inbounds i8, i8* %1, i64 2
  %16 = load i8, i8* %15, align 1, !tbaa !14
  %17 = zext i8 %16 to i32
  %18 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %0, i64 0, i32 17, i32 1
  store i32 %17, i32* %18, align 4, !tbaa !357
  %19 = getelementptr inbounds i8, i8* %1, i64 3
  %20 = load i8, i8* %19, align 1, !tbaa !14
  %21 = zext i8 %20 to i32
  %22 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %0, i64 0, i32 17, i32 2
  store i32 %21, i32* %22, align 4, !tbaa !358
  %23 = getelementptr inbounds i8, i8* %1, i64 4
  %24 = load i8, i8* %23, align 1, !tbaa !14
  %25 = zext i8 %24 to i32
  %26 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %0, i64 0, i32 17, i32 3
  store i32 %25, i32* %26, align 4, !tbaa !359
  %27 = getelementptr inbounds i8, i8* %1, i64 5
  %28 = load i8, i8* %27, align 1, !tbaa !14
  %29 = zext i8 %28 to i32
  %30 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %0, i64 0, i32 17, i32 4
  store i32 %29, i32* %30, align 4, !tbaa !360
  %31 = getelementptr inbounds i8, i8* %1, i64 6
  %32 = load i8, i8* %31, align 1, !tbaa !14
  %33 = zext i8 %32 to i32
  %34 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %0, i64 0, i32 17, i32 5
  store i32 %33, i32* %34, align 4, !tbaa !361
  br label %35

35:                                               ; preds = %3, %5
  %36 = phi i32 [ 0, %5 ], [ 73, %3 ]
  ret i32 %36
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind uwtable willreturn
define internal fastcc noundef i32 @_ZL14readChunk_pHYsP11LodePNGInfoPKhm(%struct.LodePNGInfo* nocapture noundef writeonly %0, i8* nocapture noundef readonly %1, i64 noundef %2) unnamed_addr #21 {
  %4 = icmp eq i64 %2, 9
  br i1 %4, label %5, label %48

5:                                                ; preds = %3
  %6 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %0, i64 0, i32 18
  store i32 1, i32* %6, align 4, !tbaa !211
  %7 = load i8, i8* %1, align 1, !tbaa !14
  %8 = zext i8 %7 to i32
  %9 = shl nuw i32 %8, 24
  %10 = getelementptr inbounds i8, i8* %1, i64 1
  %11 = load i8, i8* %10, align 1, !tbaa !14
  %12 = zext i8 %11 to i32
  %13 = shl nuw nsw i32 %12, 16
  %14 = or i32 %13, %9
  %15 = getelementptr inbounds i8, i8* %1, i64 2
  %16 = load i8, i8* %15, align 1, !tbaa !14
  %17 = zext i8 %16 to i32
  %18 = shl nuw nsw i32 %17, 8
  %19 = or i32 %14, %18
  %20 = getelementptr inbounds i8, i8* %1, i64 3
  %21 = load i8, i8* %20, align 1, !tbaa !14
  %22 = zext i8 %21 to i32
  %23 = or i32 %19, %22
  %24 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %0, i64 0, i32 19
  store i32 %23, i32* %24, align 8, !tbaa !362
  %25 = getelementptr inbounds i8, i8* %1, i64 4
  %26 = load i8, i8* %25, align 1, !tbaa !14
  %27 = zext i8 %26 to i32
  %28 = shl nuw i32 %27, 24
  %29 = getelementptr inbounds i8, i8* %1, i64 5
  %30 = load i8, i8* %29, align 1, !tbaa !14
  %31 = zext i8 %30 to i32
  %32 = shl nuw nsw i32 %31, 16
  %33 = or i32 %32, %28
  %34 = getelementptr inbounds i8, i8* %1, i64 6
  %35 = load i8, i8* %34, align 1, !tbaa !14
  %36 = zext i8 %35 to i32
  %37 = shl nuw nsw i32 %36, 8
  %38 = or i32 %33, %37
  %39 = getelementptr inbounds i8, i8* %1, i64 7
  %40 = load i8, i8* %39, align 1, !tbaa !14
  %41 = zext i8 %40 to i32
  %42 = or i32 %38, %41
  %43 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %0, i64 0, i32 20
  store i32 %42, i32* %43, align 4, !tbaa !363
  %44 = getelementptr inbounds i8, i8* %1, i64 8
  %45 = load i8, i8* %44, align 1, !tbaa !14
  %46 = zext i8 %45 to i32
  %47 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %0, i64 0, i32 21
  store i32 %46, i32* %47, align 8, !tbaa !364
  br label %48

48:                                               ; preds = %3, %5
  %49 = phi i32 [ 0, %5 ], [ 74, %3 ]
  ret i32 %49
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind uwtable willreturn
define internal fastcc noundef i32 @_ZL14readChunk_cHRMP11LodePNGInfoPKhm(%struct.LodePNGInfo* nocapture noundef writeonly %0, i8* noundef readonly %1, i64 noundef %2) unnamed_addr #21 {
  %4 = icmp eq i64 %2, 32
  br i1 %4, label %5, label %158

5:                                                ; preds = %3
  %6 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %0, i64 0, i32 24
  store i32 1, i32* %6, align 4, !tbaa !213
  %7 = load i8, i8* %1, align 1, !tbaa !14
  %8 = zext i8 %7 to i32
  %9 = shl nuw i32 %8, 24
  %10 = getelementptr inbounds i8, i8* %1, i64 1
  %11 = load i8, i8* %10, align 1, !tbaa !14
  %12 = zext i8 %11 to i32
  %13 = shl nuw nsw i32 %12, 16
  %14 = or i32 %13, %9
  %15 = getelementptr inbounds i8, i8* %1, i64 2
  %16 = load i8, i8* %15, align 1, !tbaa !14
  %17 = zext i8 %16 to i32
  %18 = shl nuw nsw i32 %17, 8
  %19 = or i32 %14, %18
  %20 = getelementptr inbounds i8, i8* %1, i64 3
  %21 = load i8, i8* %20, align 1, !tbaa !14
  %22 = zext i8 %21 to i32
  %23 = or i32 %19, %22
  %24 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %0, i64 0, i32 25
  store i32 %23, i32* %24, align 8, !tbaa !365
  %25 = getelementptr inbounds i8, i8* %1, i64 4
  %26 = load i8, i8* %25, align 1, !tbaa !14
  %27 = zext i8 %26 to i32
  %28 = shl nuw i32 %27, 24
  %29 = getelementptr inbounds i8, i8* %1, i64 5
  %30 = load i8, i8* %29, align 1, !tbaa !14
  %31 = zext i8 %30 to i32
  %32 = shl nuw nsw i32 %31, 16
  %33 = or i32 %32, %28
  %34 = getelementptr inbounds i8, i8* %1, i64 6
  %35 = load i8, i8* %34, align 1, !tbaa !14
  %36 = zext i8 %35 to i32
  %37 = shl nuw nsw i32 %36, 8
  %38 = or i32 %33, %37
  %39 = getelementptr inbounds i8, i8* %1, i64 7
  %40 = load i8, i8* %39, align 1, !tbaa !14
  %41 = zext i8 %40 to i32
  %42 = or i32 %38, %41
  %43 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %0, i64 0, i32 26
  store i32 %42, i32* %43, align 4, !tbaa !366
  %44 = getelementptr inbounds i8, i8* %1, i64 8
  %45 = load i8, i8* %44, align 1, !tbaa !14
  %46 = zext i8 %45 to i32
  %47 = shl nuw i32 %46, 24
  %48 = getelementptr inbounds i8, i8* %1, i64 9
  %49 = load i8, i8* %48, align 1, !tbaa !14
  %50 = zext i8 %49 to i32
  %51 = shl nuw nsw i32 %50, 16
  %52 = or i32 %51, %47
  %53 = getelementptr inbounds i8, i8* %1, i64 10
  %54 = load i8, i8* %53, align 1, !tbaa !14
  %55 = zext i8 %54 to i32
  %56 = shl nuw nsw i32 %55, 8
  %57 = or i32 %52, %56
  %58 = getelementptr inbounds i8, i8* %1, i64 11
  %59 = load i8, i8* %58, align 1, !tbaa !14
  %60 = zext i8 %59 to i32
  %61 = or i32 %57, %60
  %62 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %0, i64 0, i32 27
  store i32 %61, i32* %62, align 8, !tbaa !367
  %63 = getelementptr inbounds i8, i8* %1, i64 12
  %64 = load i8, i8* %63, align 1, !tbaa !14
  %65 = zext i8 %64 to i32
  %66 = shl nuw i32 %65, 24
  %67 = getelementptr inbounds i8, i8* %1, i64 13
  %68 = load i8, i8* %67, align 1, !tbaa !14
  %69 = zext i8 %68 to i32
  %70 = shl nuw nsw i32 %69, 16
  %71 = or i32 %70, %66
  %72 = getelementptr inbounds i8, i8* %1, i64 14
  %73 = load i8, i8* %72, align 1, !tbaa !14
  %74 = zext i8 %73 to i32
  %75 = shl nuw nsw i32 %74, 8
  %76 = or i32 %71, %75
  %77 = getelementptr inbounds i8, i8* %1, i64 15
  %78 = load i8, i8* %77, align 1, !tbaa !14
  %79 = zext i8 %78 to i32
  %80 = or i32 %76, %79
  %81 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %0, i64 0, i32 28
  store i32 %80, i32* %81, align 4, !tbaa !368
  %82 = getelementptr inbounds i8, i8* %1, i64 16
  %83 = load i8, i8* %82, align 1, !tbaa !14
  %84 = zext i8 %83 to i32
  %85 = shl nuw i32 %84, 24
  %86 = getelementptr inbounds i8, i8* %1, i64 17
  %87 = load i8, i8* %86, align 1, !tbaa !14
  %88 = zext i8 %87 to i32
  %89 = shl nuw nsw i32 %88, 16
  %90 = or i32 %89, %85
  %91 = getelementptr inbounds i8, i8* %1, i64 18
  %92 = load i8, i8* %91, align 1, !tbaa !14
  %93 = zext i8 %92 to i32
  %94 = shl nuw nsw i32 %93, 8
  %95 = or i32 %90, %94
  %96 = getelementptr inbounds i8, i8* %1, i64 19
  %97 = load i8, i8* %96, align 1, !tbaa !14
  %98 = zext i8 %97 to i32
  %99 = or i32 %95, %98
  %100 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %0, i64 0, i32 29
  store i32 %99, i32* %100, align 8, !tbaa !369
  %101 = getelementptr inbounds i8, i8* %1, i64 20
  %102 = load i8, i8* %101, align 1, !tbaa !14
  %103 = zext i8 %102 to i32
  %104 = shl nuw i32 %103, 24
  %105 = getelementptr inbounds i8, i8* %1, i64 21
  %106 = load i8, i8* %105, align 1, !tbaa !14
  %107 = zext i8 %106 to i32
  %108 = shl nuw nsw i32 %107, 16
  %109 = or i32 %108, %104
  %110 = getelementptr inbounds i8, i8* %1, i64 22
  %111 = load i8, i8* %110, align 1, !tbaa !14
  %112 = zext i8 %111 to i32
  %113 = shl nuw nsw i32 %112, 8
  %114 = or i32 %109, %113
  %115 = getelementptr inbounds i8, i8* %1, i64 23
  %116 = load i8, i8* %115, align 1, !tbaa !14
  %117 = zext i8 %116 to i32
  %118 = or i32 %114, %117
  %119 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %0, i64 0, i32 30
  store i32 %118, i32* %119, align 4, !tbaa !370
  %120 = getelementptr inbounds i8, i8* %1, i64 24
  %121 = load i8, i8* %120, align 1, !tbaa !14
  %122 = zext i8 %121 to i32
  %123 = shl nuw i32 %122, 24
  %124 = getelementptr inbounds i8, i8* %1, i64 25
  %125 = load i8, i8* %124, align 1, !tbaa !14
  %126 = zext i8 %125 to i32
  %127 = shl nuw nsw i32 %126, 16
  %128 = or i32 %127, %123
  %129 = getelementptr inbounds i8, i8* %1, i64 26
  %130 = load i8, i8* %129, align 1, !tbaa !14
  %131 = zext i8 %130 to i32
  %132 = shl nuw nsw i32 %131, 8
  %133 = or i32 %128, %132
  %134 = getelementptr inbounds i8, i8* %1, i64 27
  %135 = load i8, i8* %134, align 1, !tbaa !14
  %136 = zext i8 %135 to i32
  %137 = or i32 %133, %136
  %138 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %0, i64 0, i32 31
  store i32 %137, i32* %138, align 8, !tbaa !371
  %139 = getelementptr inbounds i8, i8* %1, i64 28
  %140 = load i8, i8* %139, align 1, !tbaa !14
  %141 = zext i8 %140 to i32
  %142 = shl nuw i32 %141, 24
  %143 = getelementptr inbounds i8, i8* %1, i64 29
  %144 = load i8, i8* %143, align 1, !tbaa !14
  %145 = zext i8 %144 to i32
  %146 = shl nuw nsw i32 %145, 16
  %147 = or i32 %146, %142
  %148 = getelementptr inbounds i8, i8* %1, i64 30
  %149 = load i8, i8* %148, align 1, !tbaa !14
  %150 = zext i8 %149 to i32
  %151 = shl nuw nsw i32 %150, 8
  %152 = or i32 %147, %151
  %153 = getelementptr inbounds i8, i8* %1, i64 31
  %154 = load i8, i8* %153, align 1, !tbaa !14
  %155 = zext i8 %154 to i32
  %156 = or i32 %152, %155
  %157 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %0, i64 0, i32 32
  store i32 %156, i32* %157, align 4, !tbaa !372
  br label %158

158:                                              ; preds = %3, %5
  %159 = phi i32 [ 0, %5 ], [ 97, %3 ]
  ret i32 %159
}

; Function Attrs: uwtable
define internal fastcc noundef i32 @_ZL14readChunk_iCCPP11LodePNGInfoPK22LodePNGDecoderSettingsPKhm(%struct.LodePNGInfo* noundef %0, %struct.LodePNGDecoderSettings* nocapture noundef readonly %1, i8* noundef %2, i64 noundef %3) unnamed_addr #12 {
  %5 = alloca %struct.ucvector, align 8
  %6 = alloca i64, align 8
  %7 = alloca %struct.LodePNGDecompressSettings, align 8
  %8 = bitcast i64* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %8) #25
  store i64 0, i64* %6, align 8, !tbaa !3
  %9 = bitcast %struct.LodePNGDecompressSettings* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %9) #25
  %10 = bitcast %struct.LodePNGDecoderSettings* %1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(40) %9, i8* noundef nonnull align 8 dereferenceable(40) %10, i64 40, i1 false), !tbaa.struct !336
  %11 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %0, i64 0, i32 35
  store i32 1, i32* %11, align 8, !tbaa !199
  %12 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %0, i64 0, i32 36
  %13 = load i8*, i8** %12, align 8, !tbaa !196
  %14 = icmp eq i8* %13, null
  br i1 %14, label %19, label %15

15:                                               ; preds = %4
  tail call void @free(i8* noundef nonnull %13) #25
  store i8* null, i8** %12, align 8, !tbaa !7
  %16 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %0, i64 0, i32 37
  %17 = load i8*, i8** %16, align 8, !tbaa !197
  tail call void @free(i8* noundef %17) #25
  store i8* null, i8** %16, align 8, !tbaa !197
  %18 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %0, i64 0, i32 38
  store i32 0, i32* %18, align 8, !tbaa !198
  store i32 0, i32* %11, align 8, !tbaa !199
  br label %19

19:                                               ; preds = %15, %4
  %20 = icmp eq i64 %3, 0
  br i1 %20, label %33, label %21

21:                                               ; preds = %19, %27
  %22 = phi i64 [ %29, %27 ], [ 0, %19 ]
  %23 = getelementptr inbounds i8, i8* %2, i64 %22
  %24 = load i8, i8* %23, align 1, !tbaa !14
  %25 = icmp eq i8 %24, 0
  %26 = trunc i64 %22 to i32
  br i1 %25, label %31, label %27

27:                                               ; preds = %21
  %28 = add i32 %26, 1
  %29 = zext i32 %28 to i64
  %30 = icmp ult i64 %29, %3
  br i1 %30, label %21, label %33

31:                                               ; preds = %21
  %32 = trunc i64 %22 to i32
  br label %33

33:                                               ; preds = %31, %27, %19
  %34 = phi i32 [ 0, %19 ], [ %32, %31 ], [ %28, %27 ]
  %35 = zext i32 %34 to i64
  %36 = add i32 %34, 2
  %37 = zext i32 %36 to i64
  %38 = icmp ult i64 %37, %3
  br i1 %38, label %39, label %153

39:                                               ; preds = %33
  %40 = add i32 %34, -80
  %41 = icmp ult i32 %40, -79
  br i1 %41, label %153, label %42

42:                                               ; preds = %39
  %43 = add nuw nsw i32 %34, 1
  %44 = zext i32 %43 to i64
  %45 = tail call noalias i8* @malloc(i64 noundef %44) #25
  store i8* %45, i8** %12, align 8, !tbaa !196
  %46 = icmp eq i8* %45, null
  br i1 %46, label %153, label %47

47:                                               ; preds = %42
  %48 = getelementptr inbounds i8, i8* %45, i64 %35
  store i8 0, i8* %48, align 1, !tbaa !14
  %49 = load i8, i8* %2, align 1, !tbaa !14
  store i8 %49, i8* %45, align 1, !tbaa !14
  %50 = icmp eq i32 %34, 1
  br i1 %50, label %96, label %51

51:                                               ; preds = %47
  %52 = add nsw i64 %35, -1
  %53 = add nsw i64 %35, -2
  %54 = and i64 %52, 3
  %55 = icmp ult i64 %53, 3
  br i1 %55, label %83, label %56

56:                                               ; preds = %51
  %57 = and i64 %52, -4
  br label %58

58:                                               ; preds = %58, %56
  %59 = phi i64 [ 1, %56 ], [ %80, %58 ]
  %60 = phi i64 [ 0, %56 ], [ %81, %58 ]
  %61 = load i8*, i8** %12, align 8, !tbaa !196
  %62 = getelementptr inbounds i8, i8* %2, i64 %59
  %63 = load i8, i8* %62, align 1, !tbaa !14
  %64 = getelementptr inbounds i8, i8* %61, i64 %59
  store i8 %63, i8* %64, align 1, !tbaa !14
  %65 = add nuw nsw i64 %59, 1
  %66 = load i8*, i8** %12, align 8, !tbaa !196
  %67 = getelementptr inbounds i8, i8* %2, i64 %65
  %68 = load i8, i8* %67, align 1, !tbaa !14
  %69 = getelementptr inbounds i8, i8* %66, i64 %65
  store i8 %68, i8* %69, align 1, !tbaa !14
  %70 = add nuw nsw i64 %59, 2
  %71 = load i8*, i8** %12, align 8, !tbaa !196
  %72 = getelementptr inbounds i8, i8* %2, i64 %70
  %73 = load i8, i8* %72, align 1, !tbaa !14
  %74 = getelementptr inbounds i8, i8* %71, i64 %70
  store i8 %73, i8* %74, align 1, !tbaa !14
  %75 = add nuw nsw i64 %59, 3
  %76 = load i8*, i8** %12, align 8, !tbaa !196
  %77 = getelementptr inbounds i8, i8* %2, i64 %75
  %78 = load i8, i8* %77, align 1, !tbaa !14
  %79 = getelementptr inbounds i8, i8* %76, i64 %75
  store i8 %78, i8* %79, align 1, !tbaa !14
  %80 = add nuw nsw i64 %59, 4
  %81 = add i64 %60, 4
  %82 = icmp eq i64 %81, %57
  br i1 %82, label %83, label %58

83:                                               ; preds = %58, %51
  %84 = phi i64 [ 1, %51 ], [ %80, %58 ]
  %85 = icmp eq i64 %54, 0
  br i1 %85, label %96, label %86

86:                                               ; preds = %83, %86
  %87 = phi i64 [ %93, %86 ], [ %84, %83 ]
  %88 = phi i64 [ %94, %86 ], [ 0, %83 ]
  %89 = load i8*, i8** %12, align 8, !tbaa !196
  %90 = getelementptr inbounds i8, i8* %2, i64 %87
  %91 = load i8, i8* %90, align 1, !tbaa !14
  %92 = getelementptr inbounds i8, i8* %89, i64 %87
  store i8 %91, i8* %92, align 1, !tbaa !14
  %93 = add nuw nsw i64 %87, 1
  %94 = add i64 %88, 1
  %95 = icmp eq i64 %94, %54
  br i1 %95, label %96, label %86, !llvm.loop !373

96:                                               ; preds = %83, %86, %47
  %97 = getelementptr inbounds i8, i8* %2, i64 %44
  %98 = load i8, i8* %97, align 1, !tbaa !14
  %99 = icmp eq i8 %98, 0
  br i1 %99, label %100, label %153

100:                                              ; preds = %96
  %101 = icmp ugt i64 %37, %3
  br i1 %101, label %153, label %102

102:                                              ; preds = %100
  %103 = trunc i64 %3 to i32
  %104 = sub i32 %103, %36
  %105 = getelementptr inbounds %struct.LodePNGDecoderSettings, %struct.LodePNGDecoderSettings* %1, i64 0, i32 8
  %106 = load i64, i64* %105, align 8, !tbaa !374
  %107 = getelementptr inbounds %struct.LodePNGDecompressSettings, %struct.LodePNGDecompressSettings* %7, i64 0, i32 2
  store i64 %106, i64* %107, align 8, !tbaa !52
  %108 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %0, i64 0, i32 37
  %109 = getelementptr inbounds i8, i8* %2, i64 %37
  %110 = zext i32 %104 to i64
  %111 = getelementptr inbounds %struct.LodePNGDecompressSettings, %struct.LodePNGDecompressSettings* %7, i64 0, i32 3
  %112 = bitcast {}** %111 to i32 (i8**, i64*, i8*, i64, %struct.LodePNGDecompressSettings*)**
  %113 = load i32 (i8**, i64*, i8*, i64, %struct.LodePNGDecompressSettings*)*, i32 (i8**, i64*, i8*, i64, %struct.LodePNGDecompressSettings*)** %112, align 8, !tbaa !342
  %114 = icmp eq i32 (i8**, i64*, i8*, i64, %struct.LodePNGDecompressSettings*)* %113, null
  br i1 %114, label %130, label %115

115:                                              ; preds = %102
  %116 = call noundef i32 %113(i8** noundef nonnull %108, i64* noundef nonnull %6, i8* noundef nonnull %109, i64 noundef %110, %struct.LodePNGDecompressSettings* noundef nonnull %7)
  %117 = icmp eq i32 %116, 0
  br i1 %117, label %118, label %120

118:                                              ; preds = %115
  %119 = load i64, i64* %6, align 8
  br label %141

120:                                              ; preds = %115
  %121 = load i64, i64* %107, align 8
  %122 = icmp eq i64 %121, 0
  %123 = load i64, i64* %6, align 8
  %124 = icmp ugt i64 %123, %121
  %125 = select i1 %124, i32 109, i32 110
  %126 = select i1 %122, i32 110, i32 %125
  %127 = select i1 %124, i32 113, i32 %126
  %128 = trunc i64 %123 to i32
  %129 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %0, i64 0, i32 38
  store i32 %128, i32* %129, align 8, !tbaa !198
  br label %153

130:                                              ; preds = %102
  %131 = bitcast %struct.ucvector* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %131) #25
  %132 = load i8*, i8** %108, align 8, !tbaa !7
  %133 = load i64, i64* %6, align 8, !tbaa !3
  %134 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %5, i64 0, i32 0
  store i8* %132, i8** %134, align 8, !tbaa !39, !alias.scope !375
  %135 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %5, i64 0, i32 1
  store i64 %133, i64* %135, align 8, !tbaa !44, !alias.scope !375
  %136 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %5, i64 0, i32 2
  store i64 %133, i64* %136, align 8, !tbaa !45, !alias.scope !375
  %137 = call fastcc noundef i32 @_ZL24lodepng_zlib_decompressvP8ucvectorPKhmPK25LodePNGDecompressSettings(%struct.ucvector* noundef nonnull %5, i8* noundef nonnull %109, i64 noundef %110, %struct.LodePNGDecompressSettings* noundef nonnull %7)
  %138 = load i8*, i8** %134, align 8, !tbaa !39
  store i8* %138, i8** %108, align 8, !tbaa !7
  %139 = load i64, i64* %135, align 8, !tbaa !44
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %131) #25
  %140 = icmp eq i32 %137, 0
  br i1 %140, label %141, label %147

141:                                              ; preds = %130, %118
  %142 = phi i64 [ %119, %118 ], [ %139, %130 ]
  %143 = trunc i64 %142 to i32
  %144 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %0, i64 0, i32 38
  store i32 %143, i32* %144, align 8, !tbaa !198
  %145 = icmp eq i32 %143, 0
  %146 = select i1 %145, i32 100, i32 0
  br label %153

147:                                              ; preds = %130
  %148 = load i64, i64* %107, align 8
  %149 = icmp ugt i64 %139, %148
  %150 = select i1 %149, i32 113, i32 %137
  %151 = trunc i64 %139 to i32
  %152 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %0, i64 0, i32 38
  store i32 %151, i32* %152, align 8, !tbaa !198
  br label %153

153:                                              ; preds = %147, %120, %141, %100, %96, %42, %39, %33
  %154 = phi i32 [ 75, %33 ], [ 89, %39 ], [ 83, %42 ], [ 72, %96 ], [ 75, %100 ], [ %150, %147 ], [ %146, %141 ], [ %127, %120 ]
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %9) #25
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %8) #25
  ret i32 %154
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind uwtable willreturn
define internal fastcc noundef i32 @_ZL14readChunk_sBITP11LodePNGInfoPKhm(%struct.LodePNGInfo* nocapture noundef %0, i8* nocapture noundef readonly %1, i64 noundef %2) unnamed_addr #21 {
  %4 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %0, i64 0, i32 3, i32 0
  %5 = load i32, i32* %4, align 8, !tbaa !311
  %6 = icmp eq i32 %5, 3
  br i1 %6, label %25, label %7

7:                                                ; preds = %3
  %8 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %0, i64 0, i32 3, i32 1
  %9 = load i32, i32* %8, align 4, !tbaa !310
  switch i32 %5, label %127 [
    i32 0, label %10
    i32 2, label %25
    i32 6, label %84
    i32 4, label %59
  ]

10:                                               ; preds = %7
  %11 = icmp eq i64 %2, 1
  br i1 %11, label %12, label %127

12:                                               ; preds = %10
  %13 = load i8, i8* %1, align 1, !tbaa !14
  %14 = icmp eq i8 %13, 0
  %15 = zext i8 %13 to i32
  %16 = icmp ult i32 %9, %15
  %17 = select i1 %14, i1 true, i1 %16
  br i1 %17, label %127, label %18

18:                                               ; preds = %12
  %19 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %0, i64 0, i32 39
  store i32 1, i32* %19, align 4, !tbaa !378
  %20 = load i8, i8* %1, align 1, !tbaa !14
  %21 = zext i8 %20 to i32
  %22 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %0, i64 0, i32 42
  store i32 %21, i32* %22, align 8, !tbaa !379
  %23 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %0, i64 0, i32 41
  store i32 %21, i32* %23, align 4, !tbaa !380
  %24 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %0, i64 0, i32 40
  store i32 %21, i32* %24, align 8, !tbaa !381
  br label %127

25:                                               ; preds = %3, %7
  %26 = phi i32 [ %9, %7 ], [ 8, %3 ]
  %27 = icmp eq i64 %2, 3
  br i1 %27, label %28, label %127

28:                                               ; preds = %25
  %29 = load i8, i8* %1, align 1, !tbaa !14
  %30 = zext i8 %29 to i32
  %31 = icmp eq i8 %29, 0
  br i1 %31, label %127, label %32

32:                                               ; preds = %28
  %33 = getelementptr inbounds i8, i8* %1, i64 1
  %34 = load i8, i8* %33, align 1, !tbaa !14
  %35 = zext i8 %34 to i32
  %36 = icmp eq i8 %34, 0
  br i1 %36, label %127, label %37

37:                                               ; preds = %32
  %38 = getelementptr inbounds i8, i8* %1, i64 2
  %39 = load i8, i8* %38, align 1, !tbaa !14
  %40 = icmp eq i8 %39, 0
  br i1 %40, label %127, label %41

41:                                               ; preds = %37
  %42 = zext i8 %39 to i32
  %43 = icmp ult i32 %26, %30
  %44 = icmp ult i32 %26, %35
  %45 = select i1 %43, i1 true, i1 %44
  %46 = icmp ult i32 %26, %42
  %47 = select i1 %45, i1 true, i1 %46
  br i1 %47, label %127, label %48

48:                                               ; preds = %41
  %49 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %0, i64 0, i32 39
  store i32 1, i32* %49, align 4, !tbaa !378
  %50 = load i8, i8* %1, align 1, !tbaa !14
  %51 = zext i8 %50 to i32
  %52 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %0, i64 0, i32 40
  store i32 %51, i32* %52, align 8, !tbaa !381
  %53 = load i8, i8* %33, align 1, !tbaa !14
  %54 = zext i8 %53 to i32
  %55 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %0, i64 0, i32 41
  store i32 %54, i32* %55, align 4, !tbaa !380
  %56 = load i8, i8* %38, align 1, !tbaa !14
  %57 = zext i8 %56 to i32
  %58 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %0, i64 0, i32 42
  store i32 %57, i32* %58, align 8, !tbaa !379
  br label %127

59:                                               ; preds = %7
  %60 = icmp eq i64 %2, 2
  br i1 %60, label %61, label %127

61:                                               ; preds = %59
  %62 = load i8, i8* %1, align 1, !tbaa !14
  %63 = zext i8 %62 to i32
  %64 = icmp eq i8 %62, 0
  br i1 %64, label %127, label %65

65:                                               ; preds = %61
  %66 = getelementptr inbounds i8, i8* %1, i64 1
  %67 = load i8, i8* %66, align 1, !tbaa !14
  %68 = icmp eq i8 %67, 0
  br i1 %68, label %127, label %69

69:                                               ; preds = %65
  %70 = zext i8 %67 to i32
  %71 = icmp ult i32 %9, %63
  %72 = icmp ult i32 %9, %70
  %73 = select i1 %71, i1 true, i1 %72
  br i1 %73, label %127, label %74

74:                                               ; preds = %69
  %75 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %0, i64 0, i32 39
  store i32 1, i32* %75, align 4, !tbaa !378
  %76 = load i8, i8* %1, align 1, !tbaa !14
  %77 = zext i8 %76 to i32
  %78 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %0, i64 0, i32 42
  store i32 %77, i32* %78, align 8, !tbaa !379
  %79 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %0, i64 0, i32 41
  store i32 %77, i32* %79, align 4, !tbaa !380
  %80 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %0, i64 0, i32 40
  store i32 %77, i32* %80, align 8, !tbaa !381
  %81 = load i8, i8* %66, align 1, !tbaa !14
  %82 = zext i8 %81 to i32
  %83 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %0, i64 0, i32 43
  store i32 %82, i32* %83, align 4, !tbaa !382
  br label %127

84:                                               ; preds = %7
  %85 = icmp eq i64 %2, 4
  br i1 %85, label %86, label %127

86:                                               ; preds = %84
  %87 = load i8, i8* %1, align 1, !tbaa !14
  %88 = zext i8 %87 to i32
  %89 = icmp eq i8 %87, 0
  br i1 %89, label %127, label %90

90:                                               ; preds = %86
  %91 = getelementptr inbounds i8, i8* %1, i64 1
  %92 = load i8, i8* %91, align 1, !tbaa !14
  %93 = zext i8 %92 to i32
  %94 = icmp eq i8 %92, 0
  br i1 %94, label %127, label %95

95:                                               ; preds = %90
  %96 = getelementptr inbounds i8, i8* %1, i64 2
  %97 = load i8, i8* %96, align 1, !tbaa !14
  %98 = zext i8 %97 to i32
  %99 = icmp eq i8 %97, 0
  br i1 %99, label %127, label %100

100:                                              ; preds = %95
  %101 = getelementptr inbounds i8, i8* %1, i64 3
  %102 = load i8, i8* %101, align 1, !tbaa !14
  %103 = icmp eq i8 %102, 0
  br i1 %103, label %127, label %104

104:                                              ; preds = %100
  %105 = zext i8 %102 to i32
  %106 = icmp ult i32 %9, %88
  %107 = icmp ult i32 %9, %93
  %108 = select i1 %106, i1 true, i1 %107
  %109 = icmp ult i32 %9, %98
  %110 = select i1 %108, i1 true, i1 %109
  %111 = icmp ult i32 %9, %105
  %112 = select i1 %110, i1 true, i1 %111
  br i1 %112, label %127, label %113

113:                                              ; preds = %104
  %114 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %0, i64 0, i32 39
  store i32 1, i32* %114, align 4, !tbaa !378
  %115 = load i8, i8* %1, align 1, !tbaa !14
  %116 = zext i8 %115 to i32
  %117 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %0, i64 0, i32 40
  store i32 %116, i32* %117, align 8, !tbaa !381
  %118 = load i8, i8* %91, align 1, !tbaa !14
  %119 = zext i8 %118 to i32
  %120 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %0, i64 0, i32 41
  store i32 %119, i32* %120, align 4, !tbaa !380
  %121 = load i8, i8* %96, align 1, !tbaa !14
  %122 = zext i8 %121 to i32
  %123 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %0, i64 0, i32 42
  store i32 %122, i32* %123, align 8, !tbaa !379
  %124 = load i8, i8* %101, align 1, !tbaa !14
  %125 = zext i8 %124 to i32
  %126 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %0, i64 0, i32 43
  store i32 %125, i32* %126, align 4, !tbaa !382
  br label %127

127:                                              ; preds = %18, %74, %113, %48, %7, %104, %86, %90, %95, %100, %84, %69, %61, %65, %59, %41, %28, %32, %37, %25, %12, %10
  %128 = phi i32 [ 114, %10 ], [ 115, %12 ], [ 114, %25 ], [ 115, %37 ], [ 115, %32 ], [ 115, %28 ], [ 115, %41 ], [ 114, %59 ], [ 115, %65 ], [ 115, %61 ], [ 115, %69 ], [ 114, %84 ], [ 115, %100 ], [ 115, %95 ], [ 115, %90 ], [ 115, %86 ], [ 115, %104 ], [ 0, %7 ], [ 0, %48 ], [ 0, %113 ], [ 0, %74 ], [ 0, %18 ]
  ret i32 %128
}

; Function Attrs: uwtable
define internal fastcc noundef i32 @_ZL15zlib_decompressPPhPmmPKhmPK25LodePNGDecompressSettings(i8** noundef %0, i64* noundef %1, i64 noundef %2, i8* noundef %3, i64 noundef %4, %struct.LodePNGDecompressSettings* noundef %5) unnamed_addr #12 {
  %7 = alloca %struct.ucvector, align 8
  %8 = getelementptr inbounds %struct.LodePNGDecompressSettings, %struct.LodePNGDecompressSettings* %5, i64 0, i32 3
  %9 = bitcast {}** %8 to i32 (i8**, i64*, i8*, i64, %struct.LodePNGDecompressSettings*)**
  %10 = load i32 (i8**, i64*, i8*, i64, %struct.LodePNGDecompressSettings*)*, i32 (i8**, i64*, i8*, i64, %struct.LodePNGDecompressSettings*)** %9, align 8, !tbaa !342
  %11 = icmp eq i32 (i8**, i64*, i8*, i64, %struct.LodePNGDecompressSettings*)* %10, null
  br i1 %11, label %23, label %12

12:                                               ; preds = %6
  %13 = tail call noundef i32 %10(i8** noundef %0, i64* noundef %1, i8* noundef %3, i64 noundef %4, %struct.LodePNGDecompressSettings* noundef nonnull %5)
  %14 = icmp eq i32 %13, 0
  br i1 %14, label %46, label %15

15:                                               ; preds = %12
  %16 = getelementptr inbounds %struct.LodePNGDecompressSettings, %struct.LodePNGDecompressSettings* %5, i64 0, i32 2
  %17 = load i64, i64* %16, align 8, !tbaa !52
  %18 = icmp eq i64 %17, 0
  br i1 %18, label %46, label %19

19:                                               ; preds = %15
  %20 = load i64, i64* %1, align 8, !tbaa !3
  %21 = icmp ugt i64 %20, %17
  %22 = select i1 %21, i32 109, i32 110
  br label %46

23:                                               ; preds = %6
  %24 = bitcast %struct.ucvector* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %24) #25
  %25 = load i8*, i8** %0, align 8, !tbaa !7
  %26 = load i64, i64* %1, align 8, !tbaa !3
  %27 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %7, i64 0, i32 0
  store i8* %25, i8** %27, align 8, !tbaa !39, !alias.scope !383
  %28 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %7, i64 0, i32 1
  store i64 %26, i64* %28, align 8, !tbaa !44, !alias.scope !383
  %29 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %7, i64 0, i32 2
  store i64 %26, i64* %29, align 8, !tbaa !45, !alias.scope !383
  %30 = icmp eq i64 %2, 0
  br i1 %30, label %42, label %31

31:                                               ; preds = %23
  %32 = add i64 %26, %2
  %33 = icmp ult i64 %26, %32
  br i1 %33, label %34, label %40

34:                                               ; preds = %31
  %35 = lshr i64 %26, 1
  %36 = add i64 %35, %32
  %37 = tail call i8* @realloc(i8* noundef %25, i64 noundef %36) #25
  %38 = icmp eq i8* %37, null
  br i1 %38, label %40, label %39

39:                                               ; preds = %34
  store i64 %36, i64* %29, align 8, !tbaa !45
  store i8* %37, i8** %27, align 8, !tbaa !39
  br label %40

40:                                               ; preds = %31, %34, %39
  %41 = load i64, i64* %1, align 8, !tbaa !3
  store i64 %41, i64* %28, align 8, !tbaa !44
  br label %42

42:                                               ; preds = %40, %23
  %43 = call fastcc noundef i32 @_ZL24lodepng_zlib_decompressvP8ucvectorPKhmPK25LodePNGDecompressSettings(%struct.ucvector* noundef nonnull %7, i8* noundef %3, i64 noundef %4, %struct.LodePNGDecompressSettings* noundef nonnull %5)
  %44 = load i8*, i8** %27, align 8, !tbaa !39
  store i8* %44, i8** %0, align 8, !tbaa !7
  %45 = load i64, i64* %28, align 8, !tbaa !44
  store i64 %45, i64* %1, align 8, !tbaa !3
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %24) #25
  br label %46

46:                                               ; preds = %19, %12, %15, %42
  %47 = phi i32 [ 110, %15 ], [ 0, %12 ], [ %43, %42 ], [ %22, %19 ]
  ret i32 %47
}

; Function Attrs: nofree nosync nounwind readnone speculatable willreturn
declare i64 @llvm.usub.sat.i64(i64, i64) #9

; Function Attrs: uwtable
define dso_local noundef i32 @_Z14lodepng_decodePPhPjS1_P12LodePNGStatePKhm(i8** nocapture noundef %0, i32* noundef %1, i32* noundef %2, %struct.LodePNGState* noundef %3, i8* noundef %4, i64 noundef %5) local_unnamed_addr #12 {
  %7 = alloca [7 x i32], align 16
  %8 = alloca [7 x i32], align 16
  %9 = alloca [8 x i64], align 16
  %10 = alloca [8 x i64], align 16
  %11 = alloca [8 x i64], align 16
  %12 = alloca [7 x i32], align 16
  %13 = alloca [7 x i32], align 16
  %14 = alloca [8 x i64], align 16
  %15 = alloca [8 x i64], align 16
  %16 = alloca [8 x i64], align 16
  %17 = alloca %struct.ucvector, align 8
  %18 = alloca i8*, align 8
  %19 = alloca i64, align 8
  %20 = bitcast i8** %18 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %20) #25
  store i8* null, i8** %18, align 8, !tbaa !7
  %21 = bitcast i64* %19 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %21) #25
  store i64 0, i64* %19, align 8, !tbaa !3
  store i8* null, i8** %0, align 8, !tbaa !7
  store i32 0, i32* %2, align 4, !tbaa !9
  store i32 0, i32* %1, align 4, !tbaa !9
  %22 = tail call noundef i32 @_Z15lodepng_inspectPjS_P12LodePNGStatePKhm(i32* noundef nonnull %1, i32* noundef nonnull %2, %struct.LodePNGState* noundef %3, i8* noundef %4, i64 noundef %5)
  %23 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %3, i64 0, i32 4
  store i32 %22, i32* %23, align 8, !tbaa !304
  %24 = icmp eq i32 %22, 0
  br i1 %24, label %25, label %2461

25:                                               ; preds = %6
  %26 = load i32, i32* %1, align 4, !tbaa !9
  %27 = load i32, i32* %2, align 4, !tbaa !9
  %28 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %3, i64 0, i32 3
  %29 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %3, i64 0, i32 3, i32 3
  %30 = getelementptr %struct.LodePNGColorMode, %struct.LodePNGColorMode* %29, i64 0, i32 0
  %31 = load i32, i32* %30, align 8, !tbaa !147
  %32 = getelementptr %struct.LodePNGState, %struct.LodePNGState* %3, i64 0, i32 3, i32 3, i32 1
  %33 = load i32, i32* %32, align 4, !tbaa !150
  switch i32 %31, label %38 [
    i32 0, label %39
    i32 2, label %34
    i32 3, label %39
    i32 4, label %35
    i32 6, label %36
    i32 255, label %37
  ]

34:                                               ; preds = %25
  br label %39

35:                                               ; preds = %25
  br label %39

36:                                               ; preds = %25
  br label %39

37:                                               ; preds = %25
  br label %39

38:                                               ; preds = %25
  br label %39

39:                                               ; preds = %38, %37, %36, %35, %34, %25, %25
  %40 = phi i32 [ 0, %38 ], [ 0, %37 ], [ 4, %36 ], [ 2, %35 ], [ 3, %34 ], [ 1, %25 ], [ 1, %25 ]
  %41 = mul i32 %40, %33
  %42 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %3, i64 0, i32 2, i32 0
  %43 = load i32, i32* %42, align 8, !tbaa !147
  %44 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %3, i64 0, i32 2, i32 1
  %45 = load i32, i32* %44, align 4, !tbaa !150
  switch i32 %43, label %50 [
    i32 0, label %51
    i32 2, label %46
    i32 3, label %51
    i32 4, label %47
    i32 6, label %48
    i32 255, label %49
  ]

46:                                               ; preds = %39
  br label %51

47:                                               ; preds = %39
  br label %51

48:                                               ; preds = %39
  br label %51

49:                                               ; preds = %39
  br label %51

50:                                               ; preds = %39
  br label %51

51:                                               ; preds = %50, %49, %48, %47, %46, %39, %39
  %52 = phi i32 [ 0, %50 ], [ 0, %49 ], [ 4, %48 ], [ 2, %47 ], [ 3, %46 ], [ 1, %39 ], [ 1, %39 ]
  %53 = mul i32 %52, %45
  %54 = icmp ugt i32 %41, %53
  br i1 %54, label %55, label %64

55:                                               ; preds = %51
  switch i32 %31, label %60 [
    i32 0, label %61
    i32 2, label %56
    i32 3, label %61
    i32 4, label %57
    i32 6, label %58
    i32 255, label %59
  ]

56:                                               ; preds = %55
  br label %61

57:                                               ; preds = %55
  br label %61

58:                                               ; preds = %55
  br label %61

59:                                               ; preds = %55
  br label %61

60:                                               ; preds = %55
  br label %61

61:                                               ; preds = %60, %59, %58, %57, %56, %55, %55
  %62 = phi i32 [ 0, %60 ], [ 0, %59 ], [ 4, %58 ], [ 2, %57 ], [ 3, %56 ], [ 1, %55 ], [ 1, %55 ]
  %63 = mul i32 %62, %33
  br label %73

64:                                               ; preds = %51
  switch i32 %43, label %69 [
    i32 0, label %70
    i32 2, label %65
    i32 3, label %70
    i32 4, label %66
    i32 6, label %67
    i32 255, label %68
  ]

65:                                               ; preds = %64
  br label %70

66:                                               ; preds = %64
  br label %70

67:                                               ; preds = %64
  br label %70

68:                                               ; preds = %64
  br label %70

69:                                               ; preds = %64
  br label %70

70:                                               ; preds = %69, %68, %67, %66, %65, %64, %64
  %71 = phi i32 [ 0, %69 ], [ 0, %68 ], [ 4, %67 ], [ 2, %66 ], [ 3, %65 ], [ 1, %64 ], [ 1, %64 ]
  %72 = mul i32 %71, %45
  br label %73

73:                                               ; preds = %70, %61
  %74 = phi i32 [ %63, %61 ], [ %72, %70 ]
  %75 = zext i32 %74 to i64
  %76 = zext i32 %27 to i64
  %77 = zext i32 %26 to i64
  %78 = mul nuw i64 %76, %77
  %79 = icmp ult i64 %78, 2305843009213693952
  br i1 %79, label %80, label %2459

80:                                               ; preds = %73
  %81 = lshr i32 %26, 3
  %82 = zext i32 %81 to i64
  %83 = mul nuw nsw i64 %75, %82
  %84 = and i32 %26, 7
  %85 = zext i32 %84 to i64
  %86 = mul nuw nsw i64 %75, %85
  %87 = add nuw nsw i64 %86, 7
  %88 = lshr i64 %87, 3
  %89 = add nuw nsw i64 %83, 5
  %90 = add nuw nsw i64 %89, %88
  %91 = tail call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %90, i64 %76) #25
  %92 = extractvalue { i64, i1 } %91, 1
  br i1 %92, label %2459, label %93

93:                                               ; preds = %80
  %94 = tail call noalias i8* @malloc(i64 noundef %5) #25
  %95 = icmp eq i8* %94, null
  br i1 %95, label %2459, label %96

96:                                               ; preds = %93
  %97 = getelementptr inbounds i8, i8* %4, i64 33
  %98 = ptrtoint i8* %4 to i64
  %99 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %3, i64 0, i32 0, i32 5
  %100 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %3, i64 0, i32 0
  %101 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %3, i64 0, i32 3, i32 22
  %102 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %3, i64 0, i32 3, i32 23
  %103 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %3, i64 0, i32 3, i32 33
  %104 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %3, i64 0, i32 3, i32 34
  %105 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %3, i64 0, i32 0, i32 2
  %106 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %3, i64 0, i32 0, i32 6
  %107 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %3, i64 0, i32 0, i32 1
  %108 = getelementptr inbounds i8, i8* %4, i64 %5
  %109 = ptrtoint i8* %108 to i64
  %110 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %3, i64 0, i32 3, i32 3, i32 0
  %111 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %3, i64 0, i32 3, i32 4
  %112 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %3, i64 0, i32 3, i32 5
  %113 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %3, i64 0, i32 3, i32 6
  %114 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %3, i64 0, i32 3, i32 7
  %115 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %3, i64 0, i32 3, i32 3, i32 3
  %116 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %3, i64 0, i32 3, i32 3, i32 4
  %117 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %3, i64 0, i32 3, i32 3, i32 5
  %118 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %3, i64 0, i32 3, i32 3, i32 6
  %119 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %3, i64 0, i32 3, i32 3, i32 7
  %120 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %3, i64 0, i32 3, i32 3, i32 2
  br label %121

121:                                              ; preds = %508, %96
  %122 = phi i8* [ %97, %96 ], [ %511, %508 ]
  %123 = phi i64 [ 0, %96 ], [ %510, %508 ]
  %124 = phi i32 [ 1, %96 ], [ %509, %508 ]
  %125 = ptrtoint i8* %122 to i64
  %126 = sub i64 %125, %98
  %127 = icmp ult i8* %122, %4
  %128 = add i64 %126, 12
  %129 = icmp ugt i64 %128, %5
  %130 = select i1 %127, i1 true, i1 %129
  br i1 %130, label %131, label %135

131:                                              ; preds = %121
  %132 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %3, i64 0, i32 0, i32 3
  %133 = load i32, i32* %132, align 8, !tbaa !386
  %134 = icmp eq i32 %133, 0
  br i1 %134, label %716, label %514

135:                                              ; preds = %121
  %136 = load i8, i8* %122, align 1, !tbaa !14
  %137 = zext i8 %136 to i32
  %138 = shl nuw i32 %137, 24
  %139 = getelementptr inbounds i8, i8* %122, i64 1
  %140 = load i8, i8* %139, align 1, !tbaa !14
  %141 = zext i8 %140 to i32
  %142 = shl nuw nsw i32 %141, 16
  %143 = or i32 %142, %138
  %144 = getelementptr inbounds i8, i8* %122, i64 2
  %145 = load i8, i8* %144, align 1, !tbaa !14
  %146 = zext i8 %145 to i32
  %147 = shl nuw nsw i32 %146, 8
  %148 = or i32 %143, %147
  %149 = getelementptr inbounds i8, i8* %122, i64 3
  %150 = load i8, i8* %149, align 1, !tbaa !14
  %151 = zext i8 %150 to i32
  %152 = or i32 %148, %151
  %153 = icmp slt i32 %152, 0
  br i1 %153, label %154, label %158

154:                                              ; preds = %135
  %155 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %3, i64 0, i32 0, i32 3
  %156 = load i32, i32* %155, align 8, !tbaa !386
  %157 = icmp eq i32 %156, 0
  br i1 %157, label %716, label %514

158:                                              ; preds = %135
  %159 = zext i32 %152 to i64
  %160 = add i64 %128, %159
  %161 = icmp ugt i64 %160, %5
  %162 = icmp ult i64 %160, %126
  %163 = select i1 %161, i1 true, i1 %162
  br i1 %163, label %716, label %164

164:                                              ; preds = %158
  %165 = getelementptr inbounds i8, i8* %122, i64 8
  %166 = getelementptr inbounds i8, i8* %122, i64 4
  %167 = load i8, i8* %166, align 1, !tbaa !14
  switch i8 %167, label %340 [
    i8 73, label %168
    i8 80, label %196
    i8 116, label %211
    i8 98, label %279
  ]

168:                                              ; preds = %164
  %169 = getelementptr inbounds i8, i8* %122, i64 5
  %170 = load i8, i8* %169, align 1, !tbaa !14
  switch i8 %170, label %340 [
    i8 68, label %171
    i8 69, label %188
  ]

171:                                              ; preds = %168
  %172 = getelementptr inbounds i8, i8* %122, i64 6
  %173 = load i8, i8* %172, align 1, !tbaa !14
  %174 = icmp eq i8 %173, 65
  br i1 %174, label %175, label %340

175:                                              ; preds = %171
  %176 = getelementptr inbounds i8, i8* %122, i64 7
  %177 = load i8, i8* %176, align 1, !tbaa !14
  %178 = icmp eq i8 %177, 84
  br i1 %178, label %179, label %340

179:                                              ; preds = %175
  %180 = add i64 %123, %159
  %181 = icmp ult i64 %180, %123
  %182 = icmp ugt i64 %180, %5
  %183 = or i1 %181, %182
  br i1 %183, label %716, label %184

184:                                              ; preds = %179
  %185 = icmp eq i32 %152, 0
  br i1 %185, label %444, label %186

186:                                              ; preds = %184
  %187 = getelementptr inbounds i8, i8* %94, i64 %123
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %187, i8* nonnull align 1 %165, i64 %159, i1 false) #25, !tbaa !14, !alias.scope !387
  br label %444

188:                                              ; preds = %168
  %189 = getelementptr inbounds i8, i8* %122, i64 6
  %190 = load i8, i8* %189, align 1, !tbaa !14
  %191 = icmp eq i8 %190, 78
  br i1 %191, label %192, label %340

192:                                              ; preds = %188
  %193 = getelementptr inbounds i8, i8* %122, i64 7
  %194 = load i8, i8* %193, align 1, !tbaa !14
  %195 = icmp eq i8 %194, 68
  br i1 %195, label %444, label %340

196:                                              ; preds = %164
  %197 = getelementptr inbounds i8, i8* %122, i64 5
  %198 = load i8, i8* %197, align 1, !tbaa !14
  %199 = icmp eq i8 %198, 76
  br i1 %199, label %200, label %340

200:                                              ; preds = %196
  %201 = getelementptr inbounds i8, i8* %122, i64 6
  %202 = load i8, i8* %201, align 1, !tbaa !14
  %203 = icmp eq i8 %202, 84
  br i1 %203, label %204, label %340

204:                                              ; preds = %200
  %205 = getelementptr inbounds i8, i8* %122, i64 7
  %206 = load i8, i8* %205, align 1, !tbaa !14
  %207 = icmp eq i8 %206, 69
  br i1 %207, label %208, label %340

208:                                              ; preds = %204
  %209 = tail call fastcc noundef i32 @_ZL14readChunk_PLTEP16LodePNGColorModePKhm(%struct.LodePNGColorMode* noundef nonnull %29, i8* noundef nonnull %165, i64 noundef %159), !range !127
  store i32 %209, i32* %23, align 8, !tbaa !304
  %210 = icmp eq i32 %209, 0
  br i1 %210, label %444, label %718

211:                                              ; preds = %164
  %212 = getelementptr inbounds i8, i8* %122, i64 5
  %213 = load i8, i8* %212, align 1, !tbaa !14
  %214 = icmp eq i8 %213, 82
  br i1 %214, label %215, label %340

215:                                              ; preds = %211
  %216 = getelementptr inbounds i8, i8* %122, i64 6
  %217 = load i8, i8* %216, align 1, !tbaa !14
  %218 = icmp eq i8 %217, 78
  br i1 %218, label %219, label %340

219:                                              ; preds = %215
  %220 = getelementptr inbounds i8, i8* %122, i64 7
  %221 = load i8, i8* %220, align 1, !tbaa !14
  %222 = icmp eq i8 %221, 83
  br i1 %222, label %223, label %340

223:                                              ; preds = %219
  %224 = load i32, i32* %30, align 8, !tbaa !147
  switch i32 %224, label %716 [
    i32 3, label %225
    i32 0, label %242
    i32 2, label %252
  ]

225:                                              ; preds = %223
  %226 = load i64, i64* %115, align 8, !tbaa !156
  %227 = icmp ult i64 %226, %159
  br i1 %227, label %716, label %228

228:                                              ; preds = %225
  %229 = icmp eq i32 %152, 0
  br i1 %229, label %278, label %230

230:                                              ; preds = %228, %230
  %231 = phi i64 [ %240, %230 ], [ 0, %228 ]
  %232 = getelementptr inbounds i8, i8* %165, i64 %231
  %233 = load i8, i8* %232, align 1, !tbaa !14
  %234 = load i8*, i8** %120, align 8, !tbaa !151
  %235 = shl nuw nsw i64 %231, 2
  %236 = and i64 %235, 4294967292
  %237 = or i64 %236, 3
  %238 = getelementptr inbounds i8, i8* %234, i64 %237
  store i8 %233, i8* %238, align 1, !tbaa !14
  %239 = add nuw nsw i64 %231, 1
  %240 = and i64 %239, 4294967295
  %241 = icmp eq i64 %240, %159
  br i1 %241, label %278, label %230

242:                                              ; preds = %223
  %243 = icmp eq i32 %152, 2
  br i1 %243, label %244, label %716

244:                                              ; preds = %242
  store i32 1, i32* %116, align 8, !tbaa !161
  %245 = load i8, i8* %165, align 1, !tbaa !14
  %246 = zext i8 %245 to i32
  %247 = shl nuw nsw i32 %246, 8
  %248 = getelementptr inbounds i8, i8* %122, i64 9
  %249 = load i8, i8* %248, align 1, !tbaa !14
  %250 = zext i8 %249 to i32
  %251 = or i32 %247, %250
  store i32 %251, i32* %119, align 4, !tbaa !237
  store i32 %251, i32* %118, align 8, !tbaa !236
  store i32 %251, i32* %117, align 4, !tbaa !235
  br label %278

252:                                              ; preds = %223
  %253 = icmp eq i32 %152, 6
  br i1 %253, label %254, label %716

254:                                              ; preds = %252
  store i32 1, i32* %116, align 8, !tbaa !161
  %255 = load i8, i8* %165, align 1, !tbaa !14
  %256 = zext i8 %255 to i32
  %257 = shl nuw nsw i32 %256, 8
  %258 = getelementptr inbounds i8, i8* %122, i64 9
  %259 = load i8, i8* %258, align 1, !tbaa !14
  %260 = zext i8 %259 to i32
  %261 = or i32 %257, %260
  store i32 %261, i32* %117, align 4, !tbaa !235
  %262 = getelementptr inbounds i8, i8* %122, i64 10
  %263 = load i8, i8* %262, align 1, !tbaa !14
  %264 = zext i8 %263 to i32
  %265 = shl nuw nsw i32 %264, 8
  %266 = getelementptr inbounds i8, i8* %122, i64 11
  %267 = load i8, i8* %266, align 1, !tbaa !14
  %268 = zext i8 %267 to i32
  %269 = or i32 %265, %268
  store i32 %269, i32* %118, align 8, !tbaa !236
  %270 = getelementptr inbounds i8, i8* %122, i64 12
  %271 = load i8, i8* %270, align 1, !tbaa !14
  %272 = zext i8 %271 to i32
  %273 = shl nuw nsw i32 %272, 8
  %274 = getelementptr inbounds i8, i8* %122, i64 13
  %275 = load i8, i8* %274, align 1, !tbaa !14
  %276 = zext i8 %275 to i32
  %277 = or i32 %273, %276
  store i32 %277, i32* %119, align 4, !tbaa !237
  br label %278

278:                                              ; preds = %230, %244, %254, %228
  store i32 0, i32* %23, align 8, !tbaa !304
  br label %444

279:                                              ; preds = %164
  %280 = getelementptr inbounds i8, i8* %122, i64 5
  %281 = load i8, i8* %280, align 1, !tbaa !14
  %282 = icmp eq i8 %281, 75
  br i1 %282, label %283, label %340

283:                                              ; preds = %279
  %284 = getelementptr inbounds i8, i8* %122, i64 6
  %285 = load i8, i8* %284, align 1, !tbaa !14
  %286 = icmp eq i8 %285, 71
  br i1 %286, label %287, label %340

287:                                              ; preds = %283
  %288 = getelementptr inbounds i8, i8* %122, i64 7
  %289 = load i8, i8* %288, align 1, !tbaa !14
  %290 = icmp eq i8 %289, 68
  br i1 %290, label %291, label %340

291:                                              ; preds = %287
  %292 = load i32, i32* %110, align 8, !tbaa !311
  switch i32 %292, label %339 [
    i32 3, label %293
    i32 0, label %303
    i32 4, label %303
    i32 2, label %313
    i32 6, label %313
  ]

293:                                              ; preds = %291
  %294 = icmp eq i32 %152, 1
  br i1 %294, label %295, label %716

295:                                              ; preds = %293
  %296 = load i8, i8* %165, align 1, !tbaa !14
  %297 = zext i8 %296 to i64
  %298 = load i64, i64* %115, align 8, !tbaa !323
  %299 = icmp ugt i64 %298, %297
  br i1 %299, label %300, label %716

300:                                              ; preds = %295
  store i32 1, i32* %111, align 8, !tbaa !324
  %301 = load i8, i8* %165, align 1, !tbaa !14
  %302 = zext i8 %301 to i32
  store i32 %302, i32* %114, align 4, !tbaa !325
  store i32 %302, i32* %113, align 8, !tbaa !326
  store i32 %302, i32* %112, align 4, !tbaa !327
  br label %339

303:                                              ; preds = %291, %291
  %304 = icmp eq i32 %152, 2
  br i1 %304, label %305, label %716

305:                                              ; preds = %303
  store i32 1, i32* %111, align 8, !tbaa !324
  %306 = load i8, i8* %165, align 1, !tbaa !14
  %307 = zext i8 %306 to i32
  %308 = shl nuw nsw i32 %307, 8
  %309 = getelementptr inbounds i8, i8* %122, i64 9
  %310 = load i8, i8* %309, align 1, !tbaa !14
  %311 = zext i8 %310 to i32
  %312 = or i32 %308, %311
  store i32 %312, i32* %114, align 4, !tbaa !325
  store i32 %312, i32* %113, align 8, !tbaa !326
  store i32 %312, i32* %112, align 4, !tbaa !327
  br label %339

313:                                              ; preds = %291, %291
  %314 = icmp eq i32 %152, 6
  br i1 %314, label %315, label %716

315:                                              ; preds = %313
  store i32 1, i32* %111, align 8, !tbaa !324
  %316 = load i8, i8* %165, align 1, !tbaa !14
  %317 = zext i8 %316 to i32
  %318 = shl nuw nsw i32 %317, 8
  %319 = getelementptr inbounds i8, i8* %122, i64 9
  %320 = load i8, i8* %319, align 1, !tbaa !14
  %321 = zext i8 %320 to i32
  %322 = or i32 %318, %321
  store i32 %322, i32* %112, align 4, !tbaa !327
  %323 = getelementptr inbounds i8, i8* %122, i64 10
  %324 = load i8, i8* %323, align 1, !tbaa !14
  %325 = zext i8 %324 to i32
  %326 = shl nuw nsw i32 %325, 8
  %327 = getelementptr inbounds i8, i8* %122, i64 11
  %328 = load i8, i8* %327, align 1, !tbaa !14
  %329 = zext i8 %328 to i32
  %330 = or i32 %326, %329
  store i32 %330, i32* %113, align 8, !tbaa !326
  %331 = getelementptr inbounds i8, i8* %122, i64 12
  %332 = load i8, i8* %331, align 1, !tbaa !14
  %333 = zext i8 %332 to i32
  %334 = shl nuw nsw i32 %333, 8
  %335 = getelementptr inbounds i8, i8* %122, i64 13
  %336 = load i8, i8* %335, align 1, !tbaa !14
  %337 = zext i8 %336 to i32
  %338 = or i32 %334, %337
  store i32 %338, i32* %114, align 4, !tbaa !325
  br label %339

339:                                              ; preds = %291, %305, %315, %300
  store i32 0, i32* %23, align 8, !tbaa !304
  br label %444

340:                                              ; preds = %164, %168, %171, %175, %188, %192, %204, %200, %196, %219, %215, %211, %279, %283, %287
  %341 = tail call noundef zeroext i8 @_Z25lodepng_chunk_type_equalsPKhPKc(i8* noundef nonnull %122, i8* noundef getelementptr inbounds ([5 x i8], [5 x i8]* @.str.6, i64 0, i64 0)), !range !309
  %342 = icmp eq i8 %341, 0
  br i1 %342, label %349, label %343

343:                                              ; preds = %340
  %344 = load i32, i32* %99, align 8, !tbaa !391
  %345 = icmp eq i32 %344, 0
  br i1 %345, label %444, label %346

346:                                              ; preds = %343
  %347 = tail call fastcc noundef i32 @_ZL14readChunk_tEXtP11LodePNGInfoPKhm(%struct.LodePNGInfo* noundef nonnull %28, i8* noundef nonnull %165, i64 noundef %159), !range !315
  store i32 %347, i32* %23, align 8, !tbaa !304
  %348 = icmp eq i32 %347, 0
  br i1 %348, label %444, label %718

349:                                              ; preds = %340
  %350 = tail call noundef zeroext i8 @_Z25lodepng_chunk_type_equalsPKhPKc(i8* noundef nonnull %122, i8* noundef getelementptr inbounds ([5 x i8], [5 x i8]* @.str.7, i64 0, i64 0)), !range !309
  %351 = icmp eq i8 %350, 0
  br i1 %351, label %358, label %352

352:                                              ; preds = %349
  %353 = load i32, i32* %99, align 8, !tbaa !391
  %354 = icmp eq i32 %353, 0
  br i1 %354, label %444, label %355

355:                                              ; preds = %352
  %356 = tail call fastcc noundef i32 @_ZL14readChunk_zTXtP11LodePNGInfoPK22LodePNGDecoderSettingsPKhm(%struct.LodePNGInfo* noundef nonnull %28, %struct.LodePNGDecoderSettings* noundef nonnull %100, i8* noundef nonnull %165, i64 noundef %159)
  store i32 %356, i32* %23, align 8, !tbaa !304
  %357 = icmp eq i32 %356, 0
  br i1 %357, label %444, label %718

358:                                              ; preds = %349
  %359 = tail call noundef zeroext i8 @_Z25lodepng_chunk_type_equalsPKhPKc(i8* noundef nonnull %122, i8* noundef getelementptr inbounds ([5 x i8], [5 x i8]* @.str.8, i64 0, i64 0)), !range !309
  %360 = icmp eq i8 %359, 0
  br i1 %360, label %367, label %361

361:                                              ; preds = %358
  %362 = load i32, i32* %99, align 8, !tbaa !391
  %363 = icmp eq i32 %362, 0
  br i1 %363, label %444, label %364

364:                                              ; preds = %361
  %365 = tail call fastcc noundef i32 @_ZL14readChunk_iTXtP11LodePNGInfoPK22LodePNGDecoderSettingsPKhm(%struct.LodePNGInfo* noundef nonnull %28, %struct.LodePNGDecoderSettings* noundef nonnull %100, i8* noundef nonnull %165, i64 noundef %159)
  store i32 %365, i32* %23, align 8, !tbaa !304
  %366 = icmp eq i32 %365, 0
  br i1 %366, label %444, label %718

367:                                              ; preds = %358
  %368 = tail call noundef zeroext i8 @_Z25lodepng_chunk_type_equalsPKhPKc(i8* noundef nonnull %122, i8* noundef getelementptr inbounds ([5 x i8], [5 x i8]* @.str.9, i64 0, i64 0)), !range !309
  %369 = icmp eq i8 %368, 0
  br i1 %369, label %373, label %370

370:                                              ; preds = %367
  %371 = tail call fastcc noundef i32 @_ZL14readChunk_tIMEP11LodePNGInfoPKhm(%struct.LodePNGInfo* noundef nonnull %28, i8* noundef nonnull %165, i64 noundef %159), !range !316
  store i32 %371, i32* %23, align 8, !tbaa !304
  %372 = icmp eq i32 %371, 0
  br i1 %372, label %444, label %718

373:                                              ; preds = %367
  %374 = tail call noundef zeroext i8 @_Z25lodepng_chunk_type_equalsPKhPKc(i8* noundef nonnull %122, i8* noundef getelementptr inbounds ([5 x i8], [5 x i8]* @.str.10, i64 0, i64 0)), !range !309
  %375 = icmp eq i8 %374, 0
  br i1 %375, label %379, label %376

376:                                              ; preds = %373
  %377 = tail call fastcc noundef i32 @_ZL14readChunk_pHYsP11LodePNGInfoPKhm(%struct.LodePNGInfo* noundef nonnull %28, i8* noundef nonnull %165, i64 noundef %159), !range !317
  store i32 %377, i32* %23, align 8, !tbaa !304
  %378 = icmp eq i32 %377, 0
  br i1 %378, label %444, label %718

379:                                              ; preds = %373
  %380 = tail call noundef zeroext i8 @_Z25lodepng_chunk_type_equalsPKhPKc(i8* noundef nonnull %122, i8* noundef getelementptr inbounds ([5 x i8], [5 x i8]* @.str.11, i64 0, i64 0)), !range !309
  %381 = icmp eq i8 %380, 0
  br i1 %381, label %402, label %382

382:                                              ; preds = %379
  %383 = icmp eq i32 %152, 4
  br i1 %383, label %384, label %716

384:                                              ; preds = %382
  store i32 1, i32* %101, align 4, !tbaa !212
  %385 = load i8, i8* %165, align 1, !tbaa !14
  %386 = zext i8 %385 to i32
  %387 = shl nuw i32 %386, 24
  %388 = getelementptr inbounds i8, i8* %122, i64 9
  %389 = load i8, i8* %388, align 1, !tbaa !14
  %390 = zext i8 %389 to i32
  %391 = shl nuw nsw i32 %390, 16
  %392 = or i32 %391, %387
  %393 = getelementptr inbounds i8, i8* %122, i64 10
  %394 = load i8, i8* %393, align 1, !tbaa !14
  %395 = zext i8 %394 to i32
  %396 = shl nuw nsw i32 %395, 8
  %397 = or i32 %392, %396
  %398 = getelementptr inbounds i8, i8* %122, i64 11
  %399 = load i8, i8* %398, align 1, !tbaa !14
  %400 = zext i8 %399 to i32
  %401 = or i32 %397, %400
  store i32 %401, i32* %102, align 8, !tbaa !318
  store i32 0, i32* %23, align 8, !tbaa !304
  br label %444

402:                                              ; preds = %379
  %403 = tail call noundef zeroext i8 @_Z25lodepng_chunk_type_equalsPKhPKc(i8* noundef nonnull %122, i8* noundef getelementptr inbounds ([5 x i8], [5 x i8]* @.str.12, i64 0, i64 0)), !range !309
  %404 = icmp eq i8 %403, 0
  br i1 %404, label %408, label %405

405:                                              ; preds = %402
  %406 = tail call fastcc noundef i32 @_ZL14readChunk_cHRMP11LodePNGInfoPKhm(%struct.LodePNGInfo* noundef nonnull %28, i8* noundef nonnull %165, i64 noundef %159), !range !319
  store i32 %406, i32* %23, align 8, !tbaa !304
  %407 = icmp eq i32 %406, 0
  br i1 %407, label %444, label %718

408:                                              ; preds = %402
  %409 = tail call noundef zeroext i8 @_Z25lodepng_chunk_type_equalsPKhPKc(i8* noundef nonnull %122, i8* noundef getelementptr inbounds ([5 x i8], [5 x i8]* @.str.13, i64 0, i64 0)), !range !309
  %410 = icmp eq i8 %409, 0
  br i1 %410, label %416, label %411

411:                                              ; preds = %408
  %412 = icmp eq i32 %152, 1
  br i1 %412, label %413, label %716

413:                                              ; preds = %411
  store i32 1, i32* %103, align 8, !tbaa !214
  %414 = load i8, i8* %165, align 1, !tbaa !14
  %415 = zext i8 %414 to i32
  store i32 %415, i32* %104, align 4, !tbaa !320
  store i32 0, i32* %23, align 8, !tbaa !304
  br label %444

416:                                              ; preds = %408
  %417 = tail call noundef zeroext i8 @_Z25lodepng_chunk_type_equalsPKhPKc(i8* noundef nonnull %122, i8* noundef getelementptr inbounds ([5 x i8], [5 x i8]* @.str.14, i64 0, i64 0)), !range !309
  %418 = icmp eq i8 %417, 0
  br i1 %418, label %422, label %419

419:                                              ; preds = %416
  %420 = tail call fastcc noundef i32 @_ZL14readChunk_iCCPP11LodePNGInfoPK22LodePNGDecoderSettingsPKhm(%struct.LodePNGInfo* noundef nonnull %28, %struct.LodePNGDecoderSettings* noundef %100, i8* noundef nonnull %165, i64 noundef %159)
  store i32 %420, i32* %23, align 8, !tbaa !304
  %421 = icmp eq i32 %420, 0
  br i1 %421, label %444, label %718

422:                                              ; preds = %416
  %423 = tail call noundef zeroext i8 @_Z25lodepng_chunk_type_equalsPKhPKc(i8* noundef nonnull %122, i8* noundef getelementptr inbounds ([5 x i8], [5 x i8]* @.str.15, i64 0, i64 0)), !range !309
  %424 = icmp eq i8 %423, 0
  br i1 %424, label %428, label %425

425:                                              ; preds = %422
  %426 = tail call fastcc noundef i32 @_ZL14readChunk_sBITP11LodePNGInfoPKhm(%struct.LodePNGInfo* noundef nonnull %28, i8* noundef nonnull %165, i64 noundef %159), !range !321
  store i32 %426, i32* %23, align 8, !tbaa !304
  %427 = icmp eq i32 %426, 0
  br i1 %427, label %444, label %718

428:                                              ; preds = %422
  %429 = load i32, i32* %105, align 4, !tbaa !392
  %430 = icmp eq i32 %429, 0
  %431 = and i8 %167, 32
  %432 = icmp eq i8 %431, 0
  %433 = select i1 %430, i1 %432, i1 false
  br i1 %433, label %716, label %434

434:                                              ; preds = %428
  %435 = load i32, i32* %106, align 4, !tbaa !393
  %436 = icmp eq i32 %435, 0
  br i1 %436, label %455, label %437

437:                                              ; preds = %434
  %438 = add i32 %124, -1
  %439 = zext i32 %438 to i64
  %440 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %3, i64 0, i32 3, i32 44, i64 %439
  %441 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %3, i64 0, i32 3, i32 45, i64 %439
  %442 = tail call noundef i32 @_Z20lodepng_chunk_appendPPhPmPKh(i8** noundef nonnull %440, i64* noundef nonnull %441, i8* noundef nonnull %122), !range !127
  store i32 %442, i32* %23, align 8, !tbaa !304
  %443 = icmp eq i32 %442, 0
  br i1 %443, label %455, label %718

444:                                              ; preds = %339, %278, %425, %419, %413, %405, %384, %376, %370, %364, %361, %355, %352, %346, %343, %208, %192, %186, %184
  %445 = phi i32 [ %124, %346 ], [ %124, %343 ], [ %124, %364 ], [ %124, %361 ], [ %124, %376 ], [ %124, %405 ], [ %124, %419 ], [ %124, %425 ], [ %124, %370 ], [ %124, %352 ], [ %124, %355 ], [ %124, %192 ], [ 2, %208 ], [ %124, %384 ], [ %124, %413 ], [ 3, %184 ], [ 3, %186 ], [ %124, %278 ], [ %124, %339 ]
  %446 = phi i64 [ %123, %346 ], [ %123, %343 ], [ %123, %364 ], [ %123, %361 ], [ %123, %376 ], [ %123, %405 ], [ %123, %419 ], [ %123, %425 ], [ %123, %370 ], [ %123, %352 ], [ %123, %355 ], [ %123, %192 ], [ %123, %208 ], [ %123, %384 ], [ %123, %413 ], [ %180, %184 ], [ %180, %186 ], [ %123, %278 ], [ %123, %339 ]
  %447 = phi i1 [ true, %346 ], [ true, %343 ], [ true, %364 ], [ true, %361 ], [ true, %376 ], [ true, %405 ], [ true, %419 ], [ true, %425 ], [ true, %370 ], [ true, %352 ], [ true, %355 ], [ false, %192 ], [ true, %208 ], [ true, %384 ], [ true, %413 ], [ true, %184 ], [ true, %186 ], [ true, %278 ], [ true, %339 ]
  %448 = phi i8 [ 0, %346 ], [ 0, %343 ], [ 0, %364 ], [ 0, %361 ], [ 0, %376 ], [ 0, %405 ], [ 0, %419 ], [ 0, %425 ], [ 0, %370 ], [ 0, %352 ], [ 0, %355 ], [ 1, %192 ], [ 0, %208 ], [ 0, %384 ], [ 0, %413 ], [ 0, %184 ], [ 0, %186 ], [ 0, %278 ], [ 0, %339 ]
  %449 = load i32, i32* %107, align 8, !tbaa !313
  %450 = icmp eq i32 %449, 0
  br i1 %450, label %451, label %454

451:                                              ; preds = %444
  %452 = tail call noundef i32 @_Z23lodepng_chunk_check_crcPKh(i8* noundef nonnull %122), !range !322
  %453 = icmp eq i32 %452, 0
  br i1 %453, label %454, label %716

454:                                              ; preds = %451, %444
  br i1 %447, label %455, label %508

455:                                              ; preds = %454, %437, %434
  %456 = phi i32 [ %445, %454 ], [ %124, %437 ], [ %124, %434 ]
  %457 = phi i64 [ %446, %454 ], [ %123, %437 ], [ %123, %434 ]
  %458 = phi i8 [ %448, %454 ], [ 0, %437 ], [ 0, %434 ]
  %459 = sub i64 %109, %125
  %460 = icmp uge i8* %122, %108
  %461 = icmp ult i64 %459, 12
  %462 = or i1 %460, %461
  br i1 %462, label %508, label %463

463:                                              ; preds = %455
  %464 = load i8, i8* %122, align 1, !tbaa !14
  %465 = icmp eq i8 %464, -119
  %466 = load i8, i8* %139, align 1, !tbaa !14
  %467 = icmp eq i8 %466, 80
  %468 = select i1 %465, i1 %467, i1 false
  %469 = load i8, i8* %144, align 1, !tbaa !14
  br i1 %468, label %470, label %490

470:                                              ; preds = %463
  %471 = icmp eq i8 %469, 78
  br i1 %471, label %472, label %490

472:                                              ; preds = %470
  %473 = load i8, i8* %149, align 1, !tbaa !14
  %474 = icmp eq i8 %473, 71
  br i1 %474, label %475, label %490

475:                                              ; preds = %472
  %476 = load i8, i8* %166, align 1, !tbaa !14
  %477 = icmp eq i8 %476, 13
  br i1 %477, label %478, label %490

478:                                              ; preds = %475
  %479 = getelementptr inbounds i8, i8* %122, i64 5
  %480 = load i8, i8* %479, align 1, !tbaa !14
  %481 = icmp eq i8 %480, 10
  br i1 %481, label %482, label %490

482:                                              ; preds = %478
  %483 = getelementptr inbounds i8, i8* %122, i64 6
  %484 = load i8, i8* %483, align 1, !tbaa !14
  %485 = icmp eq i8 %484, 26
  br i1 %485, label %486, label %490

486:                                              ; preds = %482
  %487 = getelementptr inbounds i8, i8* %122, i64 7
  %488 = load i8, i8* %487, align 1, !tbaa !14
  %489 = icmp eq i8 %488, 10
  br i1 %489, label %508, label %490

490:                                              ; preds = %486, %482, %478, %475, %472, %470, %463
  %491 = phi i8 [ 78, %486 ], [ 78, %482 ], [ 78, %478 ], [ 78, %475 ], [ 78, %472 ], [ %469, %470 ], [ %469, %463 ]
  %492 = phi i8 [ 80, %486 ], [ 80, %482 ], [ 80, %478 ], [ 80, %475 ], [ 80, %472 ], [ 80, %470 ], [ %466, %463 ]
  %493 = zext i8 %464 to i64
  %494 = shl nuw nsw i64 %493, 24
  %495 = zext i8 %492 to i64
  %496 = shl nuw nsw i64 %495, 16
  %497 = zext i8 %491 to i64
  %498 = shl nuw nsw i64 %497, 8
  %499 = load i8, i8* %149, align 1, !tbaa !14
  %500 = zext i8 %499 to i64
  %501 = or i64 %494, %498
  %502 = or i64 %501, %496
  %503 = or i64 %502, 12
  %504 = add nuw nsw i64 %503, %500
  %505 = icmp ugt i64 %504, %459
  %506 = getelementptr inbounds i8, i8* %122, i64 %504
  %507 = select i1 %505, i8* %108, i8* %506
  br label %508

508:                                              ; preds = %490, %486, %455, %454
  %509 = phi i32 [ %445, %454 ], [ %456, %486 ], [ %456, %455 ], [ %456, %490 ]
  %510 = phi i64 [ %446, %454 ], [ %457, %486 ], [ %457, %455 ], [ %457, %490 ]
  %511 = phi i8* [ %122, %454 ], [ %165, %486 ], [ %108, %455 ], [ %507, %490 ]
  %512 = phi i8 [ %448, %454 ], [ %458, %486 ], [ %458, %455 ], [ %458, %490 ]
  %513 = icmp eq i8 %512, 0
  br i1 %513, label %121, label %514

514:                                              ; preds = %508, %154, %131
  %515 = phi i64 [ %123, %154 ], [ %123, %131 ], [ %510, %508 ]
  %516 = load i32, i32* %30, align 8, !tbaa !394
  %517 = icmp eq i32 %516, 3
  br i1 %517, label %518, label %521

518:                                              ; preds = %514
  %519 = load i8*, i8** %120, align 8, !tbaa !395
  %520 = icmp eq i8* %519, null
  br i1 %520, label %716, label %521

521:                                              ; preds = %518, %514
  %522 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %3, i64 0, i32 3, i32 2
  %523 = load i32, i32* %522, align 8, !tbaa !396
  %524 = icmp eq i32 %523, 0
  br i1 %524, label %525, label %542

525:                                              ; preds = %521
  %526 = tail call noundef i32 @_Z15lodepng_get_bppPK16LodePNGColorMode(%struct.LodePNGColorMode* noundef nonnull %29)
  %527 = load i32, i32* %1, align 4, !tbaa !9
  %528 = load i32, i32* %2, align 4, !tbaa !9
  %529 = lshr i32 %527, 3
  %530 = zext i32 %529 to i64
  %531 = zext i32 %526 to i64
  %532 = mul nuw nsw i64 %530, %531
  %533 = add nuw nsw i64 %532, 1
  %534 = and i32 %527, 7
  %535 = mul i32 %534, %526
  %536 = add i32 %535, 7
  %537 = lshr i32 %536, 3
  %538 = zext i32 %537 to i64
  %539 = add nuw nsw i64 %533, %538
  %540 = zext i32 %528 to i64
  %541 = mul i64 %539, %540
  br label %674

542:                                              ; preds = %521
  %543 = load i32, i32* %32, align 4, !tbaa !150
  switch i32 %516, label %548 [
    i32 0, label %549
    i32 2, label %544
    i32 3, label %549
    i32 4, label %545
    i32 6, label %546
    i32 255, label %547
  ]

544:                                              ; preds = %542
  br label %549

545:                                              ; preds = %542
  br label %549

546:                                              ; preds = %542
  br label %549

547:                                              ; preds = %542
  br label %549

548:                                              ; preds = %542
  br label %549

549:                                              ; preds = %548, %547, %546, %545, %544, %542, %542
  %550 = phi i32 [ 0, %548 ], [ 0, %547 ], [ 4, %546 ], [ 2, %545 ], [ 3, %544 ], [ 1, %542 ], [ 1, %542 ]
  %551 = mul i32 %550, %543
  %552 = load i32, i32* %1, align 4, !tbaa !9
  %553 = add i32 %552, 7
  %554 = lshr i32 %553, 3
  %555 = load i32, i32* %2, align 4, !tbaa !9
  %556 = add i32 %555, 7
  %557 = lshr i32 %556, 3
  %558 = lshr i32 %553, 6
  %559 = zext i32 %558 to i64
  %560 = zext i32 %551 to i64
  %561 = mul nuw nsw i64 %559, %560
  %562 = add nuw nsw i64 %561, 1
  %563 = and i32 %554, 7
  %564 = mul i32 %563, %551
  %565 = add i32 %564, 7
  %566 = lshr i32 %565, 3
  %567 = zext i32 %566 to i64
  %568 = add nuw nsw i64 %562, %567
  %569 = zext i32 %557 to i64
  %570 = mul i64 %568, %569
  %571 = icmp ugt i32 %552, 4
  %572 = add i32 %552, 3
  br i1 %571, label %573, label %587

573:                                              ; preds = %549
  %574 = lshr i32 %572, 3
  %575 = lshr i32 %572, 6
  %576 = zext i32 %575 to i64
  %577 = mul nuw nsw i64 %576, %560
  %578 = add nuw nsw i64 %577, 1
  %579 = and i32 %574, 7
  %580 = mul i32 %579, %551
  %581 = add i32 %580, 7
  %582 = lshr i32 %581, 3
  %583 = zext i32 %582 to i64
  %584 = add nuw nsw i64 %578, %583
  %585 = mul i64 %584, %569
  %586 = add i64 %570, %585
  br label %587

587:                                              ; preds = %573, %549
  %588 = phi i64 [ %586, %573 ], [ %570, %549 ]
  %589 = lshr i32 %572, 2
  %590 = add i32 %555, 3
  %591 = lshr i32 %590, 3
  %592 = lshr i32 %572, 5
  %593 = zext i32 %592 to i64
  %594 = mul nuw nsw i64 %593, %560
  %595 = add nuw nsw i64 %594, 1
  %596 = and i32 %589, 7
  %597 = mul i32 %596, %551
  %598 = add i32 %597, 7
  %599 = lshr i32 %598, 3
  %600 = zext i32 %599 to i64
  %601 = add nuw nsw i64 %595, %600
  %602 = zext i32 %591 to i64
  %603 = mul i64 %601, %602
  %604 = add i64 %588, %603
  %605 = icmp ugt i32 %552, 2
  %606 = add i32 %552, 1
  br i1 %605, label %607, label %623

607:                                              ; preds = %587
  %608 = lshr i32 %606, 2
  %609 = lshr i32 %590, 2
  %610 = lshr i32 %606, 5
  %611 = zext i32 %610 to i64
  %612 = mul nuw nsw i64 %611, %560
  %613 = add nuw nsw i64 %612, 1
  %614 = and i32 %608, 7
  %615 = mul i32 %614, %551
  %616 = add i32 %615, 7
  %617 = lshr i32 %616, 3
  %618 = zext i32 %617 to i64
  %619 = add nuw nsw i64 %613, %618
  %620 = zext i32 %609 to i64
  %621 = mul i64 %619, %620
  %622 = add i64 %604, %621
  br label %623

623:                                              ; preds = %607, %587
  %624 = phi i64 [ %622, %607 ], [ %604, %587 ]
  %625 = lshr i32 %606, 1
  %626 = add i32 %555, 1
  %627 = lshr i32 %626, 2
  %628 = lshr i32 %606, 4
  %629 = zext i32 %628 to i64
  %630 = mul nuw nsw i64 %629, %560
  %631 = add nuw nsw i64 %630, 1
  %632 = and i32 %625, 7
  %633 = mul i32 %632, %551
  %634 = add i32 %633, 7
  %635 = lshr i32 %634, 3
  %636 = zext i32 %635 to i64
  %637 = add nuw nsw i64 %631, %636
  %638 = zext i32 %627 to i64
  %639 = mul i64 %637, %638
  %640 = add i64 %624, %639
  %641 = icmp ugt i32 %552, 1
  br i1 %641, label %642, label %658

642:                                              ; preds = %623
  %643 = lshr i32 %552, 1
  %644 = lshr i32 %626, 1
  %645 = lshr i32 %552, 4
  %646 = zext i32 %645 to i64
  %647 = mul nuw nsw i64 %646, %560
  %648 = add nuw nsw i64 %647, 1
  %649 = and i32 %643, 7
  %650 = mul i32 %649, %551
  %651 = add i32 %650, 7
  %652 = lshr i32 %651, 3
  %653 = zext i32 %652 to i64
  %654 = add nuw nsw i64 %648, %653
  %655 = zext i32 %644 to i64
  %656 = mul i64 %654, %655
  %657 = add i64 %640, %656
  br label %658

658:                                              ; preds = %642, %623
  %659 = phi i64 [ %657, %642 ], [ %640, %623 ]
  %660 = lshr i32 %555, 1
  %661 = lshr i32 %552, 3
  %662 = zext i32 %661 to i64
  %663 = mul nuw nsw i64 %662, %560
  %664 = add nuw nsw i64 %663, 1
  %665 = and i32 %552, 7
  %666 = mul i32 %665, %551
  %667 = add i32 %666, 7
  %668 = lshr i32 %667, 3
  %669 = zext i32 %668 to i64
  %670 = add nuw nsw i64 %664, %669
  %671 = zext i32 %660 to i64
  %672 = mul i64 %670, %671
  %673 = add i64 %659, %672
  br label %674

674:                                              ; preds = %658, %525
  %675 = phi i64 [ %541, %525 ], [ %673, %658 ]
  %676 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %3, i64 0, i32 0, i32 0
  %677 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %3, i64 0, i32 0, i32 0, i32 3
  %678 = bitcast {}** %677 to i32 (i8**, i64*, i8*, i64, %struct.LodePNGDecompressSettings*)**
  %679 = load i32 (i8**, i64*, i8*, i64, %struct.LodePNGDecompressSettings*)*, i32 (i8**, i64*, i8*, i64, %struct.LodePNGDecompressSettings*)** %678, align 8, !tbaa !342
  %680 = icmp eq i32 (i8**, i64*, i8*, i64, %struct.LodePNGDecompressSettings*)* %679, null
  br i1 %680, label %694, label %681

681:                                              ; preds = %674
  %682 = call noundef i32 %679(i8** noundef nonnull %18, i64* noundef nonnull %19, i8* noundef nonnull %94, i64 noundef %515, %struct.LodePNGDecompressSettings* noundef nonnull %676)
  %683 = icmp eq i32 %682, 0
  br i1 %683, label %684, label %686

684:                                              ; preds = %681
  %685 = load i64, i64* %19, align 8
  br label %709

686:                                              ; preds = %681
  %687 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %3, i64 0, i32 0, i32 0, i32 2
  %688 = load i64, i64* %687, align 8, !tbaa !52
  %689 = icmp eq i64 %688, 0
  %690 = load i64, i64* %19, align 8
  %691 = icmp ugt i64 %690, %688
  %692 = select i1 %691, i32 109, i32 110
  %693 = select i1 %689, i32 110, i32 %692
  br label %716

694:                                              ; preds = %674
  %695 = bitcast %struct.ucvector* %17 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %695) #25
  %696 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %17, i64 0, i32 0
  %697 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %17, i64 0, i32 1
  %698 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %17, i64 0, i32 2
  %699 = icmp eq i64 %675, 0
  call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(24) %695, i8 0, i64 24, i1 false)
  br i1 %699, label %705, label %700

700:                                              ; preds = %694
  %701 = tail call i8* @malloc(i64 %675)
  %702 = icmp eq i8* %701, null
  br i1 %702, label %704, label %703

703:                                              ; preds = %700
  store i64 %675, i64* %698, align 8, !tbaa !45
  store i8* %701, i8** %696, align 8, !tbaa !39
  br label %704

704:                                              ; preds = %703, %700
  store i64 0, i64* %697, align 8, !tbaa !44
  br label %705

705:                                              ; preds = %704, %694
  %706 = call fastcc noundef i32 @_ZL24lodepng_zlib_decompressvP8ucvectorPKhmPK25LodePNGDecompressSettings(%struct.ucvector* noundef nonnull %17, i8* noundef nonnull %94, i64 noundef %515, %struct.LodePNGDecompressSettings* noundef nonnull %676)
  %707 = load i8*, i8** %696, align 8, !tbaa !39
  store i8* %707, i8** %18, align 8, !tbaa !7
  %708 = load i64, i64* %697, align 8, !tbaa !44
  store i64 %708, i64* %19, align 8, !tbaa !3
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %695) #25
  br label %709

709:                                              ; preds = %684, %705
  %710 = phi i64 [ %685, %684 ], [ %708, %705 ]
  %711 = phi i32 [ 0, %684 ], [ %706, %705 ]
  store i32 %711, i32* %23, align 8, !tbaa !304
  %712 = icmp ne i32 %711, 0
  %713 = icmp eq i64 %710, %675
  %714 = select i1 %712, i1 true, i1 %713
  br i1 %714, label %719, label %715

715:                                              ; preds = %709
  store i32 91, i32* %23, align 8, !tbaa !304
  call void @free(i8* noundef %94) #25
  br label %2463

716:                                              ; preds = %158, %179, %382, %411, %451, %428, %313, %303, %295, %293, %252, %242, %225, %223, %131, %154, %518, %686
  %717 = phi i32 [ %693, %686 ], [ 30, %131 ], [ 63, %154 ], [ 106, %518 ], [ 39, %225 ], [ 30, %242 ], [ 41, %252 ], [ 42, %223 ], [ 43, %293 ], [ 103, %295 ], [ 44, %303 ], [ 45, %313 ], [ 69, %428 ], [ 57, %451 ], [ 98, %411 ], [ 96, %382 ], [ 95, %179 ], [ 64, %158 ]
  store i32 %717, i32* %23, align 8, !tbaa !304
  br label %718

718:                                              ; preds = %437, %425, %419, %405, %376, %370, %364, %355, %346, %208, %716
  call void @free(i8* noundef %94) #25
  br label %2463

719:                                              ; preds = %709
  call void @free(i8* noundef %94) #25
  %720 = icmp eq i32 %711, 0
  br i1 %720, label %721, label %2463

721:                                              ; preds = %719
  %722 = load i32, i32* %1, align 4, !tbaa !9
  %723 = load i32, i32* %2, align 4, !tbaa !9
  %724 = load i32, i32* %30, align 8, !tbaa !147
  %725 = load i32, i32* %32, align 4, !tbaa !150
  switch i32 %724, label %730 [
    i32 0, label %731
    i32 2, label %726
    i32 3, label %731
    i32 4, label %727
    i32 6, label %728
    i32 255, label %729
  ]

726:                                              ; preds = %721
  br label %731

727:                                              ; preds = %721
  br label %731

728:                                              ; preds = %721
  br label %731

729:                                              ; preds = %721
  br label %731

730:                                              ; preds = %721
  br label %731

731:                                              ; preds = %730, %729, %728, %727, %726, %721, %721
  %732 = phi i32 [ 0, %730 ], [ 0, %729 ], [ 4, %728 ], [ 2, %727 ], [ 3, %726 ], [ 1, %721 ], [ 1, %721 ]
  %733 = mul i32 %732, %725
  %734 = zext i32 %733 to i64
  %735 = zext i32 %722 to i64
  %736 = zext i32 %723 to i64
  %737 = mul nuw i64 %736, %735
  %738 = lshr i64 %737, 3
  %739 = mul i64 %738, %734
  %740 = and i64 %737, 7
  %741 = mul nuw nsw i64 %740, %734
  %742 = add nuw nsw i64 %741, 7
  %743 = lshr i64 %742, 3
  %744 = add i64 %743, %739
  %745 = call noalias i8* @malloc(i64 noundef %744) #25
  store i8* %745, i8** %0, align 8, !tbaa !7
  %746 = icmp eq i8* %745, null
  br i1 %746, label %747, label %748

747:                                              ; preds = %731
  store i32 83, i32* %23, align 8, !tbaa !304
  br label %2463

748:                                              ; preds = %731
  %749 = icmp eq i64 %744, 0
  br i1 %749, label %751, label %750

750:                                              ; preds = %748
  call void @llvm.memset.p0i8.i64(i8* nonnull align 1 %745, i8 0, i64 %744, i1 false) #25, !tbaa !14, !alias.scope !397
  br label %751

751:                                              ; preds = %750, %748
  %752 = load i8*, i8** %18, align 8, !tbaa !7
  switch i32 %724, label %757 [
    i32 0, label %758
    i32 2, label %753
    i32 3, label %758
    i32 4, label %754
    i32 6, label %755
    i32 255, label %756
  ]

753:                                              ; preds = %751
  br label %758

754:                                              ; preds = %751
  br label %758

755:                                              ; preds = %751
  br label %758

756:                                              ; preds = %751
  br label %758

757:                                              ; preds = %751
  br label %758

758:                                              ; preds = %757, %756, %755, %754, %753, %751, %751
  %759 = phi i32 [ 0, %757 ], [ 0, %756 ], [ 4, %755 ], [ 2, %754 ], [ 3, %753 ], [ 1, %751 ], [ 1, %751 ]
  %760 = mul i32 %759, %725
  %761 = icmp eq i32 %760, 0
  br i1 %761, label %2457, label %762

762:                                              ; preds = %758
  %763 = load i32, i32* %522, align 8, !tbaa !208
  %764 = icmp eq i32 %763, 0
  br i1 %764, label %765, label %824

765:                                              ; preds = %762
  %766 = icmp ult i32 %760, 8
  br i1 %766, label %767, label %821

767:                                              ; preds = %765
  %768 = mul i32 %760, %722
  %769 = add i32 %768, 7
  %770 = and i32 %769, -8
  %771 = icmp eq i32 %768, %770
  br i1 %771, label %821, label %772

772:                                              ; preds = %767
  %773 = call fastcc noundef i32 @_ZL8unfilterPhPKhjjj(i8* noundef %752, i8* noundef %752, i32 noundef %722, i32 noundef %723, i32 noundef %760) #25
  %774 = icmp eq i32 %773, 0
  br i1 %774, label %775, label %2457

775:                                              ; preds = %772
  %776 = zext i32 %768 to i64
  %777 = zext i32 %770 to i64
  %778 = icmp eq i32 %723, 0
  %779 = icmp eq i32 %768, 0
  %780 = or i1 %778, %779
  br i1 %780, label %2456, label %781

781:                                              ; preds = %775, %817
  %782 = phi i32 [ %819, %817 ], [ 0, %775 ]
  %783 = phi i64 [ %785, %817 ], [ 0, %775 ]
  %784 = phi i64 [ %818, %817 ], [ 0, %775 ]
  %785 = add nuw i64 %783, %776
  br label %786

786:                                              ; preds = %814, %781
  %787 = phi i64 [ %783, %781 ], [ %815, %814 ]
  %788 = phi i64 [ %784, %781 ], [ %795, %814 ]
  %789 = lshr i64 %788, 3
  %790 = getelementptr inbounds i8, i8* %752, i64 %789
  %791 = load i8, i8* %790, align 1, !tbaa !14
  %792 = trunc i64 %788 to i8
  %793 = and i8 %792, 7
  %794 = xor i8 %793, 7
  %795 = add nuw i64 %788, 1
  %796 = shl nuw i8 1, %794
  %797 = and i8 %796, %791
  %798 = icmp eq i8 %797, 0
  %799 = trunc i64 %787 to i8
  %800 = and i8 %799, 7
  %801 = xor i8 %800, 7
  %802 = shl nuw i8 1, %801
  br i1 %798, label %808, label %803

803:                                              ; preds = %786
  %804 = lshr i64 %787, 3
  %805 = getelementptr inbounds i8, i8* %745, i64 %804
  %806 = load i8, i8* %805, align 1, !tbaa !14
  %807 = or i8 %806, %802
  store i8 %807, i8* %805, align 1, !tbaa !14
  br label %814

808:                                              ; preds = %786
  %809 = xor i8 %802, -1
  %810 = lshr i64 %787, 3
  %811 = getelementptr inbounds i8, i8* %745, i64 %810
  %812 = load i8, i8* %811, align 1, !tbaa !14
  %813 = and i8 %812, %809
  store i8 %813, i8* %811, align 1, !tbaa !14
  br label %814

814:                                              ; preds = %808, %803
  %815 = add nuw i64 %787, 1
  %816 = icmp eq i64 %815, %785
  br i1 %816, label %817, label %786

817:                                              ; preds = %814
  %818 = add nuw i64 %784, %777
  %819 = add nuw i32 %782, 1
  %820 = icmp eq i32 %819, %723
  br i1 %820, label %2456, label %781

821:                                              ; preds = %767, %765
  %822 = call fastcc noundef i32 @_ZL8unfilterPhPKhjjj(i8* noundef nonnull %745, i8* noundef %752, i32 noundef %722, i32 noundef %723, i32 noundef %760) #25
  %823 = icmp eq i32 %822, 0
  br i1 %823, label %2456, label %2457

824:                                              ; preds = %762
  %825 = bitcast [7 x i32]* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 28, i8* nonnull %825) #25
  %826 = bitcast [7 x i32]* %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 28, i8* nonnull %826) #25
  %827 = bitcast [8 x i64]* %14 to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %827) #25
  %828 = bitcast [8 x i64]* %15 to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %828) #25
  %829 = bitcast [8 x i64]* %16 to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %829) #25
  %830 = getelementptr inbounds [7 x i32], [7 x i32]* %12, i64 0, i64 0
  %831 = getelementptr inbounds [7 x i32], [7 x i32]* %13, i64 0, i64 0
  %832 = getelementptr inbounds [8 x i64], [8 x i64]* %14, i64 0, i64 0
  %833 = getelementptr inbounds [8 x i64], [8 x i64]* %15, i64 0, i64 0
  %834 = getelementptr inbounds [8 x i64], [8 x i64]* %16, i64 0, i64 0
  call fastcc void @_ZL19Adam7_getpassvaluesPjS_PmS0_S0_jjj(i32* noundef nonnull %830, i32* noundef nonnull %831, i64* noundef nonnull %832, i64* noundef nonnull %833, i64* noundef nonnull %834, i32 noundef %722, i32 noundef %723, i32 noundef %760) #25
  %835 = icmp ult i32 %760, 8
  br i1 %835, label %845, label %836

836:                                              ; preds = %824
  %837 = load i64, i64* %833, align 16, !tbaa !3
  %838 = getelementptr inbounds i8, i8* %752, i64 %837
  %839 = load i64, i64* %832, align 16, !tbaa !3
  %840 = getelementptr inbounds i8, i8* %752, i64 %839
  %841 = load i32, i32* %830, align 16, !tbaa !9
  %842 = load i32, i32* %831, align 16, !tbaa !9
  %843 = call fastcc noundef i32 @_ZL8unfilterPhPKhjjj(i8* noundef %838, i8* noundef %840, i32 noundef %841, i32 noundef %842, i32 noundef %760) #25
  %844 = icmp eq i32 %843, 0
  br i1 %844, label %916, label %914

845:                                              ; preds = %824, %911
  %846 = phi i64 [ %912, %911 ], [ 0, %824 ]
  %847 = getelementptr inbounds [8 x i64], [8 x i64]* %15, i64 0, i64 %846
  %848 = load i64, i64* %847, align 8, !tbaa !3
  %849 = getelementptr inbounds i8, i8* %752, i64 %848
  %850 = getelementptr inbounds [8 x i64], [8 x i64]* %14, i64 0, i64 %846
  %851 = load i64, i64* %850, align 8, !tbaa !3
  %852 = getelementptr inbounds i8, i8* %752, i64 %851
  %853 = getelementptr inbounds [7 x i32], [7 x i32]* %12, i64 0, i64 %846
  %854 = load i32, i32* %853, align 4, !tbaa !9
  %855 = getelementptr inbounds [7 x i32], [7 x i32]* %13, i64 0, i64 %846
  %856 = load i32, i32* %855, align 4, !tbaa !9
  %857 = call fastcc noundef i32 @_ZL8unfilterPhPKhjjj(i8* noundef %849, i8* noundef %852, i32 noundef %854, i32 noundef %856, i32 noundef %760) #25
  %858 = icmp eq i32 %857, 0
  br i1 %858, label %859, label %914

859:                                              ; preds = %845
  %860 = getelementptr inbounds [8 x i64], [8 x i64]* %16, i64 0, i64 %846
  %861 = load i64, i64* %860, align 8, !tbaa !3
  %862 = getelementptr inbounds i8, i8* %752, i64 %861
  %863 = mul i32 %854, %760
  %864 = zext i32 %863 to i64
  %865 = add i32 %863, 7
  %866 = and i32 %865, -8
  %867 = zext i32 %866 to i64
  %868 = icmp eq i32 %856, 0
  %869 = icmp eq i32 %863, 0
  %870 = or i1 %868, %869
  br i1 %870, label %911, label %871

871:                                              ; preds = %859, %907
  %872 = phi i32 [ %909, %907 ], [ 0, %859 ]
  %873 = phi i64 [ %875, %907 ], [ 0, %859 ]
  %874 = phi i64 [ %908, %907 ], [ 0, %859 ]
  %875 = add nuw i64 %873, %864
  br label %876

876:                                              ; preds = %904, %871
  %877 = phi i64 [ %873, %871 ], [ %905, %904 ]
  %878 = phi i64 [ %874, %871 ], [ %885, %904 ]
  %879 = lshr i64 %878, 3
  %880 = getelementptr inbounds i8, i8* %849, i64 %879
  %881 = load i8, i8* %880, align 1, !tbaa !14
  %882 = trunc i64 %878 to i8
  %883 = and i8 %882, 7
  %884 = xor i8 %883, 7
  %885 = add nuw i64 %878, 1
  %886 = shl nuw i8 1, %884
  %887 = and i8 %886, %881
  %888 = icmp eq i8 %887, 0
  %889 = trunc i64 %877 to i8
  %890 = and i8 %889, 7
  %891 = xor i8 %890, 7
  %892 = shl nuw i8 1, %891
  br i1 %888, label %898, label %893

893:                                              ; preds = %876
  %894 = lshr i64 %877, 3
  %895 = getelementptr inbounds i8, i8* %862, i64 %894
  %896 = load i8, i8* %895, align 1, !tbaa !14
  %897 = or i8 %896, %892
  store i8 %897, i8* %895, align 1, !tbaa !14
  br label %904

898:                                              ; preds = %876
  %899 = xor i8 %892, -1
  %900 = lshr i64 %877, 3
  %901 = getelementptr inbounds i8, i8* %862, i64 %900
  %902 = load i8, i8* %901, align 1, !tbaa !14
  %903 = and i8 %902, %899
  store i8 %903, i8* %901, align 1, !tbaa !14
  br label %904

904:                                              ; preds = %898, %893
  %905 = add nuw i64 %877, 1
  %906 = icmp eq i64 %905, %875
  br i1 %906, label %907, label %876

907:                                              ; preds = %904
  %908 = add nuw i64 %874, %867
  %909 = add nuw i32 %872, 1
  %910 = icmp eq i32 %909, %856
  br i1 %910, label %911, label %871

911:                                              ; preds = %907, %859
  %912 = add nuw nsw i64 %846, 1
  %913 = icmp eq i64 %912, 7
  br i1 %913, label %1005, label %845

914:                                              ; preds = %845, %981, %968, %955, %942, %929, %916, %836
  %915 = phi i32 [ %843, %836 ], [ %927, %916 ], [ %940, %929 ], [ %953, %942 ], [ %966, %955 ], [ %979, %968 ], [ %992, %981 ], [ %857, %845 ]
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %829) #25
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %828) #25
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %827) #25
  call void @llvm.lifetime.end.p0i8(i64 28, i8* nonnull %826) #25
  call void @llvm.lifetime.end.p0i8(i64 28, i8* nonnull %825) #25
  br label %2457

916:                                              ; preds = %836
  %917 = getelementptr inbounds [8 x i64], [8 x i64]* %15, i64 0, i64 1
  %918 = load i64, i64* %917, align 8, !tbaa !3
  %919 = getelementptr inbounds i8, i8* %752, i64 %918
  %920 = getelementptr inbounds [8 x i64], [8 x i64]* %14, i64 0, i64 1
  %921 = load i64, i64* %920, align 8, !tbaa !3
  %922 = getelementptr inbounds i8, i8* %752, i64 %921
  %923 = getelementptr inbounds [7 x i32], [7 x i32]* %12, i64 0, i64 1
  %924 = load i32, i32* %923, align 4, !tbaa !9
  %925 = getelementptr inbounds [7 x i32], [7 x i32]* %13, i64 0, i64 1
  %926 = load i32, i32* %925, align 4, !tbaa !9
  %927 = call fastcc noundef i32 @_ZL8unfilterPhPKhjjj(i8* noundef %919, i8* noundef %922, i32 noundef %924, i32 noundef %926, i32 noundef %760) #25
  %928 = icmp eq i32 %927, 0
  br i1 %928, label %929, label %914

929:                                              ; preds = %916
  %930 = getelementptr inbounds [8 x i64], [8 x i64]* %15, i64 0, i64 2
  %931 = load i64, i64* %930, align 16, !tbaa !3
  %932 = getelementptr inbounds i8, i8* %752, i64 %931
  %933 = getelementptr inbounds [8 x i64], [8 x i64]* %14, i64 0, i64 2
  %934 = load i64, i64* %933, align 16, !tbaa !3
  %935 = getelementptr inbounds i8, i8* %752, i64 %934
  %936 = getelementptr inbounds [7 x i32], [7 x i32]* %12, i64 0, i64 2
  %937 = load i32, i32* %936, align 8, !tbaa !9
  %938 = getelementptr inbounds [7 x i32], [7 x i32]* %13, i64 0, i64 2
  %939 = load i32, i32* %938, align 8, !tbaa !9
  %940 = call fastcc noundef i32 @_ZL8unfilterPhPKhjjj(i8* noundef %932, i8* noundef %935, i32 noundef %937, i32 noundef %939, i32 noundef %760) #25
  %941 = icmp eq i32 %940, 0
  br i1 %941, label %942, label %914

942:                                              ; preds = %929
  %943 = getelementptr inbounds [8 x i64], [8 x i64]* %15, i64 0, i64 3
  %944 = load i64, i64* %943, align 8, !tbaa !3
  %945 = getelementptr inbounds i8, i8* %752, i64 %944
  %946 = getelementptr inbounds [8 x i64], [8 x i64]* %14, i64 0, i64 3
  %947 = load i64, i64* %946, align 8, !tbaa !3
  %948 = getelementptr inbounds i8, i8* %752, i64 %947
  %949 = getelementptr inbounds [7 x i32], [7 x i32]* %12, i64 0, i64 3
  %950 = load i32, i32* %949, align 4, !tbaa !9
  %951 = getelementptr inbounds [7 x i32], [7 x i32]* %13, i64 0, i64 3
  %952 = load i32, i32* %951, align 4, !tbaa !9
  %953 = call fastcc noundef i32 @_ZL8unfilterPhPKhjjj(i8* noundef %945, i8* noundef %948, i32 noundef %950, i32 noundef %952, i32 noundef %760) #25
  %954 = icmp eq i32 %953, 0
  br i1 %954, label %955, label %914

955:                                              ; preds = %942
  %956 = getelementptr inbounds [8 x i64], [8 x i64]* %15, i64 0, i64 4
  %957 = load i64, i64* %956, align 16, !tbaa !3
  %958 = getelementptr inbounds i8, i8* %752, i64 %957
  %959 = getelementptr inbounds [8 x i64], [8 x i64]* %14, i64 0, i64 4
  %960 = load i64, i64* %959, align 16, !tbaa !3
  %961 = getelementptr inbounds i8, i8* %752, i64 %960
  %962 = getelementptr inbounds [7 x i32], [7 x i32]* %12, i64 0, i64 4
  %963 = load i32, i32* %962, align 16, !tbaa !9
  %964 = getelementptr inbounds [7 x i32], [7 x i32]* %13, i64 0, i64 4
  %965 = load i32, i32* %964, align 16, !tbaa !9
  %966 = call fastcc noundef i32 @_ZL8unfilterPhPKhjjj(i8* noundef %958, i8* noundef %961, i32 noundef %963, i32 noundef %965, i32 noundef %760) #25
  %967 = icmp eq i32 %966, 0
  br i1 %967, label %968, label %914

968:                                              ; preds = %955
  %969 = getelementptr inbounds [8 x i64], [8 x i64]* %15, i64 0, i64 5
  %970 = load i64, i64* %969, align 8, !tbaa !3
  %971 = getelementptr inbounds i8, i8* %752, i64 %970
  %972 = getelementptr inbounds [8 x i64], [8 x i64]* %14, i64 0, i64 5
  %973 = load i64, i64* %972, align 8, !tbaa !3
  %974 = getelementptr inbounds i8, i8* %752, i64 %973
  %975 = getelementptr inbounds [7 x i32], [7 x i32]* %12, i64 0, i64 5
  %976 = load i32, i32* %975, align 4, !tbaa !9
  %977 = getelementptr inbounds [7 x i32], [7 x i32]* %13, i64 0, i64 5
  %978 = load i32, i32* %977, align 4, !tbaa !9
  %979 = call fastcc noundef i32 @_ZL8unfilterPhPKhjjj(i8* noundef %971, i8* noundef %974, i32 noundef %976, i32 noundef %978, i32 noundef %760) #25
  %980 = icmp eq i32 %979, 0
  br i1 %980, label %981, label %914

981:                                              ; preds = %968
  %982 = getelementptr inbounds [8 x i64], [8 x i64]* %15, i64 0, i64 6
  %983 = load i64, i64* %982, align 16, !tbaa !3
  %984 = getelementptr inbounds i8, i8* %752, i64 %983
  %985 = getelementptr inbounds [8 x i64], [8 x i64]* %14, i64 0, i64 6
  %986 = load i64, i64* %985, align 16, !tbaa !3
  %987 = getelementptr inbounds i8, i8* %752, i64 %986
  %988 = getelementptr inbounds [7 x i32], [7 x i32]* %12, i64 0, i64 6
  %989 = load i32, i32* %988, align 8, !tbaa !9
  %990 = getelementptr inbounds [7 x i32], [7 x i32]* %13, i64 0, i64 6
  %991 = load i32, i32* %990, align 8, !tbaa !9
  %992 = call fastcc noundef i32 @_ZL8unfilterPhPKhjjj(i8* noundef %984, i8* noundef %987, i32 noundef %989, i32 noundef %991, i32 noundef %760) #25
  %993 = icmp eq i32 %992, 0
  br i1 %993, label %994, label %914

994:                                              ; preds = %981
  %995 = bitcast [7 x i32]* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 28, i8* nonnull %995) #25
  %996 = bitcast [7 x i32]* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 28, i8* nonnull %996) #25
  %997 = bitcast [8 x i64]* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %997) #25
  %998 = bitcast [8 x i64]* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %998) #25
  %999 = bitcast [8 x i64]* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %999) #25
  %1000 = getelementptr inbounds [7 x i32], [7 x i32]* %7, i64 0, i64 0
  %1001 = getelementptr inbounds [7 x i32], [7 x i32]* %8, i64 0, i64 0
  %1002 = getelementptr inbounds [8 x i64], [8 x i64]* %9, i64 0, i64 0
  %1003 = getelementptr inbounds [8 x i64], [8 x i64]* %10, i64 0, i64 0
  %1004 = getelementptr inbounds [8 x i64], [8 x i64]* %11, i64 0, i64 0
  call fastcc void @_ZL19Adam7_getpassvaluesPjS_PmS0_S0_jjj(i32* noundef nonnull %1000, i32* noundef nonnull %1001, i64* noundef nonnull %1002, i64* noundef nonnull %1003, i64* noundef nonnull %1004, i32 noundef %722, i32 noundef %723, i32 noundef %760) #25
  br label %1108

1005:                                             ; preds = %911
  %1006 = bitcast [7 x i32]* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 28, i8* nonnull %1006) #25
  %1007 = bitcast [7 x i32]* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 28, i8* nonnull %1007) #25
  %1008 = bitcast [8 x i64]* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %1008) #25
  %1009 = bitcast [8 x i64]* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %1009) #25
  %1010 = bitcast [8 x i64]* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %1010) #25
  %1011 = getelementptr inbounds [7 x i32], [7 x i32]* %7, i64 0, i64 0
  %1012 = getelementptr inbounds [7 x i32], [7 x i32]* %8, i64 0, i64 0
  %1013 = getelementptr inbounds [8 x i64], [8 x i64]* %9, i64 0, i64 0
  %1014 = getelementptr inbounds [8 x i64], [8 x i64]* %10, i64 0, i64 0
  %1015 = getelementptr inbounds [8 x i64], [8 x i64]* %11, i64 0, i64 0
  call fastcc void @_ZL19Adam7_getpassvaluesPjS_PmS0_S0_jjj(i32* noundef nonnull %1011, i32* noundef nonnull %1012, i64* noundef nonnull %1013, i64* noundef nonnull %1014, i64* noundef nonnull %1015, i32 noundef %722, i32 noundef %723, i32 noundef %760) #25
  %1016 = icmp ugt i32 %760, 7
  br i1 %1016, label %1108, label %1017

1017:                                             ; preds = %1005
  %1018 = mul i32 %760, %722
  %1019 = zext i32 %1018 to i64
  %1020 = zext i32 %760 to i64
  br label %1021

1021:                                             ; preds = %1030, %1017
  %1022 = phi i64 [ %1031, %1030 ], [ 0, %1017 ]
  %1023 = getelementptr inbounds [7 x i32], [7 x i32]* %7, i64 0, i64 %1022
  %1024 = load i32, i32* %1023, align 4, !tbaa !9
  %1025 = getelementptr inbounds [7 x i32], [7 x i32]* %8, i64 0, i64 %1022
  %1026 = load i32, i32* %1025, align 4, !tbaa !9
  %1027 = icmp eq i32 %1026, 0
  %1028 = icmp eq i32 %1024, 0
  %1029 = select i1 %1027, i1 true, i1 %1028
  br i1 %1029, label %1030, label %1033

1030:                                             ; preds = %1105, %1021
  %1031 = add nuw nsw i64 %1022, 1
  %1032 = icmp eq i64 %1031, 7
  br i1 %1032, label %2450, label %1021

1033:                                             ; preds = %1021
  %1034 = getelementptr inbounds [7 x i32], [7 x i32]* @_ZL8ADAM7_DX, i64 0, i64 %1022
  %1035 = getelementptr inbounds [7 x i32], [7 x i32]* @_ZL8ADAM7_IX, i64 0, i64 %1022
  %1036 = getelementptr inbounds [7 x i32], [7 x i32]* @_ZL8ADAM7_DY, i64 0, i64 %1022
  %1037 = getelementptr inbounds [7 x i32], [7 x i32]* @_ZL8ADAM7_IY, i64 0, i64 %1022
  %1038 = getelementptr inbounds [8 x i64], [8 x i64]* %11, i64 0, i64 %1022
  %1039 = load i64, i64* %1038, align 8, !tbaa !3
  %1040 = shl i64 %1039, 3
  %1041 = load i32, i32* %1037, align 4, !tbaa !9
  %1042 = zext i32 %1041 to i64
  %1043 = load i32, i32* %1036, align 4, !tbaa !9
  %1044 = zext i32 %1043 to i64
  %1045 = load i32, i32* %1035, align 4, !tbaa !9
  %1046 = zext i32 %1045 to i64
  %1047 = load i32, i32* %1034, align 4, !tbaa !9
  %1048 = zext i32 %1047 to i64
  %1049 = zext i32 %1026 to i64
  %1050 = zext i32 %1024 to i64
  br label %1051

1051:                                             ; preds = %1105, %1033
  %1052 = phi i64 [ %1106, %1105 ], [ 0, %1033 ]
  %1053 = trunc i64 %1052 to i32
  %1054 = mul i32 %1024, %1053
  %1055 = mul nuw i64 %1052, %1044
  %1056 = add nuw i64 %1055, %1042
  %1057 = mul i64 %1056, %1019
  br label %1058

1058:                                             ; preds = %1102, %1051
  %1059 = phi i64 [ %1103, %1102 ], [ 0, %1051 ]
  %1060 = trunc i64 %1059 to i32
  %1061 = add i32 %1054, %1060
  %1062 = mul i32 %1061, %760
  %1063 = zext i32 %1062 to i64
  %1064 = add i64 %1040, %1063
  %1065 = mul nuw i64 %1059, %1048
  %1066 = add nuw i64 %1065, %1046
  %1067 = mul i64 %1066, %1020
  %1068 = add i64 %1067, %1057
  br label %1069

1069:                                             ; preds = %1098, %1058
  %1070 = phi i32 [ 0, %1058 ], [ %1100, %1098 ]
  %1071 = phi i64 [ %1064, %1058 ], [ %1079, %1098 ]
  %1072 = phi i64 [ %1068, %1058 ], [ %1099, %1098 ]
  %1073 = lshr i64 %1071, 3
  %1074 = getelementptr inbounds i8, i8* %752, i64 %1073
  %1075 = load i8, i8* %1074, align 1, !tbaa !14
  %1076 = trunc i64 %1071 to i8
  %1077 = and i8 %1076, 7
  %1078 = xor i8 %1077, 7
  %1079 = add i64 %1071, 1
  %1080 = shl nuw i8 1, %1078
  %1081 = and i8 %1080, %1075
  %1082 = icmp eq i8 %1081, 0
  %1083 = trunc i64 %1072 to i8
  %1084 = and i8 %1083, 7
  %1085 = xor i8 %1084, 7
  %1086 = shl nuw i8 1, %1085
  br i1 %1082, label %1092, label %1087

1087:                                             ; preds = %1069
  %1088 = lshr i64 %1072, 3
  %1089 = getelementptr inbounds i8, i8* %745, i64 %1088
  %1090 = load i8, i8* %1089, align 1, !tbaa !14
  %1091 = or i8 %1090, %1086
  store i8 %1091, i8* %1089, align 1, !tbaa !14
  br label %1098

1092:                                             ; preds = %1069
  %1093 = xor i8 %1086, -1
  %1094 = lshr i64 %1072, 3
  %1095 = getelementptr inbounds i8, i8* %745, i64 %1094
  %1096 = load i8, i8* %1095, align 1, !tbaa !14
  %1097 = and i8 %1096, %1093
  store i8 %1097, i8* %1095, align 1, !tbaa !14
  br label %1098

1098:                                             ; preds = %1092, %1087
  %1099 = add i64 %1072, 1
  %1100 = add nuw i32 %1070, 1
  %1101 = icmp eq i32 %1100, %760
  br i1 %1101, label %1102, label %1069

1102:                                             ; preds = %1098
  %1103 = add nuw nsw i64 %1059, 1
  %1104 = icmp eq i64 %1103, %1050
  br i1 %1104, label %1105, label %1058

1105:                                             ; preds = %1102
  %1106 = add nuw nsw i64 %1052, 1
  %1107 = icmp eq i64 %1106, %1049
  br i1 %1107, label %1030, label %1051

1108:                                             ; preds = %1005, %994
  %1109 = getelementptr inbounds [7 x i32], [7 x i32]* %8, i64 0, i64 0
  %1110 = getelementptr inbounds [8 x i64], [8 x i64]* %11, i64 0, i64 0
  %1111 = lshr i32 %760, 3
  %1112 = zext i32 %1111 to i64
  %1113 = load i32, i32* %1109, align 16, !tbaa !9
  %1114 = icmp eq i32 %1113, 0
  br i1 %1114, label %1115, label %2268

1115:                                             ; preds = %2447, %2268, %1108
  %1116 = getelementptr inbounds [7 x i32], [7 x i32]* %8, i64 0, i64 1
  %1117 = load i32, i32* %1116, align 4, !tbaa !9
  %1118 = icmp eq i32 %1117, 0
  br i1 %1118, label %1306, label %1119

1119:                                             ; preds = %1115
  %1120 = getelementptr inbounds [7 x i32], [7 x i32]* %7, i64 0, i64 1
  %1121 = load i32, i32* %1120, align 4, !tbaa !9
  %1122 = icmp eq i32 %1121, 0
  br i1 %1122, label %1306, label %1123

1123:                                             ; preds = %1119
  %1124 = getelementptr inbounds [8 x i64], [8 x i64]* %11, i64 0, i64 1
  %1125 = load i64, i64* %1124, align 8, !tbaa !3
  %1126 = zext i32 %1117 to i64
  %1127 = zext i32 %1121 to i64
  %1128 = shl nuw nsw i64 %1112, 2
  %1129 = mul nuw nsw i64 %1112, %735
  %1130 = shl nuw i64 %1129, 3
  %1131 = shl nuw nsw i64 %1112, 3
  %1132 = mul nuw nsw i64 %1112, 5
  %1133 = getelementptr i8, i8* %752, i64 %1125
  %1134 = getelementptr i8, i8* %752, i64 %1125
  %1135 = lshr i32 %760, 3
  %1136 = and i32 %1135, 536870880
  %1137 = zext i32 %1136 to i64
  %1138 = add nsw i64 %1137, -32
  %1139 = lshr exact i64 %1138, 5
  %1140 = add nuw nsw i64 %1139, 1
  %1141 = icmp ult i32 %760, 64
  %1142 = icmp ult i32 %760, 256
  %1143 = and i64 %1112, 536870880
  %1144 = and i64 %1140, 1
  %1145 = icmp eq i64 %1138, 0
  %1146 = and i64 %1140, 1152921504606846974
  %1147 = icmp eq i64 %1144, 0
  %1148 = icmp eq i64 %1143, %1112
  %1149 = and i64 %1112, 24
  %1150 = icmp eq i64 %1149, 0
  %1151 = and i64 %1112, 536870904
  %1152 = icmp eq i64 %1151, %1112
  %1153 = and i64 %1112, 3
  %1154 = icmp eq i64 %1153, 0
  br label %1155

1155:                                             ; preds = %1303, %1123
  %1156 = phi i64 [ %1304, %1303 ], [ 0, %1123 ]
  %1157 = mul i64 %1130, %1156
  %1158 = add i64 %1128, %1157
  %1159 = add i64 %1132, %1157
  %1160 = mul i64 %1156, %1127
  %1161 = trunc i64 %1156 to i32
  %1162 = mul i32 %1121, %1161
  %1163 = mul nuw i64 %1156, %735
  br label %1164

1164:                                             ; preds = %1300, %1155
  %1165 = phi i64 [ %1301, %1300 ], [ 0, %1155 ]
  %1166 = mul i64 %1131, %1165
  %1167 = add i64 %1160, %1165
  %1168 = and i64 %1167, 4294967295
  %1169 = trunc i64 %1165 to i32
  %1170 = add i32 %1162, %1169
  %1171 = zext i32 %1170 to i64
  %1172 = mul nuw nsw i64 %1171, %1112
  %1173 = add i64 %1172, %1125
  %1174 = add nuw i64 %1165, %1163
  %1175 = shl i64 %1174, 3
  %1176 = or i64 %1175, 4
  %1177 = mul i64 %1176, %1112
  br i1 %1141, label %1255, label %1178

1178:                                             ; preds = %1164
  %1179 = add nuw nsw i64 %1168, 1
  %1180 = mul nuw nsw i64 %1179, %1112
  %1181 = getelementptr i8, i8* %1134, i64 %1180
  %1182 = mul nuw nsw i64 %1168, %1112
  %1183 = getelementptr i8, i8* %1133, i64 %1182
  %1184 = add i64 %1159, %1166
  %1185 = getelementptr i8, i8* %745, i64 %1184
  %1186 = add i64 %1158, %1166
  %1187 = getelementptr i8, i8* %745, i64 %1186
  %1188 = icmp ult i8* %1187, %1181
  %1189 = icmp ult i8* %1183, %1185
  %1190 = and i1 %1188, %1189
  br i1 %1190, label %1255, label %1191

1191:                                             ; preds = %1178
  br i1 %1142, label %1241, label %1192

1192:                                             ; preds = %1191
  br i1 %1145, label %1224, label %1193

1193:                                             ; preds = %1192, %1193
  %1194 = phi i64 [ %1221, %1193 ], [ 0, %1192 ]
  %1195 = phi i64 [ %1222, %1193 ], [ 0, %1192 ]
  %1196 = add i64 %1173, %1194
  %1197 = getelementptr inbounds i8, i8* %752, i64 %1196
  %1198 = bitcast i8* %1197 to <16 x i8>*
  %1199 = load <16 x i8>, <16 x i8>* %1198, align 1, !tbaa !14, !alias.scope !400
  %1200 = getelementptr inbounds i8, i8* %1197, i64 16
  %1201 = bitcast i8* %1200 to <16 x i8>*
  %1202 = load <16 x i8>, <16 x i8>* %1201, align 1, !tbaa !14, !alias.scope !400
  %1203 = add i64 %1194, %1177
  %1204 = getelementptr inbounds i8, i8* %745, i64 %1203
  %1205 = bitcast i8* %1204 to <16 x i8>*
  store <16 x i8> %1199, <16 x i8>* %1205, align 1, !tbaa !14, !alias.scope !403, !noalias !400
  %1206 = getelementptr inbounds i8, i8* %1204, i64 16
  %1207 = bitcast i8* %1206 to <16 x i8>*
  store <16 x i8> %1202, <16 x i8>* %1207, align 1, !tbaa !14, !alias.scope !403, !noalias !400
  %1208 = or i64 %1194, 32
  %1209 = add i64 %1173, %1208
  %1210 = getelementptr inbounds i8, i8* %752, i64 %1209
  %1211 = bitcast i8* %1210 to <16 x i8>*
  %1212 = load <16 x i8>, <16 x i8>* %1211, align 1, !tbaa !14, !alias.scope !400
  %1213 = getelementptr inbounds i8, i8* %1210, i64 16
  %1214 = bitcast i8* %1213 to <16 x i8>*
  %1215 = load <16 x i8>, <16 x i8>* %1214, align 1, !tbaa !14, !alias.scope !400
  %1216 = add i64 %1208, %1177
  %1217 = getelementptr inbounds i8, i8* %745, i64 %1216
  %1218 = bitcast i8* %1217 to <16 x i8>*
  store <16 x i8> %1212, <16 x i8>* %1218, align 1, !tbaa !14, !alias.scope !403, !noalias !400
  %1219 = getelementptr inbounds i8, i8* %1217, i64 16
  %1220 = bitcast i8* %1219 to <16 x i8>*
  store <16 x i8> %1215, <16 x i8>* %1220, align 1, !tbaa !14, !alias.scope !403, !noalias !400
  %1221 = add nuw i64 %1194, 64
  %1222 = add i64 %1195, 2
  %1223 = icmp eq i64 %1222, %1146
  br i1 %1223, label %1224, label %1193, !llvm.loop !405

1224:                                             ; preds = %1193, %1192
  %1225 = phi i64 [ 0, %1192 ], [ %1221, %1193 ]
  br i1 %1147, label %1239, label %1226

1226:                                             ; preds = %1224
  %1227 = add i64 %1173, %1225
  %1228 = getelementptr inbounds i8, i8* %752, i64 %1227
  %1229 = bitcast i8* %1228 to <16 x i8>*
  %1230 = load <16 x i8>, <16 x i8>* %1229, align 1, !tbaa !14, !alias.scope !400
  %1231 = getelementptr inbounds i8, i8* %1228, i64 16
  %1232 = bitcast i8* %1231 to <16 x i8>*
  %1233 = load <16 x i8>, <16 x i8>* %1232, align 1, !tbaa !14, !alias.scope !400
  %1234 = add i64 %1225, %1177
  %1235 = getelementptr inbounds i8, i8* %745, i64 %1234
  %1236 = bitcast i8* %1235 to <16 x i8>*
  store <16 x i8> %1230, <16 x i8>* %1236, align 1, !tbaa !14, !alias.scope !403, !noalias !400
  %1237 = getelementptr inbounds i8, i8* %1235, i64 16
  %1238 = bitcast i8* %1237 to <16 x i8>*
  store <16 x i8> %1233, <16 x i8>* %1238, align 1, !tbaa !14, !alias.scope !403, !noalias !400
  br label %1239

1239:                                             ; preds = %1224, %1226
  br i1 %1148, label %1300, label %1240

1240:                                             ; preds = %1239
  br i1 %1150, label %1255, label %1241

1241:                                             ; preds = %1191, %1240
  %1242 = phi i64 [ %1143, %1240 ], [ 0, %1191 ]
  br label %1243

1243:                                             ; preds = %1243, %1241
  %1244 = phi i64 [ %1242, %1241 ], [ %1252, %1243 ]
  %1245 = add i64 %1173, %1244
  %1246 = getelementptr inbounds i8, i8* %752, i64 %1245
  %1247 = bitcast i8* %1246 to <8 x i8>*
  %1248 = load <8 x i8>, <8 x i8>* %1247, align 1, !tbaa !14
  %1249 = add i64 %1244, %1177
  %1250 = getelementptr inbounds i8, i8* %745, i64 %1249
  %1251 = bitcast i8* %1250 to <8 x i8>*
  store <8 x i8> %1248, <8 x i8>* %1251, align 1, !tbaa !14
  %1252 = add nuw i64 %1244, 8
  %1253 = icmp eq i64 %1252, %1151
  br i1 %1253, label %1254, label %1243, !llvm.loop !406

1254:                                             ; preds = %1243
  br i1 %1152, label %1300, label %1255

1255:                                             ; preds = %1178, %1164, %1240, %1254
  %1256 = phi i64 [ 0, %1164 ], [ 0, %1178 ], [ %1143, %1240 ], [ %1151, %1254 ]
  %1257 = xor i64 %1256, -1
  %1258 = add nsw i64 %1257, %1112
  br i1 %1154, label %1270, label %1259

1259:                                             ; preds = %1255, %1259
  %1260 = phi i64 [ %1267, %1259 ], [ %1256, %1255 ]
  %1261 = phi i64 [ %1268, %1259 ], [ 0, %1255 ]
  %1262 = add i64 %1173, %1260
  %1263 = getelementptr inbounds i8, i8* %752, i64 %1262
  %1264 = load i8, i8* %1263, align 1, !tbaa !14
  %1265 = add i64 %1260, %1177
  %1266 = getelementptr inbounds i8, i8* %745, i64 %1265
  store i8 %1264, i8* %1266, align 1, !tbaa !14
  %1267 = add nuw nsw i64 %1260, 1
  %1268 = add i64 %1261, 1
  %1269 = icmp eq i64 %1268, %1153
  br i1 %1269, label %1270, label %1259, !llvm.loop !407

1270:                                             ; preds = %1259, %1255
  %1271 = phi i64 [ %1256, %1255 ], [ %1267, %1259 ]
  %1272 = icmp ult i64 %1258, 3
  br i1 %1272, label %1300, label %1273

1273:                                             ; preds = %1270, %1273
  %1274 = phi i64 [ %1298, %1273 ], [ %1271, %1270 ]
  %1275 = add i64 %1173, %1274
  %1276 = getelementptr inbounds i8, i8* %752, i64 %1275
  %1277 = load i8, i8* %1276, align 1, !tbaa !14
  %1278 = add i64 %1274, %1177
  %1279 = getelementptr inbounds i8, i8* %745, i64 %1278
  store i8 %1277, i8* %1279, align 1, !tbaa !14
  %1280 = add nuw nsw i64 %1274, 1
  %1281 = add i64 %1173, %1280
  %1282 = getelementptr inbounds i8, i8* %752, i64 %1281
  %1283 = load i8, i8* %1282, align 1, !tbaa !14
  %1284 = add i64 %1280, %1177
  %1285 = getelementptr inbounds i8, i8* %745, i64 %1284
  store i8 %1283, i8* %1285, align 1, !tbaa !14
  %1286 = add nuw nsw i64 %1274, 2
  %1287 = add i64 %1173, %1286
  %1288 = getelementptr inbounds i8, i8* %752, i64 %1287
  %1289 = load i8, i8* %1288, align 1, !tbaa !14
  %1290 = add i64 %1286, %1177
  %1291 = getelementptr inbounds i8, i8* %745, i64 %1290
  store i8 %1289, i8* %1291, align 1, !tbaa !14
  %1292 = add nuw nsw i64 %1274, 3
  %1293 = add i64 %1173, %1292
  %1294 = getelementptr inbounds i8, i8* %752, i64 %1293
  %1295 = load i8, i8* %1294, align 1, !tbaa !14
  %1296 = add i64 %1292, %1177
  %1297 = getelementptr inbounds i8, i8* %745, i64 %1296
  store i8 %1295, i8* %1297, align 1, !tbaa !14
  %1298 = add nuw nsw i64 %1274, 4
  %1299 = icmp eq i64 %1298, %1112
  br i1 %1299, label %1300, label %1273, !llvm.loop !408

1300:                                             ; preds = %1270, %1273, %1254, %1239
  %1301 = add nuw nsw i64 %1165, 1
  %1302 = icmp eq i64 %1301, %1127
  br i1 %1302, label %1303, label %1164

1303:                                             ; preds = %1300
  %1304 = add nuw nsw i64 %1156, 1
  %1305 = icmp eq i64 %1304, %1126
  br i1 %1305, label %1306, label %1155

1306:                                             ; preds = %1303, %1119, %1115
  %1307 = getelementptr inbounds [7 x i32], [7 x i32]* %8, i64 0, i64 2
  %1308 = load i32, i32* %1307, align 8, !tbaa !9
  %1309 = icmp eq i32 %1308, 0
  br i1 %1309, label %1501, label %1310

1310:                                             ; preds = %1306
  %1311 = getelementptr inbounds [7 x i32], [7 x i32]* %7, i64 0, i64 2
  %1312 = load i32, i32* %1311, align 8, !tbaa !9
  %1313 = icmp eq i32 %1312, 0
  br i1 %1313, label %1501, label %1314

1314:                                             ; preds = %1310
  %1315 = getelementptr inbounds [8 x i64], [8 x i64]* %11, i64 0, i64 2
  %1316 = load i64, i64* %1315, align 16, !tbaa !3
  %1317 = zext i32 %1308 to i64
  %1318 = zext i32 %1312 to i64
  %1319 = mul nuw nsw i64 %1112, %735
  %1320 = shl nuw i64 %1319, 2
  %1321 = mul nuw nsw i64 %1112, %735
  %1322 = shl nuw i64 %1321, 3
  %1323 = shl nuw nsw i64 %1112, 2
  %1324 = shl nuw nsw i64 %735, 2
  %1325 = or i64 %1324, 1
  %1326 = mul nuw nsw i64 %1325, %1112
  %1327 = getelementptr i8, i8* %752, i64 %1316
  %1328 = getelementptr i8, i8* %752, i64 %1316
  %1329 = lshr i32 %760, 3
  %1330 = and i32 %1329, 536870880
  %1331 = zext i32 %1330 to i64
  %1332 = add nsw i64 %1331, -32
  %1333 = lshr exact i64 %1332, 5
  %1334 = add nuw nsw i64 %1333, 1
  %1335 = icmp ult i32 %760, 64
  %1336 = icmp ult i32 %760, 256
  %1337 = and i64 %1112, 536870880
  %1338 = and i64 %1334, 1
  %1339 = icmp eq i64 %1332, 0
  %1340 = and i64 %1334, 1152921504606846974
  %1341 = icmp eq i64 %1338, 0
  %1342 = icmp eq i64 %1337, %1112
  %1343 = and i64 %1112, 24
  %1344 = icmp eq i64 %1343, 0
  %1345 = and i64 %1112, 536870904
  %1346 = icmp eq i64 %1345, %1112
  %1347 = and i64 %1112, 3
  %1348 = icmp eq i64 %1347, 0
  br label %1349

1349:                                             ; preds = %1498, %1314
  %1350 = phi i64 [ %1499, %1498 ], [ 0, %1314 ]
  %1351 = mul i64 %1322, %1350
  %1352 = add i64 %1320, %1351
  %1353 = add i64 %1326, %1351
  %1354 = mul i64 %1350, %1318
  %1355 = trunc i64 %1350 to i32
  %1356 = mul i32 %1312, %1355
  %1357 = shl nuw nsw i64 %1350, 3
  %1358 = or i64 %1357, 4
  %1359 = mul i64 %1358, %735
  br label %1360

1360:                                             ; preds = %1495, %1349
  %1361 = phi i64 [ %1496, %1495 ], [ 0, %1349 ]
  %1362 = mul i64 %1323, %1361
  %1363 = add i64 %1354, %1361
  %1364 = and i64 %1363, 4294967295
  %1365 = trunc i64 %1361 to i32
  %1366 = add i32 %1356, %1365
  %1367 = zext i32 %1366 to i64
  %1368 = mul nuw nsw i64 %1367, %1112
  %1369 = add i64 %1368, %1316
  %1370 = shl nuw nsw i64 %1361, 2
  %1371 = add i64 %1370, %1359
  %1372 = mul i64 %1371, %1112
  br i1 %1335, label %1450, label %1373

1373:                                             ; preds = %1360
  %1374 = add nuw nsw i64 %1364, 1
  %1375 = mul nuw nsw i64 %1374, %1112
  %1376 = getelementptr i8, i8* %1328, i64 %1375
  %1377 = mul nuw nsw i64 %1364, %1112
  %1378 = getelementptr i8, i8* %1327, i64 %1377
  %1379 = add i64 %1353, %1362
  %1380 = getelementptr i8, i8* %745, i64 %1379
  %1381 = add i64 %1352, %1362
  %1382 = getelementptr i8, i8* %745, i64 %1381
  %1383 = icmp ult i8* %1382, %1376
  %1384 = icmp ult i8* %1378, %1380
  %1385 = and i1 %1383, %1384
  br i1 %1385, label %1450, label %1386

1386:                                             ; preds = %1373
  br i1 %1336, label %1436, label %1387

1387:                                             ; preds = %1386
  br i1 %1339, label %1419, label %1388

1388:                                             ; preds = %1387, %1388
  %1389 = phi i64 [ %1416, %1388 ], [ 0, %1387 ]
  %1390 = phi i64 [ %1417, %1388 ], [ 0, %1387 ]
  %1391 = add i64 %1369, %1389
  %1392 = getelementptr inbounds i8, i8* %752, i64 %1391
  %1393 = bitcast i8* %1392 to <16 x i8>*
  %1394 = load <16 x i8>, <16 x i8>* %1393, align 1, !tbaa !14, !alias.scope !409
  %1395 = getelementptr inbounds i8, i8* %1392, i64 16
  %1396 = bitcast i8* %1395 to <16 x i8>*
  %1397 = load <16 x i8>, <16 x i8>* %1396, align 1, !tbaa !14, !alias.scope !409
  %1398 = add i64 %1389, %1372
  %1399 = getelementptr inbounds i8, i8* %745, i64 %1398
  %1400 = bitcast i8* %1399 to <16 x i8>*
  store <16 x i8> %1394, <16 x i8>* %1400, align 1, !tbaa !14, !alias.scope !412, !noalias !409
  %1401 = getelementptr inbounds i8, i8* %1399, i64 16
  %1402 = bitcast i8* %1401 to <16 x i8>*
  store <16 x i8> %1397, <16 x i8>* %1402, align 1, !tbaa !14, !alias.scope !412, !noalias !409
  %1403 = or i64 %1389, 32
  %1404 = add i64 %1369, %1403
  %1405 = getelementptr inbounds i8, i8* %752, i64 %1404
  %1406 = bitcast i8* %1405 to <16 x i8>*
  %1407 = load <16 x i8>, <16 x i8>* %1406, align 1, !tbaa !14, !alias.scope !409
  %1408 = getelementptr inbounds i8, i8* %1405, i64 16
  %1409 = bitcast i8* %1408 to <16 x i8>*
  %1410 = load <16 x i8>, <16 x i8>* %1409, align 1, !tbaa !14, !alias.scope !409
  %1411 = add i64 %1403, %1372
  %1412 = getelementptr inbounds i8, i8* %745, i64 %1411
  %1413 = bitcast i8* %1412 to <16 x i8>*
  store <16 x i8> %1407, <16 x i8>* %1413, align 1, !tbaa !14, !alias.scope !412, !noalias !409
  %1414 = getelementptr inbounds i8, i8* %1412, i64 16
  %1415 = bitcast i8* %1414 to <16 x i8>*
  store <16 x i8> %1410, <16 x i8>* %1415, align 1, !tbaa !14, !alias.scope !412, !noalias !409
  %1416 = add nuw i64 %1389, 64
  %1417 = add i64 %1390, 2
  %1418 = icmp eq i64 %1417, %1340
  br i1 %1418, label %1419, label %1388, !llvm.loop !414

1419:                                             ; preds = %1388, %1387
  %1420 = phi i64 [ 0, %1387 ], [ %1416, %1388 ]
  br i1 %1341, label %1434, label %1421

1421:                                             ; preds = %1419
  %1422 = add i64 %1369, %1420
  %1423 = getelementptr inbounds i8, i8* %752, i64 %1422
  %1424 = bitcast i8* %1423 to <16 x i8>*
  %1425 = load <16 x i8>, <16 x i8>* %1424, align 1, !tbaa !14, !alias.scope !409
  %1426 = getelementptr inbounds i8, i8* %1423, i64 16
  %1427 = bitcast i8* %1426 to <16 x i8>*
  %1428 = load <16 x i8>, <16 x i8>* %1427, align 1, !tbaa !14, !alias.scope !409
  %1429 = add i64 %1420, %1372
  %1430 = getelementptr inbounds i8, i8* %745, i64 %1429
  %1431 = bitcast i8* %1430 to <16 x i8>*
  store <16 x i8> %1425, <16 x i8>* %1431, align 1, !tbaa !14, !alias.scope !412, !noalias !409
  %1432 = getelementptr inbounds i8, i8* %1430, i64 16
  %1433 = bitcast i8* %1432 to <16 x i8>*
  store <16 x i8> %1428, <16 x i8>* %1433, align 1, !tbaa !14, !alias.scope !412, !noalias !409
  br label %1434

1434:                                             ; preds = %1419, %1421
  br i1 %1342, label %1495, label %1435

1435:                                             ; preds = %1434
  br i1 %1344, label %1450, label %1436

1436:                                             ; preds = %1386, %1435
  %1437 = phi i64 [ %1337, %1435 ], [ 0, %1386 ]
  br label %1438

1438:                                             ; preds = %1438, %1436
  %1439 = phi i64 [ %1437, %1436 ], [ %1447, %1438 ]
  %1440 = add i64 %1369, %1439
  %1441 = getelementptr inbounds i8, i8* %752, i64 %1440
  %1442 = bitcast i8* %1441 to <8 x i8>*
  %1443 = load <8 x i8>, <8 x i8>* %1442, align 1, !tbaa !14
  %1444 = add i64 %1439, %1372
  %1445 = getelementptr inbounds i8, i8* %745, i64 %1444
  %1446 = bitcast i8* %1445 to <8 x i8>*
  store <8 x i8> %1443, <8 x i8>* %1446, align 1, !tbaa !14
  %1447 = add nuw i64 %1439, 8
  %1448 = icmp eq i64 %1447, %1345
  br i1 %1448, label %1449, label %1438, !llvm.loop !415

1449:                                             ; preds = %1438
  br i1 %1346, label %1495, label %1450

1450:                                             ; preds = %1373, %1360, %1435, %1449
  %1451 = phi i64 [ 0, %1360 ], [ 0, %1373 ], [ %1337, %1435 ], [ %1345, %1449 ]
  %1452 = xor i64 %1451, -1
  %1453 = add nsw i64 %1452, %1112
  br i1 %1348, label %1465, label %1454

1454:                                             ; preds = %1450, %1454
  %1455 = phi i64 [ %1462, %1454 ], [ %1451, %1450 ]
  %1456 = phi i64 [ %1463, %1454 ], [ 0, %1450 ]
  %1457 = add i64 %1369, %1455
  %1458 = getelementptr inbounds i8, i8* %752, i64 %1457
  %1459 = load i8, i8* %1458, align 1, !tbaa !14
  %1460 = add i64 %1455, %1372
  %1461 = getelementptr inbounds i8, i8* %745, i64 %1460
  store i8 %1459, i8* %1461, align 1, !tbaa !14
  %1462 = add nuw nsw i64 %1455, 1
  %1463 = add i64 %1456, 1
  %1464 = icmp eq i64 %1463, %1347
  br i1 %1464, label %1465, label %1454, !llvm.loop !416

1465:                                             ; preds = %1454, %1450
  %1466 = phi i64 [ %1451, %1450 ], [ %1462, %1454 ]
  %1467 = icmp ult i64 %1453, 3
  br i1 %1467, label %1495, label %1468

1468:                                             ; preds = %1465, %1468
  %1469 = phi i64 [ %1493, %1468 ], [ %1466, %1465 ]
  %1470 = add i64 %1369, %1469
  %1471 = getelementptr inbounds i8, i8* %752, i64 %1470
  %1472 = load i8, i8* %1471, align 1, !tbaa !14
  %1473 = add i64 %1469, %1372
  %1474 = getelementptr inbounds i8, i8* %745, i64 %1473
  store i8 %1472, i8* %1474, align 1, !tbaa !14
  %1475 = add nuw nsw i64 %1469, 1
  %1476 = add i64 %1369, %1475
  %1477 = getelementptr inbounds i8, i8* %752, i64 %1476
  %1478 = load i8, i8* %1477, align 1, !tbaa !14
  %1479 = add i64 %1475, %1372
  %1480 = getelementptr inbounds i8, i8* %745, i64 %1479
  store i8 %1478, i8* %1480, align 1, !tbaa !14
  %1481 = add nuw nsw i64 %1469, 2
  %1482 = add i64 %1369, %1481
  %1483 = getelementptr inbounds i8, i8* %752, i64 %1482
  %1484 = load i8, i8* %1483, align 1, !tbaa !14
  %1485 = add i64 %1481, %1372
  %1486 = getelementptr inbounds i8, i8* %745, i64 %1485
  store i8 %1484, i8* %1486, align 1, !tbaa !14
  %1487 = add nuw nsw i64 %1469, 3
  %1488 = add i64 %1369, %1487
  %1489 = getelementptr inbounds i8, i8* %752, i64 %1488
  %1490 = load i8, i8* %1489, align 1, !tbaa !14
  %1491 = add i64 %1487, %1372
  %1492 = getelementptr inbounds i8, i8* %745, i64 %1491
  store i8 %1490, i8* %1492, align 1, !tbaa !14
  %1493 = add nuw nsw i64 %1469, 4
  %1494 = icmp eq i64 %1493, %1112
  br i1 %1494, label %1495, label %1468, !llvm.loop !417

1495:                                             ; preds = %1465, %1468, %1449, %1434
  %1496 = add nuw nsw i64 %1361, 1
  %1497 = icmp eq i64 %1496, %1318
  br i1 %1497, label %1498, label %1360

1498:                                             ; preds = %1495
  %1499 = add nuw nsw i64 %1350, 1
  %1500 = icmp eq i64 %1499, %1317
  br i1 %1500, label %1501, label %1349

1501:                                             ; preds = %1498, %1310, %1306
  %1502 = getelementptr inbounds [7 x i32], [7 x i32]* %8, i64 0, i64 3
  %1503 = load i32, i32* %1502, align 4, !tbaa !9
  %1504 = icmp eq i32 %1503, 0
  br i1 %1504, label %1692, label %1505

1505:                                             ; preds = %1501
  %1506 = getelementptr inbounds [7 x i32], [7 x i32]* %7, i64 0, i64 3
  %1507 = load i32, i32* %1506, align 4, !tbaa !9
  %1508 = icmp eq i32 %1507, 0
  br i1 %1508, label %1692, label %1509

1509:                                             ; preds = %1505
  %1510 = getelementptr inbounds [8 x i64], [8 x i64]* %11, i64 0, i64 3
  %1511 = load i64, i64* %1510, align 8, !tbaa !3
  %1512 = zext i32 %1503 to i64
  %1513 = zext i32 %1507 to i64
  %1514 = shl nuw nsw i64 %1112, 1
  %1515 = mul nuw nsw i64 %1112, %735
  %1516 = shl nuw i64 %1515, 2
  %1517 = shl nuw nsw i64 %1112, 2
  %1518 = mul nuw nsw i64 %1112, 3
  %1519 = getelementptr i8, i8* %752, i64 %1511
  %1520 = getelementptr i8, i8* %752, i64 %1511
  %1521 = lshr i32 %760, 3
  %1522 = and i32 %1521, 536870880
  %1523 = zext i32 %1522 to i64
  %1524 = add nsw i64 %1523, -32
  %1525 = lshr exact i64 %1524, 5
  %1526 = add nuw nsw i64 %1525, 1
  %1527 = icmp ult i32 %760, 64
  %1528 = icmp ult i32 %760, 256
  %1529 = and i64 %1112, 536870880
  %1530 = and i64 %1526, 1
  %1531 = icmp eq i64 %1524, 0
  %1532 = and i64 %1526, 1152921504606846974
  %1533 = icmp eq i64 %1530, 0
  %1534 = icmp eq i64 %1529, %1112
  %1535 = and i64 %1112, 24
  %1536 = icmp eq i64 %1535, 0
  %1537 = and i64 %1112, 536870904
  %1538 = icmp eq i64 %1537, %1112
  %1539 = and i64 %1112, 3
  %1540 = icmp eq i64 %1539, 0
  br label %1541

1541:                                             ; preds = %1689, %1509
  %1542 = phi i64 [ %1690, %1689 ], [ 0, %1509 ]
  %1543 = mul i64 %1516, %1542
  %1544 = add i64 %1514, %1543
  %1545 = add i64 %1518, %1543
  %1546 = mul i64 %1542, %1513
  %1547 = trunc i64 %1542 to i32
  %1548 = mul i32 %1507, %1547
  %1549 = mul nuw i64 %1542, %735
  br label %1550

1550:                                             ; preds = %1686, %1541
  %1551 = phi i64 [ %1687, %1686 ], [ 0, %1541 ]
  %1552 = mul i64 %1517, %1551
  %1553 = add i64 %1546, %1551
  %1554 = and i64 %1553, 4294967295
  %1555 = trunc i64 %1551 to i32
  %1556 = add i32 %1548, %1555
  %1557 = zext i32 %1556 to i64
  %1558 = mul nuw nsw i64 %1557, %1112
  %1559 = add i64 %1558, %1511
  %1560 = add nuw i64 %1551, %1549
  %1561 = shl i64 %1560, 2
  %1562 = or i64 %1561, 2
  %1563 = mul i64 %1562, %1112
  br i1 %1527, label %1641, label %1564

1564:                                             ; preds = %1550
  %1565 = add nuw nsw i64 %1554, 1
  %1566 = mul nuw nsw i64 %1565, %1112
  %1567 = getelementptr i8, i8* %1520, i64 %1566
  %1568 = mul nuw nsw i64 %1554, %1112
  %1569 = getelementptr i8, i8* %1519, i64 %1568
  %1570 = add i64 %1545, %1552
  %1571 = getelementptr i8, i8* %745, i64 %1570
  %1572 = add i64 %1544, %1552
  %1573 = getelementptr i8, i8* %745, i64 %1572
  %1574 = icmp ult i8* %1573, %1567
  %1575 = icmp ult i8* %1569, %1571
  %1576 = and i1 %1574, %1575
  br i1 %1576, label %1641, label %1577

1577:                                             ; preds = %1564
  br i1 %1528, label %1627, label %1578

1578:                                             ; preds = %1577
  br i1 %1531, label %1610, label %1579

1579:                                             ; preds = %1578, %1579
  %1580 = phi i64 [ %1607, %1579 ], [ 0, %1578 ]
  %1581 = phi i64 [ %1608, %1579 ], [ 0, %1578 ]
  %1582 = add i64 %1559, %1580
  %1583 = getelementptr inbounds i8, i8* %752, i64 %1582
  %1584 = bitcast i8* %1583 to <16 x i8>*
  %1585 = load <16 x i8>, <16 x i8>* %1584, align 1, !tbaa !14, !alias.scope !418
  %1586 = getelementptr inbounds i8, i8* %1583, i64 16
  %1587 = bitcast i8* %1586 to <16 x i8>*
  %1588 = load <16 x i8>, <16 x i8>* %1587, align 1, !tbaa !14, !alias.scope !418
  %1589 = add i64 %1580, %1563
  %1590 = getelementptr inbounds i8, i8* %745, i64 %1589
  %1591 = bitcast i8* %1590 to <16 x i8>*
  store <16 x i8> %1585, <16 x i8>* %1591, align 1, !tbaa !14, !alias.scope !421, !noalias !418
  %1592 = getelementptr inbounds i8, i8* %1590, i64 16
  %1593 = bitcast i8* %1592 to <16 x i8>*
  store <16 x i8> %1588, <16 x i8>* %1593, align 1, !tbaa !14, !alias.scope !421, !noalias !418
  %1594 = or i64 %1580, 32
  %1595 = add i64 %1559, %1594
  %1596 = getelementptr inbounds i8, i8* %752, i64 %1595
  %1597 = bitcast i8* %1596 to <16 x i8>*
  %1598 = load <16 x i8>, <16 x i8>* %1597, align 1, !tbaa !14, !alias.scope !418
  %1599 = getelementptr inbounds i8, i8* %1596, i64 16
  %1600 = bitcast i8* %1599 to <16 x i8>*
  %1601 = load <16 x i8>, <16 x i8>* %1600, align 1, !tbaa !14, !alias.scope !418
  %1602 = add i64 %1594, %1563
  %1603 = getelementptr inbounds i8, i8* %745, i64 %1602
  %1604 = bitcast i8* %1603 to <16 x i8>*
  store <16 x i8> %1598, <16 x i8>* %1604, align 1, !tbaa !14, !alias.scope !421, !noalias !418
  %1605 = getelementptr inbounds i8, i8* %1603, i64 16
  %1606 = bitcast i8* %1605 to <16 x i8>*
  store <16 x i8> %1601, <16 x i8>* %1606, align 1, !tbaa !14, !alias.scope !421, !noalias !418
  %1607 = add nuw i64 %1580, 64
  %1608 = add i64 %1581, 2
  %1609 = icmp eq i64 %1608, %1532
  br i1 %1609, label %1610, label %1579, !llvm.loop !423

1610:                                             ; preds = %1579, %1578
  %1611 = phi i64 [ 0, %1578 ], [ %1607, %1579 ]
  br i1 %1533, label %1625, label %1612

1612:                                             ; preds = %1610
  %1613 = add i64 %1559, %1611
  %1614 = getelementptr inbounds i8, i8* %752, i64 %1613
  %1615 = bitcast i8* %1614 to <16 x i8>*
  %1616 = load <16 x i8>, <16 x i8>* %1615, align 1, !tbaa !14, !alias.scope !418
  %1617 = getelementptr inbounds i8, i8* %1614, i64 16
  %1618 = bitcast i8* %1617 to <16 x i8>*
  %1619 = load <16 x i8>, <16 x i8>* %1618, align 1, !tbaa !14, !alias.scope !418
  %1620 = add i64 %1611, %1563
  %1621 = getelementptr inbounds i8, i8* %745, i64 %1620
  %1622 = bitcast i8* %1621 to <16 x i8>*
  store <16 x i8> %1616, <16 x i8>* %1622, align 1, !tbaa !14, !alias.scope !421, !noalias !418
  %1623 = getelementptr inbounds i8, i8* %1621, i64 16
  %1624 = bitcast i8* %1623 to <16 x i8>*
  store <16 x i8> %1619, <16 x i8>* %1624, align 1, !tbaa !14, !alias.scope !421, !noalias !418
  br label %1625

1625:                                             ; preds = %1610, %1612
  br i1 %1534, label %1686, label %1626

1626:                                             ; preds = %1625
  br i1 %1536, label %1641, label %1627

1627:                                             ; preds = %1577, %1626
  %1628 = phi i64 [ %1529, %1626 ], [ 0, %1577 ]
  br label %1629

1629:                                             ; preds = %1629, %1627
  %1630 = phi i64 [ %1628, %1627 ], [ %1638, %1629 ]
  %1631 = add i64 %1559, %1630
  %1632 = getelementptr inbounds i8, i8* %752, i64 %1631
  %1633 = bitcast i8* %1632 to <8 x i8>*
  %1634 = load <8 x i8>, <8 x i8>* %1633, align 1, !tbaa !14
  %1635 = add i64 %1630, %1563
  %1636 = getelementptr inbounds i8, i8* %745, i64 %1635
  %1637 = bitcast i8* %1636 to <8 x i8>*
  store <8 x i8> %1634, <8 x i8>* %1637, align 1, !tbaa !14
  %1638 = add nuw i64 %1630, 8
  %1639 = icmp eq i64 %1638, %1537
  br i1 %1639, label %1640, label %1629, !llvm.loop !424

1640:                                             ; preds = %1629
  br i1 %1538, label %1686, label %1641

1641:                                             ; preds = %1564, %1550, %1626, %1640
  %1642 = phi i64 [ 0, %1550 ], [ 0, %1564 ], [ %1529, %1626 ], [ %1537, %1640 ]
  %1643 = xor i64 %1642, -1
  %1644 = add nsw i64 %1643, %1112
  br i1 %1540, label %1656, label %1645

1645:                                             ; preds = %1641, %1645
  %1646 = phi i64 [ %1653, %1645 ], [ %1642, %1641 ]
  %1647 = phi i64 [ %1654, %1645 ], [ 0, %1641 ]
  %1648 = add i64 %1559, %1646
  %1649 = getelementptr inbounds i8, i8* %752, i64 %1648
  %1650 = load i8, i8* %1649, align 1, !tbaa !14
  %1651 = add i64 %1646, %1563
  %1652 = getelementptr inbounds i8, i8* %745, i64 %1651
  store i8 %1650, i8* %1652, align 1, !tbaa !14
  %1653 = add nuw nsw i64 %1646, 1
  %1654 = add i64 %1647, 1
  %1655 = icmp eq i64 %1654, %1539
  br i1 %1655, label %1656, label %1645, !llvm.loop !425

1656:                                             ; preds = %1645, %1641
  %1657 = phi i64 [ %1642, %1641 ], [ %1653, %1645 ]
  %1658 = icmp ult i64 %1644, 3
  br i1 %1658, label %1686, label %1659

1659:                                             ; preds = %1656, %1659
  %1660 = phi i64 [ %1684, %1659 ], [ %1657, %1656 ]
  %1661 = add i64 %1559, %1660
  %1662 = getelementptr inbounds i8, i8* %752, i64 %1661
  %1663 = load i8, i8* %1662, align 1, !tbaa !14
  %1664 = add i64 %1660, %1563
  %1665 = getelementptr inbounds i8, i8* %745, i64 %1664
  store i8 %1663, i8* %1665, align 1, !tbaa !14
  %1666 = add nuw nsw i64 %1660, 1
  %1667 = add i64 %1559, %1666
  %1668 = getelementptr inbounds i8, i8* %752, i64 %1667
  %1669 = load i8, i8* %1668, align 1, !tbaa !14
  %1670 = add i64 %1666, %1563
  %1671 = getelementptr inbounds i8, i8* %745, i64 %1670
  store i8 %1669, i8* %1671, align 1, !tbaa !14
  %1672 = add nuw nsw i64 %1660, 2
  %1673 = add i64 %1559, %1672
  %1674 = getelementptr inbounds i8, i8* %752, i64 %1673
  %1675 = load i8, i8* %1674, align 1, !tbaa !14
  %1676 = add i64 %1672, %1563
  %1677 = getelementptr inbounds i8, i8* %745, i64 %1676
  store i8 %1675, i8* %1677, align 1, !tbaa !14
  %1678 = add nuw nsw i64 %1660, 3
  %1679 = add i64 %1559, %1678
  %1680 = getelementptr inbounds i8, i8* %752, i64 %1679
  %1681 = load i8, i8* %1680, align 1, !tbaa !14
  %1682 = add i64 %1678, %1563
  %1683 = getelementptr inbounds i8, i8* %745, i64 %1682
  store i8 %1681, i8* %1683, align 1, !tbaa !14
  %1684 = add nuw nsw i64 %1660, 4
  %1685 = icmp eq i64 %1684, %1112
  br i1 %1685, label %1686, label %1659, !llvm.loop !426

1686:                                             ; preds = %1656, %1659, %1640, %1625
  %1687 = add nuw nsw i64 %1551, 1
  %1688 = icmp eq i64 %1687, %1513
  br i1 %1688, label %1689, label %1550

1689:                                             ; preds = %1686
  %1690 = add nuw nsw i64 %1542, 1
  %1691 = icmp eq i64 %1690, %1512
  br i1 %1691, label %1692, label %1541

1692:                                             ; preds = %1689, %1505, %1501
  %1693 = getelementptr inbounds [7 x i32], [7 x i32]* %8, i64 0, i64 4
  %1694 = load i32, i32* %1693, align 16, !tbaa !9
  %1695 = icmp eq i32 %1694, 0
  br i1 %1695, label %1887, label %1696

1696:                                             ; preds = %1692
  %1697 = getelementptr inbounds [7 x i32], [7 x i32]* %7, i64 0, i64 4
  %1698 = load i32, i32* %1697, align 16, !tbaa !9
  %1699 = icmp eq i32 %1698, 0
  br i1 %1699, label %1887, label %1700

1700:                                             ; preds = %1696
  %1701 = getelementptr inbounds [8 x i64], [8 x i64]* %11, i64 0, i64 4
  %1702 = load i64, i64* %1701, align 16, !tbaa !3
  %1703 = zext i32 %1694 to i64
  %1704 = zext i32 %1698 to i64
  %1705 = mul nuw nsw i64 %1112, %735
  %1706 = shl nuw nsw i64 %1705, 1
  %1707 = mul nuw nsw i64 %1112, %735
  %1708 = shl nuw i64 %1707, 2
  %1709 = shl nuw nsw i64 %1112, 1
  %1710 = shl nuw nsw i64 %735, 1
  %1711 = or i64 %1710, 1
  %1712 = mul nuw nsw i64 %1711, %1112
  %1713 = getelementptr i8, i8* %752, i64 %1702
  %1714 = getelementptr i8, i8* %752, i64 %1702
  %1715 = lshr i32 %760, 3
  %1716 = and i32 %1715, 536870880
  %1717 = zext i32 %1716 to i64
  %1718 = add nsw i64 %1717, -32
  %1719 = lshr exact i64 %1718, 5
  %1720 = add nuw nsw i64 %1719, 1
  %1721 = icmp ult i32 %760, 64
  %1722 = icmp ult i32 %760, 256
  %1723 = and i64 %1112, 536870880
  %1724 = and i64 %1720, 1
  %1725 = icmp eq i64 %1718, 0
  %1726 = and i64 %1720, 1152921504606846974
  %1727 = icmp eq i64 %1724, 0
  %1728 = icmp eq i64 %1723, %1112
  %1729 = and i64 %1112, 24
  %1730 = icmp eq i64 %1729, 0
  %1731 = and i64 %1112, 536870904
  %1732 = icmp eq i64 %1731, %1112
  %1733 = and i64 %1112, 3
  %1734 = icmp eq i64 %1733, 0
  br label %1735

1735:                                             ; preds = %1884, %1700
  %1736 = phi i64 [ %1885, %1884 ], [ 0, %1700 ]
  %1737 = mul i64 %1708, %1736
  %1738 = add i64 %1706, %1737
  %1739 = add i64 %1712, %1737
  %1740 = mul i64 %1736, %1704
  %1741 = trunc i64 %1736 to i32
  %1742 = mul i32 %1698, %1741
  %1743 = shl nuw nsw i64 %1736, 2
  %1744 = or i64 %1743, 2
  %1745 = mul i64 %1744, %735
  br label %1746

1746:                                             ; preds = %1881, %1735
  %1747 = phi i64 [ %1882, %1881 ], [ 0, %1735 ]
  %1748 = mul i64 %1709, %1747
  %1749 = add i64 %1740, %1747
  %1750 = and i64 %1749, 4294967295
  %1751 = trunc i64 %1747 to i32
  %1752 = add i32 %1742, %1751
  %1753 = zext i32 %1752 to i64
  %1754 = mul nuw nsw i64 %1753, %1112
  %1755 = add i64 %1754, %1702
  %1756 = shl nuw nsw i64 %1747, 1
  %1757 = add i64 %1756, %1745
  %1758 = mul i64 %1757, %1112
  br i1 %1721, label %1836, label %1759

1759:                                             ; preds = %1746
  %1760 = add nuw nsw i64 %1750, 1
  %1761 = mul nuw nsw i64 %1760, %1112
  %1762 = getelementptr i8, i8* %1714, i64 %1761
  %1763 = mul nuw nsw i64 %1750, %1112
  %1764 = getelementptr i8, i8* %1713, i64 %1763
  %1765 = add i64 %1739, %1748
  %1766 = getelementptr i8, i8* %745, i64 %1765
  %1767 = add i64 %1738, %1748
  %1768 = getelementptr i8, i8* %745, i64 %1767
  %1769 = icmp ult i8* %1768, %1762
  %1770 = icmp ult i8* %1764, %1766
  %1771 = and i1 %1769, %1770
  br i1 %1771, label %1836, label %1772

1772:                                             ; preds = %1759
  br i1 %1722, label %1822, label %1773

1773:                                             ; preds = %1772
  br i1 %1725, label %1805, label %1774

1774:                                             ; preds = %1773, %1774
  %1775 = phi i64 [ %1802, %1774 ], [ 0, %1773 ]
  %1776 = phi i64 [ %1803, %1774 ], [ 0, %1773 ]
  %1777 = add i64 %1755, %1775
  %1778 = getelementptr inbounds i8, i8* %752, i64 %1777
  %1779 = bitcast i8* %1778 to <16 x i8>*
  %1780 = load <16 x i8>, <16 x i8>* %1779, align 1, !tbaa !14, !alias.scope !427
  %1781 = getelementptr inbounds i8, i8* %1778, i64 16
  %1782 = bitcast i8* %1781 to <16 x i8>*
  %1783 = load <16 x i8>, <16 x i8>* %1782, align 1, !tbaa !14, !alias.scope !427
  %1784 = add i64 %1775, %1758
  %1785 = getelementptr inbounds i8, i8* %745, i64 %1784
  %1786 = bitcast i8* %1785 to <16 x i8>*
  store <16 x i8> %1780, <16 x i8>* %1786, align 1, !tbaa !14, !alias.scope !430, !noalias !427
  %1787 = getelementptr inbounds i8, i8* %1785, i64 16
  %1788 = bitcast i8* %1787 to <16 x i8>*
  store <16 x i8> %1783, <16 x i8>* %1788, align 1, !tbaa !14, !alias.scope !430, !noalias !427
  %1789 = or i64 %1775, 32
  %1790 = add i64 %1755, %1789
  %1791 = getelementptr inbounds i8, i8* %752, i64 %1790
  %1792 = bitcast i8* %1791 to <16 x i8>*
  %1793 = load <16 x i8>, <16 x i8>* %1792, align 1, !tbaa !14, !alias.scope !427
  %1794 = getelementptr inbounds i8, i8* %1791, i64 16
  %1795 = bitcast i8* %1794 to <16 x i8>*
  %1796 = load <16 x i8>, <16 x i8>* %1795, align 1, !tbaa !14, !alias.scope !427
  %1797 = add i64 %1789, %1758
  %1798 = getelementptr inbounds i8, i8* %745, i64 %1797
  %1799 = bitcast i8* %1798 to <16 x i8>*
  store <16 x i8> %1793, <16 x i8>* %1799, align 1, !tbaa !14, !alias.scope !430, !noalias !427
  %1800 = getelementptr inbounds i8, i8* %1798, i64 16
  %1801 = bitcast i8* %1800 to <16 x i8>*
  store <16 x i8> %1796, <16 x i8>* %1801, align 1, !tbaa !14, !alias.scope !430, !noalias !427
  %1802 = add nuw i64 %1775, 64
  %1803 = add i64 %1776, 2
  %1804 = icmp eq i64 %1803, %1726
  br i1 %1804, label %1805, label %1774, !llvm.loop !432

1805:                                             ; preds = %1774, %1773
  %1806 = phi i64 [ 0, %1773 ], [ %1802, %1774 ]
  br i1 %1727, label %1820, label %1807

1807:                                             ; preds = %1805
  %1808 = add i64 %1755, %1806
  %1809 = getelementptr inbounds i8, i8* %752, i64 %1808
  %1810 = bitcast i8* %1809 to <16 x i8>*
  %1811 = load <16 x i8>, <16 x i8>* %1810, align 1, !tbaa !14, !alias.scope !427
  %1812 = getelementptr inbounds i8, i8* %1809, i64 16
  %1813 = bitcast i8* %1812 to <16 x i8>*
  %1814 = load <16 x i8>, <16 x i8>* %1813, align 1, !tbaa !14, !alias.scope !427
  %1815 = add i64 %1806, %1758
  %1816 = getelementptr inbounds i8, i8* %745, i64 %1815
  %1817 = bitcast i8* %1816 to <16 x i8>*
  store <16 x i8> %1811, <16 x i8>* %1817, align 1, !tbaa !14, !alias.scope !430, !noalias !427
  %1818 = getelementptr inbounds i8, i8* %1816, i64 16
  %1819 = bitcast i8* %1818 to <16 x i8>*
  store <16 x i8> %1814, <16 x i8>* %1819, align 1, !tbaa !14, !alias.scope !430, !noalias !427
  br label %1820

1820:                                             ; preds = %1805, %1807
  br i1 %1728, label %1881, label %1821

1821:                                             ; preds = %1820
  br i1 %1730, label %1836, label %1822

1822:                                             ; preds = %1772, %1821
  %1823 = phi i64 [ %1723, %1821 ], [ 0, %1772 ]
  br label %1824

1824:                                             ; preds = %1824, %1822
  %1825 = phi i64 [ %1823, %1822 ], [ %1833, %1824 ]
  %1826 = add i64 %1755, %1825
  %1827 = getelementptr inbounds i8, i8* %752, i64 %1826
  %1828 = bitcast i8* %1827 to <8 x i8>*
  %1829 = load <8 x i8>, <8 x i8>* %1828, align 1, !tbaa !14
  %1830 = add i64 %1825, %1758
  %1831 = getelementptr inbounds i8, i8* %745, i64 %1830
  %1832 = bitcast i8* %1831 to <8 x i8>*
  store <8 x i8> %1829, <8 x i8>* %1832, align 1, !tbaa !14
  %1833 = add nuw i64 %1825, 8
  %1834 = icmp eq i64 %1833, %1731
  br i1 %1834, label %1835, label %1824, !llvm.loop !433

1835:                                             ; preds = %1824
  br i1 %1732, label %1881, label %1836

1836:                                             ; preds = %1759, %1746, %1821, %1835
  %1837 = phi i64 [ 0, %1746 ], [ 0, %1759 ], [ %1723, %1821 ], [ %1731, %1835 ]
  %1838 = xor i64 %1837, -1
  %1839 = add nsw i64 %1838, %1112
  br i1 %1734, label %1851, label %1840

1840:                                             ; preds = %1836, %1840
  %1841 = phi i64 [ %1848, %1840 ], [ %1837, %1836 ]
  %1842 = phi i64 [ %1849, %1840 ], [ 0, %1836 ]
  %1843 = add i64 %1755, %1841
  %1844 = getelementptr inbounds i8, i8* %752, i64 %1843
  %1845 = load i8, i8* %1844, align 1, !tbaa !14
  %1846 = add i64 %1841, %1758
  %1847 = getelementptr inbounds i8, i8* %745, i64 %1846
  store i8 %1845, i8* %1847, align 1, !tbaa !14
  %1848 = add nuw nsw i64 %1841, 1
  %1849 = add i64 %1842, 1
  %1850 = icmp eq i64 %1849, %1733
  br i1 %1850, label %1851, label %1840, !llvm.loop !434

1851:                                             ; preds = %1840, %1836
  %1852 = phi i64 [ %1837, %1836 ], [ %1848, %1840 ]
  %1853 = icmp ult i64 %1839, 3
  br i1 %1853, label %1881, label %1854

1854:                                             ; preds = %1851, %1854
  %1855 = phi i64 [ %1879, %1854 ], [ %1852, %1851 ]
  %1856 = add i64 %1755, %1855
  %1857 = getelementptr inbounds i8, i8* %752, i64 %1856
  %1858 = load i8, i8* %1857, align 1, !tbaa !14
  %1859 = add i64 %1855, %1758
  %1860 = getelementptr inbounds i8, i8* %745, i64 %1859
  store i8 %1858, i8* %1860, align 1, !tbaa !14
  %1861 = add nuw nsw i64 %1855, 1
  %1862 = add i64 %1755, %1861
  %1863 = getelementptr inbounds i8, i8* %752, i64 %1862
  %1864 = load i8, i8* %1863, align 1, !tbaa !14
  %1865 = add i64 %1861, %1758
  %1866 = getelementptr inbounds i8, i8* %745, i64 %1865
  store i8 %1864, i8* %1866, align 1, !tbaa !14
  %1867 = add nuw nsw i64 %1855, 2
  %1868 = add i64 %1755, %1867
  %1869 = getelementptr inbounds i8, i8* %752, i64 %1868
  %1870 = load i8, i8* %1869, align 1, !tbaa !14
  %1871 = add i64 %1867, %1758
  %1872 = getelementptr inbounds i8, i8* %745, i64 %1871
  store i8 %1870, i8* %1872, align 1, !tbaa !14
  %1873 = add nuw nsw i64 %1855, 3
  %1874 = add i64 %1755, %1873
  %1875 = getelementptr inbounds i8, i8* %752, i64 %1874
  %1876 = load i8, i8* %1875, align 1, !tbaa !14
  %1877 = add i64 %1873, %1758
  %1878 = getelementptr inbounds i8, i8* %745, i64 %1877
  store i8 %1876, i8* %1878, align 1, !tbaa !14
  %1879 = add nuw nsw i64 %1855, 4
  %1880 = icmp eq i64 %1879, %1112
  br i1 %1880, label %1881, label %1854, !llvm.loop !435

1881:                                             ; preds = %1851, %1854, %1835, %1820
  %1882 = add nuw nsw i64 %1747, 1
  %1883 = icmp eq i64 %1882, %1704
  br i1 %1883, label %1884, label %1746

1884:                                             ; preds = %1881
  %1885 = add nuw nsw i64 %1736, 1
  %1886 = icmp eq i64 %1885, %1703
  br i1 %1886, label %1887, label %1735

1887:                                             ; preds = %1884, %1696, %1692
  %1888 = getelementptr inbounds [7 x i32], [7 x i32]* %8, i64 0, i64 5
  %1889 = load i32, i32* %1888, align 4, !tbaa !9
  %1890 = icmp eq i32 %1889, 0
  br i1 %1890, label %2077, label %1891

1891:                                             ; preds = %1887
  %1892 = getelementptr inbounds [7 x i32], [7 x i32]* %7, i64 0, i64 5
  %1893 = load i32, i32* %1892, align 4, !tbaa !9
  %1894 = icmp eq i32 %1893, 0
  br i1 %1894, label %2077, label %1895

1895:                                             ; preds = %1891
  %1896 = getelementptr inbounds [8 x i64], [8 x i64]* %11, i64 0, i64 5
  %1897 = load i64, i64* %1896, align 8, !tbaa !3
  %1898 = zext i32 %1889 to i64
  %1899 = zext i32 %1893 to i64
  %1900 = mul nuw nsw i64 %1112, %735
  %1901 = shl nuw nsw i64 %1900, 1
  %1902 = shl nuw nsw i64 %1112, 1
  %1903 = shl nuw nsw i64 %1112, 1
  %1904 = getelementptr i8, i8* %752, i64 %1897
  %1905 = getelementptr i8, i8* %752, i64 %1897
  %1906 = lshr i32 %760, 3
  %1907 = and i32 %1906, 536870880
  %1908 = zext i32 %1907 to i64
  %1909 = add nsw i64 %1908, -32
  %1910 = lshr exact i64 %1909, 5
  %1911 = add nuw nsw i64 %1910, 1
  %1912 = icmp ult i32 %760, 64
  %1913 = icmp ult i32 %760, 256
  %1914 = and i64 %1112, 536870880
  %1915 = and i64 %1911, 1
  %1916 = icmp eq i64 %1909, 0
  %1917 = and i64 %1911, 1152921504606846974
  %1918 = icmp eq i64 %1915, 0
  %1919 = icmp eq i64 %1914, %1112
  %1920 = and i64 %1112, 24
  %1921 = icmp eq i64 %1920, 0
  %1922 = and i64 %1112, 536870904
  %1923 = icmp eq i64 %1922, %1112
  %1924 = and i64 %1112, 3
  %1925 = icmp eq i64 %1924, 0
  br label %1926

1926:                                             ; preds = %2074, %1895
  %1927 = phi i64 [ %2075, %2074 ], [ 0, %1895 ]
  %1928 = mul i64 %1901, %1927
  %1929 = add i64 %1928, %1112
  %1930 = add i64 %1903, %1928
  %1931 = mul i64 %1927, %1899
  %1932 = trunc i64 %1927 to i32
  %1933 = mul i32 %1893, %1932
  %1934 = mul nuw i64 %1927, %735
  br label %1935

1935:                                             ; preds = %2071, %1926
  %1936 = phi i64 [ %2072, %2071 ], [ 0, %1926 ]
  %1937 = mul i64 %1902, %1936
  %1938 = add i64 %1931, %1936
  %1939 = and i64 %1938, 4294967295
  %1940 = trunc i64 %1936 to i32
  %1941 = add i32 %1933, %1940
  %1942 = zext i32 %1941 to i64
  %1943 = mul nuw nsw i64 %1942, %1112
  %1944 = add i64 %1943, %1897
  %1945 = add nuw i64 %1936, %1934
  %1946 = shl i64 %1945, 1
  %1947 = or i64 %1946, 1
  %1948 = mul i64 %1947, %1112
  br i1 %1912, label %2026, label %1949

1949:                                             ; preds = %1935
  %1950 = add nuw nsw i64 %1939, 1
  %1951 = mul nuw nsw i64 %1950, %1112
  %1952 = getelementptr i8, i8* %1905, i64 %1951
  %1953 = mul nuw nsw i64 %1939, %1112
  %1954 = getelementptr i8, i8* %1904, i64 %1953
  %1955 = add i64 %1930, %1937
  %1956 = getelementptr i8, i8* %745, i64 %1955
  %1957 = add i64 %1929, %1937
  %1958 = getelementptr i8, i8* %745, i64 %1957
  %1959 = icmp ult i8* %1958, %1952
  %1960 = icmp ult i8* %1954, %1956
  %1961 = and i1 %1959, %1960
  br i1 %1961, label %2026, label %1962

1962:                                             ; preds = %1949
  br i1 %1913, label %2012, label %1963

1963:                                             ; preds = %1962
  br i1 %1916, label %1995, label %1964

1964:                                             ; preds = %1963, %1964
  %1965 = phi i64 [ %1992, %1964 ], [ 0, %1963 ]
  %1966 = phi i64 [ %1993, %1964 ], [ 0, %1963 ]
  %1967 = add i64 %1944, %1965
  %1968 = getelementptr inbounds i8, i8* %752, i64 %1967
  %1969 = bitcast i8* %1968 to <16 x i8>*
  %1970 = load <16 x i8>, <16 x i8>* %1969, align 1, !tbaa !14, !alias.scope !436
  %1971 = getelementptr inbounds i8, i8* %1968, i64 16
  %1972 = bitcast i8* %1971 to <16 x i8>*
  %1973 = load <16 x i8>, <16 x i8>* %1972, align 1, !tbaa !14, !alias.scope !436
  %1974 = add i64 %1965, %1948
  %1975 = getelementptr inbounds i8, i8* %745, i64 %1974
  %1976 = bitcast i8* %1975 to <16 x i8>*
  store <16 x i8> %1970, <16 x i8>* %1976, align 1, !tbaa !14, !alias.scope !439, !noalias !436
  %1977 = getelementptr inbounds i8, i8* %1975, i64 16
  %1978 = bitcast i8* %1977 to <16 x i8>*
  store <16 x i8> %1973, <16 x i8>* %1978, align 1, !tbaa !14, !alias.scope !439, !noalias !436
  %1979 = or i64 %1965, 32
  %1980 = add i64 %1944, %1979
  %1981 = getelementptr inbounds i8, i8* %752, i64 %1980
  %1982 = bitcast i8* %1981 to <16 x i8>*
  %1983 = load <16 x i8>, <16 x i8>* %1982, align 1, !tbaa !14, !alias.scope !436
  %1984 = getelementptr inbounds i8, i8* %1981, i64 16
  %1985 = bitcast i8* %1984 to <16 x i8>*
  %1986 = load <16 x i8>, <16 x i8>* %1985, align 1, !tbaa !14, !alias.scope !436
  %1987 = add i64 %1979, %1948
  %1988 = getelementptr inbounds i8, i8* %745, i64 %1987
  %1989 = bitcast i8* %1988 to <16 x i8>*
  store <16 x i8> %1983, <16 x i8>* %1989, align 1, !tbaa !14, !alias.scope !439, !noalias !436
  %1990 = getelementptr inbounds i8, i8* %1988, i64 16
  %1991 = bitcast i8* %1990 to <16 x i8>*
  store <16 x i8> %1986, <16 x i8>* %1991, align 1, !tbaa !14, !alias.scope !439, !noalias !436
  %1992 = add nuw i64 %1965, 64
  %1993 = add i64 %1966, 2
  %1994 = icmp eq i64 %1993, %1917
  br i1 %1994, label %1995, label %1964, !llvm.loop !441

1995:                                             ; preds = %1964, %1963
  %1996 = phi i64 [ 0, %1963 ], [ %1992, %1964 ]
  br i1 %1918, label %2010, label %1997

1997:                                             ; preds = %1995
  %1998 = add i64 %1944, %1996
  %1999 = getelementptr inbounds i8, i8* %752, i64 %1998
  %2000 = bitcast i8* %1999 to <16 x i8>*
  %2001 = load <16 x i8>, <16 x i8>* %2000, align 1, !tbaa !14, !alias.scope !436
  %2002 = getelementptr inbounds i8, i8* %1999, i64 16
  %2003 = bitcast i8* %2002 to <16 x i8>*
  %2004 = load <16 x i8>, <16 x i8>* %2003, align 1, !tbaa !14, !alias.scope !436
  %2005 = add i64 %1996, %1948
  %2006 = getelementptr inbounds i8, i8* %745, i64 %2005
  %2007 = bitcast i8* %2006 to <16 x i8>*
  store <16 x i8> %2001, <16 x i8>* %2007, align 1, !tbaa !14, !alias.scope !439, !noalias !436
  %2008 = getelementptr inbounds i8, i8* %2006, i64 16
  %2009 = bitcast i8* %2008 to <16 x i8>*
  store <16 x i8> %2004, <16 x i8>* %2009, align 1, !tbaa !14, !alias.scope !439, !noalias !436
  br label %2010

2010:                                             ; preds = %1995, %1997
  br i1 %1919, label %2071, label %2011

2011:                                             ; preds = %2010
  br i1 %1921, label %2026, label %2012

2012:                                             ; preds = %1962, %2011
  %2013 = phi i64 [ %1914, %2011 ], [ 0, %1962 ]
  br label %2014

2014:                                             ; preds = %2014, %2012
  %2015 = phi i64 [ %2013, %2012 ], [ %2023, %2014 ]
  %2016 = add i64 %1944, %2015
  %2017 = getelementptr inbounds i8, i8* %752, i64 %2016
  %2018 = bitcast i8* %2017 to <8 x i8>*
  %2019 = load <8 x i8>, <8 x i8>* %2018, align 1, !tbaa !14
  %2020 = add i64 %2015, %1948
  %2021 = getelementptr inbounds i8, i8* %745, i64 %2020
  %2022 = bitcast i8* %2021 to <8 x i8>*
  store <8 x i8> %2019, <8 x i8>* %2022, align 1, !tbaa !14
  %2023 = add nuw i64 %2015, 8
  %2024 = icmp eq i64 %2023, %1922
  br i1 %2024, label %2025, label %2014, !llvm.loop !442

2025:                                             ; preds = %2014
  br i1 %1923, label %2071, label %2026

2026:                                             ; preds = %1949, %1935, %2011, %2025
  %2027 = phi i64 [ 0, %1935 ], [ 0, %1949 ], [ %1914, %2011 ], [ %1922, %2025 ]
  %2028 = xor i64 %2027, -1
  %2029 = add nsw i64 %2028, %1112
  br i1 %1925, label %2041, label %2030

2030:                                             ; preds = %2026, %2030
  %2031 = phi i64 [ %2038, %2030 ], [ %2027, %2026 ]
  %2032 = phi i64 [ %2039, %2030 ], [ 0, %2026 ]
  %2033 = add i64 %1944, %2031
  %2034 = getelementptr inbounds i8, i8* %752, i64 %2033
  %2035 = load i8, i8* %2034, align 1, !tbaa !14
  %2036 = add i64 %2031, %1948
  %2037 = getelementptr inbounds i8, i8* %745, i64 %2036
  store i8 %2035, i8* %2037, align 1, !tbaa !14
  %2038 = add nuw nsw i64 %2031, 1
  %2039 = add i64 %2032, 1
  %2040 = icmp eq i64 %2039, %1924
  br i1 %2040, label %2041, label %2030, !llvm.loop !443

2041:                                             ; preds = %2030, %2026
  %2042 = phi i64 [ %2027, %2026 ], [ %2038, %2030 ]
  %2043 = icmp ult i64 %2029, 3
  br i1 %2043, label %2071, label %2044

2044:                                             ; preds = %2041, %2044
  %2045 = phi i64 [ %2069, %2044 ], [ %2042, %2041 ]
  %2046 = add i64 %1944, %2045
  %2047 = getelementptr inbounds i8, i8* %752, i64 %2046
  %2048 = load i8, i8* %2047, align 1, !tbaa !14
  %2049 = add i64 %2045, %1948
  %2050 = getelementptr inbounds i8, i8* %745, i64 %2049
  store i8 %2048, i8* %2050, align 1, !tbaa !14
  %2051 = add nuw nsw i64 %2045, 1
  %2052 = add i64 %1944, %2051
  %2053 = getelementptr inbounds i8, i8* %752, i64 %2052
  %2054 = load i8, i8* %2053, align 1, !tbaa !14
  %2055 = add i64 %2051, %1948
  %2056 = getelementptr inbounds i8, i8* %745, i64 %2055
  store i8 %2054, i8* %2056, align 1, !tbaa !14
  %2057 = add nuw nsw i64 %2045, 2
  %2058 = add i64 %1944, %2057
  %2059 = getelementptr inbounds i8, i8* %752, i64 %2058
  %2060 = load i8, i8* %2059, align 1, !tbaa !14
  %2061 = add i64 %2057, %1948
  %2062 = getelementptr inbounds i8, i8* %745, i64 %2061
  store i8 %2060, i8* %2062, align 1, !tbaa !14
  %2063 = add nuw nsw i64 %2045, 3
  %2064 = add i64 %1944, %2063
  %2065 = getelementptr inbounds i8, i8* %752, i64 %2064
  %2066 = load i8, i8* %2065, align 1, !tbaa !14
  %2067 = add i64 %2063, %1948
  %2068 = getelementptr inbounds i8, i8* %745, i64 %2067
  store i8 %2066, i8* %2068, align 1, !tbaa !14
  %2069 = add nuw nsw i64 %2045, 4
  %2070 = icmp eq i64 %2069, %1112
  br i1 %2070, label %2071, label %2044, !llvm.loop !444

2071:                                             ; preds = %2041, %2044, %2025, %2010
  %2072 = add nuw nsw i64 %1936, 1
  %2073 = icmp eq i64 %2072, %1899
  br i1 %2073, label %2074, label %1935

2074:                                             ; preds = %2071
  %2075 = add nuw nsw i64 %1927, 1
  %2076 = icmp eq i64 %2075, %1898
  br i1 %2076, label %2077, label %1926

2077:                                             ; preds = %2074, %1891, %1887
  %2078 = getelementptr inbounds [7 x i32], [7 x i32]* %8, i64 0, i64 6
  %2079 = load i32, i32* %2078, align 8, !tbaa !9
  %2080 = icmp eq i32 %2079, 0
  br i1 %2080, label %2450, label %2081

2081:                                             ; preds = %2077
  %2082 = getelementptr inbounds [7 x i32], [7 x i32]* %7, i64 0, i64 6
  %2083 = load i32, i32* %2082, align 8, !tbaa !9
  %2084 = icmp eq i32 %2083, 0
  br i1 %2084, label %2450, label %2085

2085:                                             ; preds = %2081
  %2086 = getelementptr inbounds [8 x i64], [8 x i64]* %11, i64 0, i64 6
  %2087 = load i64, i64* %2086, align 16, !tbaa !3
  %2088 = zext i32 %2079 to i64
  %2089 = zext i32 %2083 to i64
  %2090 = mul nuw nsw i64 %1112, %735
  %2091 = mul nuw nsw i64 %1112, %735
  %2092 = shl nuw nsw i64 %2091, 1
  %2093 = add nuw nsw i64 %735, 1
  %2094 = mul nuw nsw i64 %2093, %1112
  %2095 = getelementptr i8, i8* %752, i64 %2087
  %2096 = getelementptr i8, i8* %752, i64 %2087
  %2097 = lshr i32 %760, 3
  %2098 = and i32 %2097, 536870880
  %2099 = zext i32 %2098 to i64
  %2100 = add nsw i64 %2099, -32
  %2101 = lshr exact i64 %2100, 5
  %2102 = add nuw nsw i64 %2101, 1
  %2103 = icmp ult i32 %760, 64
  %2104 = icmp ult i32 %760, 256
  %2105 = and i64 %1112, 536870880
  %2106 = and i64 %2102, 1
  %2107 = icmp eq i64 %2100, 0
  %2108 = and i64 %2102, 1152921504606846974
  %2109 = icmp eq i64 %2106, 0
  %2110 = icmp eq i64 %2105, %1112
  %2111 = and i64 %1112, 24
  %2112 = icmp eq i64 %2111, 0
  %2113 = and i64 %1112, 536870904
  %2114 = icmp eq i64 %2113, %1112
  %2115 = and i64 %1112, 3
  %2116 = icmp eq i64 %2115, 0
  br label %2117

2117:                                             ; preds = %2265, %2085
  %2118 = phi i64 [ %2266, %2265 ], [ 0, %2085 ]
  %2119 = mul i64 %2092, %2118
  %2120 = add i64 %2090, %2119
  %2121 = add i64 %2094, %2119
  %2122 = mul i64 %2118, %2089
  %2123 = trunc i64 %2118 to i32
  %2124 = mul i32 %2083, %2123
  %2125 = shl nuw nsw i64 %2118, 1
  %2126 = or i64 %2125, 1
  %2127 = mul i64 %2126, %735
  br label %2128

2128:                                             ; preds = %2262, %2117
  %2129 = phi i64 [ %2263, %2262 ], [ 0, %2117 ]
  %2130 = mul i64 %2129, %1112
  %2131 = add i64 %2122, %2129
  %2132 = and i64 %2131, 4294967295
  %2133 = trunc i64 %2129 to i32
  %2134 = add i32 %2124, %2133
  %2135 = zext i32 %2134 to i64
  %2136 = mul nuw nsw i64 %2135, %1112
  %2137 = add i64 %2136, %2087
  %2138 = add i64 %2129, %2127
  %2139 = mul i64 %2138, %1112
  br i1 %2103, label %2217, label %2140

2140:                                             ; preds = %2128
  %2141 = add nuw nsw i64 %2132, 1
  %2142 = mul nuw nsw i64 %2141, %1112
  %2143 = getelementptr i8, i8* %2096, i64 %2142
  %2144 = mul nuw nsw i64 %2132, %1112
  %2145 = getelementptr i8, i8* %2095, i64 %2144
  %2146 = add i64 %2121, %2130
  %2147 = getelementptr i8, i8* %745, i64 %2146
  %2148 = add i64 %2120, %2130
  %2149 = getelementptr i8, i8* %745, i64 %2148
  %2150 = icmp ult i8* %2149, %2143
  %2151 = icmp ult i8* %2145, %2147
  %2152 = and i1 %2150, %2151
  br i1 %2152, label %2217, label %2153

2153:                                             ; preds = %2140
  br i1 %2104, label %2203, label %2154

2154:                                             ; preds = %2153
  br i1 %2107, label %2186, label %2155

2155:                                             ; preds = %2154, %2155
  %2156 = phi i64 [ %2183, %2155 ], [ 0, %2154 ]
  %2157 = phi i64 [ %2184, %2155 ], [ 0, %2154 ]
  %2158 = add i64 %2137, %2156
  %2159 = getelementptr inbounds i8, i8* %752, i64 %2158
  %2160 = bitcast i8* %2159 to <16 x i8>*
  %2161 = load <16 x i8>, <16 x i8>* %2160, align 1, !tbaa !14, !alias.scope !445
  %2162 = getelementptr inbounds i8, i8* %2159, i64 16
  %2163 = bitcast i8* %2162 to <16 x i8>*
  %2164 = load <16 x i8>, <16 x i8>* %2163, align 1, !tbaa !14, !alias.scope !445
  %2165 = add i64 %2156, %2139
  %2166 = getelementptr inbounds i8, i8* %745, i64 %2165
  %2167 = bitcast i8* %2166 to <16 x i8>*
  store <16 x i8> %2161, <16 x i8>* %2167, align 1, !tbaa !14, !alias.scope !448, !noalias !445
  %2168 = getelementptr inbounds i8, i8* %2166, i64 16
  %2169 = bitcast i8* %2168 to <16 x i8>*
  store <16 x i8> %2164, <16 x i8>* %2169, align 1, !tbaa !14, !alias.scope !448, !noalias !445
  %2170 = or i64 %2156, 32
  %2171 = add i64 %2137, %2170
  %2172 = getelementptr inbounds i8, i8* %752, i64 %2171
  %2173 = bitcast i8* %2172 to <16 x i8>*
  %2174 = load <16 x i8>, <16 x i8>* %2173, align 1, !tbaa !14, !alias.scope !445
  %2175 = getelementptr inbounds i8, i8* %2172, i64 16
  %2176 = bitcast i8* %2175 to <16 x i8>*
  %2177 = load <16 x i8>, <16 x i8>* %2176, align 1, !tbaa !14, !alias.scope !445
  %2178 = add i64 %2170, %2139
  %2179 = getelementptr inbounds i8, i8* %745, i64 %2178
  %2180 = bitcast i8* %2179 to <16 x i8>*
  store <16 x i8> %2174, <16 x i8>* %2180, align 1, !tbaa !14, !alias.scope !448, !noalias !445
  %2181 = getelementptr inbounds i8, i8* %2179, i64 16
  %2182 = bitcast i8* %2181 to <16 x i8>*
  store <16 x i8> %2177, <16 x i8>* %2182, align 1, !tbaa !14, !alias.scope !448, !noalias !445
  %2183 = add nuw i64 %2156, 64
  %2184 = add i64 %2157, 2
  %2185 = icmp eq i64 %2184, %2108
  br i1 %2185, label %2186, label %2155, !llvm.loop !450

2186:                                             ; preds = %2155, %2154
  %2187 = phi i64 [ 0, %2154 ], [ %2183, %2155 ]
  br i1 %2109, label %2201, label %2188

2188:                                             ; preds = %2186
  %2189 = add i64 %2137, %2187
  %2190 = getelementptr inbounds i8, i8* %752, i64 %2189
  %2191 = bitcast i8* %2190 to <16 x i8>*
  %2192 = load <16 x i8>, <16 x i8>* %2191, align 1, !tbaa !14, !alias.scope !445
  %2193 = getelementptr inbounds i8, i8* %2190, i64 16
  %2194 = bitcast i8* %2193 to <16 x i8>*
  %2195 = load <16 x i8>, <16 x i8>* %2194, align 1, !tbaa !14, !alias.scope !445
  %2196 = add i64 %2187, %2139
  %2197 = getelementptr inbounds i8, i8* %745, i64 %2196
  %2198 = bitcast i8* %2197 to <16 x i8>*
  store <16 x i8> %2192, <16 x i8>* %2198, align 1, !tbaa !14, !alias.scope !448, !noalias !445
  %2199 = getelementptr inbounds i8, i8* %2197, i64 16
  %2200 = bitcast i8* %2199 to <16 x i8>*
  store <16 x i8> %2195, <16 x i8>* %2200, align 1, !tbaa !14, !alias.scope !448, !noalias !445
  br label %2201

2201:                                             ; preds = %2186, %2188
  br i1 %2110, label %2262, label %2202

2202:                                             ; preds = %2201
  br i1 %2112, label %2217, label %2203

2203:                                             ; preds = %2153, %2202
  %2204 = phi i64 [ %2105, %2202 ], [ 0, %2153 ]
  br label %2205

2205:                                             ; preds = %2205, %2203
  %2206 = phi i64 [ %2204, %2203 ], [ %2214, %2205 ]
  %2207 = add i64 %2137, %2206
  %2208 = getelementptr inbounds i8, i8* %752, i64 %2207
  %2209 = bitcast i8* %2208 to <8 x i8>*
  %2210 = load <8 x i8>, <8 x i8>* %2209, align 1, !tbaa !14
  %2211 = add i64 %2206, %2139
  %2212 = getelementptr inbounds i8, i8* %745, i64 %2211
  %2213 = bitcast i8* %2212 to <8 x i8>*
  store <8 x i8> %2210, <8 x i8>* %2213, align 1, !tbaa !14
  %2214 = add nuw i64 %2206, 8
  %2215 = icmp eq i64 %2214, %2113
  br i1 %2215, label %2216, label %2205, !llvm.loop !451

2216:                                             ; preds = %2205
  br i1 %2114, label %2262, label %2217

2217:                                             ; preds = %2140, %2128, %2202, %2216
  %2218 = phi i64 [ 0, %2128 ], [ 0, %2140 ], [ %2105, %2202 ], [ %2113, %2216 ]
  %2219 = xor i64 %2218, -1
  %2220 = add nsw i64 %2219, %1112
  br i1 %2116, label %2232, label %2221

2221:                                             ; preds = %2217, %2221
  %2222 = phi i64 [ %2229, %2221 ], [ %2218, %2217 ]
  %2223 = phi i64 [ %2230, %2221 ], [ 0, %2217 ]
  %2224 = add i64 %2137, %2222
  %2225 = getelementptr inbounds i8, i8* %752, i64 %2224
  %2226 = load i8, i8* %2225, align 1, !tbaa !14
  %2227 = add i64 %2222, %2139
  %2228 = getelementptr inbounds i8, i8* %745, i64 %2227
  store i8 %2226, i8* %2228, align 1, !tbaa !14
  %2229 = add nuw nsw i64 %2222, 1
  %2230 = add i64 %2223, 1
  %2231 = icmp eq i64 %2230, %2115
  br i1 %2231, label %2232, label %2221, !llvm.loop !452

2232:                                             ; preds = %2221, %2217
  %2233 = phi i64 [ %2218, %2217 ], [ %2229, %2221 ]
  %2234 = icmp ult i64 %2220, 3
  br i1 %2234, label %2262, label %2235

2235:                                             ; preds = %2232, %2235
  %2236 = phi i64 [ %2260, %2235 ], [ %2233, %2232 ]
  %2237 = add i64 %2137, %2236
  %2238 = getelementptr inbounds i8, i8* %752, i64 %2237
  %2239 = load i8, i8* %2238, align 1, !tbaa !14
  %2240 = add i64 %2236, %2139
  %2241 = getelementptr inbounds i8, i8* %745, i64 %2240
  store i8 %2239, i8* %2241, align 1, !tbaa !14
  %2242 = add nuw nsw i64 %2236, 1
  %2243 = add i64 %2137, %2242
  %2244 = getelementptr inbounds i8, i8* %752, i64 %2243
  %2245 = load i8, i8* %2244, align 1, !tbaa !14
  %2246 = add i64 %2242, %2139
  %2247 = getelementptr inbounds i8, i8* %745, i64 %2246
  store i8 %2245, i8* %2247, align 1, !tbaa !14
  %2248 = add nuw nsw i64 %2236, 2
  %2249 = add i64 %2137, %2248
  %2250 = getelementptr inbounds i8, i8* %752, i64 %2249
  %2251 = load i8, i8* %2250, align 1, !tbaa !14
  %2252 = add i64 %2248, %2139
  %2253 = getelementptr inbounds i8, i8* %745, i64 %2252
  store i8 %2251, i8* %2253, align 1, !tbaa !14
  %2254 = add nuw nsw i64 %2236, 3
  %2255 = add i64 %2137, %2254
  %2256 = getelementptr inbounds i8, i8* %752, i64 %2255
  %2257 = load i8, i8* %2256, align 1, !tbaa !14
  %2258 = add i64 %2254, %2139
  %2259 = getelementptr inbounds i8, i8* %745, i64 %2258
  store i8 %2257, i8* %2259, align 1, !tbaa !14
  %2260 = add nuw nsw i64 %2236, 4
  %2261 = icmp eq i64 %2260, %1112
  br i1 %2261, label %2262, label %2235, !llvm.loop !453

2262:                                             ; preds = %2232, %2235, %2216, %2201
  %2263 = add nuw nsw i64 %2129, 1
  %2264 = icmp eq i64 %2263, %2089
  br i1 %2264, label %2265, label %2128

2265:                                             ; preds = %2262
  %2266 = add nuw nsw i64 %2118, 1
  %2267 = icmp eq i64 %2266, %2088
  br i1 %2267, label %2450, label %2117

2268:                                             ; preds = %1108
  %2269 = getelementptr inbounds [7 x i32], [7 x i32]* %7, i64 0, i64 0
  %2270 = load i32, i32* %2269, align 16, !tbaa !9
  %2271 = icmp eq i32 %2270, 0
  br i1 %2271, label %1115, label %2272

2272:                                             ; preds = %2268
  %2273 = load i64, i64* %1110, align 16, !tbaa !3
  %2274 = zext i32 %1113 to i64
  %2275 = zext i32 %2270 to i64
  %2276 = shl nuw nsw i64 %1112, 3
  %2277 = mul nuw nsw i64 %1112, %735
  %2278 = shl nuw i64 %2277, 3
  %2279 = shl nuw nsw i64 %1112, 3
  %2280 = getelementptr i8, i8* %752, i64 %2273
  %2281 = getelementptr i8, i8* %752, i64 %2273
  %2282 = lshr i32 %760, 3
  %2283 = and i32 %2282, 536870880
  %2284 = zext i32 %2283 to i64
  %2285 = add nsw i64 %2284, -32
  %2286 = lshr exact i64 %2285, 5
  %2287 = add nuw nsw i64 %2286, 1
  %2288 = icmp ult i32 %760, 64
  %2289 = icmp ult i32 %760, 256
  %2290 = and i64 %1112, 536870880
  %2291 = and i64 %2287, 1
  %2292 = icmp eq i64 %2285, 0
  %2293 = and i64 %2287, 1152921504606846974
  %2294 = icmp eq i64 %2291, 0
  %2295 = icmp eq i64 %2290, %1112
  %2296 = and i64 %1112, 24
  %2297 = icmp eq i64 %2296, 0
  %2298 = and i64 %1112, 536870904
  %2299 = icmp eq i64 %2298, %1112
  %2300 = and i64 %1112, 3
  %2301 = icmp eq i64 %2300, 0
  br label %2302

2302:                                             ; preds = %2447, %2272
  %2303 = phi i64 [ %2448, %2447 ], [ 0, %2272 ]
  %2304 = mul i64 %2278, %2303
  %2305 = add i64 %2304, %1112
  %2306 = mul i64 %2303, %2275
  %2307 = trunc i64 %2303 to i32
  %2308 = mul i32 %2270, %2307
  %2309 = mul nuw i64 %2303, %735
  br label %2310

2310:                                             ; preds = %2444, %2302
  %2311 = phi i64 [ %2445, %2444 ], [ 0, %2302 ]
  %2312 = mul i64 %2279, %2311
  %2313 = add i64 %2306, %2311
  %2314 = and i64 %2313, 4294967295
  %2315 = trunc i64 %2311 to i32
  %2316 = add i32 %2308, %2315
  %2317 = zext i32 %2316 to i64
  %2318 = mul nuw nsw i64 %2317, %1112
  %2319 = add i64 %2318, %2273
  %2320 = add nuw i64 %2311, %2309
  %2321 = mul i64 %2276, %2320
  br i1 %2288, label %2399, label %2322

2322:                                             ; preds = %2310
  %2323 = add nuw nsw i64 %2314, 1
  %2324 = mul nuw nsw i64 %2323, %1112
  %2325 = getelementptr i8, i8* %2281, i64 %2324
  %2326 = mul nuw nsw i64 %2314, %1112
  %2327 = getelementptr i8, i8* %2280, i64 %2326
  %2328 = add i64 %2305, %2312
  %2329 = getelementptr i8, i8* %745, i64 %2328
  %2330 = add i64 %2304, %2312
  %2331 = getelementptr i8, i8* %745, i64 %2330
  %2332 = icmp ult i8* %2331, %2325
  %2333 = icmp ult i8* %2327, %2329
  %2334 = and i1 %2332, %2333
  br i1 %2334, label %2399, label %2335

2335:                                             ; preds = %2322
  br i1 %2289, label %2385, label %2336

2336:                                             ; preds = %2335
  br i1 %2292, label %2368, label %2337

2337:                                             ; preds = %2336, %2337
  %2338 = phi i64 [ %2365, %2337 ], [ 0, %2336 ]
  %2339 = phi i64 [ %2366, %2337 ], [ 0, %2336 ]
  %2340 = add i64 %2319, %2338
  %2341 = getelementptr inbounds i8, i8* %752, i64 %2340
  %2342 = bitcast i8* %2341 to <16 x i8>*
  %2343 = load <16 x i8>, <16 x i8>* %2342, align 1, !tbaa !14, !alias.scope !454
  %2344 = getelementptr inbounds i8, i8* %2341, i64 16
  %2345 = bitcast i8* %2344 to <16 x i8>*
  %2346 = load <16 x i8>, <16 x i8>* %2345, align 1, !tbaa !14, !alias.scope !454
  %2347 = add i64 %2338, %2321
  %2348 = getelementptr inbounds i8, i8* %745, i64 %2347
  %2349 = bitcast i8* %2348 to <16 x i8>*
  store <16 x i8> %2343, <16 x i8>* %2349, align 1, !tbaa !14, !alias.scope !457, !noalias !454
  %2350 = getelementptr inbounds i8, i8* %2348, i64 16
  %2351 = bitcast i8* %2350 to <16 x i8>*
  store <16 x i8> %2346, <16 x i8>* %2351, align 1, !tbaa !14, !alias.scope !457, !noalias !454
  %2352 = or i64 %2338, 32
  %2353 = add i64 %2319, %2352
  %2354 = getelementptr inbounds i8, i8* %752, i64 %2353
  %2355 = bitcast i8* %2354 to <16 x i8>*
  %2356 = load <16 x i8>, <16 x i8>* %2355, align 1, !tbaa !14, !alias.scope !454
  %2357 = getelementptr inbounds i8, i8* %2354, i64 16
  %2358 = bitcast i8* %2357 to <16 x i8>*
  %2359 = load <16 x i8>, <16 x i8>* %2358, align 1, !tbaa !14, !alias.scope !454
  %2360 = add i64 %2352, %2321
  %2361 = getelementptr inbounds i8, i8* %745, i64 %2360
  %2362 = bitcast i8* %2361 to <16 x i8>*
  store <16 x i8> %2356, <16 x i8>* %2362, align 1, !tbaa !14, !alias.scope !457, !noalias !454
  %2363 = getelementptr inbounds i8, i8* %2361, i64 16
  %2364 = bitcast i8* %2363 to <16 x i8>*
  store <16 x i8> %2359, <16 x i8>* %2364, align 1, !tbaa !14, !alias.scope !457, !noalias !454
  %2365 = add nuw i64 %2338, 64
  %2366 = add i64 %2339, 2
  %2367 = icmp eq i64 %2366, %2293
  br i1 %2367, label %2368, label %2337, !llvm.loop !459

2368:                                             ; preds = %2337, %2336
  %2369 = phi i64 [ 0, %2336 ], [ %2365, %2337 ]
  br i1 %2294, label %2383, label %2370

2370:                                             ; preds = %2368
  %2371 = add i64 %2319, %2369
  %2372 = getelementptr inbounds i8, i8* %752, i64 %2371
  %2373 = bitcast i8* %2372 to <16 x i8>*
  %2374 = load <16 x i8>, <16 x i8>* %2373, align 1, !tbaa !14, !alias.scope !454
  %2375 = getelementptr inbounds i8, i8* %2372, i64 16
  %2376 = bitcast i8* %2375 to <16 x i8>*
  %2377 = load <16 x i8>, <16 x i8>* %2376, align 1, !tbaa !14, !alias.scope !454
  %2378 = add i64 %2369, %2321
  %2379 = getelementptr inbounds i8, i8* %745, i64 %2378
  %2380 = bitcast i8* %2379 to <16 x i8>*
  store <16 x i8> %2374, <16 x i8>* %2380, align 1, !tbaa !14, !alias.scope !457, !noalias !454
  %2381 = getelementptr inbounds i8, i8* %2379, i64 16
  %2382 = bitcast i8* %2381 to <16 x i8>*
  store <16 x i8> %2377, <16 x i8>* %2382, align 1, !tbaa !14, !alias.scope !457, !noalias !454
  br label %2383

2383:                                             ; preds = %2368, %2370
  br i1 %2295, label %2444, label %2384

2384:                                             ; preds = %2383
  br i1 %2297, label %2399, label %2385

2385:                                             ; preds = %2335, %2384
  %2386 = phi i64 [ %2290, %2384 ], [ 0, %2335 ]
  br label %2387

2387:                                             ; preds = %2387, %2385
  %2388 = phi i64 [ %2386, %2385 ], [ %2396, %2387 ]
  %2389 = add i64 %2319, %2388
  %2390 = getelementptr inbounds i8, i8* %752, i64 %2389
  %2391 = bitcast i8* %2390 to <8 x i8>*
  %2392 = load <8 x i8>, <8 x i8>* %2391, align 1, !tbaa !14
  %2393 = add i64 %2388, %2321
  %2394 = getelementptr inbounds i8, i8* %745, i64 %2393
  %2395 = bitcast i8* %2394 to <8 x i8>*
  store <8 x i8> %2392, <8 x i8>* %2395, align 1, !tbaa !14
  %2396 = add nuw i64 %2388, 8
  %2397 = icmp eq i64 %2396, %2298
  br i1 %2397, label %2398, label %2387, !llvm.loop !460

2398:                                             ; preds = %2387
  br i1 %2299, label %2444, label %2399

2399:                                             ; preds = %2322, %2310, %2384, %2398
  %2400 = phi i64 [ 0, %2310 ], [ 0, %2322 ], [ %2290, %2384 ], [ %2298, %2398 ]
  %2401 = xor i64 %2400, -1
  %2402 = add nsw i64 %2401, %1112
  br i1 %2301, label %2414, label %2403

2403:                                             ; preds = %2399, %2403
  %2404 = phi i64 [ %2411, %2403 ], [ %2400, %2399 ]
  %2405 = phi i64 [ %2412, %2403 ], [ 0, %2399 ]
  %2406 = add i64 %2319, %2404
  %2407 = getelementptr inbounds i8, i8* %752, i64 %2406
  %2408 = load i8, i8* %2407, align 1, !tbaa !14
  %2409 = add i64 %2404, %2321
  %2410 = getelementptr inbounds i8, i8* %745, i64 %2409
  store i8 %2408, i8* %2410, align 1, !tbaa !14
  %2411 = add nuw nsw i64 %2404, 1
  %2412 = add i64 %2405, 1
  %2413 = icmp eq i64 %2412, %2300
  br i1 %2413, label %2414, label %2403, !llvm.loop !461

2414:                                             ; preds = %2403, %2399
  %2415 = phi i64 [ %2400, %2399 ], [ %2411, %2403 ]
  %2416 = icmp ult i64 %2402, 3
  br i1 %2416, label %2444, label %2417

2417:                                             ; preds = %2414, %2417
  %2418 = phi i64 [ %2442, %2417 ], [ %2415, %2414 ]
  %2419 = add i64 %2319, %2418
  %2420 = getelementptr inbounds i8, i8* %752, i64 %2419
  %2421 = load i8, i8* %2420, align 1, !tbaa !14
  %2422 = add i64 %2418, %2321
  %2423 = getelementptr inbounds i8, i8* %745, i64 %2422
  store i8 %2421, i8* %2423, align 1, !tbaa !14
  %2424 = add nuw nsw i64 %2418, 1
  %2425 = add i64 %2319, %2424
  %2426 = getelementptr inbounds i8, i8* %752, i64 %2425
  %2427 = load i8, i8* %2426, align 1, !tbaa !14
  %2428 = add i64 %2424, %2321
  %2429 = getelementptr inbounds i8, i8* %745, i64 %2428
  store i8 %2427, i8* %2429, align 1, !tbaa !14
  %2430 = add nuw nsw i64 %2418, 2
  %2431 = add i64 %2319, %2430
  %2432 = getelementptr inbounds i8, i8* %752, i64 %2431
  %2433 = load i8, i8* %2432, align 1, !tbaa !14
  %2434 = add i64 %2430, %2321
  %2435 = getelementptr inbounds i8, i8* %745, i64 %2434
  store i8 %2433, i8* %2435, align 1, !tbaa !14
  %2436 = add nuw nsw i64 %2418, 3
  %2437 = add i64 %2319, %2436
  %2438 = getelementptr inbounds i8, i8* %752, i64 %2437
  %2439 = load i8, i8* %2438, align 1, !tbaa !14
  %2440 = add i64 %2436, %2321
  %2441 = getelementptr inbounds i8, i8* %745, i64 %2440
  store i8 %2439, i8* %2441, align 1, !tbaa !14
  %2442 = add nuw nsw i64 %2418, 4
  %2443 = icmp eq i64 %2442, %1112
  br i1 %2443, label %2444, label %2417, !llvm.loop !462

2444:                                             ; preds = %2414, %2417, %2398, %2383
  %2445 = add nuw nsw i64 %2311, 1
  %2446 = icmp eq i64 %2445, %2275
  br i1 %2446, label %2447, label %2310

2447:                                             ; preds = %2444
  %2448 = add nuw nsw i64 %2303, 1
  %2449 = icmp eq i64 %2448, %2274
  br i1 %2449, label %1115, label %2302

2450:                                             ; preds = %1030, %2265, %2081, %2077
  %2451 = bitcast [7 x i32]* %7 to i8*
  %2452 = bitcast [7 x i32]* %8 to i8*
  %2453 = bitcast [8 x i64]* %9 to i8*
  %2454 = bitcast [8 x i64]* %10 to i8*
  %2455 = bitcast [8 x i64]* %11 to i8*
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %2455) #25
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %2454) #25
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %2453) #25
  call void @llvm.lifetime.end.p0i8(i64 28, i8* nonnull %2452) #25
  call void @llvm.lifetime.end.p0i8(i64 28, i8* nonnull %2451) #25
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %829) #25
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %828) #25
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %827) #25
  call void @llvm.lifetime.end.p0i8(i64 28, i8* nonnull %826) #25
  call void @llvm.lifetime.end.p0i8(i64 28, i8* nonnull %825) #25
  br label %2456

2456:                                             ; preds = %817, %2450, %821, %775
  br label %2457

2457:                                             ; preds = %2456, %914, %821, %772, %758
  %2458 = phi i32 [ 0, %2456 ], [ %773, %772 ], [ %822, %821 ], [ 31, %758 ], [ %915, %914 ]
  store i32 %2458, i32* %23, align 8, !tbaa !304
  br label %2463

2459:                                             ; preds = %93, %73, %80
  %2460 = phi i32 [ 92, %80 ], [ 92, %73 ], [ 83, %93 ]
  store i32 %2460, i32* %23, align 8, !tbaa !304
  br label %2461

2461:                                             ; preds = %2459, %6
  %2462 = phi i32 [ %22, %6 ], [ %2460, %2459 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %21) #25
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %20) #25
  br label %2605

2463:                                             ; preds = %715, %718, %719, %747, %2457
  %2464 = load i8*, i8** %18, align 8, !tbaa !7
  call void @free(i8* noundef %2464) #25
  %2465 = load i32, i32* %23, align 8, !tbaa !304
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %21) #25
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %20) #25
  %2466 = icmp eq i32 %2465, 0
  br i1 %2466, label %2467, label %2605

2467:                                             ; preds = %2463
  %2468 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %3, i64 0, i32 0, i32 4
  %2469 = load i32, i32* %2468, align 4, !tbaa !463
  %2470 = icmp eq i32 %2469, 0
  br i1 %2470, label %2546, label %2471

2471:                                             ; preds = %2467
  %2472 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %3, i64 0, i32 2
  %2473 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %2472, i64 0, i32 0
  %2474 = load i32, i32* %2473, align 8, !tbaa !147
  %2475 = load i32, i32* %30, align 8, !tbaa !147
  %2476 = icmp eq i32 %2474, %2475
  br i1 %2476, label %2477, label %2570

2477:                                             ; preds = %2471
  %2478 = load i32, i32* %44, align 4, !tbaa !150
  %2479 = load i32, i32* %32, align 4, !tbaa !150
  %2480 = icmp eq i32 %2478, %2479
  br i1 %2480, label %2481, label %2570

2481:                                             ; preds = %2477
  %2482 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %3, i64 0, i32 2, i32 4
  %2483 = load i32, i32* %2482, align 8, !tbaa !161
  %2484 = load i32, i32* %116, align 8, !tbaa !161
  %2485 = icmp eq i32 %2483, %2484
  br i1 %2485, label %2486, label %2570

2486:                                             ; preds = %2481
  %2487 = icmp eq i32 %2483, 0
  br i1 %2487, label %2503, label %2488

2488:                                             ; preds = %2486
  %2489 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %3, i64 0, i32 2, i32 5
  %2490 = load i32, i32* %2489, align 4, !tbaa !235
  %2491 = load i32, i32* %117, align 4, !tbaa !235
  %2492 = icmp eq i32 %2490, %2491
  br i1 %2492, label %2493, label %2570

2493:                                             ; preds = %2488
  %2494 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %3, i64 0, i32 2, i32 6
  %2495 = load i32, i32* %2494, align 8, !tbaa !236
  %2496 = load i32, i32* %118, align 8, !tbaa !236
  %2497 = icmp eq i32 %2495, %2496
  br i1 %2497, label %2498, label %2570

2498:                                             ; preds = %2493
  %2499 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %3, i64 0, i32 2, i32 7
  %2500 = load i32, i32* %2499, align 4, !tbaa !237
  %2501 = load i32, i32* %119, align 4, !tbaa !237
  %2502 = icmp eq i32 %2500, %2501
  br i1 %2502, label %2503, label %2570

2503:                                             ; preds = %2498, %2486
  %2504 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %3, i64 0, i32 2, i32 3
  %2505 = load i64, i64* %2504, align 8, !tbaa !156
  %2506 = load i64, i64* %115, align 8, !tbaa !156
  %2507 = icmp eq i64 %2505, %2506
  br i1 %2507, label %2508, label %2570

2508:                                             ; preds = %2503
  %2509 = shl i64 %2505, 2
  %2510 = icmp eq i64 %2509, 0
  br i1 %2510, label %2605, label %2511

2511:                                             ; preds = %2508
  %2512 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %3, i64 0, i32 2, i32 2
  %2513 = load i8*, i8** %2512, align 8, !tbaa !151
  %2514 = load i8*, i8** %120, align 8, !tbaa !151
  br label %2538

2515:                                             ; preds = %2538
  %2516 = getelementptr inbounds i8, i8* %2513, i64 %2545
  %2517 = load i8, i8* %2516, align 1, !tbaa !14
  %2518 = getelementptr inbounds i8, i8* %2514, i64 %2545
  %2519 = load i8, i8* %2518, align 1, !tbaa !14
  %2520 = icmp eq i8 %2517, %2519
  %2521 = or i64 %2539, 2
  br i1 %2520, label %2522, label %2570

2522:                                             ; preds = %2515
  %2523 = getelementptr inbounds i8, i8* %2513, i64 %2521
  %2524 = load i8, i8* %2523, align 1, !tbaa !14
  %2525 = getelementptr inbounds i8, i8* %2514, i64 %2521
  %2526 = load i8, i8* %2525, align 1, !tbaa !14
  %2527 = icmp eq i8 %2524, %2526
  %2528 = or i64 %2539, 3
  br i1 %2527, label %2529, label %2570

2529:                                             ; preds = %2522
  %2530 = getelementptr inbounds i8, i8* %2513, i64 %2528
  %2531 = load i8, i8* %2530, align 1, !tbaa !14
  %2532 = getelementptr inbounds i8, i8* %2514, i64 %2528
  %2533 = load i8, i8* %2532, align 1, !tbaa !14
  %2534 = icmp eq i8 %2531, %2533
  %2535 = add nuw i64 %2539, 4
  br i1 %2534, label %2536, label %2570

2536:                                             ; preds = %2529
  %2537 = icmp eq i64 %2535, %2509
  br i1 %2537, label %2605, label %2538

2538:                                             ; preds = %2536, %2511
  %2539 = phi i64 [ 0, %2511 ], [ %2535, %2536 ]
  %2540 = getelementptr inbounds i8, i8* %2513, i64 %2539
  %2541 = load i8, i8* %2540, align 1, !tbaa !14
  %2542 = getelementptr inbounds i8, i8* %2514, i64 %2539
  %2543 = load i8, i8* %2542, align 1, !tbaa !14
  %2544 = icmp eq i8 %2541, %2543
  %2545 = or i64 %2539, 1
  br i1 %2544, label %2515, label %2570

2546:                                             ; preds = %2467
  %2547 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %3, i64 0, i32 2, i32 2
  %2548 = load i8*, i8** %2547, align 8, !tbaa !151
  %2549 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %3, i64 0, i32 2
  %2550 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %3, i64 0, i32 2, i32 2
  %2551 = icmp eq i8* %2548, null
  br i1 %2551, label %2553, label %2552

2552:                                             ; preds = %2546
  call void @free(i8* noundef nonnull %2548) #25
  br label %2553

2553:                                             ; preds = %2552, %2546
  %2554 = bitcast %struct.LodePNGColorMode* %2549 to i8*
  %2555 = bitcast %struct.LodePNGColorMode* %29 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef nonnull align 1 dereferenceable(40) %2554, i8* noundef nonnull align 1 dereferenceable(40) %2555, i64 40, i1 false) #25, !tbaa !14, !alias.scope !464
  %2556 = load i8*, i8** %120, align 8, !tbaa !151
  %2557 = icmp eq i8* %2556, null
  br i1 %2557, label %2568, label %2558

2558:                                             ; preds = %2553
  %2559 = call noalias dereferenceable_or_null(1024) i8* @malloc(i64 noundef 1024) #25
  store i8* %2559, i8** %2550, align 8, !tbaa !151
  %2560 = icmp eq i8* %2559, null
  %2561 = load i64, i64* %115, align 8, !tbaa !156
  br i1 %2560, label %2562, label %2564

2562:                                             ; preds = %2558
  %2563 = icmp eq i64 %2561, 0
  br i1 %2563, label %2568, label %2569

2564:                                             ; preds = %2558
  %2565 = shl i64 %2561, 2
  %2566 = icmp eq i64 %2565, 0
  br i1 %2566, label %2568, label %2567

2567:                                             ; preds = %2564
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %2559, i8* nonnull align 1 %2556, i64 %2565, i1 false) #25, !tbaa !14, !alias.scope !468
  br label %2568

2568:                                             ; preds = %2553, %2564, %2567, %2562
  store i32 0, i32* %23, align 8, !tbaa !304
  br label %2605

2569:                                             ; preds = %2562
  store i32 83, i32* %23, align 8, !tbaa !304
  br label %2605

2570:                                             ; preds = %2538, %2515, %2522, %2529, %2471, %2477, %2481, %2488, %2493, %2498, %2503
  %2571 = load i8*, i8** %0, align 8, !tbaa !7
  switch i32 %2474, label %2572 [
    i32 2, label %2575
    i32 6, label %2575
  ]

2572:                                             ; preds = %2570
  %2573 = load i32, i32* %44, align 4, !tbaa !472
  %2574 = icmp eq i32 %2573, 8
  br i1 %2574, label %2575, label %2605

2575:                                             ; preds = %2570, %2570, %2572
  %2576 = load i32, i32* %1, align 4, !tbaa !9
  %2577 = load i32, i32* %2, align 4, !tbaa !9
  %2578 = load i32, i32* %44, align 4, !tbaa !150
  switch i32 %2474, label %2583 [
    i32 0, label %2584
    i32 2, label %2579
    i32 3, label %2584
    i32 4, label %2580
    i32 6, label %2581
    i32 255, label %2582
  ]

2579:                                             ; preds = %2575
  br label %2584

2580:                                             ; preds = %2575
  br label %2584

2581:                                             ; preds = %2575
  br label %2584

2582:                                             ; preds = %2575
  br label %2584

2583:                                             ; preds = %2575
  br label %2584

2584:                                             ; preds = %2575, %2575, %2579, %2580, %2581, %2582, %2583
  %2585 = phi i32 [ 0, %2583 ], [ 0, %2582 ], [ 4, %2581 ], [ 2, %2580 ], [ 3, %2579 ], [ 1, %2575 ], [ 1, %2575 ]
  %2586 = mul i32 %2585, %2578
  %2587 = zext i32 %2586 to i64
  %2588 = zext i32 %2576 to i64
  %2589 = zext i32 %2577 to i64
  %2590 = mul nuw i64 %2589, %2588
  %2591 = lshr i64 %2590, 3
  %2592 = mul i64 %2591, %2587
  %2593 = and i64 %2590, 7
  %2594 = mul nuw nsw i64 %2593, %2587
  %2595 = add nuw nsw i64 %2594, 7
  %2596 = lshr i64 %2595, 3
  %2597 = add i64 %2596, %2592
  %2598 = call noalias i8* @malloc(i64 noundef %2597) #25
  store i8* %2598, i8** %0, align 8, !tbaa !7
  %2599 = icmp eq i8* %2598, null
  br i1 %2599, label %2602, label %2600

2600:                                             ; preds = %2584
  %2601 = call noundef i32 @_Z15lodepng_convertPhPKhPK16LodePNGColorModeS4_jj(i8* noundef nonnull %2598, i8* noundef %2571, %struct.LodePNGColorMode* noundef nonnull %2472, %struct.LodePNGColorMode* noundef nonnull %29, i32 noundef %2576, i32 noundef %2577)
  br label %2602

2602:                                             ; preds = %2600, %2584
  %2603 = phi i32 [ %2601, %2600 ], [ 83, %2584 ]
  store i32 %2603, i32* %23, align 8, !tbaa !304
  call void @free(i8* noundef %2571) #25
  %2604 = load i32, i32* %23, align 8, !tbaa !304
  br label %2605

2605:                                             ; preds = %2536, %2568, %2602, %2508, %2572, %2569, %2461, %2463
  %2606 = phi i32 [ %2465, %2463 ], [ 83, %2569 ], [ %2462, %2461 ], [ 56, %2572 ], [ 0, %2508 ], [ %2604, %2602 ], [ 0, %2568 ], [ 0, %2536 ]
  ret i32 %2606
}

; Function Attrs: nofree nosync nounwind uwtable
define internal fastcc noundef i32 @_ZL8unfilterPhPKhjjj(i8* noundef %0, i8* noundef readonly %1, i32 noundef %2, i32 noundef %3, i32 noundef %4) unnamed_addr #8 {
  %6 = add i32 %4, 7
  %7 = lshr i32 %6, 3
  %8 = zext i32 %7 to i64
  %9 = lshr i32 %2, 3
  %10 = zext i32 %9 to i64
  %11 = zext i32 %4 to i64
  %12 = mul nuw nsw i64 %11, %10
  %13 = and i32 %2, 7
  %14 = mul i32 %13, %4
  %15 = add i32 %14, 7
  %16 = lshr i32 %15, 3
  %17 = zext i32 %16 to i64
  %18 = add nuw nsw i64 %12, %17
  %19 = add nuw nsw i64 %18, 1
  %20 = icmp eq i32 %3, 0
  br i1 %20, label %2626, label %21

21:                                               ; preds = %5
  %22 = icmp eq i64 %18, 0
  %23 = icmp ugt i64 %18, 1
  %24 = icmp ugt i64 %18, 2
  %25 = icmp ugt i64 %18, 3
  %26 = icmp ugt i64 %18, 5
  %27 = icmp ugt i64 %18, 7
  %28 = icmp ult i32 %6, 8
  %29 = icmp eq i64 %18, %8
  %30 = icmp ugt i32 %6, 31
  %31 = icmp eq i32 %7, 3
  %32 = icmp ugt i32 %6, 15
  %33 = add nuw nsw i64 %8, 1
  %34 = icmp ult i64 %33, %18
  %35 = and i1 %32, %34
  %36 = add nuw nsw i64 %8, 2
  %37 = icmp ult i64 %36, %18
  %38 = add nuw nsw i64 %8, 3
  %39 = icmp ult i64 %38, %18
  %40 = zext i32 %3 to i64
  %41 = add nuw nsw i64 %12, %17
  %42 = sub nsw i64 %41, %8
  %43 = add nuw nsw i64 %12, %17
  %44 = add nuw nsw i64 %12, %17
  %45 = sub nsw i64 %44, %8
  %46 = sub nsw i64 0, %8
  %47 = add nuw nsw i64 %12, %17
  %48 = add nuw nsw i64 %12, %17
  %49 = lshr i32 %6, 3
  %50 = and i32 %49, 536870880
  %51 = zext i32 %50 to i64
  %52 = add nsw i64 %51, -32
  %53 = lshr exact i64 %52, 5
  %54 = add nuw nsw i64 %53, 1
  %55 = add i64 %45, -32
  %56 = lshr i64 %55, 5
  %57 = add nuw nsw i64 %56, 1
  %58 = add nuw nsw i64 %12, %17
  %59 = add nuw nsw i64 %12, %17
  %60 = add nuw nsw i64 %12, %17
  %61 = add nuw nsw i64 %12, %17
  %62 = add nuw nsw i64 %12, %17
  %63 = add nuw nsw i64 %12, %17
  %64 = and i64 %18, 4611686018427387872
  %65 = add nsw i64 %64, -32
  %66 = lshr exact i64 %65, 5
  %67 = add nuw nsw i64 %66, 1
  %68 = add nuw nsw i64 %12, %17
  %69 = add nuw nsw i64 %12, %17
  %70 = add nuw nsw i64 %12, %17
  %71 = add nuw nsw i64 %12, %17
  %72 = add nuw nsw i64 %12, %17
  %73 = add nuw nsw i64 %12, %17
  %74 = add nuw nsw i64 %12, %17
  %75 = add nuw nsw i64 %12, %17
  %76 = icmp ult i32 %6, 64
  %77 = icmp ult i32 %6, 256
  %78 = and i64 %8, 536870880
  %79 = and i64 %54, 1
  %80 = icmp eq i64 %52, 0
  %81 = and i64 %54, 1152921504606846974
  %82 = icmp eq i64 %79, 0
  %83 = icmp eq i64 %78, %8
  %84 = and i64 %8, 24
  %85 = icmp eq i64 %84, 0
  %86 = and i64 %8, 536870904
  %87 = icmp eq i64 %86, %8
  %88 = and i64 %8, 3
  %89 = icmp eq i64 %88, 0
  %90 = icmp ult i32 %6, 64
  %91 = icmp ult i32 %6, 256
  %92 = and i64 %8, 536870880
  %93 = and i64 %54, 3
  %94 = icmp ult i64 %52, 96
  %95 = and i64 %54, 1152921504606846972
  %96 = icmp eq i64 %93, 0
  %97 = icmp eq i64 %92, %8
  %98 = and i64 %8, 24
  %99 = icmp eq i64 %98, 0
  %100 = and i64 %8, 536870904
  %101 = icmp eq i64 %100, %8
  %102 = and i64 %8, 3
  %103 = icmp eq i64 %102, 0
  %104 = icmp ult i64 %45, 8
  %105 = icmp ult i64 %45, 32
  %106 = and i64 %45, -32
  %107 = and i64 %57, 1
  %108 = icmp ult i64 %55, 32
  %109 = and i64 %57, 1152921504606846974
  %110 = icmp eq i64 %107, 0
  %111 = icmp eq i64 %45, %106
  %112 = add i64 %106, %8
  %113 = and i64 %45, 24
  %114 = icmp eq i64 %113, 0
  %115 = and i64 %45, -8
  %116 = add i64 %115, %8
  %117 = icmp eq i64 %45, %115
  %118 = icmp ult i32 %6, 64
  %119 = icmp ult i32 %6, 256
  %120 = and i64 %8, 536870880
  %121 = and i64 %54, 1
  %122 = icmp eq i64 %52, 0
  %123 = and i64 %54, 1152921504606846974
  %124 = icmp eq i64 %121, 0
  %125 = icmp eq i64 %120, %8
  %126 = and i64 %8, 24
  %127 = icmp eq i64 %126, 0
  %128 = and i64 %8, 536870904
  %129 = icmp eq i64 %128, %8
  %130 = and i64 %8, 1
  %131 = icmp eq i64 %130, 0
  %132 = sub nsw i64 0, %8
  %133 = icmp ult i32 %6, 64
  %134 = icmp ult i32 %6, 256
  %135 = and i64 %8, 536870880
  %136 = and i64 %54, 3
  %137 = icmp ult i64 %52, 96
  %138 = and i64 %54, 1152921504606846972
  %139 = icmp eq i64 %136, 0
  %140 = icmp eq i64 %135, %8
  %141 = and i64 %8, 24
  %142 = icmp eq i64 %141, 0
  %143 = and i64 %8, 536870904
  %144 = icmp eq i64 %143, %8
  %145 = and i64 %8, 3
  %146 = icmp eq i64 %145, 0
  %147 = icmp ult i64 %42, 8
  %148 = icmp ult i64 %42, 32
  %149 = and i64 %42, -32
  %150 = and i64 %57, 1
  %151 = icmp ult i64 %55, 32
  %152 = and i64 %57, 1152921504606846974
  %153 = icmp eq i64 %150, 0
  %154 = icmp eq i64 %42, %149
  %155 = add i64 %149, %8
  %156 = and i64 %42, 24
  %157 = icmp eq i64 %156, 0
  %158 = and i64 %42, -8
  %159 = add i64 %158, %8
  %160 = icmp eq i64 %42, %158
  %161 = icmp ult i64 %18, 8
  %162 = icmp ult i64 %18, 32
  %163 = and i64 %18, 4611686018427387872
  %164 = and i64 %67, 1
  %165 = icmp eq i64 %65, 0
  %166 = and i64 %67, 1152921504606846974
  %167 = icmp eq i64 %164, 0
  %168 = icmp eq i64 %18, %163
  %169 = and i64 %18, 24
  %170 = icmp eq i64 %169, 0
  %171 = and i64 %18, 4611686018427387896
  %172 = icmp eq i64 %18, %171
  %173 = and i64 %68, 3
  %174 = icmp eq i64 %173, 0
  %175 = icmp ult i64 %18, 8
  %176 = icmp ult i64 %18, 32
  %177 = and i64 %18, 4611686018427387872
  %178 = and i64 %67, 3
  %179 = icmp ult i64 %65, 96
  %180 = and i64 %67, 1152921504606846972
  %181 = icmp eq i64 %178, 0
  %182 = icmp eq i64 %18, %177
  %183 = and i64 %18, 24
  %184 = icmp eq i64 %183, 0
  %185 = and i64 %18, 4611686018427387896
  %186 = icmp eq i64 %18, %185
  %187 = and i64 %70, 3
  %188 = icmp eq i64 %187, 0
  %189 = icmp ult i32 %6, 64
  %190 = icmp ult i32 %6, 256
  %191 = and i64 %8, 536870880
  %192 = and i64 %54, 3
  %193 = icmp ult i64 %52, 96
  %194 = and i64 %54, 1152921504606846972
  %195 = icmp eq i64 %192, 0
  %196 = icmp eq i64 %191, %8
  %197 = and i64 %8, 24
  %198 = icmp eq i64 %197, 0
  %199 = and i64 %8, 536870904
  %200 = icmp eq i64 %199, %8
  %201 = and i64 %8, 3
  %202 = icmp eq i64 %201, 0
  %203 = icmp ult i64 %42, 8
  %204 = icmp ult i64 %42, 32
  %205 = and i64 %42, -32
  %206 = and i64 %57, 1
  %207 = icmp ult i64 %55, 32
  %208 = and i64 %57, 1152921504606846974
  %209 = icmp eq i64 %206, 0
  %210 = icmp eq i64 %42, %205
  %211 = add i64 %205, %8
  %212 = and i64 %42, 24
  %213 = icmp eq i64 %212, 0
  %214 = and i64 %42, -8
  %215 = add i64 %214, %8
  %216 = icmp eq i64 %42, %214
  %217 = icmp ult i64 %18, 8
  %218 = icmp ult i64 %18, 32
  %219 = and i64 %18, 4611686018427387872
  %220 = and i64 %67, 3
  %221 = icmp ult i64 %65, 96
  %222 = and i64 %67, 1152921504606846972
  %223 = icmp eq i64 %220, 0
  %224 = icmp eq i64 %18, %219
  %225 = and i64 %18, 24
  %226 = icmp eq i64 %225, 0
  %227 = and i64 %18, 4611686018427387896
  %228 = icmp eq i64 %18, %227
  %229 = and i64 %74, 3
  %230 = icmp eq i64 %229, 0
  br label %231

231:                                              ; preds = %21, %2623
  %232 = phi i64 [ 0, %21 ], [ %2624, %2623 ]
  %233 = phi i8* [ null, %21 ], [ %371, %2623 ]
  %234 = mul i64 %18, %232
  %235 = getelementptr i8, i8* %0, i64 %234
  %236 = add i64 %234, %8
  %237 = getelementptr i8, i8* %0, i64 %236
  %238 = mul i64 %19, %232
  %239 = add i64 %238, 1
  %240 = getelementptr i8, i8* %1, i64 %239
  %241 = add i64 %33, %238
  %242 = getelementptr i8, i8* %1, i64 %241
  %243 = mul i64 %18, %232
  %244 = getelementptr i8, i8* %0, i64 %243
  %245 = add i64 %18, %243
  %246 = getelementptr i8, i8* %0, i64 %245
  %247 = mul i64 %19, %232
  %248 = add i64 %247, 1
  %249 = getelementptr i8, i8* %1, i64 %248
  %250 = add i64 %19, %247
  %251 = getelementptr i8, i8* %1, i64 %250
  %252 = sub i64 %243, %8
  %253 = getelementptr i8, i8* %0, i64 %252
  %254 = add i64 %45, %243
  %255 = getelementptr i8, i8* %0, i64 %254
  %256 = mul i64 %18, %232
  %257 = getelementptr i8, i8* %0, i64 %256
  %258 = add i64 %256, %8
  %259 = getelementptr i8, i8* %0, i64 %258
  %260 = mul i64 %19, %232
  %261 = add i64 %260, 1
  %262 = getelementptr i8, i8* %1, i64 %261
  %263 = add i64 %33, %260
  %264 = getelementptr i8, i8* %1, i64 %263
  %265 = mul i64 %18, %232
  %266 = add i64 %265, %8
  %267 = getelementptr i8, i8* %0, i64 %266
  %268 = add i64 %18, %265
  %269 = getelementptr i8, i8* %0, i64 %268
  %270 = mul i64 %19, %232
  %271 = add i64 %33, %270
  %272 = getelementptr i8, i8* %1, i64 %271
  %273 = add i64 %19, %270
  %274 = getelementptr i8, i8* %1, i64 %273
  %275 = getelementptr i8, i8* %0, i64 %265
  %276 = add i64 %45, %265
  %277 = getelementptr i8, i8* %0, i64 %276
  %278 = mul i64 %18, %232
  %279 = getelementptr i8, i8* %0, i64 %278
  %280 = add i64 %278, %8
  %281 = getelementptr i8, i8* %0, i64 %280
  %282 = mul i64 %19, %232
  %283 = add i64 %282, 1
  %284 = getelementptr i8, i8* %1, i64 %283
  %285 = add i64 %33, %282
  %286 = getelementptr i8, i8* %1, i64 %285
  %287 = mul i64 %18, %232
  %288 = getelementptr i8, i8* %0, i64 %287
  %289 = add i64 %18, %287
  %290 = getelementptr i8, i8* %0, i64 %289
  %291 = mul i64 %19, %232
  %292 = add i64 %291, 1
  %293 = getelementptr i8, i8* %1, i64 %292
  %294 = add i64 %19, %291
  %295 = getelementptr i8, i8* %1, i64 %294
  %296 = mul i64 %18, %232
  %297 = getelementptr i8, i8* %0, i64 %296
  %298 = add i64 %296, %8
  %299 = getelementptr i8, i8* %0, i64 %298
  %300 = mul i64 %19, %232
  %301 = add i64 %300, 1
  %302 = getelementptr i8, i8* %1, i64 %301
  %303 = add i64 %33, %300
  %304 = getelementptr i8, i8* %1, i64 %303
  %305 = mul i64 %18, %232
  %306 = add i64 %305, %8
  %307 = getelementptr i8, i8* %0, i64 %306
  %308 = add i64 %18, %305
  %309 = getelementptr i8, i8* %0, i64 %308
  %310 = mul i64 %19, %232
  %311 = add i64 %33, %310
  %312 = getelementptr i8, i8* %1, i64 %311
  %313 = add i64 %19, %310
  %314 = getelementptr i8, i8* %1, i64 %313
  %315 = getelementptr i8, i8* %0, i64 %305
  %316 = add i64 %42, %305
  %317 = getelementptr i8, i8* %0, i64 %316
  %318 = mul i64 %18, %232
  %319 = getelementptr i8, i8* %0, i64 %318
  %320 = add i64 %18, %318
  %321 = getelementptr i8, i8* %0, i64 %320
  %322 = mul i64 %19, %232
  %323 = add i64 %322, 1
  %324 = getelementptr i8, i8* %1, i64 %323
  %325 = add i64 %19, %322
  %326 = getelementptr i8, i8* %1, i64 %325
  %327 = mul i64 %18, %232
  %328 = getelementptr i8, i8* %0, i64 %327
  %329 = add i64 %18, %327
  %330 = getelementptr i8, i8* %0, i64 %329
  %331 = mul i64 %19, %232
  %332 = add i64 %331, 1
  %333 = getelementptr i8, i8* %1, i64 %332
  %334 = add i64 %19, %331
  %335 = getelementptr i8, i8* %1, i64 %334
  %336 = mul i64 %18, %232
  %337 = getelementptr i8, i8* %0, i64 %336
  %338 = add i64 %336, %8
  %339 = getelementptr i8, i8* %0, i64 %338
  %340 = mul i64 %19, %232
  %341 = add i64 %340, 1
  %342 = getelementptr i8, i8* %1, i64 %341
  %343 = add i64 %33, %340
  %344 = getelementptr i8, i8* %1, i64 %343
  %345 = mul i64 %18, %232
  %346 = add i64 %345, %8
  %347 = getelementptr i8, i8* %0, i64 %346
  %348 = add i64 %18, %345
  %349 = getelementptr i8, i8* %0, i64 %348
  %350 = mul i64 %19, %232
  %351 = add i64 %33, %350
  %352 = getelementptr i8, i8* %1, i64 %351
  %353 = add i64 %19, %350
  %354 = getelementptr i8, i8* %1, i64 %353
  %355 = getelementptr i8, i8* %0, i64 %345
  %356 = add i64 %42, %345
  %357 = getelementptr i8, i8* %0, i64 %356
  %358 = mul i64 %18, %232
  %359 = getelementptr i8, i8* %0, i64 %358
  %360 = add i64 %18, %358
  %361 = getelementptr i8, i8* %0, i64 %360
  %362 = mul i64 %19, %232
  %363 = add i64 %362, 1
  %364 = getelementptr i8, i8* %1, i64 %363
  %365 = add i64 %19, %362
  %366 = getelementptr i8, i8* %1, i64 %365
  %367 = mul i64 %18, %232
  %368 = mul i64 %19, %232
  %369 = getelementptr inbounds i8, i8* %1, i64 %368
  %370 = load i8, i8* %369, align 1, !tbaa !14
  %371 = getelementptr inbounds i8, i8* %0, i64 %367
  %372 = add i64 %368, 1
  %373 = getelementptr inbounds i8, i8* %1, i64 %372
  switch i8 %370, label %2626 [
    i8 0, label %479
    i8 1, label %374
    i8 2, label %760
    i8 3, label %1031
    i8 4, label %1765
  ]

374:                                              ; preds = %231
  br i1 %28, label %603, label %375

375:                                              ; preds = %374
  br i1 %189, label %463, label %376

376:                                              ; preds = %375
  %377 = icmp ult i8* %337, %344
  %378 = icmp ult i8* %342, %339
  %379 = and i1 %377, %378
  br i1 %379, label %463, label %380

380:                                              ; preds = %376
  br i1 %190, label %451, label %381

381:                                              ; preds = %380
  br i1 %193, label %431, label %382

382:                                              ; preds = %381, %382
  %383 = phi i64 [ %428, %382 ], [ 0, %381 ]
  %384 = phi i64 [ %429, %382 ], [ 0, %381 ]
  %385 = getelementptr inbounds i8, i8* %373, i64 %383
  %386 = bitcast i8* %385 to <16 x i8>*
  %387 = load <16 x i8>, <16 x i8>* %386, align 1, !tbaa !14, !alias.scope !473
  %388 = getelementptr inbounds i8, i8* %385, i64 16
  %389 = bitcast i8* %388 to <16 x i8>*
  %390 = load <16 x i8>, <16 x i8>* %389, align 1, !tbaa !14, !alias.scope !473
  %391 = getelementptr inbounds i8, i8* %371, i64 %383
  %392 = bitcast i8* %391 to <16 x i8>*
  store <16 x i8> %387, <16 x i8>* %392, align 1, !tbaa !14, !alias.scope !476, !noalias !473
  %393 = getelementptr inbounds i8, i8* %391, i64 16
  %394 = bitcast i8* %393 to <16 x i8>*
  store <16 x i8> %390, <16 x i8>* %394, align 1, !tbaa !14, !alias.scope !476, !noalias !473
  %395 = or i64 %383, 32
  %396 = getelementptr inbounds i8, i8* %373, i64 %395
  %397 = bitcast i8* %396 to <16 x i8>*
  %398 = load <16 x i8>, <16 x i8>* %397, align 1, !tbaa !14, !alias.scope !473
  %399 = getelementptr inbounds i8, i8* %396, i64 16
  %400 = bitcast i8* %399 to <16 x i8>*
  %401 = load <16 x i8>, <16 x i8>* %400, align 1, !tbaa !14, !alias.scope !473
  %402 = getelementptr inbounds i8, i8* %371, i64 %395
  %403 = bitcast i8* %402 to <16 x i8>*
  store <16 x i8> %398, <16 x i8>* %403, align 1, !tbaa !14, !alias.scope !476, !noalias !473
  %404 = getelementptr inbounds i8, i8* %402, i64 16
  %405 = bitcast i8* %404 to <16 x i8>*
  store <16 x i8> %401, <16 x i8>* %405, align 1, !tbaa !14, !alias.scope !476, !noalias !473
  %406 = or i64 %383, 64
  %407 = getelementptr inbounds i8, i8* %373, i64 %406
  %408 = bitcast i8* %407 to <16 x i8>*
  %409 = load <16 x i8>, <16 x i8>* %408, align 1, !tbaa !14, !alias.scope !473
  %410 = getelementptr inbounds i8, i8* %407, i64 16
  %411 = bitcast i8* %410 to <16 x i8>*
  %412 = load <16 x i8>, <16 x i8>* %411, align 1, !tbaa !14, !alias.scope !473
  %413 = getelementptr inbounds i8, i8* %371, i64 %406
  %414 = bitcast i8* %413 to <16 x i8>*
  store <16 x i8> %409, <16 x i8>* %414, align 1, !tbaa !14, !alias.scope !476, !noalias !473
  %415 = getelementptr inbounds i8, i8* %413, i64 16
  %416 = bitcast i8* %415 to <16 x i8>*
  store <16 x i8> %412, <16 x i8>* %416, align 1, !tbaa !14, !alias.scope !476, !noalias !473
  %417 = or i64 %383, 96
  %418 = getelementptr inbounds i8, i8* %373, i64 %417
  %419 = bitcast i8* %418 to <16 x i8>*
  %420 = load <16 x i8>, <16 x i8>* %419, align 1, !tbaa !14, !alias.scope !473
  %421 = getelementptr inbounds i8, i8* %418, i64 16
  %422 = bitcast i8* %421 to <16 x i8>*
  %423 = load <16 x i8>, <16 x i8>* %422, align 1, !tbaa !14, !alias.scope !473
  %424 = getelementptr inbounds i8, i8* %371, i64 %417
  %425 = bitcast i8* %424 to <16 x i8>*
  store <16 x i8> %420, <16 x i8>* %425, align 1, !tbaa !14, !alias.scope !476, !noalias !473
  %426 = getelementptr inbounds i8, i8* %424, i64 16
  %427 = bitcast i8* %426 to <16 x i8>*
  store <16 x i8> %423, <16 x i8>* %427, align 1, !tbaa !14, !alias.scope !476, !noalias !473
  %428 = add nuw i64 %383, 128
  %429 = add i64 %384, 4
  %430 = icmp eq i64 %429, %194
  br i1 %430, label %431, label %382, !llvm.loop !478

431:                                              ; preds = %382, %381
  %432 = phi i64 [ 0, %381 ], [ %428, %382 ]
  br i1 %195, label %449, label %433

433:                                              ; preds = %431, %433
  %434 = phi i64 [ %446, %433 ], [ %432, %431 ]
  %435 = phi i64 [ %447, %433 ], [ 0, %431 ]
  %436 = getelementptr inbounds i8, i8* %373, i64 %434
  %437 = bitcast i8* %436 to <16 x i8>*
  %438 = load <16 x i8>, <16 x i8>* %437, align 1, !tbaa !14, !alias.scope !473
  %439 = getelementptr inbounds i8, i8* %436, i64 16
  %440 = bitcast i8* %439 to <16 x i8>*
  %441 = load <16 x i8>, <16 x i8>* %440, align 1, !tbaa !14, !alias.scope !473
  %442 = getelementptr inbounds i8, i8* %371, i64 %434
  %443 = bitcast i8* %442 to <16 x i8>*
  store <16 x i8> %438, <16 x i8>* %443, align 1, !tbaa !14, !alias.scope !476, !noalias !473
  %444 = getelementptr inbounds i8, i8* %442, i64 16
  %445 = bitcast i8* %444 to <16 x i8>*
  store <16 x i8> %441, <16 x i8>* %445, align 1, !tbaa !14, !alias.scope !476, !noalias !473
  %446 = add nuw i64 %434, 32
  %447 = add i64 %435, 1
  %448 = icmp eq i64 %447, %192
  br i1 %448, label %449, label %433, !llvm.loop !479

449:                                              ; preds = %433, %431
  br i1 %196, label %603, label %450

450:                                              ; preds = %449
  br i1 %198, label %463, label %451

451:                                              ; preds = %380, %450
  %452 = phi i64 [ %191, %450 ], [ 0, %380 ]
  br label %453

453:                                              ; preds = %453, %451
  %454 = phi i64 [ %452, %451 ], [ %460, %453 ]
  %455 = getelementptr inbounds i8, i8* %373, i64 %454
  %456 = bitcast i8* %455 to <8 x i8>*
  %457 = load <8 x i8>, <8 x i8>* %456, align 1, !tbaa !14
  %458 = getelementptr inbounds i8, i8* %371, i64 %454
  %459 = bitcast i8* %458 to <8 x i8>*
  store <8 x i8> %457, <8 x i8>* %459, align 1, !tbaa !14
  %460 = add nuw i64 %454, 8
  %461 = icmp eq i64 %460, %199
  br i1 %461, label %462, label %453, !llvm.loop !480

462:                                              ; preds = %453
  br i1 %200, label %603, label %463

463:                                              ; preds = %376, %375, %450, %462
  %464 = phi i64 [ 0, %375 ], [ 0, %376 ], [ %191, %450 ], [ %199, %462 ]
  %465 = xor i64 %464, -1
  %466 = add nsw i64 %465, %8
  br i1 %202, label %476, label %467

467:                                              ; preds = %463, %467
  %468 = phi i64 [ %473, %467 ], [ %464, %463 ]
  %469 = phi i64 [ %474, %467 ], [ 0, %463 ]
  %470 = getelementptr inbounds i8, i8* %373, i64 %468
  %471 = load i8, i8* %470, align 1, !tbaa !14
  %472 = getelementptr inbounds i8, i8* %371, i64 %468
  store i8 %471, i8* %472, align 1, !tbaa !14
  %473 = add nuw nsw i64 %468, 1
  %474 = add i64 %469, 1
  %475 = icmp eq i64 %474, %201
  br i1 %475, label %476, label %467, !llvm.loop !481

476:                                              ; preds = %467, %463
  %477 = phi i64 [ %464, %463 ], [ %473, %467 ]
  %478 = icmp ult i64 %466, 3
  br i1 %478, label %603, label %721

479:                                              ; preds = %231
  br i1 %22, label %2623, label %480

480:                                              ; preds = %479
  br i1 %217, label %568, label %481

481:                                              ; preds = %480
  %482 = icmp ult i8* %359, %366
  %483 = icmp ult i8* %364, %361
  %484 = and i1 %482, %483
  br i1 %484, label %568, label %485

485:                                              ; preds = %481
  br i1 %218, label %556, label %486

486:                                              ; preds = %485
  br i1 %221, label %536, label %487

487:                                              ; preds = %486, %487
  %488 = phi i64 [ %533, %487 ], [ 0, %486 ]
  %489 = phi i64 [ %534, %487 ], [ 0, %486 ]
  %490 = getelementptr inbounds i8, i8* %373, i64 %488
  %491 = bitcast i8* %490 to <16 x i8>*
  %492 = load <16 x i8>, <16 x i8>* %491, align 1, !tbaa !14, !alias.scope !482
  %493 = getelementptr inbounds i8, i8* %490, i64 16
  %494 = bitcast i8* %493 to <16 x i8>*
  %495 = load <16 x i8>, <16 x i8>* %494, align 1, !tbaa !14, !alias.scope !482
  %496 = getelementptr inbounds i8, i8* %371, i64 %488
  %497 = bitcast i8* %496 to <16 x i8>*
  store <16 x i8> %492, <16 x i8>* %497, align 1, !tbaa !14, !alias.scope !485, !noalias !482
  %498 = getelementptr inbounds i8, i8* %496, i64 16
  %499 = bitcast i8* %498 to <16 x i8>*
  store <16 x i8> %495, <16 x i8>* %499, align 1, !tbaa !14, !alias.scope !485, !noalias !482
  %500 = or i64 %488, 32
  %501 = getelementptr inbounds i8, i8* %373, i64 %500
  %502 = bitcast i8* %501 to <16 x i8>*
  %503 = load <16 x i8>, <16 x i8>* %502, align 1, !tbaa !14, !alias.scope !482
  %504 = getelementptr inbounds i8, i8* %501, i64 16
  %505 = bitcast i8* %504 to <16 x i8>*
  %506 = load <16 x i8>, <16 x i8>* %505, align 1, !tbaa !14, !alias.scope !482
  %507 = getelementptr inbounds i8, i8* %371, i64 %500
  %508 = bitcast i8* %507 to <16 x i8>*
  store <16 x i8> %503, <16 x i8>* %508, align 1, !tbaa !14, !alias.scope !485, !noalias !482
  %509 = getelementptr inbounds i8, i8* %507, i64 16
  %510 = bitcast i8* %509 to <16 x i8>*
  store <16 x i8> %506, <16 x i8>* %510, align 1, !tbaa !14, !alias.scope !485, !noalias !482
  %511 = or i64 %488, 64
  %512 = getelementptr inbounds i8, i8* %373, i64 %511
  %513 = bitcast i8* %512 to <16 x i8>*
  %514 = load <16 x i8>, <16 x i8>* %513, align 1, !tbaa !14, !alias.scope !482
  %515 = getelementptr inbounds i8, i8* %512, i64 16
  %516 = bitcast i8* %515 to <16 x i8>*
  %517 = load <16 x i8>, <16 x i8>* %516, align 1, !tbaa !14, !alias.scope !482
  %518 = getelementptr inbounds i8, i8* %371, i64 %511
  %519 = bitcast i8* %518 to <16 x i8>*
  store <16 x i8> %514, <16 x i8>* %519, align 1, !tbaa !14, !alias.scope !485, !noalias !482
  %520 = getelementptr inbounds i8, i8* %518, i64 16
  %521 = bitcast i8* %520 to <16 x i8>*
  store <16 x i8> %517, <16 x i8>* %521, align 1, !tbaa !14, !alias.scope !485, !noalias !482
  %522 = or i64 %488, 96
  %523 = getelementptr inbounds i8, i8* %373, i64 %522
  %524 = bitcast i8* %523 to <16 x i8>*
  %525 = load <16 x i8>, <16 x i8>* %524, align 1, !tbaa !14, !alias.scope !482
  %526 = getelementptr inbounds i8, i8* %523, i64 16
  %527 = bitcast i8* %526 to <16 x i8>*
  %528 = load <16 x i8>, <16 x i8>* %527, align 1, !tbaa !14, !alias.scope !482
  %529 = getelementptr inbounds i8, i8* %371, i64 %522
  %530 = bitcast i8* %529 to <16 x i8>*
  store <16 x i8> %525, <16 x i8>* %530, align 1, !tbaa !14, !alias.scope !485, !noalias !482
  %531 = getelementptr inbounds i8, i8* %529, i64 16
  %532 = bitcast i8* %531 to <16 x i8>*
  store <16 x i8> %528, <16 x i8>* %532, align 1, !tbaa !14, !alias.scope !485, !noalias !482
  %533 = add nuw i64 %488, 128
  %534 = add i64 %489, 4
  %535 = icmp eq i64 %534, %222
  br i1 %535, label %536, label %487, !llvm.loop !487

536:                                              ; preds = %487, %486
  %537 = phi i64 [ 0, %486 ], [ %533, %487 ]
  br i1 %223, label %554, label %538

538:                                              ; preds = %536, %538
  %539 = phi i64 [ %551, %538 ], [ %537, %536 ]
  %540 = phi i64 [ %552, %538 ], [ 0, %536 ]
  %541 = getelementptr inbounds i8, i8* %373, i64 %539
  %542 = bitcast i8* %541 to <16 x i8>*
  %543 = load <16 x i8>, <16 x i8>* %542, align 1, !tbaa !14, !alias.scope !482
  %544 = getelementptr inbounds i8, i8* %541, i64 16
  %545 = bitcast i8* %544 to <16 x i8>*
  %546 = load <16 x i8>, <16 x i8>* %545, align 1, !tbaa !14, !alias.scope !482
  %547 = getelementptr inbounds i8, i8* %371, i64 %539
  %548 = bitcast i8* %547 to <16 x i8>*
  store <16 x i8> %543, <16 x i8>* %548, align 1, !tbaa !14, !alias.scope !485, !noalias !482
  %549 = getelementptr inbounds i8, i8* %547, i64 16
  %550 = bitcast i8* %549 to <16 x i8>*
  store <16 x i8> %546, <16 x i8>* %550, align 1, !tbaa !14, !alias.scope !485, !noalias !482
  %551 = add nuw i64 %539, 32
  %552 = add i64 %540, 1
  %553 = icmp eq i64 %552, %220
  br i1 %553, label %554, label %538, !llvm.loop !488

554:                                              ; preds = %538, %536
  br i1 %224, label %2623, label %555

555:                                              ; preds = %554
  br i1 %226, label %568, label %556

556:                                              ; preds = %485, %555
  %557 = phi i64 [ %219, %555 ], [ 0, %485 ]
  br label %558

558:                                              ; preds = %558, %556
  %559 = phi i64 [ %557, %556 ], [ %565, %558 ]
  %560 = getelementptr inbounds i8, i8* %373, i64 %559
  %561 = bitcast i8* %560 to <8 x i8>*
  %562 = load <8 x i8>, <8 x i8>* %561, align 1, !tbaa !14
  %563 = getelementptr inbounds i8, i8* %371, i64 %559
  %564 = bitcast i8* %563 to <8 x i8>*
  store <8 x i8> %562, <8 x i8>* %564, align 1, !tbaa !14
  %565 = add nuw i64 %559, 8
  %566 = icmp eq i64 %565, %227
  br i1 %566, label %567, label %558, !llvm.loop !489

567:                                              ; preds = %558
  br i1 %228, label %2623, label %568

568:                                              ; preds = %481, %480, %555, %567
  %569 = phi i64 [ 0, %480 ], [ 0, %481 ], [ %219, %555 ], [ %227, %567 ]
  %570 = xor i64 %569, -1
  %571 = add nsw i64 %75, %570
  br i1 %230, label %581, label %572

572:                                              ; preds = %568, %572
  %573 = phi i64 [ %578, %572 ], [ %569, %568 ]
  %574 = phi i64 [ %579, %572 ], [ 0, %568 ]
  %575 = getelementptr inbounds i8, i8* %373, i64 %573
  %576 = load i8, i8* %575, align 1, !tbaa !14
  %577 = getelementptr inbounds i8, i8* %371, i64 %573
  store i8 %576, i8* %577, align 1, !tbaa !14
  %578 = add nuw nsw i64 %573, 1
  %579 = add i64 %574, 1
  %580 = icmp eq i64 %579, %229
  br i1 %580, label %581, label %572, !llvm.loop !490

581:                                              ; preds = %572, %568
  %582 = phi i64 [ %569, %568 ], [ %578, %572 ]
  %583 = icmp ult i64 %571, 3
  br i1 %583, label %2623, label %584

584:                                              ; preds = %581, %584
  %585 = phi i64 [ %601, %584 ], [ %582, %581 ]
  %586 = getelementptr inbounds i8, i8* %373, i64 %585
  %587 = load i8, i8* %586, align 1, !tbaa !14
  %588 = getelementptr inbounds i8, i8* %371, i64 %585
  store i8 %587, i8* %588, align 1, !tbaa !14
  %589 = add nuw nsw i64 %585, 1
  %590 = getelementptr inbounds i8, i8* %373, i64 %589
  %591 = load i8, i8* %590, align 1, !tbaa !14
  %592 = getelementptr inbounds i8, i8* %371, i64 %589
  store i8 %591, i8* %592, align 1, !tbaa !14
  %593 = add nuw nsw i64 %585, 2
  %594 = getelementptr inbounds i8, i8* %373, i64 %593
  %595 = load i8, i8* %594, align 1, !tbaa !14
  %596 = getelementptr inbounds i8, i8* %371, i64 %593
  store i8 %595, i8* %596, align 1, !tbaa !14
  %597 = add nuw nsw i64 %585, 3
  %598 = getelementptr inbounds i8, i8* %373, i64 %597
  %599 = load i8, i8* %598, align 1, !tbaa !14
  %600 = getelementptr inbounds i8, i8* %371, i64 %597
  store i8 %599, i8* %600, align 1, !tbaa !14
  %601 = add nuw nsw i64 %585, 4
  %602 = icmp eq i64 %601, %18
  br i1 %602, label %2623, label %584, !llvm.loop !491

603:                                              ; preds = %476, %721, %449, %462, %374
  br i1 %29, label %2623, label %604

604:                                              ; preds = %603
  br i1 %203, label %701, label %605

605:                                              ; preds = %604
  %606 = icmp ult i8* %347, %354
  %607 = icmp ult i8* %352, %349
  %608 = and i1 %606, %607
  %609 = icmp ult i8* %347, %357
  %610 = icmp ult i8* %355, %349
  %611 = and i1 %609, %610
  %612 = or i1 %608, %611
  br i1 %612, label %701, label %613

613:                                              ; preds = %605
  br i1 %204, label %684, label %614

614:                                              ; preds = %613
  br i1 %207, label %660, label %615

615:                                              ; preds = %614, %615
  %616 = phi i64 [ %657, %615 ], [ 0, %614 ]
  %617 = phi i64 [ %658, %615 ], [ 0, %614 ]
  %618 = add i64 %616, %8
  %619 = getelementptr inbounds i8, i8* %373, i64 %618
  %620 = bitcast i8* %619 to <16 x i8>*
  %621 = load <16 x i8>, <16 x i8>* %620, align 1, !tbaa !14, !alias.scope !492
  %622 = getelementptr inbounds i8, i8* %619, i64 16
  %623 = bitcast i8* %622 to <16 x i8>*
  %624 = load <16 x i8>, <16 x i8>* %623, align 1, !tbaa !14, !alias.scope !492
  %625 = getelementptr inbounds i8, i8* %371, i64 %616
  %626 = bitcast i8* %625 to <16 x i8>*
  %627 = load <16 x i8>, <16 x i8>* %626, align 1, !tbaa !14, !alias.scope !495
  %628 = getelementptr inbounds i8, i8* %625, i64 16
  %629 = bitcast i8* %628 to <16 x i8>*
  %630 = load <16 x i8>, <16 x i8>* %629, align 1, !tbaa !14, !alias.scope !495
  %631 = add <16 x i8> %627, %621
  %632 = add <16 x i8> %630, %624
  %633 = getelementptr inbounds i8, i8* %371, i64 %618
  %634 = bitcast i8* %633 to <16 x i8>*
  store <16 x i8> %631, <16 x i8>* %634, align 1, !tbaa !14, !alias.scope !497, !noalias !499
  %635 = getelementptr inbounds i8, i8* %633, i64 16
  %636 = bitcast i8* %635 to <16 x i8>*
  store <16 x i8> %632, <16 x i8>* %636, align 1, !tbaa !14, !alias.scope !497, !noalias !499
  %637 = or i64 %616, 32
  %638 = add i64 %637, %8
  %639 = getelementptr inbounds i8, i8* %373, i64 %638
  %640 = bitcast i8* %639 to <16 x i8>*
  %641 = load <16 x i8>, <16 x i8>* %640, align 1, !tbaa !14, !alias.scope !492
  %642 = getelementptr inbounds i8, i8* %639, i64 16
  %643 = bitcast i8* %642 to <16 x i8>*
  %644 = load <16 x i8>, <16 x i8>* %643, align 1, !tbaa !14, !alias.scope !492
  %645 = getelementptr inbounds i8, i8* %371, i64 %637
  %646 = bitcast i8* %645 to <16 x i8>*
  %647 = load <16 x i8>, <16 x i8>* %646, align 1, !tbaa !14, !alias.scope !495
  %648 = getelementptr inbounds i8, i8* %645, i64 16
  %649 = bitcast i8* %648 to <16 x i8>*
  %650 = load <16 x i8>, <16 x i8>* %649, align 1, !tbaa !14, !alias.scope !495
  %651 = add <16 x i8> %647, %641
  %652 = add <16 x i8> %650, %644
  %653 = getelementptr inbounds i8, i8* %371, i64 %638
  %654 = bitcast i8* %653 to <16 x i8>*
  store <16 x i8> %651, <16 x i8>* %654, align 1, !tbaa !14, !alias.scope !497, !noalias !499
  %655 = getelementptr inbounds i8, i8* %653, i64 16
  %656 = bitcast i8* %655 to <16 x i8>*
  store <16 x i8> %652, <16 x i8>* %656, align 1, !tbaa !14, !alias.scope !497, !noalias !499
  %657 = add nuw i64 %616, 64
  %658 = add i64 %617, 2
  %659 = icmp eq i64 %658, %208
  br i1 %659, label %660, label %615, !llvm.loop !500

660:                                              ; preds = %615, %614
  %661 = phi i64 [ 0, %614 ], [ %657, %615 ]
  br i1 %209, label %682, label %662

662:                                              ; preds = %660
  %663 = add i64 %661, %8
  %664 = getelementptr inbounds i8, i8* %373, i64 %663
  %665 = bitcast i8* %664 to <16 x i8>*
  %666 = load <16 x i8>, <16 x i8>* %665, align 1, !tbaa !14, !alias.scope !492
  %667 = getelementptr inbounds i8, i8* %664, i64 16
  %668 = bitcast i8* %667 to <16 x i8>*
  %669 = load <16 x i8>, <16 x i8>* %668, align 1, !tbaa !14, !alias.scope !492
  %670 = getelementptr inbounds i8, i8* %371, i64 %661
  %671 = bitcast i8* %670 to <16 x i8>*
  %672 = load <16 x i8>, <16 x i8>* %671, align 1, !tbaa !14, !alias.scope !495
  %673 = getelementptr inbounds i8, i8* %670, i64 16
  %674 = bitcast i8* %673 to <16 x i8>*
  %675 = load <16 x i8>, <16 x i8>* %674, align 1, !tbaa !14, !alias.scope !495
  %676 = add <16 x i8> %672, %666
  %677 = add <16 x i8> %675, %669
  %678 = getelementptr inbounds i8, i8* %371, i64 %663
  %679 = bitcast i8* %678 to <16 x i8>*
  store <16 x i8> %676, <16 x i8>* %679, align 1, !tbaa !14, !alias.scope !497, !noalias !499
  %680 = getelementptr inbounds i8, i8* %678, i64 16
  %681 = bitcast i8* %680 to <16 x i8>*
  store <16 x i8> %677, <16 x i8>* %681, align 1, !tbaa !14, !alias.scope !497, !noalias !499
  br label %682

682:                                              ; preds = %660, %662
  br i1 %210, label %2623, label %683

683:                                              ; preds = %682
  br i1 %213, label %701, label %684

684:                                              ; preds = %613, %683
  %685 = phi i64 [ %205, %683 ], [ 0, %613 ]
  br label %686

686:                                              ; preds = %686, %684
  %687 = phi i64 [ %685, %684 ], [ %698, %686 ]
  %688 = add i64 %687, %8
  %689 = getelementptr inbounds i8, i8* %373, i64 %688
  %690 = bitcast i8* %689 to <8 x i8>*
  %691 = load <8 x i8>, <8 x i8>* %690, align 1, !tbaa !14
  %692 = getelementptr inbounds i8, i8* %371, i64 %687
  %693 = bitcast i8* %692 to <8 x i8>*
  %694 = load <8 x i8>, <8 x i8>* %693, align 1, !tbaa !14
  %695 = add <8 x i8> %694, %691
  %696 = getelementptr inbounds i8, i8* %371, i64 %688
  %697 = bitcast i8* %696 to <8 x i8>*
  store <8 x i8> %695, <8 x i8>* %697, align 1, !tbaa !14
  %698 = add nuw i64 %687, 8
  %699 = icmp eq i64 %698, %214
  br i1 %699, label %700, label %686, !llvm.loop !501

700:                                              ; preds = %686
  br i1 %216, label %2623, label %701

701:                                              ; preds = %605, %604, %683, %700
  %702 = phi i64 [ %8, %604 ], [ %8, %605 ], [ %211, %683 ], [ %215, %700 ]
  %703 = phi i64 [ 0, %604 ], [ 0, %605 ], [ %205, %683 ], [ %214, %700 ]
  %704 = sub i64 %72, %702
  %705 = add i64 %702, 1
  %706 = and i64 %704, 1
  %707 = icmp eq i64 %706, 0
  br i1 %707, label %717, label %708

708:                                              ; preds = %701
  %709 = getelementptr inbounds i8, i8* %373, i64 %702
  %710 = load i8, i8* %709, align 1, !tbaa !14
  %711 = getelementptr inbounds i8, i8* %371, i64 %703
  %712 = load i8, i8* %711, align 1, !tbaa !14
  %713 = add i8 %712, %710
  %714 = getelementptr inbounds i8, i8* %371, i64 %702
  store i8 %713, i8* %714, align 1, !tbaa !14
  %715 = add i64 %702, 1
  %716 = or i64 %703, 1
  br label %717

717:                                              ; preds = %708, %701
  %718 = phi i64 [ %702, %701 ], [ %715, %708 ]
  %719 = phi i64 [ %703, %701 ], [ %716, %708 ]
  %720 = icmp eq i64 %73, %705
  br i1 %720, label %2623, label %740

721:                                              ; preds = %476, %721
  %722 = phi i64 [ %738, %721 ], [ %477, %476 ]
  %723 = getelementptr inbounds i8, i8* %373, i64 %722
  %724 = load i8, i8* %723, align 1, !tbaa !14
  %725 = getelementptr inbounds i8, i8* %371, i64 %722
  store i8 %724, i8* %725, align 1, !tbaa !14
  %726 = add nuw nsw i64 %722, 1
  %727 = getelementptr inbounds i8, i8* %373, i64 %726
  %728 = load i8, i8* %727, align 1, !tbaa !14
  %729 = getelementptr inbounds i8, i8* %371, i64 %726
  store i8 %728, i8* %729, align 1, !tbaa !14
  %730 = add nuw nsw i64 %722, 2
  %731 = getelementptr inbounds i8, i8* %373, i64 %730
  %732 = load i8, i8* %731, align 1, !tbaa !14
  %733 = getelementptr inbounds i8, i8* %371, i64 %730
  store i8 %732, i8* %733, align 1, !tbaa !14
  %734 = add nuw nsw i64 %722, 3
  %735 = getelementptr inbounds i8, i8* %373, i64 %734
  %736 = load i8, i8* %735, align 1, !tbaa !14
  %737 = getelementptr inbounds i8, i8* %371, i64 %734
  store i8 %736, i8* %737, align 1, !tbaa !14
  %738 = add nuw nsw i64 %722, 4
  %739 = icmp eq i64 %738, %8
  br i1 %739, label %603, label %721, !llvm.loop !502

740:                                              ; preds = %717, %740
  %741 = phi i64 [ %757, %740 ], [ %718, %717 ]
  %742 = phi i64 [ %758, %740 ], [ %719, %717 ]
  %743 = getelementptr inbounds i8, i8* %373, i64 %741
  %744 = load i8, i8* %743, align 1, !tbaa !14
  %745 = getelementptr inbounds i8, i8* %371, i64 %742
  %746 = load i8, i8* %745, align 1, !tbaa !14
  %747 = add i8 %746, %744
  %748 = getelementptr inbounds i8, i8* %371, i64 %741
  store i8 %747, i8* %748, align 1, !tbaa !14
  %749 = add i64 %741, 1
  %750 = add nuw i64 %742, 1
  %751 = getelementptr inbounds i8, i8* %373, i64 %749
  %752 = load i8, i8* %751, align 1, !tbaa !14
  %753 = getelementptr inbounds i8, i8* %371, i64 %750
  %754 = load i8, i8* %753, align 1, !tbaa !14
  %755 = add i8 %754, %752
  %756 = getelementptr inbounds i8, i8* %371, i64 %749
  store i8 %755, i8* %756, align 1, !tbaa !14
  %757 = add i64 %741, 2
  %758 = add nuw i64 %742, 2
  %759 = icmp eq i64 %757, %18
  br i1 %759, label %2623, label %740, !llvm.loop !503

760:                                              ; preds = %231
  %761 = icmp eq i8* %233, null
  br i1 %761, label %876, label %762

762:                                              ; preds = %760
  br i1 %22, label %2623, label %763

763:                                              ; preds = %762
  br i1 %161, label %857, label %764

764:                                              ; preds = %763
  %765 = getelementptr i8, i8* %233, i64 %18
  %766 = icmp ult i8* %319, %326
  %767 = icmp ult i8* %324, %321
  %768 = and i1 %766, %767
  %769 = icmp ult i8* %319, %765
  %770 = icmp ult i8* %233, %321
  %771 = and i1 %769, %770
  %772 = or i1 %768, %771
  br i1 %772, label %857, label %773

773:                                              ; preds = %764
  br i1 %162, label %841, label %774

774:                                              ; preds = %773
  br i1 %165, label %818, label %775

775:                                              ; preds = %774, %775
  %776 = phi i64 [ %815, %775 ], [ 0, %774 ]
  %777 = phi i64 [ %816, %775 ], [ 0, %774 ]
  %778 = getelementptr inbounds i8, i8* %373, i64 %776
  %779 = bitcast i8* %778 to <16 x i8>*
  %780 = load <16 x i8>, <16 x i8>* %779, align 1, !tbaa !14, !alias.scope !504
  %781 = getelementptr inbounds i8, i8* %778, i64 16
  %782 = bitcast i8* %781 to <16 x i8>*
  %783 = load <16 x i8>, <16 x i8>* %782, align 1, !tbaa !14, !alias.scope !504
  %784 = getelementptr inbounds i8, i8* %233, i64 %776
  %785 = bitcast i8* %784 to <16 x i8>*
  %786 = load <16 x i8>, <16 x i8>* %785, align 1, !tbaa !14, !alias.scope !507
  %787 = getelementptr inbounds i8, i8* %784, i64 16
  %788 = bitcast i8* %787 to <16 x i8>*
  %789 = load <16 x i8>, <16 x i8>* %788, align 1, !tbaa !14, !alias.scope !507
  %790 = add <16 x i8> %786, %780
  %791 = add <16 x i8> %789, %783
  %792 = getelementptr inbounds i8, i8* %371, i64 %776
  %793 = bitcast i8* %792 to <16 x i8>*
  store <16 x i8> %790, <16 x i8>* %793, align 1, !tbaa !14, !alias.scope !509, !noalias !511
  %794 = getelementptr inbounds i8, i8* %792, i64 16
  %795 = bitcast i8* %794 to <16 x i8>*
  store <16 x i8> %791, <16 x i8>* %795, align 1, !tbaa !14, !alias.scope !509, !noalias !511
  %796 = or i64 %776, 32
  %797 = getelementptr inbounds i8, i8* %373, i64 %796
  %798 = bitcast i8* %797 to <16 x i8>*
  %799 = load <16 x i8>, <16 x i8>* %798, align 1, !tbaa !14, !alias.scope !504
  %800 = getelementptr inbounds i8, i8* %797, i64 16
  %801 = bitcast i8* %800 to <16 x i8>*
  %802 = load <16 x i8>, <16 x i8>* %801, align 1, !tbaa !14, !alias.scope !504
  %803 = getelementptr inbounds i8, i8* %233, i64 %796
  %804 = bitcast i8* %803 to <16 x i8>*
  %805 = load <16 x i8>, <16 x i8>* %804, align 1, !tbaa !14, !alias.scope !507
  %806 = getelementptr inbounds i8, i8* %803, i64 16
  %807 = bitcast i8* %806 to <16 x i8>*
  %808 = load <16 x i8>, <16 x i8>* %807, align 1, !tbaa !14, !alias.scope !507
  %809 = add <16 x i8> %805, %799
  %810 = add <16 x i8> %808, %802
  %811 = getelementptr inbounds i8, i8* %371, i64 %796
  %812 = bitcast i8* %811 to <16 x i8>*
  store <16 x i8> %809, <16 x i8>* %812, align 1, !tbaa !14, !alias.scope !509, !noalias !511
  %813 = getelementptr inbounds i8, i8* %811, i64 16
  %814 = bitcast i8* %813 to <16 x i8>*
  store <16 x i8> %810, <16 x i8>* %814, align 1, !tbaa !14, !alias.scope !509, !noalias !511
  %815 = add nuw i64 %776, 64
  %816 = add i64 %777, 2
  %817 = icmp eq i64 %816, %166
  br i1 %817, label %818, label %775, !llvm.loop !512

818:                                              ; preds = %775, %774
  %819 = phi i64 [ 0, %774 ], [ %815, %775 ]
  br i1 %167, label %839, label %820

820:                                              ; preds = %818
  %821 = getelementptr inbounds i8, i8* %373, i64 %819
  %822 = bitcast i8* %821 to <16 x i8>*
  %823 = load <16 x i8>, <16 x i8>* %822, align 1, !tbaa !14, !alias.scope !504
  %824 = getelementptr inbounds i8, i8* %821, i64 16
  %825 = bitcast i8* %824 to <16 x i8>*
  %826 = load <16 x i8>, <16 x i8>* %825, align 1, !tbaa !14, !alias.scope !504
  %827 = getelementptr inbounds i8, i8* %233, i64 %819
  %828 = bitcast i8* %827 to <16 x i8>*
  %829 = load <16 x i8>, <16 x i8>* %828, align 1, !tbaa !14, !alias.scope !507
  %830 = getelementptr inbounds i8, i8* %827, i64 16
  %831 = bitcast i8* %830 to <16 x i8>*
  %832 = load <16 x i8>, <16 x i8>* %831, align 1, !tbaa !14, !alias.scope !507
  %833 = add <16 x i8> %829, %823
  %834 = add <16 x i8> %832, %826
  %835 = getelementptr inbounds i8, i8* %371, i64 %819
  %836 = bitcast i8* %835 to <16 x i8>*
  store <16 x i8> %833, <16 x i8>* %836, align 1, !tbaa !14, !alias.scope !509, !noalias !511
  %837 = getelementptr inbounds i8, i8* %835, i64 16
  %838 = bitcast i8* %837 to <16 x i8>*
  store <16 x i8> %834, <16 x i8>* %838, align 1, !tbaa !14, !alias.scope !509, !noalias !511
  br label %839

839:                                              ; preds = %818, %820
  br i1 %168, label %2623, label %840

840:                                              ; preds = %839
  br i1 %170, label %857, label %841

841:                                              ; preds = %773, %840
  %842 = phi i64 [ %163, %840 ], [ 0, %773 ]
  br label %843

843:                                              ; preds = %843, %841
  %844 = phi i64 [ %842, %841 ], [ %854, %843 ]
  %845 = getelementptr inbounds i8, i8* %373, i64 %844
  %846 = bitcast i8* %845 to <8 x i8>*
  %847 = load <8 x i8>, <8 x i8>* %846, align 1, !tbaa !14
  %848 = getelementptr inbounds i8, i8* %233, i64 %844
  %849 = bitcast i8* %848 to <8 x i8>*
  %850 = load <8 x i8>, <8 x i8>* %849, align 1, !tbaa !14
  %851 = add <8 x i8> %850, %847
  %852 = getelementptr inbounds i8, i8* %371, i64 %844
  %853 = bitcast i8* %852 to <8 x i8>*
  store <8 x i8> %851, <8 x i8>* %853, align 1, !tbaa !14
  %854 = add nuw i64 %844, 8
  %855 = icmp eq i64 %854, %171
  br i1 %855, label %856, label %843, !llvm.loop !513

856:                                              ; preds = %843
  br i1 %172, label %2623, label %857

857:                                              ; preds = %764, %763, %840, %856
  %858 = phi i64 [ 0, %763 ], [ 0, %764 ], [ %163, %840 ], [ %171, %856 ]
  %859 = xor i64 %858, -1
  %860 = add nsw i64 %69, %859
  br i1 %174, label %873, label %861

861:                                              ; preds = %857, %861
  %862 = phi i64 [ %870, %861 ], [ %858, %857 ]
  %863 = phi i64 [ %871, %861 ], [ 0, %857 ]
  %864 = getelementptr inbounds i8, i8* %373, i64 %862
  %865 = load i8, i8* %864, align 1, !tbaa !14
  %866 = getelementptr inbounds i8, i8* %233, i64 %862
  %867 = load i8, i8* %866, align 1, !tbaa !14
  %868 = add i8 %867, %865
  %869 = getelementptr inbounds i8, i8* %371, i64 %862
  store i8 %868, i8* %869, align 1, !tbaa !14
  %870 = add nuw nsw i64 %862, 1
  %871 = add i64 %863, 1
  %872 = icmp eq i64 %871, %173
  br i1 %872, label %873, label %861, !llvm.loop !514

873:                                              ; preds = %861, %857
  %874 = phi i64 [ %858, %857 ], [ %870, %861 ]
  %875 = icmp ult i64 %860, 3
  br i1 %875, label %2623, label %981

876:                                              ; preds = %760
  br i1 %22, label %2623, label %877

877:                                              ; preds = %876
  br i1 %175, label %965, label %878

878:                                              ; preds = %877
  %879 = icmp ult i8* %328, %335
  %880 = icmp ult i8* %333, %330
  %881 = and i1 %879, %880
  br i1 %881, label %965, label %882

882:                                              ; preds = %878
  br i1 %176, label %953, label %883

883:                                              ; preds = %882
  br i1 %179, label %933, label %884

884:                                              ; preds = %883, %884
  %885 = phi i64 [ %930, %884 ], [ 0, %883 ]
  %886 = phi i64 [ %931, %884 ], [ 0, %883 ]
  %887 = getelementptr inbounds i8, i8* %373, i64 %885
  %888 = bitcast i8* %887 to <16 x i8>*
  %889 = load <16 x i8>, <16 x i8>* %888, align 1, !tbaa !14, !alias.scope !515
  %890 = getelementptr inbounds i8, i8* %887, i64 16
  %891 = bitcast i8* %890 to <16 x i8>*
  %892 = load <16 x i8>, <16 x i8>* %891, align 1, !tbaa !14, !alias.scope !515
  %893 = getelementptr inbounds i8, i8* %371, i64 %885
  %894 = bitcast i8* %893 to <16 x i8>*
  store <16 x i8> %889, <16 x i8>* %894, align 1, !tbaa !14, !alias.scope !518, !noalias !515
  %895 = getelementptr inbounds i8, i8* %893, i64 16
  %896 = bitcast i8* %895 to <16 x i8>*
  store <16 x i8> %892, <16 x i8>* %896, align 1, !tbaa !14, !alias.scope !518, !noalias !515
  %897 = or i64 %885, 32
  %898 = getelementptr inbounds i8, i8* %373, i64 %897
  %899 = bitcast i8* %898 to <16 x i8>*
  %900 = load <16 x i8>, <16 x i8>* %899, align 1, !tbaa !14, !alias.scope !515
  %901 = getelementptr inbounds i8, i8* %898, i64 16
  %902 = bitcast i8* %901 to <16 x i8>*
  %903 = load <16 x i8>, <16 x i8>* %902, align 1, !tbaa !14, !alias.scope !515
  %904 = getelementptr inbounds i8, i8* %371, i64 %897
  %905 = bitcast i8* %904 to <16 x i8>*
  store <16 x i8> %900, <16 x i8>* %905, align 1, !tbaa !14, !alias.scope !518, !noalias !515
  %906 = getelementptr inbounds i8, i8* %904, i64 16
  %907 = bitcast i8* %906 to <16 x i8>*
  store <16 x i8> %903, <16 x i8>* %907, align 1, !tbaa !14, !alias.scope !518, !noalias !515
  %908 = or i64 %885, 64
  %909 = getelementptr inbounds i8, i8* %373, i64 %908
  %910 = bitcast i8* %909 to <16 x i8>*
  %911 = load <16 x i8>, <16 x i8>* %910, align 1, !tbaa !14, !alias.scope !515
  %912 = getelementptr inbounds i8, i8* %909, i64 16
  %913 = bitcast i8* %912 to <16 x i8>*
  %914 = load <16 x i8>, <16 x i8>* %913, align 1, !tbaa !14, !alias.scope !515
  %915 = getelementptr inbounds i8, i8* %371, i64 %908
  %916 = bitcast i8* %915 to <16 x i8>*
  store <16 x i8> %911, <16 x i8>* %916, align 1, !tbaa !14, !alias.scope !518, !noalias !515
  %917 = getelementptr inbounds i8, i8* %915, i64 16
  %918 = bitcast i8* %917 to <16 x i8>*
  store <16 x i8> %914, <16 x i8>* %918, align 1, !tbaa !14, !alias.scope !518, !noalias !515
  %919 = or i64 %885, 96
  %920 = getelementptr inbounds i8, i8* %373, i64 %919
  %921 = bitcast i8* %920 to <16 x i8>*
  %922 = load <16 x i8>, <16 x i8>* %921, align 1, !tbaa !14, !alias.scope !515
  %923 = getelementptr inbounds i8, i8* %920, i64 16
  %924 = bitcast i8* %923 to <16 x i8>*
  %925 = load <16 x i8>, <16 x i8>* %924, align 1, !tbaa !14, !alias.scope !515
  %926 = getelementptr inbounds i8, i8* %371, i64 %919
  %927 = bitcast i8* %926 to <16 x i8>*
  store <16 x i8> %922, <16 x i8>* %927, align 1, !tbaa !14, !alias.scope !518, !noalias !515
  %928 = getelementptr inbounds i8, i8* %926, i64 16
  %929 = bitcast i8* %928 to <16 x i8>*
  store <16 x i8> %925, <16 x i8>* %929, align 1, !tbaa !14, !alias.scope !518, !noalias !515
  %930 = add nuw i64 %885, 128
  %931 = add i64 %886, 4
  %932 = icmp eq i64 %931, %180
  br i1 %932, label %933, label %884, !llvm.loop !520

933:                                              ; preds = %884, %883
  %934 = phi i64 [ 0, %883 ], [ %930, %884 ]
  br i1 %181, label %951, label %935

935:                                              ; preds = %933, %935
  %936 = phi i64 [ %948, %935 ], [ %934, %933 ]
  %937 = phi i64 [ %949, %935 ], [ 0, %933 ]
  %938 = getelementptr inbounds i8, i8* %373, i64 %936
  %939 = bitcast i8* %938 to <16 x i8>*
  %940 = load <16 x i8>, <16 x i8>* %939, align 1, !tbaa !14, !alias.scope !515
  %941 = getelementptr inbounds i8, i8* %938, i64 16
  %942 = bitcast i8* %941 to <16 x i8>*
  %943 = load <16 x i8>, <16 x i8>* %942, align 1, !tbaa !14, !alias.scope !515
  %944 = getelementptr inbounds i8, i8* %371, i64 %936
  %945 = bitcast i8* %944 to <16 x i8>*
  store <16 x i8> %940, <16 x i8>* %945, align 1, !tbaa !14, !alias.scope !518, !noalias !515
  %946 = getelementptr inbounds i8, i8* %944, i64 16
  %947 = bitcast i8* %946 to <16 x i8>*
  store <16 x i8> %943, <16 x i8>* %947, align 1, !tbaa !14, !alias.scope !518, !noalias !515
  %948 = add nuw i64 %936, 32
  %949 = add i64 %937, 1
  %950 = icmp eq i64 %949, %178
  br i1 %950, label %951, label %935, !llvm.loop !521

951:                                              ; preds = %935, %933
  br i1 %182, label %2623, label %952

952:                                              ; preds = %951
  br i1 %184, label %965, label %953

953:                                              ; preds = %882, %952
  %954 = phi i64 [ %177, %952 ], [ 0, %882 ]
  br label %955

955:                                              ; preds = %955, %953
  %956 = phi i64 [ %954, %953 ], [ %962, %955 ]
  %957 = getelementptr inbounds i8, i8* %373, i64 %956
  %958 = bitcast i8* %957 to <8 x i8>*
  %959 = load <8 x i8>, <8 x i8>* %958, align 1, !tbaa !14
  %960 = getelementptr inbounds i8, i8* %371, i64 %956
  %961 = bitcast i8* %960 to <8 x i8>*
  store <8 x i8> %959, <8 x i8>* %961, align 1, !tbaa !14
  %962 = add nuw i64 %956, 8
  %963 = icmp eq i64 %962, %185
  br i1 %963, label %964, label %955, !llvm.loop !522

964:                                              ; preds = %955
  br i1 %186, label %2623, label %965

965:                                              ; preds = %878, %877, %952, %964
  %966 = phi i64 [ 0, %877 ], [ 0, %878 ], [ %177, %952 ], [ %185, %964 ]
  %967 = xor i64 %966, -1
  %968 = add nsw i64 %71, %967
  br i1 %188, label %978, label %969

969:                                              ; preds = %965, %969
  %970 = phi i64 [ %975, %969 ], [ %966, %965 ]
  %971 = phi i64 [ %976, %969 ], [ 0, %965 ]
  %972 = getelementptr inbounds i8, i8* %373, i64 %970
  %973 = load i8, i8* %972, align 1, !tbaa !14
  %974 = getelementptr inbounds i8, i8* %371, i64 %970
  store i8 %973, i8* %974, align 1, !tbaa !14
  %975 = add nuw nsw i64 %970, 1
  %976 = add i64 %971, 1
  %977 = icmp eq i64 %976, %187
  br i1 %977, label %978, label %969, !llvm.loop !523

978:                                              ; preds = %969, %965
  %979 = phi i64 [ %966, %965 ], [ %975, %969 ]
  %980 = icmp ult i64 %968, 3
  br i1 %980, label %2623, label %1012

981:                                              ; preds = %873, %981
  %982 = phi i64 [ %1010, %981 ], [ %874, %873 ]
  %983 = getelementptr inbounds i8, i8* %373, i64 %982
  %984 = load i8, i8* %983, align 1, !tbaa !14
  %985 = getelementptr inbounds i8, i8* %233, i64 %982
  %986 = load i8, i8* %985, align 1, !tbaa !14
  %987 = add i8 %986, %984
  %988 = getelementptr inbounds i8, i8* %371, i64 %982
  store i8 %987, i8* %988, align 1, !tbaa !14
  %989 = add nuw nsw i64 %982, 1
  %990 = getelementptr inbounds i8, i8* %373, i64 %989
  %991 = load i8, i8* %990, align 1, !tbaa !14
  %992 = getelementptr inbounds i8, i8* %233, i64 %989
  %993 = load i8, i8* %992, align 1, !tbaa !14
  %994 = add i8 %993, %991
  %995 = getelementptr inbounds i8, i8* %371, i64 %989
  store i8 %994, i8* %995, align 1, !tbaa !14
  %996 = add nuw nsw i64 %982, 2
  %997 = getelementptr inbounds i8, i8* %373, i64 %996
  %998 = load i8, i8* %997, align 1, !tbaa !14
  %999 = getelementptr inbounds i8, i8* %233, i64 %996
  %1000 = load i8, i8* %999, align 1, !tbaa !14
  %1001 = add i8 %1000, %998
  %1002 = getelementptr inbounds i8, i8* %371, i64 %996
  store i8 %1001, i8* %1002, align 1, !tbaa !14
  %1003 = add nuw nsw i64 %982, 3
  %1004 = getelementptr inbounds i8, i8* %373, i64 %1003
  %1005 = load i8, i8* %1004, align 1, !tbaa !14
  %1006 = getelementptr inbounds i8, i8* %233, i64 %1003
  %1007 = load i8, i8* %1006, align 1, !tbaa !14
  %1008 = add i8 %1007, %1005
  %1009 = getelementptr inbounds i8, i8* %371, i64 %1003
  store i8 %1008, i8* %1009, align 1, !tbaa !14
  %1010 = add nuw nsw i64 %982, 4
  %1011 = icmp eq i64 %1010, %18
  br i1 %1011, label %2623, label %981, !llvm.loop !524

1012:                                             ; preds = %978, %1012
  %1013 = phi i64 [ %1029, %1012 ], [ %979, %978 ]
  %1014 = getelementptr inbounds i8, i8* %373, i64 %1013
  %1015 = load i8, i8* %1014, align 1, !tbaa !14
  %1016 = getelementptr inbounds i8, i8* %371, i64 %1013
  store i8 %1015, i8* %1016, align 1, !tbaa !14
  %1017 = add nuw nsw i64 %1013, 1
  %1018 = getelementptr inbounds i8, i8* %373, i64 %1017
  %1019 = load i8, i8* %1018, align 1, !tbaa !14
  %1020 = getelementptr inbounds i8, i8* %371, i64 %1017
  store i8 %1019, i8* %1020, align 1, !tbaa !14
  %1021 = add nuw nsw i64 %1013, 2
  %1022 = getelementptr inbounds i8, i8* %373, i64 %1021
  %1023 = load i8, i8* %1022, align 1, !tbaa !14
  %1024 = getelementptr inbounds i8, i8* %371, i64 %1021
  store i8 %1023, i8* %1024, align 1, !tbaa !14
  %1025 = add nuw nsw i64 %1013, 3
  %1026 = getelementptr inbounds i8, i8* %373, i64 %1025
  %1027 = load i8, i8* %1026, align 1, !tbaa !14
  %1028 = getelementptr inbounds i8, i8* %371, i64 %1025
  store i8 %1027, i8* %1028, align 1, !tbaa !14
  %1029 = add nuw nsw i64 %1013, 4
  %1030 = icmp eq i64 %1029, %18
  br i1 %1030, label %2623, label %1012, !llvm.loop !525

1031:                                             ; preds = %231
  %1032 = icmp eq i8* %233, null
  br i1 %1032, label %1150, label %1033

1033:                                             ; preds = %1031
  br i1 %28, label %1429, label %1034

1034:                                             ; preds = %1033
  br i1 %118, label %1135, label %1035

1035:                                             ; preds = %1034
  %1036 = getelementptr i8, i8* %233, i64 %8
  %1037 = icmp ult i8* %279, %286
  %1038 = icmp ult i8* %284, %281
  %1039 = and i1 %1037, %1038
  %1040 = icmp ult i8* %279, %1036
  %1041 = icmp ult i8* %233, %281
  %1042 = and i1 %1040, %1041
  %1043 = or i1 %1039, %1042
  br i1 %1043, label %1135, label %1044

1044:                                             ; preds = %1035
  br i1 %119, label %1118, label %1045

1045:                                             ; preds = %1044
  br i1 %122, label %1093, label %1046

1046:                                             ; preds = %1045, %1046
  %1047 = phi i64 [ %1090, %1046 ], [ 0, %1045 ]
  %1048 = phi i64 [ %1091, %1046 ], [ 0, %1045 ]
  %1049 = getelementptr inbounds i8, i8* %373, i64 %1047
  %1050 = bitcast i8* %1049 to <16 x i8>*
  %1051 = load <16 x i8>, <16 x i8>* %1050, align 1, !tbaa !14, !alias.scope !526
  %1052 = getelementptr inbounds i8, i8* %1049, i64 16
  %1053 = bitcast i8* %1052 to <16 x i8>*
  %1054 = load <16 x i8>, <16 x i8>* %1053, align 1, !tbaa !14, !alias.scope !526
  %1055 = getelementptr inbounds i8, i8* %233, i64 %1047
  %1056 = bitcast i8* %1055 to <16 x i8>*
  %1057 = load <16 x i8>, <16 x i8>* %1056, align 1, !tbaa !14, !alias.scope !529
  %1058 = getelementptr inbounds i8, i8* %1055, i64 16
  %1059 = bitcast i8* %1058 to <16 x i8>*
  %1060 = load <16 x i8>, <16 x i8>* %1059, align 1, !tbaa !14, !alias.scope !529
  %1061 = lshr <16 x i8> %1057, <i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1>
  %1062 = lshr <16 x i8> %1060, <i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1>
  %1063 = add <16 x i8> %1061, %1051
  %1064 = add <16 x i8> %1062, %1054
  %1065 = getelementptr inbounds i8, i8* %371, i64 %1047
  %1066 = bitcast i8* %1065 to <16 x i8>*
  store <16 x i8> %1063, <16 x i8>* %1066, align 1, !tbaa !14, !alias.scope !531, !noalias !533
  %1067 = getelementptr inbounds i8, i8* %1065, i64 16
  %1068 = bitcast i8* %1067 to <16 x i8>*
  store <16 x i8> %1064, <16 x i8>* %1068, align 1, !tbaa !14, !alias.scope !531, !noalias !533
  %1069 = or i64 %1047, 32
  %1070 = getelementptr inbounds i8, i8* %373, i64 %1069
  %1071 = bitcast i8* %1070 to <16 x i8>*
  %1072 = load <16 x i8>, <16 x i8>* %1071, align 1, !tbaa !14, !alias.scope !526
  %1073 = getelementptr inbounds i8, i8* %1070, i64 16
  %1074 = bitcast i8* %1073 to <16 x i8>*
  %1075 = load <16 x i8>, <16 x i8>* %1074, align 1, !tbaa !14, !alias.scope !526
  %1076 = getelementptr inbounds i8, i8* %233, i64 %1069
  %1077 = bitcast i8* %1076 to <16 x i8>*
  %1078 = load <16 x i8>, <16 x i8>* %1077, align 1, !tbaa !14, !alias.scope !529
  %1079 = getelementptr inbounds i8, i8* %1076, i64 16
  %1080 = bitcast i8* %1079 to <16 x i8>*
  %1081 = load <16 x i8>, <16 x i8>* %1080, align 1, !tbaa !14, !alias.scope !529
  %1082 = lshr <16 x i8> %1078, <i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1>
  %1083 = lshr <16 x i8> %1081, <i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1>
  %1084 = add <16 x i8> %1082, %1072
  %1085 = add <16 x i8> %1083, %1075
  %1086 = getelementptr inbounds i8, i8* %371, i64 %1069
  %1087 = bitcast i8* %1086 to <16 x i8>*
  store <16 x i8> %1084, <16 x i8>* %1087, align 1, !tbaa !14, !alias.scope !531, !noalias !533
  %1088 = getelementptr inbounds i8, i8* %1086, i64 16
  %1089 = bitcast i8* %1088 to <16 x i8>*
  store <16 x i8> %1085, <16 x i8>* %1089, align 1, !tbaa !14, !alias.scope !531, !noalias !533
  %1090 = add nuw i64 %1047, 64
  %1091 = add i64 %1048, 2
  %1092 = icmp eq i64 %1091, %123
  br i1 %1092, label %1093, label %1046, !llvm.loop !534

1093:                                             ; preds = %1046, %1045
  %1094 = phi i64 [ 0, %1045 ], [ %1090, %1046 ]
  br i1 %124, label %1116, label %1095

1095:                                             ; preds = %1093
  %1096 = getelementptr inbounds i8, i8* %373, i64 %1094
  %1097 = bitcast i8* %1096 to <16 x i8>*
  %1098 = load <16 x i8>, <16 x i8>* %1097, align 1, !tbaa !14, !alias.scope !526
  %1099 = getelementptr inbounds i8, i8* %1096, i64 16
  %1100 = bitcast i8* %1099 to <16 x i8>*
  %1101 = load <16 x i8>, <16 x i8>* %1100, align 1, !tbaa !14, !alias.scope !526
  %1102 = getelementptr inbounds i8, i8* %233, i64 %1094
  %1103 = bitcast i8* %1102 to <16 x i8>*
  %1104 = load <16 x i8>, <16 x i8>* %1103, align 1, !tbaa !14, !alias.scope !529
  %1105 = getelementptr inbounds i8, i8* %1102, i64 16
  %1106 = bitcast i8* %1105 to <16 x i8>*
  %1107 = load <16 x i8>, <16 x i8>* %1106, align 1, !tbaa !14, !alias.scope !529
  %1108 = lshr <16 x i8> %1104, <i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1>
  %1109 = lshr <16 x i8> %1107, <i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1>
  %1110 = add <16 x i8> %1108, %1098
  %1111 = add <16 x i8> %1109, %1101
  %1112 = getelementptr inbounds i8, i8* %371, i64 %1094
  %1113 = bitcast i8* %1112 to <16 x i8>*
  store <16 x i8> %1110, <16 x i8>* %1113, align 1, !tbaa !14, !alias.scope !531, !noalias !533
  %1114 = getelementptr inbounds i8, i8* %1112, i64 16
  %1115 = bitcast i8* %1114 to <16 x i8>*
  store <16 x i8> %1111, <16 x i8>* %1115, align 1, !tbaa !14, !alias.scope !531, !noalias !533
  br label %1116

1116:                                             ; preds = %1093, %1095
  br i1 %125, label %1274, label %1117

1117:                                             ; preds = %1116
  br i1 %127, label %1135, label %1118

1118:                                             ; preds = %1044, %1117
  %1119 = phi i64 [ %120, %1117 ], [ 0, %1044 ]
  br label %1120

1120:                                             ; preds = %1120, %1118
  %1121 = phi i64 [ %1119, %1118 ], [ %1132, %1120 ]
  %1122 = getelementptr inbounds i8, i8* %373, i64 %1121
  %1123 = bitcast i8* %1122 to <8 x i8>*
  %1124 = load <8 x i8>, <8 x i8>* %1123, align 1, !tbaa !14
  %1125 = getelementptr inbounds i8, i8* %233, i64 %1121
  %1126 = bitcast i8* %1125 to <8 x i8>*
  %1127 = load <8 x i8>, <8 x i8>* %1126, align 1, !tbaa !14
  %1128 = lshr <8 x i8> %1127, <i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1>
  %1129 = add <8 x i8> %1128, %1124
  %1130 = getelementptr inbounds i8, i8* %371, i64 %1121
  %1131 = bitcast i8* %1130 to <8 x i8>*
  store <8 x i8> %1129, <8 x i8>* %1131, align 1, !tbaa !14
  %1132 = add nuw i64 %1121, 8
  %1133 = icmp eq i64 %1132, %128
  br i1 %1133, label %1134, label %1120, !llvm.loop !535

1134:                                             ; preds = %1120
  br i1 %129, label %1274, label %1135

1135:                                             ; preds = %1035, %1034, %1117, %1134
  %1136 = phi i64 [ 0, %1034 ], [ 0, %1035 ], [ %120, %1117 ], [ %128, %1134 ]
  %1137 = xor i64 %1136, -1
  br i1 %131, label %1147, label %1138

1138:                                             ; preds = %1135
  %1139 = getelementptr inbounds i8, i8* %373, i64 %1136
  %1140 = load i8, i8* %1139, align 1, !tbaa !14
  %1141 = getelementptr inbounds i8, i8* %233, i64 %1136
  %1142 = load i8, i8* %1141, align 1, !tbaa !14
  %1143 = lshr i8 %1142, 1
  %1144 = add i8 %1143, %1140
  %1145 = getelementptr inbounds i8, i8* %371, i64 %1136
  store i8 %1144, i8* %1145, align 1, !tbaa !14
  %1146 = or i64 %1136, 1
  br label %1147

1147:                                             ; preds = %1138, %1135
  %1148 = phi i64 [ %1136, %1135 ], [ %1146, %1138 ]
  %1149 = icmp eq i64 %1137, %132
  br i1 %1149, label %1274, label %1255

1150:                                             ; preds = %1031
  br i1 %28, label %1598, label %1151

1151:                                             ; preds = %1150
  br i1 %133, label %1239, label %1152

1152:                                             ; preds = %1151
  %1153 = icmp ult i8* %297, %304
  %1154 = icmp ult i8* %302, %299
  %1155 = and i1 %1153, %1154
  br i1 %1155, label %1239, label %1156

1156:                                             ; preds = %1152
  br i1 %134, label %1227, label %1157

1157:                                             ; preds = %1156
  br i1 %137, label %1207, label %1158

1158:                                             ; preds = %1157, %1158
  %1159 = phi i64 [ %1204, %1158 ], [ 0, %1157 ]
  %1160 = phi i64 [ %1205, %1158 ], [ 0, %1157 ]
  %1161 = getelementptr inbounds i8, i8* %373, i64 %1159
  %1162 = bitcast i8* %1161 to <16 x i8>*
  %1163 = load <16 x i8>, <16 x i8>* %1162, align 1, !tbaa !14, !alias.scope !536
  %1164 = getelementptr inbounds i8, i8* %1161, i64 16
  %1165 = bitcast i8* %1164 to <16 x i8>*
  %1166 = load <16 x i8>, <16 x i8>* %1165, align 1, !tbaa !14, !alias.scope !536
  %1167 = getelementptr inbounds i8, i8* %371, i64 %1159
  %1168 = bitcast i8* %1167 to <16 x i8>*
  store <16 x i8> %1163, <16 x i8>* %1168, align 1, !tbaa !14, !alias.scope !539, !noalias !536
  %1169 = getelementptr inbounds i8, i8* %1167, i64 16
  %1170 = bitcast i8* %1169 to <16 x i8>*
  store <16 x i8> %1166, <16 x i8>* %1170, align 1, !tbaa !14, !alias.scope !539, !noalias !536
  %1171 = or i64 %1159, 32
  %1172 = getelementptr inbounds i8, i8* %373, i64 %1171
  %1173 = bitcast i8* %1172 to <16 x i8>*
  %1174 = load <16 x i8>, <16 x i8>* %1173, align 1, !tbaa !14, !alias.scope !536
  %1175 = getelementptr inbounds i8, i8* %1172, i64 16
  %1176 = bitcast i8* %1175 to <16 x i8>*
  %1177 = load <16 x i8>, <16 x i8>* %1176, align 1, !tbaa !14, !alias.scope !536
  %1178 = getelementptr inbounds i8, i8* %371, i64 %1171
  %1179 = bitcast i8* %1178 to <16 x i8>*
  store <16 x i8> %1174, <16 x i8>* %1179, align 1, !tbaa !14, !alias.scope !539, !noalias !536
  %1180 = getelementptr inbounds i8, i8* %1178, i64 16
  %1181 = bitcast i8* %1180 to <16 x i8>*
  store <16 x i8> %1177, <16 x i8>* %1181, align 1, !tbaa !14, !alias.scope !539, !noalias !536
  %1182 = or i64 %1159, 64
  %1183 = getelementptr inbounds i8, i8* %373, i64 %1182
  %1184 = bitcast i8* %1183 to <16 x i8>*
  %1185 = load <16 x i8>, <16 x i8>* %1184, align 1, !tbaa !14, !alias.scope !536
  %1186 = getelementptr inbounds i8, i8* %1183, i64 16
  %1187 = bitcast i8* %1186 to <16 x i8>*
  %1188 = load <16 x i8>, <16 x i8>* %1187, align 1, !tbaa !14, !alias.scope !536
  %1189 = getelementptr inbounds i8, i8* %371, i64 %1182
  %1190 = bitcast i8* %1189 to <16 x i8>*
  store <16 x i8> %1185, <16 x i8>* %1190, align 1, !tbaa !14, !alias.scope !539, !noalias !536
  %1191 = getelementptr inbounds i8, i8* %1189, i64 16
  %1192 = bitcast i8* %1191 to <16 x i8>*
  store <16 x i8> %1188, <16 x i8>* %1192, align 1, !tbaa !14, !alias.scope !539, !noalias !536
  %1193 = or i64 %1159, 96
  %1194 = getelementptr inbounds i8, i8* %373, i64 %1193
  %1195 = bitcast i8* %1194 to <16 x i8>*
  %1196 = load <16 x i8>, <16 x i8>* %1195, align 1, !tbaa !14, !alias.scope !536
  %1197 = getelementptr inbounds i8, i8* %1194, i64 16
  %1198 = bitcast i8* %1197 to <16 x i8>*
  %1199 = load <16 x i8>, <16 x i8>* %1198, align 1, !tbaa !14, !alias.scope !536
  %1200 = getelementptr inbounds i8, i8* %371, i64 %1193
  %1201 = bitcast i8* %1200 to <16 x i8>*
  store <16 x i8> %1196, <16 x i8>* %1201, align 1, !tbaa !14, !alias.scope !539, !noalias !536
  %1202 = getelementptr inbounds i8, i8* %1200, i64 16
  %1203 = bitcast i8* %1202 to <16 x i8>*
  store <16 x i8> %1199, <16 x i8>* %1203, align 1, !tbaa !14, !alias.scope !539, !noalias !536
  %1204 = add nuw i64 %1159, 128
  %1205 = add i64 %1160, 4
  %1206 = icmp eq i64 %1205, %138
  br i1 %1206, label %1207, label %1158, !llvm.loop !541

1207:                                             ; preds = %1158, %1157
  %1208 = phi i64 [ 0, %1157 ], [ %1204, %1158 ]
  br i1 %139, label %1225, label %1209

1209:                                             ; preds = %1207, %1209
  %1210 = phi i64 [ %1222, %1209 ], [ %1208, %1207 ]
  %1211 = phi i64 [ %1223, %1209 ], [ 0, %1207 ]
  %1212 = getelementptr inbounds i8, i8* %373, i64 %1210
  %1213 = bitcast i8* %1212 to <16 x i8>*
  %1214 = load <16 x i8>, <16 x i8>* %1213, align 1, !tbaa !14, !alias.scope !536
  %1215 = getelementptr inbounds i8, i8* %1212, i64 16
  %1216 = bitcast i8* %1215 to <16 x i8>*
  %1217 = load <16 x i8>, <16 x i8>* %1216, align 1, !tbaa !14, !alias.scope !536
  %1218 = getelementptr inbounds i8, i8* %371, i64 %1210
  %1219 = bitcast i8* %1218 to <16 x i8>*
  store <16 x i8> %1214, <16 x i8>* %1219, align 1, !tbaa !14, !alias.scope !539, !noalias !536
  %1220 = getelementptr inbounds i8, i8* %1218, i64 16
  %1221 = bitcast i8* %1220 to <16 x i8>*
  store <16 x i8> %1217, <16 x i8>* %1221, align 1, !tbaa !14, !alias.scope !539, !noalias !536
  %1222 = add nuw i64 %1210, 32
  %1223 = add i64 %1211, 1
  %1224 = icmp eq i64 %1223, %136
  br i1 %1224, label %1225, label %1209, !llvm.loop !542

1225:                                             ; preds = %1209, %1207
  br i1 %140, label %1598, label %1226

1226:                                             ; preds = %1225
  br i1 %142, label %1239, label %1227

1227:                                             ; preds = %1156, %1226
  %1228 = phi i64 [ %135, %1226 ], [ 0, %1156 ]
  br label %1229

1229:                                             ; preds = %1229, %1227
  %1230 = phi i64 [ %1228, %1227 ], [ %1236, %1229 ]
  %1231 = getelementptr inbounds i8, i8* %373, i64 %1230
  %1232 = bitcast i8* %1231 to <8 x i8>*
  %1233 = load <8 x i8>, <8 x i8>* %1232, align 1, !tbaa !14
  %1234 = getelementptr inbounds i8, i8* %371, i64 %1230
  %1235 = bitcast i8* %1234 to <8 x i8>*
  store <8 x i8> %1233, <8 x i8>* %1235, align 1, !tbaa !14
  %1236 = add nuw i64 %1230, 8
  %1237 = icmp eq i64 %1236, %143
  br i1 %1237, label %1238, label %1229, !llvm.loop !543

1238:                                             ; preds = %1229
  br i1 %144, label %1598, label %1239

1239:                                             ; preds = %1152, %1151, %1226, %1238
  %1240 = phi i64 [ 0, %1151 ], [ 0, %1152 ], [ %135, %1226 ], [ %143, %1238 ]
  %1241 = xor i64 %1240, -1
  %1242 = add nsw i64 %1241, %8
  br i1 %146, label %1252, label %1243

1243:                                             ; preds = %1239, %1243
  %1244 = phi i64 [ %1249, %1243 ], [ %1240, %1239 ]
  %1245 = phi i64 [ %1250, %1243 ], [ 0, %1239 ]
  %1246 = getelementptr inbounds i8, i8* %373, i64 %1244
  %1247 = load i8, i8* %1246, align 1, !tbaa !14
  %1248 = getelementptr inbounds i8, i8* %371, i64 %1244
  store i8 %1247, i8* %1248, align 1, !tbaa !14
  %1249 = add nuw nsw i64 %1244, 1
  %1250 = add i64 %1245, 1
  %1251 = icmp eq i64 %1250, %145
  br i1 %1251, label %1252, label %1243, !llvm.loop !544

1252:                                             ; preds = %1243, %1239
  %1253 = phi i64 [ %1240, %1239 ], [ %1249, %1243 ]
  %1254 = icmp ult i64 %1242, 3
  br i1 %1254, label %1598, label %1724

1255:                                             ; preds = %1147, %1255
  %1256 = phi i64 [ %1272, %1255 ], [ %1148, %1147 ]
  %1257 = getelementptr inbounds i8, i8* %373, i64 %1256
  %1258 = load i8, i8* %1257, align 1, !tbaa !14
  %1259 = getelementptr inbounds i8, i8* %233, i64 %1256
  %1260 = load i8, i8* %1259, align 1, !tbaa !14
  %1261 = lshr i8 %1260, 1
  %1262 = add i8 %1261, %1258
  %1263 = getelementptr inbounds i8, i8* %371, i64 %1256
  store i8 %1262, i8* %1263, align 1, !tbaa !14
  %1264 = add nuw nsw i64 %1256, 1
  %1265 = getelementptr inbounds i8, i8* %373, i64 %1264
  %1266 = load i8, i8* %1265, align 1, !tbaa !14
  %1267 = getelementptr inbounds i8, i8* %233, i64 %1264
  %1268 = load i8, i8* %1267, align 1, !tbaa !14
  %1269 = lshr i8 %1268, 1
  %1270 = add i8 %1269, %1266
  %1271 = getelementptr inbounds i8, i8* %371, i64 %1264
  store i8 %1270, i8* %1271, align 1, !tbaa !14
  %1272 = add nuw nsw i64 %1256, 2
  %1273 = icmp eq i64 %1272, %8
  br i1 %1273, label %1274, label %1255, !llvm.loop !545

1274:                                             ; preds = %1147, %1255, %1134, %1116
  br i1 %30, label %1275, label %1341

1275:                                             ; preds = %1274
  br i1 %39, label %1276, label %1429

1276:                                             ; preds = %1275, %1276
  %1277 = phi i64 [ %1339, %1276 ], [ %38, %1275 ]
  %1278 = phi i64 [ %1337, %1276 ], [ %8, %1275 ]
  %1279 = phi i64 [ %1338, %1276 ], [ 0, %1275 ]
  %1280 = getelementptr inbounds i8, i8* %373, i64 %1278
  %1281 = load i8, i8* %1280, align 1, !tbaa !14
  %1282 = add nuw nsw i64 %1278, 1
  %1283 = getelementptr inbounds i8, i8* %373, i64 %1282
  %1284 = load i8, i8* %1283, align 1, !tbaa !14
  %1285 = add nuw nsw i64 %1278, 2
  %1286 = getelementptr inbounds i8, i8* %373, i64 %1285
  %1287 = load i8, i8* %1286, align 1, !tbaa !14
  %1288 = getelementptr inbounds i8, i8* %373, i64 %1277
  %1289 = load i8, i8* %1288, align 1, !tbaa !14
  %1290 = getelementptr inbounds i8, i8* %371, i64 %1279
  %1291 = load i8, i8* %1290, align 1, !tbaa !14
  %1292 = or i64 %1279, 1
  %1293 = getelementptr inbounds i8, i8* %371, i64 %1292
  %1294 = load i8, i8* %1293, align 1, !tbaa !14
  %1295 = or i64 %1279, 2
  %1296 = getelementptr inbounds i8, i8* %371, i64 %1295
  %1297 = load i8, i8* %1296, align 1, !tbaa !14
  %1298 = or i64 %1279, 3
  %1299 = getelementptr inbounds i8, i8* %371, i64 %1298
  %1300 = load i8, i8* %1299, align 1, !tbaa !14
  %1301 = getelementptr inbounds i8, i8* %233, i64 %1278
  %1302 = load i8, i8* %1301, align 1, !tbaa !14
  %1303 = getelementptr inbounds i8, i8* %233, i64 %1282
  %1304 = load i8, i8* %1303, align 1, !tbaa !14
  %1305 = getelementptr inbounds i8, i8* %233, i64 %1285
  %1306 = load i8, i8* %1305, align 1, !tbaa !14
  %1307 = getelementptr inbounds i8, i8* %233, i64 %1277
  %1308 = load i8, i8* %1307, align 1, !tbaa !14
  %1309 = zext i8 %1291 to i16
  %1310 = zext i8 %1302 to i16
  %1311 = add nuw nsw i16 %1310, %1309
  %1312 = lshr i16 %1311, 1
  %1313 = trunc i16 %1312 to i8
  %1314 = add i8 %1281, %1313
  %1315 = getelementptr inbounds i8, i8* %371, i64 %1278
  store i8 %1314, i8* %1315, align 1, !tbaa !14
  %1316 = zext i8 %1294 to i16
  %1317 = zext i8 %1304 to i16
  %1318 = add nuw nsw i16 %1317, %1316
  %1319 = lshr i16 %1318, 1
  %1320 = trunc i16 %1319 to i8
  %1321 = add i8 %1284, %1320
  %1322 = getelementptr inbounds i8, i8* %371, i64 %1282
  store i8 %1321, i8* %1322, align 1, !tbaa !14
  %1323 = zext i8 %1297 to i16
  %1324 = zext i8 %1306 to i16
  %1325 = add nuw nsw i16 %1324, %1323
  %1326 = lshr i16 %1325, 1
  %1327 = trunc i16 %1326 to i8
  %1328 = add i8 %1287, %1327
  %1329 = getelementptr inbounds i8, i8* %371, i64 %1285
  store i8 %1328, i8* %1329, align 1, !tbaa !14
  %1330 = zext i8 %1300 to i16
  %1331 = zext i8 %1308 to i16
  %1332 = add nuw nsw i16 %1331, %1330
  %1333 = lshr i16 %1332, 1
  %1334 = trunc i16 %1333 to i8
  %1335 = add i8 %1289, %1334
  %1336 = getelementptr inbounds i8, i8* %371, i64 %1277
  store i8 %1335, i8* %1336, align 1, !tbaa !14
  %1337 = add nuw nsw i64 %1278, 4
  %1338 = add nuw nsw i64 %1279, 4
  %1339 = add nuw nsw i64 %1278, 7
  %1340 = icmp ult i64 %1339, %18
  br i1 %1340, label %1276, label %1429

1341:                                             ; preds = %1274
  br i1 %31, label %1342, label %1393

1342:                                             ; preds = %1341
  br i1 %37, label %1343, label %1429

1343:                                             ; preds = %1342, %1343
  %1344 = phi i64 [ %1391, %1343 ], [ 5, %1342 ]
  %1345 = phi i64 [ %1389, %1343 ], [ 3, %1342 ]
  %1346 = phi i64 [ %1390, %1343 ], [ 0, %1342 ]
  %1347 = getelementptr inbounds i8, i8* %373, i64 %1345
  %1348 = load i8, i8* %1347, align 1, !tbaa !14
  %1349 = add nuw nsw i64 %1345, 1
  %1350 = getelementptr inbounds i8, i8* %373, i64 %1349
  %1351 = load i8, i8* %1350, align 1, !tbaa !14
  %1352 = getelementptr inbounds i8, i8* %373, i64 %1344
  %1353 = load i8, i8* %1352, align 1, !tbaa !14
  %1354 = getelementptr inbounds i8, i8* %371, i64 %1346
  %1355 = load i8, i8* %1354, align 1, !tbaa !14
  %1356 = add nuw nsw i64 %1346, 1
  %1357 = getelementptr inbounds i8, i8* %371, i64 %1356
  %1358 = load i8, i8* %1357, align 1, !tbaa !14
  %1359 = add nuw nsw i64 %1346, 2
  %1360 = getelementptr inbounds i8, i8* %371, i64 %1359
  %1361 = load i8, i8* %1360, align 1, !tbaa !14
  %1362 = getelementptr inbounds i8, i8* %233, i64 %1345
  %1363 = load i8, i8* %1362, align 1, !tbaa !14
  %1364 = getelementptr inbounds i8, i8* %233, i64 %1349
  %1365 = load i8, i8* %1364, align 1, !tbaa !14
  %1366 = getelementptr inbounds i8, i8* %233, i64 %1344
  %1367 = load i8, i8* %1366, align 1, !tbaa !14
  %1368 = zext i8 %1355 to i16
  %1369 = zext i8 %1363 to i16
  %1370 = add nuw nsw i16 %1369, %1368
  %1371 = lshr i16 %1370, 1
  %1372 = trunc i16 %1371 to i8
  %1373 = add i8 %1348, %1372
  %1374 = getelementptr inbounds i8, i8* %371, i64 %1345
  store i8 %1373, i8* %1374, align 1, !tbaa !14
  %1375 = zext i8 %1358 to i16
  %1376 = zext i8 %1365 to i16
  %1377 = add nuw nsw i16 %1376, %1375
  %1378 = lshr i16 %1377, 1
  %1379 = trunc i16 %1378 to i8
  %1380 = add i8 %1351, %1379
  %1381 = getelementptr inbounds i8, i8* %371, i64 %1349
  store i8 %1380, i8* %1381, align 1, !tbaa !14
  %1382 = zext i8 %1361 to i16
  %1383 = zext i8 %1367 to i16
  %1384 = add nuw nsw i16 %1383, %1382
  %1385 = lshr i16 %1384, 1
  %1386 = trunc i16 %1385 to i8
  %1387 = add i8 %1353, %1386
  %1388 = getelementptr inbounds i8, i8* %371, i64 %1344
  store i8 %1387, i8* %1388, align 1, !tbaa !14
  %1389 = add nuw nsw i64 %1345, 3
  %1390 = add nuw nsw i64 %1346, 3
  %1391 = add nuw nsw i64 %1345, 5
  %1392 = icmp ult i64 %1391, %18
  br i1 %1392, label %1343, label %1429

1393:                                             ; preds = %1341
  br i1 %35, label %1394, label %1429

1394:                                             ; preds = %1393, %1394
  %1395 = phi i64 [ %1427, %1394 ], [ 3, %1393 ]
  %1396 = phi i64 [ %1425, %1394 ], [ 2, %1393 ]
  %1397 = phi i64 [ %1426, %1394 ], [ 0, %1393 ]
  %1398 = getelementptr inbounds i8, i8* %373, i64 %1396
  %1399 = load i8, i8* %1398, align 1, !tbaa !14
  %1400 = getelementptr inbounds i8, i8* %373, i64 %1395
  %1401 = load i8, i8* %1400, align 1, !tbaa !14
  %1402 = getelementptr inbounds i8, i8* %371, i64 %1397
  %1403 = load i8, i8* %1402, align 1, !tbaa !14
  %1404 = or i64 %1397, 1
  %1405 = getelementptr inbounds i8, i8* %371, i64 %1404
  %1406 = load i8, i8* %1405, align 1, !tbaa !14
  %1407 = getelementptr inbounds i8, i8* %233, i64 %1396
  %1408 = load i8, i8* %1407, align 1, !tbaa !14
  %1409 = getelementptr inbounds i8, i8* %233, i64 %1395
  %1410 = load i8, i8* %1409, align 1, !tbaa !14
  %1411 = zext i8 %1403 to i16
  %1412 = zext i8 %1408 to i16
  %1413 = add nuw nsw i16 %1412, %1411
  %1414 = lshr i16 %1413, 1
  %1415 = trunc i16 %1414 to i8
  %1416 = add i8 %1399, %1415
  %1417 = getelementptr inbounds i8, i8* %371, i64 %1396
  store i8 %1416, i8* %1417, align 1, !tbaa !14
  %1418 = zext i8 %1406 to i16
  %1419 = zext i8 %1410 to i16
  %1420 = add nuw nsw i16 %1419, %1418
  %1421 = lshr i16 %1420, 1
  %1422 = trunc i16 %1421 to i8
  %1423 = add i8 %1401, %1422
  %1424 = getelementptr inbounds i8, i8* %371, i64 %1395
  store i8 %1423, i8* %1424, align 1, !tbaa !14
  %1425 = add nuw nsw i64 %1396, 2
  %1426 = add nuw nsw i64 %1397, 2
  %1427 = add nuw nsw i64 %1396, 3
  %1428 = icmp ult i64 %1427, %18
  br i1 %1428, label %1394, label %1429

1429:                                             ; preds = %1394, %1343, %1276, %1393, %1342, %1275, %1033
  %1430 = phi i64 [ 0, %1393 ], [ 0, %1275 ], [ 0, %1342 ], [ 0, %1033 ], [ %1338, %1276 ], [ %1390, %1343 ], [ %1426, %1394 ]
  %1431 = phi i64 [ %8, %1393 ], [ %8, %1275 ], [ 3, %1342 ], [ 0, %1033 ], [ %1337, %1276 ], [ %1389, %1343 ], [ %1425, %1394 ]
  %1432 = icmp eq i64 %1431, %18
  br i1 %1432, label %2623, label %1433

1433:                                             ; preds = %1429
  %1434 = sub i64 %43, %1431
  %1435 = icmp ult i64 %1434, 8
  br i1 %1435, label %1537, label %1436

1436:                                             ; preds = %1433
  %1437 = getelementptr i8, i8* %288, i64 %1431
  %1438 = getelementptr i8, i8* %293, i64 %1431
  %1439 = getelementptr i8, i8* %288, i64 %1430
  %1440 = sub i64 %1430, %1431
  %1441 = getelementptr i8, i8* %290, i64 %1440
  %1442 = getelementptr i8, i8* %233, i64 %1431
  %1443 = getelementptr i8, i8* %233, i64 %18
  %1444 = icmp ult i8* %1437, %295
  %1445 = icmp ult i8* %1438, %290
  %1446 = and i1 %1444, %1445
  %1447 = icmp ult i8* %1437, %1441
  %1448 = icmp ult i8* %1439, %290
  %1449 = and i1 %1447, %1448
  %1450 = or i1 %1446, %1449
  %1451 = icmp ult i8* %1437, %1443
  %1452 = icmp ult i8* %1442, %290
  %1453 = and i1 %1451, %1452
  %1454 = or i1 %1450, %1453
  br i1 %1454, label %1537, label %1455

1455:                                             ; preds = %1436
  %1456 = icmp ult i64 %1434, 32
  br i1 %1456, label %1506, label %1457

1457:                                             ; preds = %1455
  %1458 = and i64 %1434, -32
  br label %1459

1459:                                             ; preds = %1459, %1457
  %1460 = phi i64 [ 0, %1457 ], [ %1497, %1459 ]
  %1461 = add i64 %1431, %1460
  %1462 = add i64 %1430, %1460
  %1463 = getelementptr inbounds i8, i8* %373, i64 %1461
  %1464 = bitcast i8* %1463 to <16 x i8>*
  %1465 = load <16 x i8>, <16 x i8>* %1464, align 1, !tbaa !14, !alias.scope !546
  %1466 = getelementptr inbounds i8, i8* %1463, i64 16
  %1467 = bitcast i8* %1466 to <16 x i8>*
  %1468 = load <16 x i8>, <16 x i8>* %1467, align 1, !tbaa !14, !alias.scope !546
  %1469 = getelementptr inbounds i8, i8* %371, i64 %1462
  %1470 = bitcast i8* %1469 to <16 x i8>*
  %1471 = load <16 x i8>, <16 x i8>* %1470, align 1, !tbaa !14, !alias.scope !549
  %1472 = getelementptr inbounds i8, i8* %1469, i64 16
  %1473 = bitcast i8* %1472 to <16 x i8>*
  %1474 = load <16 x i8>, <16 x i8>* %1473, align 1, !tbaa !14, !alias.scope !549
  %1475 = zext <16 x i8> %1471 to <16 x i16>
  %1476 = zext <16 x i8> %1474 to <16 x i16>
  %1477 = getelementptr inbounds i8, i8* %233, i64 %1461
  %1478 = bitcast i8* %1477 to <16 x i8>*
  %1479 = load <16 x i8>, <16 x i8>* %1478, align 1, !tbaa !14, !alias.scope !551
  %1480 = getelementptr inbounds i8, i8* %1477, i64 16
  %1481 = bitcast i8* %1480 to <16 x i8>*
  %1482 = load <16 x i8>, <16 x i8>* %1481, align 1, !tbaa !14, !alias.scope !551
  %1483 = zext <16 x i8> %1479 to <16 x i16>
  %1484 = zext <16 x i8> %1482 to <16 x i16>
  %1485 = add nuw nsw <16 x i16> %1483, %1475
  %1486 = add nuw nsw <16 x i16> %1484, %1476
  %1487 = lshr <16 x i16> %1485, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %1488 = lshr <16 x i16> %1486, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %1489 = trunc <16 x i16> %1487 to <16 x i8>
  %1490 = trunc <16 x i16> %1488 to <16 x i8>
  %1491 = add <16 x i8> %1465, %1489
  %1492 = add <16 x i8> %1468, %1490
  %1493 = getelementptr inbounds i8, i8* %371, i64 %1461
  %1494 = bitcast i8* %1493 to <16 x i8>*
  store <16 x i8> %1491, <16 x i8>* %1494, align 1, !tbaa !14, !alias.scope !553, !noalias !555
  %1495 = getelementptr inbounds i8, i8* %1493, i64 16
  %1496 = bitcast i8* %1495 to <16 x i8>*
  store <16 x i8> %1492, <16 x i8>* %1496, align 1, !tbaa !14, !alias.scope !553, !noalias !555
  %1497 = add nuw i64 %1460, 32
  %1498 = icmp eq i64 %1497, %1458
  br i1 %1498, label %1499, label %1459, !llvm.loop !556

1499:                                             ; preds = %1459
  %1500 = icmp eq i64 %1434, %1458
  br i1 %1500, label %2623, label %1501

1501:                                             ; preds = %1499
  %1502 = add i64 %1430, %1458
  %1503 = add i64 %1431, %1458
  %1504 = and i64 %1434, 24
  %1505 = icmp eq i64 %1504, 0
  br i1 %1505, label %1537, label %1506

1506:                                             ; preds = %1455, %1501
  %1507 = phi i64 [ %1458, %1501 ], [ 0, %1455 ]
  %1508 = sub i64 %44, %1431
  %1509 = and i64 %1508, -8
  %1510 = add i64 %1431, %1509
  %1511 = add i64 %1430, %1509
  br label %1512

1512:                                             ; preds = %1512, %1506
  %1513 = phi i64 [ %1507, %1506 ], [ %1533, %1512 ]
  %1514 = add i64 %1431, %1513
  %1515 = add i64 %1430, %1513
  %1516 = getelementptr inbounds i8, i8* %373, i64 %1514
  %1517 = bitcast i8* %1516 to <8 x i8>*
  %1518 = load <8 x i8>, <8 x i8>* %1517, align 1, !tbaa !14
  %1519 = getelementptr inbounds i8, i8* %371, i64 %1515
  %1520 = bitcast i8* %1519 to <8 x i8>*
  %1521 = load <8 x i8>, <8 x i8>* %1520, align 1, !tbaa !14
  %1522 = zext <8 x i8> %1521 to <8 x i16>
  %1523 = getelementptr inbounds i8, i8* %233, i64 %1514
  %1524 = bitcast i8* %1523 to <8 x i8>*
  %1525 = load <8 x i8>, <8 x i8>* %1524, align 1, !tbaa !14
  %1526 = zext <8 x i8> %1525 to <8 x i16>
  %1527 = add nuw nsw <8 x i16> %1526, %1522
  %1528 = lshr <8 x i16> %1527, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %1529 = trunc <8 x i16> %1528 to <8 x i8>
  %1530 = add <8 x i8> %1518, %1529
  %1531 = getelementptr inbounds i8, i8* %371, i64 %1514
  %1532 = bitcast i8* %1531 to <8 x i8>*
  store <8 x i8> %1530, <8 x i8>* %1532, align 1, !tbaa !14
  %1533 = add nuw i64 %1513, 8
  %1534 = icmp eq i64 %1533, %1509
  br i1 %1534, label %1535, label %1512, !llvm.loop !557

1535:                                             ; preds = %1512
  %1536 = icmp eq i64 %1508, %1509
  br i1 %1536, label %2623, label %1537

1537:                                             ; preds = %1436, %1433, %1501, %1535
  %1538 = phi i64 [ %1431, %1433 ], [ %1431, %1436 ], [ %1503, %1501 ], [ %1510, %1535 ]
  %1539 = phi i64 [ %1430, %1433 ], [ %1430, %1436 ], [ %1502, %1501 ], [ %1511, %1535 ]
  %1540 = sub i64 %60, %1538
  %1541 = add i64 %1538, 1
  %1542 = and i64 %1540, 1
  %1543 = icmp eq i64 %1542, 0
  br i1 %1543, label %1560, label %1544

1544:                                             ; preds = %1537
  %1545 = getelementptr inbounds i8, i8* %373, i64 %1538
  %1546 = load i8, i8* %1545, align 1, !tbaa !14
  %1547 = getelementptr inbounds i8, i8* %371, i64 %1539
  %1548 = load i8, i8* %1547, align 1, !tbaa !14
  %1549 = zext i8 %1548 to i16
  %1550 = getelementptr inbounds i8, i8* %233, i64 %1538
  %1551 = load i8, i8* %1550, align 1, !tbaa !14
  %1552 = zext i8 %1551 to i16
  %1553 = add nuw nsw i16 %1552, %1549
  %1554 = lshr i16 %1553, 1
  %1555 = trunc i16 %1554 to i8
  %1556 = add i8 %1546, %1555
  %1557 = getelementptr inbounds i8, i8* %371, i64 %1538
  store i8 %1556, i8* %1557, align 1, !tbaa !14
  %1558 = add i64 %1538, 1
  %1559 = add i64 %1539, 1
  br label %1560

1560:                                             ; preds = %1544, %1537
  %1561 = phi i64 [ %1538, %1537 ], [ %1558, %1544 ]
  %1562 = phi i64 [ %1539, %1537 ], [ %1559, %1544 ]
  %1563 = icmp eq i64 %61, %1541
  br i1 %1563, label %2623, label %1564

1564:                                             ; preds = %1560, %1564
  %1565 = phi i64 [ %1595, %1564 ], [ %1561, %1560 ]
  %1566 = phi i64 [ %1596, %1564 ], [ %1562, %1560 ]
  %1567 = getelementptr inbounds i8, i8* %373, i64 %1565
  %1568 = load i8, i8* %1567, align 1, !tbaa !14
  %1569 = getelementptr inbounds i8, i8* %371, i64 %1566
  %1570 = load i8, i8* %1569, align 1, !tbaa !14
  %1571 = zext i8 %1570 to i16
  %1572 = getelementptr inbounds i8, i8* %233, i64 %1565
  %1573 = load i8, i8* %1572, align 1, !tbaa !14
  %1574 = zext i8 %1573 to i16
  %1575 = add nuw nsw i16 %1574, %1571
  %1576 = lshr i16 %1575, 1
  %1577 = trunc i16 %1576 to i8
  %1578 = add i8 %1568, %1577
  %1579 = getelementptr inbounds i8, i8* %371, i64 %1565
  store i8 %1578, i8* %1579, align 1, !tbaa !14
  %1580 = add i64 %1565, 1
  %1581 = add i64 %1566, 1
  %1582 = getelementptr inbounds i8, i8* %373, i64 %1580
  %1583 = load i8, i8* %1582, align 1, !tbaa !14
  %1584 = getelementptr inbounds i8, i8* %371, i64 %1581
  %1585 = load i8, i8* %1584, align 1, !tbaa !14
  %1586 = zext i8 %1585 to i16
  %1587 = getelementptr inbounds i8, i8* %233, i64 %1580
  %1588 = load i8, i8* %1587, align 1, !tbaa !14
  %1589 = zext i8 %1588 to i16
  %1590 = add nuw nsw i16 %1589, %1586
  %1591 = lshr i16 %1590, 1
  %1592 = trunc i16 %1591 to i8
  %1593 = add i8 %1583, %1592
  %1594 = getelementptr inbounds i8, i8* %371, i64 %1580
  store i8 %1593, i8* %1594, align 1, !tbaa !14
  %1595 = add i64 %1565, 2
  %1596 = add i64 %1566, 2
  %1597 = icmp eq i64 %1595, %18
  br i1 %1597, label %2623, label %1564, !llvm.loop !558

1598:                                             ; preds = %1252, %1724, %1225, %1238, %1150
  br i1 %29, label %2623, label %1599

1599:                                             ; preds = %1598
  br i1 %147, label %1703, label %1600

1600:                                             ; preds = %1599
  %1601 = icmp ult i8* %307, %314
  %1602 = icmp ult i8* %312, %309
  %1603 = and i1 %1601, %1602
  %1604 = icmp ult i8* %307, %317
  %1605 = icmp ult i8* %315, %309
  %1606 = and i1 %1604, %1605
  %1607 = or i1 %1603, %1606
  br i1 %1607, label %1703, label %1608

1608:                                             ; preds = %1600
  br i1 %148, label %1685, label %1609

1609:                                             ; preds = %1608
  br i1 %151, label %1659, label %1610

1610:                                             ; preds = %1609, %1610
  %1611 = phi i64 [ %1656, %1610 ], [ 0, %1609 ]
  %1612 = phi i64 [ %1657, %1610 ], [ 0, %1609 ]
  %1613 = add i64 %1611, %8
  %1614 = getelementptr inbounds i8, i8* %373, i64 %1613
  %1615 = bitcast i8* %1614 to <16 x i8>*
  %1616 = load <16 x i8>, <16 x i8>* %1615, align 1, !tbaa !14, !alias.scope !559
  %1617 = getelementptr inbounds i8, i8* %1614, i64 16
  %1618 = bitcast i8* %1617 to <16 x i8>*
  %1619 = load <16 x i8>, <16 x i8>* %1618, align 1, !tbaa !14, !alias.scope !559
  %1620 = getelementptr inbounds i8, i8* %371, i64 %1611
  %1621 = bitcast i8* %1620 to <16 x i8>*
  %1622 = load <16 x i8>, <16 x i8>* %1621, align 1, !tbaa !14, !alias.scope !562
  %1623 = getelementptr inbounds i8, i8* %1620, i64 16
  %1624 = bitcast i8* %1623 to <16 x i8>*
  %1625 = load <16 x i8>, <16 x i8>* %1624, align 1, !tbaa !14, !alias.scope !562
  %1626 = lshr <16 x i8> %1622, <i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1>
  %1627 = lshr <16 x i8> %1625, <i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1>
  %1628 = add <16 x i8> %1626, %1616
  %1629 = add <16 x i8> %1627, %1619
  %1630 = getelementptr inbounds i8, i8* %371, i64 %1613
  %1631 = bitcast i8* %1630 to <16 x i8>*
  store <16 x i8> %1628, <16 x i8>* %1631, align 1, !tbaa !14, !alias.scope !564, !noalias !566
  %1632 = getelementptr inbounds i8, i8* %1630, i64 16
  %1633 = bitcast i8* %1632 to <16 x i8>*
  store <16 x i8> %1629, <16 x i8>* %1633, align 1, !tbaa !14, !alias.scope !564, !noalias !566
  %1634 = or i64 %1611, 32
  %1635 = add i64 %1634, %8
  %1636 = getelementptr inbounds i8, i8* %373, i64 %1635
  %1637 = bitcast i8* %1636 to <16 x i8>*
  %1638 = load <16 x i8>, <16 x i8>* %1637, align 1, !tbaa !14, !alias.scope !559
  %1639 = getelementptr inbounds i8, i8* %1636, i64 16
  %1640 = bitcast i8* %1639 to <16 x i8>*
  %1641 = load <16 x i8>, <16 x i8>* %1640, align 1, !tbaa !14, !alias.scope !559
  %1642 = getelementptr inbounds i8, i8* %371, i64 %1634
  %1643 = bitcast i8* %1642 to <16 x i8>*
  %1644 = load <16 x i8>, <16 x i8>* %1643, align 1, !tbaa !14, !alias.scope !562
  %1645 = getelementptr inbounds i8, i8* %1642, i64 16
  %1646 = bitcast i8* %1645 to <16 x i8>*
  %1647 = load <16 x i8>, <16 x i8>* %1646, align 1, !tbaa !14, !alias.scope !562
  %1648 = lshr <16 x i8> %1644, <i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1>
  %1649 = lshr <16 x i8> %1647, <i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1>
  %1650 = add <16 x i8> %1648, %1638
  %1651 = add <16 x i8> %1649, %1641
  %1652 = getelementptr inbounds i8, i8* %371, i64 %1635
  %1653 = bitcast i8* %1652 to <16 x i8>*
  store <16 x i8> %1650, <16 x i8>* %1653, align 1, !tbaa !14, !alias.scope !564, !noalias !566
  %1654 = getelementptr inbounds i8, i8* %1652, i64 16
  %1655 = bitcast i8* %1654 to <16 x i8>*
  store <16 x i8> %1651, <16 x i8>* %1655, align 1, !tbaa !14, !alias.scope !564, !noalias !566
  %1656 = add nuw i64 %1611, 64
  %1657 = add i64 %1612, 2
  %1658 = icmp eq i64 %1657, %152
  br i1 %1658, label %1659, label %1610, !llvm.loop !567

1659:                                             ; preds = %1610, %1609
  %1660 = phi i64 [ 0, %1609 ], [ %1656, %1610 ]
  br i1 %153, label %1683, label %1661

1661:                                             ; preds = %1659
  %1662 = add i64 %1660, %8
  %1663 = getelementptr inbounds i8, i8* %373, i64 %1662
  %1664 = bitcast i8* %1663 to <16 x i8>*
  %1665 = load <16 x i8>, <16 x i8>* %1664, align 1, !tbaa !14, !alias.scope !559
  %1666 = getelementptr inbounds i8, i8* %1663, i64 16
  %1667 = bitcast i8* %1666 to <16 x i8>*
  %1668 = load <16 x i8>, <16 x i8>* %1667, align 1, !tbaa !14, !alias.scope !559
  %1669 = getelementptr inbounds i8, i8* %371, i64 %1660
  %1670 = bitcast i8* %1669 to <16 x i8>*
  %1671 = load <16 x i8>, <16 x i8>* %1670, align 1, !tbaa !14, !alias.scope !562
  %1672 = getelementptr inbounds i8, i8* %1669, i64 16
  %1673 = bitcast i8* %1672 to <16 x i8>*
  %1674 = load <16 x i8>, <16 x i8>* %1673, align 1, !tbaa !14, !alias.scope !562
  %1675 = lshr <16 x i8> %1671, <i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1>
  %1676 = lshr <16 x i8> %1674, <i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1>
  %1677 = add <16 x i8> %1675, %1665
  %1678 = add <16 x i8> %1676, %1668
  %1679 = getelementptr inbounds i8, i8* %371, i64 %1662
  %1680 = bitcast i8* %1679 to <16 x i8>*
  store <16 x i8> %1677, <16 x i8>* %1680, align 1, !tbaa !14, !alias.scope !564, !noalias !566
  %1681 = getelementptr inbounds i8, i8* %1679, i64 16
  %1682 = bitcast i8* %1681 to <16 x i8>*
  store <16 x i8> %1678, <16 x i8>* %1682, align 1, !tbaa !14, !alias.scope !564, !noalias !566
  br label %1683

1683:                                             ; preds = %1659, %1661
  br i1 %154, label %2623, label %1684

1684:                                             ; preds = %1683
  br i1 %157, label %1703, label %1685

1685:                                             ; preds = %1608, %1684
  %1686 = phi i64 [ %149, %1684 ], [ 0, %1608 ]
  br label %1687

1687:                                             ; preds = %1687, %1685
  %1688 = phi i64 [ %1686, %1685 ], [ %1700, %1687 ]
  %1689 = add i64 %1688, %8
  %1690 = getelementptr inbounds i8, i8* %373, i64 %1689
  %1691 = bitcast i8* %1690 to <8 x i8>*
  %1692 = load <8 x i8>, <8 x i8>* %1691, align 1, !tbaa !14
  %1693 = getelementptr inbounds i8, i8* %371, i64 %1688
  %1694 = bitcast i8* %1693 to <8 x i8>*
  %1695 = load <8 x i8>, <8 x i8>* %1694, align 1, !tbaa !14
  %1696 = lshr <8 x i8> %1695, <i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1>
  %1697 = add <8 x i8> %1696, %1692
  %1698 = getelementptr inbounds i8, i8* %371, i64 %1689
  %1699 = bitcast i8* %1698 to <8 x i8>*
  store <8 x i8> %1697, <8 x i8>* %1699, align 1, !tbaa !14
  %1700 = add nuw i64 %1688, 8
  %1701 = icmp eq i64 %1700, %158
  br i1 %1701, label %1702, label %1687, !llvm.loop !568

1702:                                             ; preds = %1687
  br i1 %160, label %2623, label %1703

1703:                                             ; preds = %1600, %1599, %1684, %1702
  %1704 = phi i64 [ %8, %1599 ], [ %8, %1600 ], [ %155, %1684 ], [ %159, %1702 ]
  %1705 = phi i64 [ 0, %1599 ], [ 0, %1600 ], [ %149, %1684 ], [ %158, %1702 ]
  %1706 = sub i64 %62, %1704
  %1707 = add i64 %1704, 1
  %1708 = and i64 %1706, 1
  %1709 = icmp eq i64 %1708, 0
  br i1 %1709, label %1720, label %1710

1710:                                             ; preds = %1703
  %1711 = getelementptr inbounds i8, i8* %373, i64 %1704
  %1712 = load i8, i8* %1711, align 1, !tbaa !14
  %1713 = getelementptr inbounds i8, i8* %371, i64 %1705
  %1714 = load i8, i8* %1713, align 1, !tbaa !14
  %1715 = lshr i8 %1714, 1
  %1716 = add i8 %1715, %1712
  %1717 = getelementptr inbounds i8, i8* %371, i64 %1704
  store i8 %1716, i8* %1717, align 1, !tbaa !14
  %1718 = add i64 %1704, 1
  %1719 = or i64 %1705, 1
  br label %1720

1720:                                             ; preds = %1710, %1703
  %1721 = phi i64 [ %1704, %1703 ], [ %1718, %1710 ]
  %1722 = phi i64 [ %1705, %1703 ], [ %1719, %1710 ]
  %1723 = icmp eq i64 %63, %1707
  br i1 %1723, label %2623, label %1743

1724:                                             ; preds = %1252, %1724
  %1725 = phi i64 [ %1741, %1724 ], [ %1253, %1252 ]
  %1726 = getelementptr inbounds i8, i8* %373, i64 %1725
  %1727 = load i8, i8* %1726, align 1, !tbaa !14
  %1728 = getelementptr inbounds i8, i8* %371, i64 %1725
  store i8 %1727, i8* %1728, align 1, !tbaa !14
  %1729 = add nuw nsw i64 %1725, 1
  %1730 = getelementptr inbounds i8, i8* %373, i64 %1729
  %1731 = load i8, i8* %1730, align 1, !tbaa !14
  %1732 = getelementptr inbounds i8, i8* %371, i64 %1729
  store i8 %1731, i8* %1732, align 1, !tbaa !14
  %1733 = add nuw nsw i64 %1725, 2
  %1734 = getelementptr inbounds i8, i8* %373, i64 %1733
  %1735 = load i8, i8* %1734, align 1, !tbaa !14
  %1736 = getelementptr inbounds i8, i8* %371, i64 %1733
  store i8 %1735, i8* %1736, align 1, !tbaa !14
  %1737 = add nuw nsw i64 %1725, 3
  %1738 = getelementptr inbounds i8, i8* %373, i64 %1737
  %1739 = load i8, i8* %1738, align 1, !tbaa !14
  %1740 = getelementptr inbounds i8, i8* %371, i64 %1737
  store i8 %1739, i8* %1740, align 1, !tbaa !14
  %1741 = add nuw nsw i64 %1725, 4
  %1742 = icmp eq i64 %1741, %8
  br i1 %1742, label %1598, label %1724, !llvm.loop !569

1743:                                             ; preds = %1720, %1743
  %1744 = phi i64 [ %1762, %1743 ], [ %1721, %1720 ]
  %1745 = phi i64 [ %1763, %1743 ], [ %1722, %1720 ]
  %1746 = getelementptr inbounds i8, i8* %373, i64 %1744
  %1747 = load i8, i8* %1746, align 1, !tbaa !14
  %1748 = getelementptr inbounds i8, i8* %371, i64 %1745
  %1749 = load i8, i8* %1748, align 1, !tbaa !14
  %1750 = lshr i8 %1749, 1
  %1751 = add i8 %1750, %1747
  %1752 = getelementptr inbounds i8, i8* %371, i64 %1744
  store i8 %1751, i8* %1752, align 1, !tbaa !14
  %1753 = add i64 %1744, 1
  %1754 = add nuw i64 %1745, 1
  %1755 = getelementptr inbounds i8, i8* %373, i64 %1753
  %1756 = load i8, i8* %1755, align 1, !tbaa !14
  %1757 = getelementptr inbounds i8, i8* %371, i64 %1754
  %1758 = load i8, i8* %1757, align 1, !tbaa !14
  %1759 = lshr i8 %1758, 1
  %1760 = add i8 %1759, %1756
  %1761 = getelementptr inbounds i8, i8* %371, i64 %1753
  store i8 %1760, i8* %1761, align 1, !tbaa !14
  %1762 = add i64 %1744, 2
  %1763 = add nuw i64 %1745, 2
  %1764 = icmp eq i64 %1762, %18
  br i1 %1764, label %2623, label %1743, !llvm.loop !570

1765:                                             ; preds = %231
  %1766 = icmp eq i8* %233, null
  br i1 %1766, label %1767, label %1872

1767:                                             ; preds = %1765
  br i1 %28, label %2466, label %1768

1768:                                             ; preds = %1767
  br i1 %90, label %1856, label %1769

1769:                                             ; preds = %1768
  %1770 = icmp ult i8* %257, %264
  %1771 = icmp ult i8* %262, %259
  %1772 = and i1 %1770, %1771
  br i1 %1772, label %1856, label %1773

1773:                                             ; preds = %1769
  br i1 %91, label %1844, label %1774

1774:                                             ; preds = %1773
  br i1 %94, label %1824, label %1775

1775:                                             ; preds = %1774, %1775
  %1776 = phi i64 [ %1821, %1775 ], [ 0, %1774 ]
  %1777 = phi i64 [ %1822, %1775 ], [ 0, %1774 ]
  %1778 = getelementptr inbounds i8, i8* %373, i64 %1776
  %1779 = bitcast i8* %1778 to <16 x i8>*
  %1780 = load <16 x i8>, <16 x i8>* %1779, align 1, !tbaa !14, !alias.scope !571
  %1781 = getelementptr inbounds i8, i8* %1778, i64 16
  %1782 = bitcast i8* %1781 to <16 x i8>*
  %1783 = load <16 x i8>, <16 x i8>* %1782, align 1, !tbaa !14, !alias.scope !571
  %1784 = getelementptr inbounds i8, i8* %371, i64 %1776
  %1785 = bitcast i8* %1784 to <16 x i8>*
  store <16 x i8> %1780, <16 x i8>* %1785, align 1, !tbaa !14, !alias.scope !574, !noalias !571
  %1786 = getelementptr inbounds i8, i8* %1784, i64 16
  %1787 = bitcast i8* %1786 to <16 x i8>*
  store <16 x i8> %1783, <16 x i8>* %1787, align 1, !tbaa !14, !alias.scope !574, !noalias !571
  %1788 = or i64 %1776, 32
  %1789 = getelementptr inbounds i8, i8* %373, i64 %1788
  %1790 = bitcast i8* %1789 to <16 x i8>*
  %1791 = load <16 x i8>, <16 x i8>* %1790, align 1, !tbaa !14, !alias.scope !571
  %1792 = getelementptr inbounds i8, i8* %1789, i64 16
  %1793 = bitcast i8* %1792 to <16 x i8>*
  %1794 = load <16 x i8>, <16 x i8>* %1793, align 1, !tbaa !14, !alias.scope !571
  %1795 = getelementptr inbounds i8, i8* %371, i64 %1788
  %1796 = bitcast i8* %1795 to <16 x i8>*
  store <16 x i8> %1791, <16 x i8>* %1796, align 1, !tbaa !14, !alias.scope !574, !noalias !571
  %1797 = getelementptr inbounds i8, i8* %1795, i64 16
  %1798 = bitcast i8* %1797 to <16 x i8>*
  store <16 x i8> %1794, <16 x i8>* %1798, align 1, !tbaa !14, !alias.scope !574, !noalias !571
  %1799 = or i64 %1776, 64
  %1800 = getelementptr inbounds i8, i8* %373, i64 %1799
  %1801 = bitcast i8* %1800 to <16 x i8>*
  %1802 = load <16 x i8>, <16 x i8>* %1801, align 1, !tbaa !14, !alias.scope !571
  %1803 = getelementptr inbounds i8, i8* %1800, i64 16
  %1804 = bitcast i8* %1803 to <16 x i8>*
  %1805 = load <16 x i8>, <16 x i8>* %1804, align 1, !tbaa !14, !alias.scope !571
  %1806 = getelementptr inbounds i8, i8* %371, i64 %1799
  %1807 = bitcast i8* %1806 to <16 x i8>*
  store <16 x i8> %1802, <16 x i8>* %1807, align 1, !tbaa !14, !alias.scope !574, !noalias !571
  %1808 = getelementptr inbounds i8, i8* %1806, i64 16
  %1809 = bitcast i8* %1808 to <16 x i8>*
  store <16 x i8> %1805, <16 x i8>* %1809, align 1, !tbaa !14, !alias.scope !574, !noalias !571
  %1810 = or i64 %1776, 96
  %1811 = getelementptr inbounds i8, i8* %373, i64 %1810
  %1812 = bitcast i8* %1811 to <16 x i8>*
  %1813 = load <16 x i8>, <16 x i8>* %1812, align 1, !tbaa !14, !alias.scope !571
  %1814 = getelementptr inbounds i8, i8* %1811, i64 16
  %1815 = bitcast i8* %1814 to <16 x i8>*
  %1816 = load <16 x i8>, <16 x i8>* %1815, align 1, !tbaa !14, !alias.scope !571
  %1817 = getelementptr inbounds i8, i8* %371, i64 %1810
  %1818 = bitcast i8* %1817 to <16 x i8>*
  store <16 x i8> %1813, <16 x i8>* %1818, align 1, !tbaa !14, !alias.scope !574, !noalias !571
  %1819 = getelementptr inbounds i8, i8* %1817, i64 16
  %1820 = bitcast i8* %1819 to <16 x i8>*
  store <16 x i8> %1816, <16 x i8>* %1820, align 1, !tbaa !14, !alias.scope !574, !noalias !571
  %1821 = add nuw i64 %1776, 128
  %1822 = add i64 %1777, 4
  %1823 = icmp eq i64 %1822, %95
  br i1 %1823, label %1824, label %1775, !llvm.loop !576

1824:                                             ; preds = %1775, %1774
  %1825 = phi i64 [ 0, %1774 ], [ %1821, %1775 ]
  br i1 %96, label %1842, label %1826

1826:                                             ; preds = %1824, %1826
  %1827 = phi i64 [ %1839, %1826 ], [ %1825, %1824 ]
  %1828 = phi i64 [ %1840, %1826 ], [ 0, %1824 ]
  %1829 = getelementptr inbounds i8, i8* %373, i64 %1827
  %1830 = bitcast i8* %1829 to <16 x i8>*
  %1831 = load <16 x i8>, <16 x i8>* %1830, align 1, !tbaa !14, !alias.scope !571
  %1832 = getelementptr inbounds i8, i8* %1829, i64 16
  %1833 = bitcast i8* %1832 to <16 x i8>*
  %1834 = load <16 x i8>, <16 x i8>* %1833, align 1, !tbaa !14, !alias.scope !571
  %1835 = getelementptr inbounds i8, i8* %371, i64 %1827
  %1836 = bitcast i8* %1835 to <16 x i8>*
  store <16 x i8> %1831, <16 x i8>* %1836, align 1, !tbaa !14, !alias.scope !574, !noalias !571
  %1837 = getelementptr inbounds i8, i8* %1835, i64 16
  %1838 = bitcast i8* %1837 to <16 x i8>*
  store <16 x i8> %1834, <16 x i8>* %1838, align 1, !tbaa !14, !alias.scope !574, !noalias !571
  %1839 = add nuw i64 %1827, 32
  %1840 = add i64 %1828, 1
  %1841 = icmp eq i64 %1840, %93
  br i1 %1841, label %1842, label %1826, !llvm.loop !577

1842:                                             ; preds = %1826, %1824
  br i1 %97, label %2466, label %1843

1843:                                             ; preds = %1842
  br i1 %99, label %1856, label %1844

1844:                                             ; preds = %1773, %1843
  %1845 = phi i64 [ %92, %1843 ], [ 0, %1773 ]
  br label %1846

1846:                                             ; preds = %1846, %1844
  %1847 = phi i64 [ %1845, %1844 ], [ %1853, %1846 ]
  %1848 = getelementptr inbounds i8, i8* %373, i64 %1847
  %1849 = bitcast i8* %1848 to <8 x i8>*
  %1850 = load <8 x i8>, <8 x i8>* %1849, align 1, !tbaa !14
  %1851 = getelementptr inbounds i8, i8* %371, i64 %1847
  %1852 = bitcast i8* %1851 to <8 x i8>*
  store <8 x i8> %1850, <8 x i8>* %1852, align 1, !tbaa !14
  %1853 = add nuw i64 %1847, 8
  %1854 = icmp eq i64 %1853, %100
  br i1 %1854, label %1855, label %1846, !llvm.loop !578

1855:                                             ; preds = %1846
  br i1 %101, label %2466, label %1856

1856:                                             ; preds = %1769, %1768, %1843, %1855
  %1857 = phi i64 [ 0, %1768 ], [ 0, %1769 ], [ %92, %1843 ], [ %100, %1855 ]
  %1858 = xor i64 %1857, -1
  %1859 = add nsw i64 %1858, %8
  br i1 %103, label %1869, label %1860

1860:                                             ; preds = %1856, %1860
  %1861 = phi i64 [ %1866, %1860 ], [ %1857, %1856 ]
  %1862 = phi i64 [ %1867, %1860 ], [ 0, %1856 ]
  %1863 = getelementptr inbounds i8, i8* %373, i64 %1861
  %1864 = load i8, i8* %1863, align 1, !tbaa !14
  %1865 = getelementptr inbounds i8, i8* %371, i64 %1861
  store i8 %1864, i8* %1865, align 1, !tbaa !14
  %1866 = add nuw nsw i64 %1861, 1
  %1867 = add i64 %1862, 1
  %1868 = icmp eq i64 %1867, %102
  br i1 %1868, label %1869, label %1860, !llvm.loop !579

1869:                                             ; preds = %1860, %1856
  %1870 = phi i64 [ %1857, %1856 ], [ %1866, %1860 ]
  %1871 = icmp ult i64 %1859, 3
  br i1 %1871, label %2466, label %2584

1872:                                             ; preds = %1765
  switch i64 %8, label %1873 [
    i64 8, label %1991
    i64 6, label %1990
    i64 4, label %1989
    i64 3, label %1988
    i64 2, label %1987
    i64 1, label %1986
    i64 0, label %2312
  ]

1873:                                             ; preds = %1872
  br i1 %76, label %1967, label %1874

1874:                                             ; preds = %1873
  %1875 = getelementptr i8, i8* %233, i64 %8
  %1876 = icmp ult i8* %235, %242
  %1877 = icmp ult i8* %240, %237
  %1878 = and i1 %1876, %1877
  %1879 = icmp ult i8* %235, %1875
  %1880 = icmp ult i8* %233, %237
  %1881 = and i1 %1879, %1880
  %1882 = or i1 %1878, %1881
  br i1 %1882, label %1967, label %1883

1883:                                             ; preds = %1874
  br i1 %77, label %1951, label %1884

1884:                                             ; preds = %1883
  br i1 %80, label %1928, label %1885

1885:                                             ; preds = %1884, %1885
  %1886 = phi i64 [ %1925, %1885 ], [ 0, %1884 ]
  %1887 = phi i64 [ %1926, %1885 ], [ 0, %1884 ]
  %1888 = getelementptr inbounds i8, i8* %373, i64 %1886
  %1889 = bitcast i8* %1888 to <16 x i8>*
  %1890 = load <16 x i8>, <16 x i8>* %1889, align 1, !tbaa !14, !alias.scope !580
  %1891 = getelementptr inbounds i8, i8* %1888, i64 16
  %1892 = bitcast i8* %1891 to <16 x i8>*
  %1893 = load <16 x i8>, <16 x i8>* %1892, align 1, !tbaa !14, !alias.scope !580
  %1894 = getelementptr inbounds i8, i8* %233, i64 %1886
  %1895 = bitcast i8* %1894 to <16 x i8>*
  %1896 = load <16 x i8>, <16 x i8>* %1895, align 1, !tbaa !14, !alias.scope !583
  %1897 = getelementptr inbounds i8, i8* %1894, i64 16
  %1898 = bitcast i8* %1897 to <16 x i8>*
  %1899 = load <16 x i8>, <16 x i8>* %1898, align 1, !tbaa !14, !alias.scope !583
  %1900 = add <16 x i8> %1896, %1890
  %1901 = add <16 x i8> %1899, %1893
  %1902 = getelementptr inbounds i8, i8* %371, i64 %1886
  %1903 = bitcast i8* %1902 to <16 x i8>*
  store <16 x i8> %1900, <16 x i8>* %1903, align 1, !tbaa !14, !alias.scope !585, !noalias !587
  %1904 = getelementptr inbounds i8, i8* %1902, i64 16
  %1905 = bitcast i8* %1904 to <16 x i8>*
  store <16 x i8> %1901, <16 x i8>* %1905, align 1, !tbaa !14, !alias.scope !585, !noalias !587
  %1906 = or i64 %1886, 32
  %1907 = getelementptr inbounds i8, i8* %373, i64 %1906
  %1908 = bitcast i8* %1907 to <16 x i8>*
  %1909 = load <16 x i8>, <16 x i8>* %1908, align 1, !tbaa !14, !alias.scope !580
  %1910 = getelementptr inbounds i8, i8* %1907, i64 16
  %1911 = bitcast i8* %1910 to <16 x i8>*
  %1912 = load <16 x i8>, <16 x i8>* %1911, align 1, !tbaa !14, !alias.scope !580
  %1913 = getelementptr inbounds i8, i8* %233, i64 %1906
  %1914 = bitcast i8* %1913 to <16 x i8>*
  %1915 = load <16 x i8>, <16 x i8>* %1914, align 1, !tbaa !14, !alias.scope !583
  %1916 = getelementptr inbounds i8, i8* %1913, i64 16
  %1917 = bitcast i8* %1916 to <16 x i8>*
  %1918 = load <16 x i8>, <16 x i8>* %1917, align 1, !tbaa !14, !alias.scope !583
  %1919 = add <16 x i8> %1915, %1909
  %1920 = add <16 x i8> %1918, %1912
  %1921 = getelementptr inbounds i8, i8* %371, i64 %1906
  %1922 = bitcast i8* %1921 to <16 x i8>*
  store <16 x i8> %1919, <16 x i8>* %1922, align 1, !tbaa !14, !alias.scope !585, !noalias !587
  %1923 = getelementptr inbounds i8, i8* %1921, i64 16
  %1924 = bitcast i8* %1923 to <16 x i8>*
  store <16 x i8> %1920, <16 x i8>* %1924, align 1, !tbaa !14, !alias.scope !585, !noalias !587
  %1925 = add nuw i64 %1886, 64
  %1926 = add i64 %1887, 2
  %1927 = icmp eq i64 %1926, %81
  br i1 %1927, label %1928, label %1885, !llvm.loop !588

1928:                                             ; preds = %1885, %1884
  %1929 = phi i64 [ 0, %1884 ], [ %1925, %1885 ]
  br i1 %82, label %1949, label %1930

1930:                                             ; preds = %1928
  %1931 = getelementptr inbounds i8, i8* %373, i64 %1929
  %1932 = bitcast i8* %1931 to <16 x i8>*
  %1933 = load <16 x i8>, <16 x i8>* %1932, align 1, !tbaa !14, !alias.scope !580
  %1934 = getelementptr inbounds i8, i8* %1931, i64 16
  %1935 = bitcast i8* %1934 to <16 x i8>*
  %1936 = load <16 x i8>, <16 x i8>* %1935, align 1, !tbaa !14, !alias.scope !580
  %1937 = getelementptr inbounds i8, i8* %233, i64 %1929
  %1938 = bitcast i8* %1937 to <16 x i8>*
  %1939 = load <16 x i8>, <16 x i8>* %1938, align 1, !tbaa !14, !alias.scope !583
  %1940 = getelementptr inbounds i8, i8* %1937, i64 16
  %1941 = bitcast i8* %1940 to <16 x i8>*
  %1942 = load <16 x i8>, <16 x i8>* %1941, align 1, !tbaa !14, !alias.scope !583
  %1943 = add <16 x i8> %1939, %1933
  %1944 = add <16 x i8> %1942, %1936
  %1945 = getelementptr inbounds i8, i8* %371, i64 %1929
  %1946 = bitcast i8* %1945 to <16 x i8>*
  store <16 x i8> %1943, <16 x i8>* %1946, align 1, !tbaa !14, !alias.scope !585, !noalias !587
  %1947 = getelementptr inbounds i8, i8* %1945, i64 16
  %1948 = bitcast i8* %1947 to <16 x i8>*
  store <16 x i8> %1944, <16 x i8>* %1948, align 1, !tbaa !14, !alias.scope !585, !noalias !587
  br label %1949

1949:                                             ; preds = %1928, %1930
  br i1 %83, label %2312, label %1950

1950:                                             ; preds = %1949
  br i1 %85, label %1967, label %1951

1951:                                             ; preds = %1883, %1950
  %1952 = phi i64 [ %78, %1950 ], [ 0, %1883 ]
  br label %1953

1953:                                             ; preds = %1953, %1951
  %1954 = phi i64 [ %1952, %1951 ], [ %1964, %1953 ]
  %1955 = getelementptr inbounds i8, i8* %373, i64 %1954
  %1956 = bitcast i8* %1955 to <8 x i8>*
  %1957 = load <8 x i8>, <8 x i8>* %1956, align 1, !tbaa !14
  %1958 = getelementptr inbounds i8, i8* %233, i64 %1954
  %1959 = bitcast i8* %1958 to <8 x i8>*
  %1960 = load <8 x i8>, <8 x i8>* %1959, align 1, !tbaa !14
  %1961 = add <8 x i8> %1960, %1957
  %1962 = getelementptr inbounds i8, i8* %371, i64 %1954
  %1963 = bitcast i8* %1962 to <8 x i8>*
  store <8 x i8> %1961, <8 x i8>* %1963, align 1, !tbaa !14
  %1964 = add nuw i64 %1954, 8
  %1965 = icmp eq i64 %1964, %86
  br i1 %1965, label %1966, label %1953, !llvm.loop !589

1966:                                             ; preds = %1953
  br i1 %87, label %2312, label %1967

1967:                                             ; preds = %1874, %1873, %1950, %1966
  %1968 = phi i64 [ 0, %1873 ], [ 0, %1874 ], [ %78, %1950 ], [ %86, %1966 ]
  %1969 = xor i64 %1968, -1
  %1970 = add nsw i64 %1969, %8
  br i1 %89, label %1983, label %1971

1971:                                             ; preds = %1967, %1971
  %1972 = phi i64 [ %1980, %1971 ], [ %1968, %1967 ]
  %1973 = phi i64 [ %1981, %1971 ], [ 0, %1967 ]
  %1974 = getelementptr inbounds i8, i8* %373, i64 %1972
  %1975 = load i8, i8* %1974, align 1, !tbaa !14
  %1976 = getelementptr inbounds i8, i8* %233, i64 %1972
  %1977 = load i8, i8* %1976, align 1, !tbaa !14
  %1978 = add i8 %1977, %1975
  %1979 = getelementptr inbounds i8, i8* %371, i64 %1972
  store i8 %1978, i8* %1979, align 1, !tbaa !14
  %1980 = add nuw i64 %1972, 1
  %1981 = add i64 %1973, 1
  %1982 = icmp eq i64 %1981, %88
  br i1 %1982, label %1983, label %1971, !llvm.loop !590

1983:                                             ; preds = %1971, %1967
  %1984 = phi i64 [ %1968, %1967 ], [ %1980, %1971 ]
  %1985 = icmp ult i64 %1970, 3
  br i1 %1985, label %2312, label %2281

1986:                                             ; preds = %1872
  br i1 %22, label %2312, label %2253

1987:                                             ; preds = %1872
  br i1 %23, label %2218, label %2312

1988:                                             ; preds = %1872
  br i1 %24, label %2158, label %2312

1989:                                             ; preds = %1872
  br i1 %25, label %2117, label %2312

1990:                                             ; preds = %1872
  br i1 %26, label %2045, label %2312

1991:                                             ; preds = %1872
  br i1 %27, label %1992, label %2312

1992:                                             ; preds = %1991, %1992
  %1993 = phi i64 [ %2043, %1992 ], [ 7, %1991 ]
  %1994 = phi i64 [ %2042, %1992 ], [ 0, %1991 ]
  %1995 = phi <8 x i8> [ %2025, %1992 ], [ zeroinitializer, %1991 ]
  %1996 = phi <8 x i8> [ %2005, %1992 ], [ zeroinitializer, %1991 ]
  %1997 = getelementptr inbounds i8, i8* %233, i64 %1994
  %1998 = or i64 %1994, 1
  %1999 = or i64 %1994, 2
  %2000 = or i64 %1994, 3
  %2001 = or i64 %1994, 4
  %2002 = or i64 %1994, 5
  %2003 = or i64 %1994, 6
  %2004 = bitcast i8* %1997 to <8 x i8>*
  %2005 = load <8 x i8>, <8 x i8>* %2004, align 1, !tbaa !14
  %2006 = getelementptr inbounds i8, i8* %373, i64 %1994
  %2007 = bitcast i8* %2006 to <8 x i8>*
  %2008 = load <8 x i8>, <8 x i8>* %2007, align 1, !tbaa !14
  %2009 = zext <8 x i8> %2005 to <8 x i32>
  %2010 = zext <8 x i8> %1996 to <8 x i32>
  %2011 = sub nsw <8 x i32> %2009, %2010
  %2012 = call <8 x i32> @llvm.abs.v8i32(<8 x i32> %2011, i1 true)
  %2013 = zext <8 x i8> %1995 to <8 x i32>
  %2014 = sub nsw <8 x i32> %2013, %2010
  %2015 = call <8 x i32> @llvm.abs.v8i32(<8 x i32> %2014, i1 true)
  %2016 = mul nsw <8 x i32> %2010, <i32 -2, i32 -2, i32 -2, i32 -2, i32 -2, i32 -2, i32 -2, i32 -2>
  %2017 = add nsw <8 x i32> %2016, %2013
  %2018 = add nsw <8 x i32> %2017, %2009
  %2019 = call <8 x i32> @llvm.abs.v8i32(<8 x i32> %2018, i1 true)
  %2020 = icmp ult <8 x i32> %2015, %2012
  %2021 = select <8 x i1> %2020, <8 x i32> %2015, <8 x i32> %2012
  %2022 = select <8 x i1> %2020, <8 x i8> %2005, <8 x i8> %1995
  %2023 = icmp ult <8 x i32> %2019, %2021
  %2024 = select <8 x i1> %2023, <8 x i8> %1996, <8 x i8> %2022
  %2025 = add <8 x i8> %2008, %2024
  %2026 = getelementptr inbounds i8, i8* %371, i64 %1994
  %2027 = extractelement <8 x i8> %2025, i64 0
  store i8 %2027, i8* %2026, align 1, !tbaa !14
  %2028 = getelementptr inbounds i8, i8* %371, i64 %1998
  %2029 = extractelement <8 x i8> %2025, i64 1
  store i8 %2029, i8* %2028, align 1, !tbaa !14
  %2030 = getelementptr inbounds i8, i8* %371, i64 %1999
  %2031 = extractelement <8 x i8> %2025, i64 2
  store i8 %2031, i8* %2030, align 1, !tbaa !14
  %2032 = getelementptr inbounds i8, i8* %371, i64 %2000
  %2033 = extractelement <8 x i8> %2025, i64 3
  store i8 %2033, i8* %2032, align 1, !tbaa !14
  %2034 = getelementptr inbounds i8, i8* %371, i64 %2001
  %2035 = extractelement <8 x i8> %2025, i64 4
  store i8 %2035, i8* %2034, align 1, !tbaa !14
  %2036 = getelementptr inbounds i8, i8* %371, i64 %2002
  %2037 = extractelement <8 x i8> %2025, i64 5
  store i8 %2037, i8* %2036, align 1, !tbaa !14
  %2038 = getelementptr inbounds i8, i8* %371, i64 %2003
  %2039 = extractelement <8 x i8> %2025, i64 6
  store i8 %2039, i8* %2038, align 1, !tbaa !14
  %2040 = getelementptr inbounds i8, i8* %371, i64 %1993
  %2041 = extractelement <8 x i8> %2025, i64 7
  store i8 %2041, i8* %2040, align 1, !tbaa !14
  %2042 = add nuw nsw i64 %1994, 8
  %2043 = or i64 %2042, 7
  %2044 = icmp ult i64 %2043, %18
  br i1 %2044, label %1992, label %2312

2045:                                             ; preds = %1990, %2045
  %2046 = phi i64 [ %2115, %2045 ], [ 5, %1990 ]
  %2047 = phi i64 [ %2114, %2045 ], [ 0, %1990 ]
  %2048 = phi <4 x i8> [ %2081, %2045 ], [ zeroinitializer, %1990 ]
  %2049 = phi <4 x i8> [ %2057, %2045 ], [ zeroinitializer, %1990 ]
  %2050 = phi <2 x i8> [ %2101, %2045 ], [ zeroinitializer, %1990 ]
  %2051 = phi <2 x i8> [ %2061, %2045 ], [ zeroinitializer, %1990 ]
  %2052 = getelementptr inbounds i8, i8* %233, i64 %2047
  %2053 = or i64 %2047, 1
  %2054 = add nuw nsw i64 %2047, 2
  %2055 = add nuw nsw i64 %2047, 3
  %2056 = bitcast i8* %2052 to <4 x i8>*
  %2057 = load <4 x i8>, <4 x i8>* %2056, align 1, !tbaa !14
  %2058 = add nuw nsw i64 %2047, 4
  %2059 = getelementptr inbounds i8, i8* %233, i64 %2058
  %2060 = bitcast i8* %2059 to <2 x i8>*
  %2061 = load <2 x i8>, <2 x i8>* %2060, align 1, !tbaa !14
  %2062 = getelementptr inbounds i8, i8* %373, i64 %2047
  %2063 = bitcast i8* %2062 to <4 x i8>*
  %2064 = load <4 x i8>, <4 x i8>* %2063, align 1, !tbaa !14
  %2065 = zext <4 x i8> %2057 to <4 x i32>
  %2066 = zext <4 x i8> %2049 to <4 x i32>
  %2067 = sub nsw <4 x i32> %2065, %2066
  %2068 = call <4 x i32> @llvm.abs.v4i32(<4 x i32> %2067, i1 true)
  %2069 = zext <4 x i8> %2048 to <4 x i32>
  %2070 = sub nsw <4 x i32> %2069, %2066
  %2071 = call <4 x i32> @llvm.abs.v4i32(<4 x i32> %2070, i1 true)
  %2072 = mul nsw <4 x i32> %2066, <i32 -2, i32 -2, i32 -2, i32 -2>
  %2073 = add nsw <4 x i32> %2072, %2069
  %2074 = add nsw <4 x i32> %2073, %2065
  %2075 = call <4 x i32> @llvm.abs.v4i32(<4 x i32> %2074, i1 true)
  %2076 = icmp ult <4 x i32> %2071, %2068
  %2077 = select <4 x i1> %2076, <4 x i32> %2071, <4 x i32> %2068
  %2078 = select <4 x i1> %2076, <4 x i8> %2057, <4 x i8> %2048
  %2079 = icmp ult <4 x i32> %2075, %2077
  %2080 = select <4 x i1> %2079, <4 x i8> %2049, <4 x i8> %2078
  %2081 = add <4 x i8> %2080, %2064
  %2082 = getelementptr inbounds i8, i8* %373, i64 %2058
  %2083 = bitcast i8* %2082 to <2 x i8>*
  %2084 = load <2 x i8>, <2 x i8>* %2083, align 1, !tbaa !14
  %2085 = zext <2 x i8> %2061 to <2 x i32>
  %2086 = zext <2 x i8> %2051 to <2 x i32>
  %2087 = sub nsw <2 x i32> %2085, %2086
  %2088 = call <2 x i32> @llvm.abs.v2i32(<2 x i32> %2087, i1 true)
  %2089 = zext <2 x i8> %2050 to <2 x i32>
  %2090 = sub nsw <2 x i32> %2089, %2086
  %2091 = call <2 x i32> @llvm.abs.v2i32(<2 x i32> %2090, i1 true)
  %2092 = mul nsw <2 x i32> %2086, <i32 -2, i32 -2>
  %2093 = add nsw <2 x i32> %2092, %2089
  %2094 = add nsw <2 x i32> %2093, %2085
  %2095 = call <2 x i32> @llvm.abs.v2i32(<2 x i32> %2094, i1 true)
  %2096 = icmp ult <2 x i32> %2091, %2088
  %2097 = select <2 x i1> %2096, <2 x i32> %2091, <2 x i32> %2088
  %2098 = select <2 x i1> %2096, <2 x i8> %2061, <2 x i8> %2050
  %2099 = icmp ult <2 x i32> %2095, %2097
  %2100 = select <2 x i1> %2099, <2 x i8> %2051, <2 x i8> %2098
  %2101 = add <2 x i8> %2100, %2084
  %2102 = getelementptr inbounds i8, i8* %371, i64 %2047
  %2103 = extractelement <4 x i8> %2081, i64 0
  store i8 %2103, i8* %2102, align 1, !tbaa !14
  %2104 = getelementptr inbounds i8, i8* %371, i64 %2053
  %2105 = extractelement <4 x i8> %2081, i64 1
  store i8 %2105, i8* %2104, align 1, !tbaa !14
  %2106 = getelementptr inbounds i8, i8* %371, i64 %2054
  %2107 = extractelement <4 x i8> %2081, i64 2
  store i8 %2107, i8* %2106, align 1, !tbaa !14
  %2108 = getelementptr inbounds i8, i8* %371, i64 %2055
  %2109 = extractelement <4 x i8> %2081, i64 3
  store i8 %2109, i8* %2108, align 1, !tbaa !14
  %2110 = getelementptr inbounds i8, i8* %371, i64 %2058
  %2111 = extractelement <2 x i8> %2101, i64 0
  store i8 %2111, i8* %2110, align 1, !tbaa !14
  %2112 = getelementptr inbounds i8, i8* %371, i64 %2046
  %2113 = extractelement <2 x i8> %2101, i64 1
  store i8 %2113, i8* %2112, align 1, !tbaa !14
  %2114 = add nuw nsw i64 %2047, 6
  %2115 = add nuw nsw i64 %2047, 11
  %2116 = icmp ult i64 %2115, %18
  br i1 %2116, label %2045, label %2312

2117:                                             ; preds = %1989, %2117
  %2118 = phi i64 [ %2156, %2117 ], [ 3, %1989 ]
  %2119 = phi i64 [ %2155, %2117 ], [ 0, %1989 ]
  %2120 = phi <4 x i8> [ %2146, %2117 ], [ zeroinitializer, %1989 ]
  %2121 = phi <4 x i8> [ %2126, %2117 ], [ zeroinitializer, %1989 ]
  %2122 = getelementptr inbounds i8, i8* %233, i64 %2119
  %2123 = or i64 %2119, 1
  %2124 = or i64 %2119, 2
  %2125 = bitcast i8* %2122 to <4 x i8>*
  %2126 = load <4 x i8>, <4 x i8>* %2125, align 1, !tbaa !14
  %2127 = getelementptr inbounds i8, i8* %373, i64 %2119
  %2128 = bitcast i8* %2127 to <4 x i8>*
  %2129 = load <4 x i8>, <4 x i8>* %2128, align 1, !tbaa !14
  %2130 = zext <4 x i8> %2126 to <4 x i32>
  %2131 = zext <4 x i8> %2121 to <4 x i32>
  %2132 = sub nsw <4 x i32> %2130, %2131
  %2133 = call <4 x i32> @llvm.abs.v4i32(<4 x i32> %2132, i1 true)
  %2134 = zext <4 x i8> %2120 to <4 x i32>
  %2135 = sub nsw <4 x i32> %2134, %2131
  %2136 = call <4 x i32> @llvm.abs.v4i32(<4 x i32> %2135, i1 true)
  %2137 = mul nsw <4 x i32> %2131, <i32 -2, i32 -2, i32 -2, i32 -2>
  %2138 = add nsw <4 x i32> %2137, %2134
  %2139 = add nsw <4 x i32> %2138, %2130
  %2140 = call <4 x i32> @llvm.abs.v4i32(<4 x i32> %2139, i1 true)
  %2141 = icmp ult <4 x i32> %2136, %2133
  %2142 = select <4 x i1> %2141, <4 x i32> %2136, <4 x i32> %2133
  %2143 = select <4 x i1> %2141, <4 x i8> %2126, <4 x i8> %2120
  %2144 = icmp ult <4 x i32> %2140, %2142
  %2145 = select <4 x i1> %2144, <4 x i8> %2121, <4 x i8> %2143
  %2146 = add <4 x i8> %2145, %2129
  %2147 = getelementptr inbounds i8, i8* %371, i64 %2119
  %2148 = extractelement <4 x i8> %2146, i64 0
  store i8 %2148, i8* %2147, align 1, !tbaa !14
  %2149 = getelementptr inbounds i8, i8* %371, i64 %2123
  %2150 = extractelement <4 x i8> %2146, i64 1
  store i8 %2150, i8* %2149, align 1, !tbaa !14
  %2151 = getelementptr inbounds i8, i8* %371, i64 %2124
  %2152 = extractelement <4 x i8> %2146, i64 2
  store i8 %2152, i8* %2151, align 1, !tbaa !14
  %2153 = getelementptr inbounds i8, i8* %371, i64 %2118
  %2154 = extractelement <4 x i8> %2146, i64 3
  store i8 %2154, i8* %2153, align 1, !tbaa !14
  %2155 = add nuw nsw i64 %2119, 4
  %2156 = or i64 %2155, 3
  %2157 = icmp ult i64 %2156, %18
  br i1 %2157, label %2117, label %2312

2158:                                             ; preds = %1988, %2158
  %2159 = phi i64 [ %2216, %2158 ], [ 2, %1988 ]
  %2160 = phi i64 [ %2215, %2158 ], [ 0, %1988 ]
  %2161 = phi i8 [ %2209, %2158 ], [ 0, %1988 ]
  %2162 = phi i8 [ %2170, %2158 ], [ 0, %1988 ]
  %2163 = phi <2 x i8> [ %2190, %2158 ], [ zeroinitializer, %1988 ]
  %2164 = phi <2 x i8> [ %2168, %2158 ], [ zeroinitializer, %1988 ]
  %2165 = getelementptr inbounds i8, i8* %233, i64 %2160
  %2166 = add nuw nsw i64 %2160, 1
  %2167 = bitcast i8* %2165 to <2 x i8>*
  %2168 = load <2 x i8>, <2 x i8>* %2167, align 1, !tbaa !14
  %2169 = getelementptr inbounds i8, i8* %233, i64 %2159
  %2170 = load i8, i8* %2169, align 1, !tbaa !14
  %2171 = getelementptr inbounds i8, i8* %373, i64 %2160
  %2172 = bitcast i8* %2171 to <2 x i8>*
  %2173 = load <2 x i8>, <2 x i8>* %2172, align 1, !tbaa !14
  %2174 = zext <2 x i8> %2168 to <2 x i32>
  %2175 = zext <2 x i8> %2164 to <2 x i32>
  %2176 = sub nsw <2 x i32> %2174, %2175
  %2177 = call <2 x i32> @llvm.abs.v2i32(<2 x i32> %2176, i1 true)
  %2178 = zext <2 x i8> %2163 to <2 x i32>
  %2179 = sub nsw <2 x i32> %2178, %2175
  %2180 = call <2 x i32> @llvm.abs.v2i32(<2 x i32> %2179, i1 true)
  %2181 = mul nsw <2 x i32> %2175, <i32 -2, i32 -2>
  %2182 = add nsw <2 x i32> %2181, %2178
  %2183 = add nsw <2 x i32> %2182, %2174
  %2184 = call <2 x i32> @llvm.abs.v2i32(<2 x i32> %2183, i1 true)
  %2185 = icmp ult <2 x i32> %2180, %2177
  %2186 = select <2 x i1> %2185, <2 x i32> %2180, <2 x i32> %2177
  %2187 = select <2 x i1> %2185, <2 x i8> %2168, <2 x i8> %2163
  %2188 = icmp ult <2 x i32> %2184, %2186
  %2189 = select <2 x i1> %2188, <2 x i8> %2164, <2 x i8> %2187
  %2190 = add <2 x i8> %2189, %2173
  %2191 = getelementptr inbounds i8, i8* %373, i64 %2159
  %2192 = load i8, i8* %2191, align 1, !tbaa !14
  %2193 = zext i8 %2170 to i32
  %2194 = zext i8 %2162 to i32
  %2195 = sub nsw i32 %2193, %2194
  %2196 = tail call i32 @llvm.abs.i32(i32 %2195, i1 true) #25
  %2197 = zext i8 %2161 to i32
  %2198 = sub nsw i32 %2197, %2194
  %2199 = tail call i32 @llvm.abs.i32(i32 %2198, i1 true) #25
  %2200 = mul nsw i32 %2194, -2
  %2201 = add nsw i32 %2200, %2197
  %2202 = add nsw i32 %2201, %2193
  %2203 = tail call i32 @llvm.abs.i32(i32 %2202, i1 true) #25
  %2204 = icmp ult i32 %2199, %2196
  %2205 = select i1 %2204, i32 %2199, i32 %2196
  %2206 = select i1 %2204, i8 %2170, i8 %2161
  %2207 = icmp ult i32 %2203, %2205
  %2208 = select i1 %2207, i8 %2162, i8 %2206
  %2209 = add i8 %2208, %2192
  %2210 = getelementptr inbounds i8, i8* %371, i64 %2160
  %2211 = extractelement <2 x i8> %2190, i64 0
  store i8 %2211, i8* %2210, align 1, !tbaa !14
  %2212 = getelementptr inbounds i8, i8* %371, i64 %2166
  %2213 = extractelement <2 x i8> %2190, i64 1
  store i8 %2213, i8* %2212, align 1, !tbaa !14
  %2214 = getelementptr inbounds i8, i8* %371, i64 %2159
  store i8 %2209, i8* %2214, align 1, !tbaa !14
  %2215 = add nuw nsw i64 %2160, 3
  %2216 = add nuw nsw i64 %2160, 5
  %2217 = icmp ult i64 %2216, %18
  br i1 %2217, label %2158, label %2312

2218:                                             ; preds = %1987, %2218
  %2219 = phi i64 [ %2251, %2218 ], [ 1, %1987 ]
  %2220 = phi i64 [ %2250, %2218 ], [ 0, %1987 ]
  %2221 = phi <2 x i8> [ %2245, %2218 ], [ zeroinitializer, %1987 ]
  %2222 = phi <2 x i8> [ %2225, %2218 ], [ zeroinitializer, %1987 ]
  %2223 = getelementptr inbounds i8, i8* %233, i64 %2220
  %2224 = bitcast i8* %2223 to <2 x i8>*
  %2225 = load <2 x i8>, <2 x i8>* %2224, align 1, !tbaa !14
  %2226 = getelementptr inbounds i8, i8* %373, i64 %2220
  %2227 = bitcast i8* %2226 to <2 x i8>*
  %2228 = load <2 x i8>, <2 x i8>* %2227, align 1, !tbaa !14
  %2229 = zext <2 x i8> %2225 to <2 x i32>
  %2230 = zext <2 x i8> %2222 to <2 x i32>
  %2231 = sub nsw <2 x i32> %2229, %2230
  %2232 = call <2 x i32> @llvm.abs.v2i32(<2 x i32> %2231, i1 true)
  %2233 = zext <2 x i8> %2221 to <2 x i32>
  %2234 = sub nsw <2 x i32> %2233, %2230
  %2235 = call <2 x i32> @llvm.abs.v2i32(<2 x i32> %2234, i1 true)
  %2236 = mul nsw <2 x i32> %2230, <i32 -2, i32 -2>
  %2237 = add nsw <2 x i32> %2236, %2233
  %2238 = add nsw <2 x i32> %2237, %2229
  %2239 = call <2 x i32> @llvm.abs.v2i32(<2 x i32> %2238, i1 true)
  %2240 = icmp ult <2 x i32> %2235, %2232
  %2241 = select <2 x i1> %2240, <2 x i32> %2235, <2 x i32> %2232
  %2242 = select <2 x i1> %2240, <2 x i8> %2225, <2 x i8> %2221
  %2243 = icmp ult <2 x i32> %2239, %2241
  %2244 = select <2 x i1> %2243, <2 x i8> %2222, <2 x i8> %2242
  %2245 = add <2 x i8> %2244, %2228
  %2246 = getelementptr inbounds i8, i8* %371, i64 %2220
  %2247 = extractelement <2 x i8> %2245, i64 0
  store i8 %2247, i8* %2246, align 1, !tbaa !14
  %2248 = getelementptr inbounds i8, i8* %371, i64 %2219
  %2249 = extractelement <2 x i8> %2245, i64 1
  store i8 %2249, i8* %2248, align 1, !tbaa !14
  %2250 = add nuw nsw i64 %2220, 2
  %2251 = or i64 %2250, 1
  %2252 = icmp ult i64 %2251, %18
  br i1 %2252, label %2218, label %2312

2253:                                             ; preds = %1986, %2253
  %2254 = phi i8 [ %2277, %2253 ], [ 0, %1986 ]
  %2255 = phi i8 [ %2258, %2253 ], [ 0, %1986 ]
  %2256 = phi i64 [ %2279, %2253 ], [ 0, %1986 ]
  %2257 = getelementptr inbounds i8, i8* %233, i64 %2256
  %2258 = load i8, i8* %2257, align 1, !tbaa !14
  %2259 = getelementptr inbounds i8, i8* %373, i64 %2256
  %2260 = load i8, i8* %2259, align 1, !tbaa !14
  %2261 = zext i8 %2258 to i32
  %2262 = zext i8 %2255 to i32
  %2263 = sub nsw i32 %2261, %2262
  %2264 = tail call i32 @llvm.abs.i32(i32 %2263, i1 true) #25
  %2265 = zext i8 %2254 to i32
  %2266 = sub nsw i32 %2265, %2262
  %2267 = tail call i32 @llvm.abs.i32(i32 %2266, i1 true) #25
  %2268 = mul nsw i32 %2262, -2
  %2269 = add nsw i32 %2268, %2265
  %2270 = add nsw i32 %2269, %2261
  %2271 = tail call i32 @llvm.abs.i32(i32 %2270, i1 true) #25
  %2272 = icmp ult i32 %2267, %2264
  %2273 = select i1 %2272, i32 %2267, i32 %2264
  %2274 = select i1 %2272, i8 %2258, i8 %2254
  %2275 = icmp ult i32 %2271, %2273
  %2276 = select i1 %2275, i8 %2255, i8 %2274
  %2277 = add i8 %2276, %2260
  %2278 = getelementptr inbounds i8, i8* %371, i64 %2256
  store i8 %2277, i8* %2278, align 1, !tbaa !14
  %2279 = add nuw nsw i64 %2256, 1
  %2280 = icmp eq i64 %2279, %18
  br i1 %2280, label %2623, label %2253

2281:                                             ; preds = %1983, %2281
  %2282 = phi i64 [ %2310, %2281 ], [ %1984, %1983 ]
  %2283 = getelementptr inbounds i8, i8* %373, i64 %2282
  %2284 = load i8, i8* %2283, align 1, !tbaa !14
  %2285 = getelementptr inbounds i8, i8* %233, i64 %2282
  %2286 = load i8, i8* %2285, align 1, !tbaa !14
  %2287 = add i8 %2286, %2284
  %2288 = getelementptr inbounds i8, i8* %371, i64 %2282
  store i8 %2287, i8* %2288, align 1, !tbaa !14
  %2289 = add nuw i64 %2282, 1
  %2290 = getelementptr inbounds i8, i8* %373, i64 %2289
  %2291 = load i8, i8* %2290, align 1, !tbaa !14
  %2292 = getelementptr inbounds i8, i8* %233, i64 %2289
  %2293 = load i8, i8* %2292, align 1, !tbaa !14
  %2294 = add i8 %2293, %2291
  %2295 = getelementptr inbounds i8, i8* %371, i64 %2289
  store i8 %2294, i8* %2295, align 1, !tbaa !14
  %2296 = add nuw i64 %2282, 2
  %2297 = getelementptr inbounds i8, i8* %373, i64 %2296
  %2298 = load i8, i8* %2297, align 1, !tbaa !14
  %2299 = getelementptr inbounds i8, i8* %233, i64 %2296
  %2300 = load i8, i8* %2299, align 1, !tbaa !14
  %2301 = add i8 %2300, %2298
  %2302 = getelementptr inbounds i8, i8* %371, i64 %2296
  store i8 %2301, i8* %2302, align 1, !tbaa !14
  %2303 = add nuw i64 %2282, 3
  %2304 = getelementptr inbounds i8, i8* %373, i64 %2303
  %2305 = load i8, i8* %2304, align 1, !tbaa !14
  %2306 = getelementptr inbounds i8, i8* %233, i64 %2303
  %2307 = load i8, i8* %2306, align 1, !tbaa !14
  %2308 = add i8 %2307, %2305
  %2309 = getelementptr inbounds i8, i8* %371, i64 %2303
  store i8 %2308, i8* %2309, align 1, !tbaa !14
  %2310 = add nuw i64 %2282, 4
  %2311 = icmp eq i64 %2310, %8
  br i1 %2311, label %2312, label %2281, !llvm.loop !591

2312:                                             ; preds = %2218, %2158, %2117, %2045, %1992, %1983, %2281, %1949, %1966, %1991, %1990, %1989, %1988, %1987, %1986, %1872
  %2313 = phi i64 [ 0, %1991 ], [ 0, %1990 ], [ 0, %1989 ], [ 0, %1988 ], [ 0, %1987 ], [ 0, %1986 ], [ %8, %1872 ], [ %8, %1966 ], [ %8, %1949 ], [ %8, %2281 ], [ %8, %1983 ], [ %2042, %1992 ], [ %2114, %2045 ], [ %2155, %2117 ], [ %2215, %2158 ], [ %2250, %2218 ]
  %2314 = icmp eq i64 %2313, %18
  br i1 %2314, label %2623, label %2315

2315:                                             ; preds = %2312
  %2316 = sub i64 %47, %2313
  %2317 = icmp ult i64 %2316, 8
  br i1 %2317, label %2433, label %2318

2318:                                             ; preds = %2315
  %2319 = getelementptr i8, i8* %244, i64 %2313
  %2320 = getelementptr i8, i8* %249, i64 %2313
  %2321 = getelementptr i8, i8* %253, i64 %2313
  %2322 = getelementptr i8, i8* %233, i64 %2313
  %2323 = getelementptr i8, i8* %233, i64 %18
  %2324 = getelementptr i8, i8* %233, i64 %46
  %2325 = getelementptr i8, i8* %2324, i64 %2313
  %2326 = getelementptr i8, i8* %233, i64 %45
  %2327 = icmp ult i8* %2319, %251
  %2328 = icmp ult i8* %2320, %246
  %2329 = and i1 %2327, %2328
  %2330 = icmp ult i8* %2319, %255
  %2331 = icmp ult i8* %2321, %246
  %2332 = and i1 %2330, %2331
  %2333 = or i1 %2329, %2332
  %2334 = icmp ult i8* %2319, %2323
  %2335 = icmp ult i8* %2322, %246
  %2336 = and i1 %2334, %2335
  %2337 = or i1 %2333, %2336
  %2338 = icmp ult i8* %2319, %2326
  %2339 = icmp ult i8* %2325, %246
  %2340 = and i1 %2338, %2339
  %2341 = or i1 %2337, %2340
  br i1 %2341, label %2433, label %2342

2342:                                             ; preds = %2318
  %2343 = icmp ult i64 %2316, 16
  br i1 %2343, label %2389, label %2344

2344:                                             ; preds = %2342
  %2345 = and i64 %2316, -16
  br label %2346

2346:                                             ; preds = %2346, %2344
  %2347 = phi i64 [ 0, %2344 ], [ %2381, %2346 ]
  %2348 = add i64 %2313, %2347
  %2349 = getelementptr inbounds i8, i8* %373, i64 %2348
  %2350 = bitcast i8* %2349 to <16 x i8>*
  %2351 = load <16 x i8>, <16 x i8>* %2350, align 1, !tbaa !14, !alias.scope !592
  %2352 = sub i64 %2348, %8
  %2353 = getelementptr inbounds i8, i8* %371, i64 %2352
  %2354 = bitcast i8* %2353 to <16 x i8>*
  %2355 = load <16 x i8>, <16 x i8>* %2354, align 1, !tbaa !14, !alias.scope !595
  %2356 = getelementptr inbounds i8, i8* %233, i64 %2348
  %2357 = bitcast i8* %2356 to <16 x i8>*
  %2358 = load <16 x i8>, <16 x i8>* %2357, align 1, !tbaa !14, !alias.scope !597
  %2359 = getelementptr inbounds i8, i8* %233, i64 %2352
  %2360 = bitcast i8* %2359 to <16 x i8>*
  %2361 = load <16 x i8>, <16 x i8>* %2360, align 1, !tbaa !14, !alias.scope !599
  %2362 = zext <16 x i8> %2358 to <16 x i32>
  %2363 = zext <16 x i8> %2361 to <16 x i32>
  %2364 = sub nsw <16 x i32> %2362, %2363
  %2365 = call <16 x i32> @llvm.abs.v16i32(<16 x i32> %2364, i1 true)
  %2366 = zext <16 x i8> %2355 to <16 x i32>
  %2367 = sub nsw <16 x i32> %2366, %2363
  %2368 = call <16 x i32> @llvm.abs.v16i32(<16 x i32> %2367, i1 true)
  %2369 = add nuw nsw <16 x i32> %2362, %2366
  %2370 = mul nsw <16 x i32> %2363, <i32 -2, i32 -2, i32 -2, i32 -2, i32 -2, i32 -2, i32 -2, i32 -2, i32 -2, i32 -2, i32 -2, i32 -2, i32 -2, i32 -2, i32 -2, i32 -2>
  %2371 = add nsw <16 x i32> %2369, %2370
  %2372 = call <16 x i32> @llvm.abs.v16i32(<16 x i32> %2371, i1 true)
  %2373 = icmp ult <16 x i32> %2368, %2365
  %2374 = select <16 x i1> %2373, <16 x i32> %2368, <16 x i32> %2365
  %2375 = select <16 x i1> %2373, <16 x i8> %2358, <16 x i8> %2355
  %2376 = icmp ult <16 x i32> %2372, %2374
  %2377 = select <16 x i1> %2376, <16 x i8> %2361, <16 x i8> %2375
  %2378 = add <16 x i8> %2377, %2351
  %2379 = getelementptr inbounds i8, i8* %371, i64 %2348
  %2380 = bitcast i8* %2379 to <16 x i8>*
  store <16 x i8> %2378, <16 x i8>* %2380, align 1, !tbaa !14, !alias.scope !601, !noalias !603
  %2381 = add nuw i64 %2347, 16
  %2382 = icmp eq i64 %2381, %2345
  br i1 %2382, label %2383, label %2346, !llvm.loop !604

2383:                                             ; preds = %2346
  %2384 = icmp eq i64 %2316, %2345
  br i1 %2384, label %2623, label %2385

2385:                                             ; preds = %2383
  %2386 = add i64 %2313, %2345
  %2387 = and i64 %2316, 8
  %2388 = icmp eq i64 %2387, 0
  br i1 %2388, label %2433, label %2389

2389:                                             ; preds = %2342, %2385
  %2390 = phi i64 [ %2345, %2385 ], [ 0, %2342 ]
  %2391 = sub i64 %48, %2313
  %2392 = and i64 %2391, -8
  %2393 = add i64 %2313, %2392
  br label %2394

2394:                                             ; preds = %2394, %2389
  %2395 = phi i64 [ %2390, %2389 ], [ %2429, %2394 ]
  %2396 = add i64 %2313, %2395
  %2397 = getelementptr inbounds i8, i8* %373, i64 %2396
  %2398 = bitcast i8* %2397 to <8 x i8>*
  %2399 = load <8 x i8>, <8 x i8>* %2398, align 1, !tbaa !14
  %2400 = sub i64 %2396, %8
  %2401 = getelementptr inbounds i8, i8* %371, i64 %2400
  %2402 = bitcast i8* %2401 to <8 x i8>*
  %2403 = load <8 x i8>, <8 x i8>* %2402, align 1, !tbaa !14
  %2404 = getelementptr inbounds i8, i8* %233, i64 %2396
  %2405 = bitcast i8* %2404 to <8 x i8>*
  %2406 = load <8 x i8>, <8 x i8>* %2405, align 1, !tbaa !14
  %2407 = getelementptr inbounds i8, i8* %233, i64 %2400
  %2408 = bitcast i8* %2407 to <8 x i8>*
  %2409 = load <8 x i8>, <8 x i8>* %2408, align 1, !tbaa !14
  %2410 = zext <8 x i8> %2406 to <8 x i32>
  %2411 = zext <8 x i8> %2409 to <8 x i32>
  %2412 = sub nsw <8 x i32> %2410, %2411
  %2413 = call <8 x i32> @llvm.abs.v8i32(<8 x i32> %2412, i1 true)
  %2414 = zext <8 x i8> %2403 to <8 x i32>
  %2415 = sub nsw <8 x i32> %2414, %2411
  %2416 = call <8 x i32> @llvm.abs.v8i32(<8 x i32> %2415, i1 true)
  %2417 = add nuw nsw <8 x i32> %2410, %2414
  %2418 = mul nsw <8 x i32> %2411, <i32 -2, i32 -2, i32 -2, i32 -2, i32 -2, i32 -2, i32 -2, i32 -2>
  %2419 = add nsw <8 x i32> %2417, %2418
  %2420 = call <8 x i32> @llvm.abs.v8i32(<8 x i32> %2419, i1 true)
  %2421 = icmp ult <8 x i32> %2416, %2413
  %2422 = select <8 x i1> %2421, <8 x i32> %2416, <8 x i32> %2413
  %2423 = select <8 x i1> %2421, <8 x i8> %2406, <8 x i8> %2403
  %2424 = icmp ult <8 x i32> %2420, %2422
  %2425 = select <8 x i1> %2424, <8 x i8> %2409, <8 x i8> %2423
  %2426 = add <8 x i8> %2425, %2399
  %2427 = getelementptr inbounds i8, i8* %371, i64 %2396
  %2428 = bitcast i8* %2427 to <8 x i8>*
  store <8 x i8> %2426, <8 x i8>* %2428, align 1, !tbaa !14
  %2429 = add nuw i64 %2395, 8
  %2430 = icmp eq i64 %2429, %2392
  br i1 %2430, label %2431, label %2394, !llvm.loop !605

2431:                                             ; preds = %2394
  %2432 = icmp eq i64 %2391, %2392
  br i1 %2432, label %2623, label %2433

2433:                                             ; preds = %2318, %2315, %2385, %2431
  %2434 = phi i64 [ %2313, %2315 ], [ %2313, %2318 ], [ %2386, %2385 ], [ %2393, %2431 ]
  br label %2435

2435:                                             ; preds = %2433, %2435
  %2436 = phi i64 [ %2464, %2435 ], [ %2434, %2433 ]
  %2437 = getelementptr inbounds i8, i8* %373, i64 %2436
  %2438 = load i8, i8* %2437, align 1, !tbaa !14
  %2439 = sub i64 %2436, %8
  %2440 = getelementptr inbounds i8, i8* %371, i64 %2439
  %2441 = load i8, i8* %2440, align 1, !tbaa !14
  %2442 = getelementptr inbounds i8, i8* %233, i64 %2436
  %2443 = load i8, i8* %2442, align 1, !tbaa !14
  %2444 = getelementptr inbounds i8, i8* %233, i64 %2439
  %2445 = load i8, i8* %2444, align 1, !tbaa !14
  %2446 = zext i8 %2443 to i32
  %2447 = zext i8 %2445 to i32
  %2448 = sub nsw i32 %2446, %2447
  %2449 = tail call i32 @llvm.abs.i32(i32 %2448, i1 true) #25
  %2450 = zext i8 %2441 to i32
  %2451 = sub nsw i32 %2450, %2447
  %2452 = tail call i32 @llvm.abs.i32(i32 %2451, i1 true) #25
  %2453 = add nuw nsw i32 %2446, %2450
  %2454 = mul nsw i32 %2447, -2
  %2455 = add nsw i32 %2453, %2454
  %2456 = tail call i32 @llvm.abs.i32(i32 %2455, i1 true) #25
  %2457 = icmp ult i32 %2452, %2449
  %2458 = select i1 %2457, i32 %2452, i32 %2449
  %2459 = select i1 %2457, i8 %2443, i8 %2441
  %2460 = icmp ult i32 %2456, %2458
  %2461 = select i1 %2460, i8 %2445, i8 %2459
  %2462 = add i8 %2461, %2438
  %2463 = getelementptr inbounds i8, i8* %371, i64 %2436
  store i8 %2462, i8* %2463, align 1, !tbaa !14
  %2464 = add i64 %2436, 1
  %2465 = icmp eq i64 %2464, %18
  br i1 %2465, label %2623, label %2435, !llvm.loop !606

2466:                                             ; preds = %1869, %2584, %1842, %1855, %1767
  br i1 %29, label %2623, label %2467

2467:                                             ; preds = %2466
  br i1 %104, label %2564, label %2468

2468:                                             ; preds = %2467
  %2469 = icmp ult i8* %267, %274
  %2470 = icmp ult i8* %272, %269
  %2471 = and i1 %2469, %2470
  %2472 = icmp ult i8* %267, %277
  %2473 = icmp ult i8* %275, %269
  %2474 = and i1 %2472, %2473
  %2475 = or i1 %2471, %2474
  br i1 %2475, label %2564, label %2476

2476:                                             ; preds = %2468
  br i1 %105, label %2547, label %2477

2477:                                             ; preds = %2476
  br i1 %108, label %2523, label %2478

2478:                                             ; preds = %2477, %2478
  %2479 = phi i64 [ %2520, %2478 ], [ 0, %2477 ]
  %2480 = phi i64 [ %2521, %2478 ], [ 0, %2477 ]
  %2481 = add i64 %2479, %8
  %2482 = getelementptr inbounds i8, i8* %373, i64 %2481
  %2483 = bitcast i8* %2482 to <16 x i8>*
  %2484 = load <16 x i8>, <16 x i8>* %2483, align 1, !tbaa !14, !alias.scope !607
  %2485 = getelementptr inbounds i8, i8* %2482, i64 16
  %2486 = bitcast i8* %2485 to <16 x i8>*
  %2487 = load <16 x i8>, <16 x i8>* %2486, align 1, !tbaa !14, !alias.scope !607
  %2488 = getelementptr inbounds i8, i8* %371, i64 %2479
  %2489 = bitcast i8* %2488 to <16 x i8>*
  %2490 = load <16 x i8>, <16 x i8>* %2489, align 1, !tbaa !14, !alias.scope !610
  %2491 = getelementptr inbounds i8, i8* %2488, i64 16
  %2492 = bitcast i8* %2491 to <16 x i8>*
  %2493 = load <16 x i8>, <16 x i8>* %2492, align 1, !tbaa !14, !alias.scope !610
  %2494 = add <16 x i8> %2490, %2484
  %2495 = add <16 x i8> %2493, %2487
  %2496 = getelementptr inbounds i8, i8* %371, i64 %2481
  %2497 = bitcast i8* %2496 to <16 x i8>*
  store <16 x i8> %2494, <16 x i8>* %2497, align 1, !tbaa !14, !alias.scope !612, !noalias !614
  %2498 = getelementptr inbounds i8, i8* %2496, i64 16
  %2499 = bitcast i8* %2498 to <16 x i8>*
  store <16 x i8> %2495, <16 x i8>* %2499, align 1, !tbaa !14, !alias.scope !612, !noalias !614
  %2500 = or i64 %2479, 32
  %2501 = add i64 %2500, %8
  %2502 = getelementptr inbounds i8, i8* %373, i64 %2501
  %2503 = bitcast i8* %2502 to <16 x i8>*
  %2504 = load <16 x i8>, <16 x i8>* %2503, align 1, !tbaa !14, !alias.scope !607
  %2505 = getelementptr inbounds i8, i8* %2502, i64 16
  %2506 = bitcast i8* %2505 to <16 x i8>*
  %2507 = load <16 x i8>, <16 x i8>* %2506, align 1, !tbaa !14, !alias.scope !607
  %2508 = getelementptr inbounds i8, i8* %371, i64 %2500
  %2509 = bitcast i8* %2508 to <16 x i8>*
  %2510 = load <16 x i8>, <16 x i8>* %2509, align 1, !tbaa !14, !alias.scope !610
  %2511 = getelementptr inbounds i8, i8* %2508, i64 16
  %2512 = bitcast i8* %2511 to <16 x i8>*
  %2513 = load <16 x i8>, <16 x i8>* %2512, align 1, !tbaa !14, !alias.scope !610
  %2514 = add <16 x i8> %2510, %2504
  %2515 = add <16 x i8> %2513, %2507
  %2516 = getelementptr inbounds i8, i8* %371, i64 %2501
  %2517 = bitcast i8* %2516 to <16 x i8>*
  store <16 x i8> %2514, <16 x i8>* %2517, align 1, !tbaa !14, !alias.scope !612, !noalias !614
  %2518 = getelementptr inbounds i8, i8* %2516, i64 16
  %2519 = bitcast i8* %2518 to <16 x i8>*
  store <16 x i8> %2515, <16 x i8>* %2519, align 1, !tbaa !14, !alias.scope !612, !noalias !614
  %2520 = add nuw i64 %2479, 64
  %2521 = add i64 %2480, 2
  %2522 = icmp eq i64 %2521, %109
  br i1 %2522, label %2523, label %2478, !llvm.loop !615

2523:                                             ; preds = %2478, %2477
  %2524 = phi i64 [ 0, %2477 ], [ %2520, %2478 ]
  br i1 %110, label %2545, label %2525

2525:                                             ; preds = %2523
  %2526 = add i64 %2524, %8
  %2527 = getelementptr inbounds i8, i8* %373, i64 %2526
  %2528 = bitcast i8* %2527 to <16 x i8>*
  %2529 = load <16 x i8>, <16 x i8>* %2528, align 1, !tbaa !14, !alias.scope !607
  %2530 = getelementptr inbounds i8, i8* %2527, i64 16
  %2531 = bitcast i8* %2530 to <16 x i8>*
  %2532 = load <16 x i8>, <16 x i8>* %2531, align 1, !tbaa !14, !alias.scope !607
  %2533 = getelementptr inbounds i8, i8* %371, i64 %2524
  %2534 = bitcast i8* %2533 to <16 x i8>*
  %2535 = load <16 x i8>, <16 x i8>* %2534, align 1, !tbaa !14, !alias.scope !610
  %2536 = getelementptr inbounds i8, i8* %2533, i64 16
  %2537 = bitcast i8* %2536 to <16 x i8>*
  %2538 = load <16 x i8>, <16 x i8>* %2537, align 1, !tbaa !14, !alias.scope !610
  %2539 = add <16 x i8> %2535, %2529
  %2540 = add <16 x i8> %2538, %2532
  %2541 = getelementptr inbounds i8, i8* %371, i64 %2526
  %2542 = bitcast i8* %2541 to <16 x i8>*
  store <16 x i8> %2539, <16 x i8>* %2542, align 1, !tbaa !14, !alias.scope !612, !noalias !614
  %2543 = getelementptr inbounds i8, i8* %2541, i64 16
  %2544 = bitcast i8* %2543 to <16 x i8>*
  store <16 x i8> %2540, <16 x i8>* %2544, align 1, !tbaa !14, !alias.scope !612, !noalias !614
  br label %2545

2545:                                             ; preds = %2523, %2525
  br i1 %111, label %2623, label %2546

2546:                                             ; preds = %2545
  br i1 %114, label %2564, label %2547

2547:                                             ; preds = %2476, %2546
  %2548 = phi i64 [ %106, %2546 ], [ 0, %2476 ]
  br label %2549

2549:                                             ; preds = %2549, %2547
  %2550 = phi i64 [ %2548, %2547 ], [ %2561, %2549 ]
  %2551 = add i64 %2550, %8
  %2552 = getelementptr inbounds i8, i8* %373, i64 %2551
  %2553 = bitcast i8* %2552 to <8 x i8>*
  %2554 = load <8 x i8>, <8 x i8>* %2553, align 1, !tbaa !14
  %2555 = getelementptr inbounds i8, i8* %371, i64 %2550
  %2556 = bitcast i8* %2555 to <8 x i8>*
  %2557 = load <8 x i8>, <8 x i8>* %2556, align 1, !tbaa !14
  %2558 = add <8 x i8> %2557, %2554
  %2559 = getelementptr inbounds i8, i8* %371, i64 %2551
  %2560 = bitcast i8* %2559 to <8 x i8>*
  store <8 x i8> %2558, <8 x i8>* %2560, align 1, !tbaa !14
  %2561 = add nuw i64 %2550, 8
  %2562 = icmp eq i64 %2561, %115
  br i1 %2562, label %2563, label %2549, !llvm.loop !616

2563:                                             ; preds = %2549
  br i1 %117, label %2623, label %2564

2564:                                             ; preds = %2468, %2467, %2546, %2563
  %2565 = phi i64 [ 0, %2467 ], [ 0, %2468 ], [ %106, %2546 ], [ %115, %2563 ]
  %2566 = phi i64 [ %8, %2467 ], [ %8, %2468 ], [ %112, %2546 ], [ %116, %2563 ]
  %2567 = sub i64 %58, %2566
  %2568 = add i64 %2566, 1
  %2569 = and i64 %2567, 1
  %2570 = icmp eq i64 %2569, 0
  br i1 %2570, label %2580, label %2571

2571:                                             ; preds = %2564
  %2572 = getelementptr inbounds i8, i8* %373, i64 %2566
  %2573 = load i8, i8* %2572, align 1, !tbaa !14
  %2574 = getelementptr inbounds i8, i8* %371, i64 %2565
  %2575 = load i8, i8* %2574, align 1, !tbaa !14
  %2576 = add i8 %2575, %2573
  %2577 = getelementptr inbounds i8, i8* %371, i64 %2566
  store i8 %2576, i8* %2577, align 1, !tbaa !14
  %2578 = add i64 %2566, 1
  %2579 = or i64 %2565, 1
  br label %2580

2580:                                             ; preds = %2571, %2564
  %2581 = phi i64 [ %2565, %2564 ], [ %2579, %2571 ]
  %2582 = phi i64 [ %2566, %2564 ], [ %2578, %2571 ]
  %2583 = icmp eq i64 %59, %2568
  br i1 %2583, label %2623, label %2603

2584:                                             ; preds = %1869, %2584
  %2585 = phi i64 [ %2601, %2584 ], [ %1870, %1869 ]
  %2586 = getelementptr inbounds i8, i8* %373, i64 %2585
  %2587 = load i8, i8* %2586, align 1, !tbaa !14
  %2588 = getelementptr inbounds i8, i8* %371, i64 %2585
  store i8 %2587, i8* %2588, align 1, !tbaa !14
  %2589 = add nuw nsw i64 %2585, 1
  %2590 = getelementptr inbounds i8, i8* %373, i64 %2589
  %2591 = load i8, i8* %2590, align 1, !tbaa !14
  %2592 = getelementptr inbounds i8, i8* %371, i64 %2589
  store i8 %2591, i8* %2592, align 1, !tbaa !14
  %2593 = add nuw nsw i64 %2585, 2
  %2594 = getelementptr inbounds i8, i8* %373, i64 %2593
  %2595 = load i8, i8* %2594, align 1, !tbaa !14
  %2596 = getelementptr inbounds i8, i8* %371, i64 %2593
  store i8 %2595, i8* %2596, align 1, !tbaa !14
  %2597 = add nuw nsw i64 %2585, 3
  %2598 = getelementptr inbounds i8, i8* %373, i64 %2597
  %2599 = load i8, i8* %2598, align 1, !tbaa !14
  %2600 = getelementptr inbounds i8, i8* %371, i64 %2597
  store i8 %2599, i8* %2600, align 1, !tbaa !14
  %2601 = add nuw nsw i64 %2585, 4
  %2602 = icmp eq i64 %2601, %8
  br i1 %2602, label %2466, label %2584, !llvm.loop !617

2603:                                             ; preds = %2580, %2603
  %2604 = phi i64 [ %2621, %2603 ], [ %2581, %2580 ]
  %2605 = phi i64 [ %2620, %2603 ], [ %2582, %2580 ]
  %2606 = getelementptr inbounds i8, i8* %373, i64 %2605
  %2607 = load i8, i8* %2606, align 1, !tbaa !14
  %2608 = getelementptr inbounds i8, i8* %371, i64 %2604
  %2609 = load i8, i8* %2608, align 1, !tbaa !14
  %2610 = add i8 %2609, %2607
  %2611 = getelementptr inbounds i8, i8* %371, i64 %2605
  store i8 %2610, i8* %2611, align 1, !tbaa !14
  %2612 = add i64 %2605, 1
  %2613 = add nuw i64 %2604, 1
  %2614 = getelementptr inbounds i8, i8* %373, i64 %2612
  %2615 = load i8, i8* %2614, align 1, !tbaa !14
  %2616 = getelementptr inbounds i8, i8* %371, i64 %2613
  %2617 = load i8, i8* %2616, align 1, !tbaa !14
  %2618 = add i8 %2617, %2615
  %2619 = getelementptr inbounds i8, i8* %371, i64 %2612
  store i8 %2618, i8* %2619, align 1, !tbaa !14
  %2620 = add i64 %2605, 2
  %2621 = add nuw i64 %2604, 2
  %2622 = icmp eq i64 %2620, %18
  br i1 %2622, label %2623, label %2603, !llvm.loop !618

2623:                                             ; preds = %2253, %2435, %2580, %2603, %1560, %1564, %1720, %1743, %873, %981, %978, %1012, %717, %740, %581, %584, %2383, %2431, %2545, %2563, %1499, %1535, %1683, %1702, %839, %856, %951, %964, %682, %700, %554, %567, %479, %603, %876, %762, %1598, %1429, %2466, %2312
  %2624 = add nuw nsw i64 %232, 1
  %2625 = icmp eq i64 %2624, %40
  br i1 %2625, label %2626, label %231

2626:                                             ; preds = %2623, %231, %5
  %2627 = phi i32 [ 0, %5 ], [ 36, %231 ], [ 0, %2623 ]
  ret i32 %2627
}

; Function Attrs: nofree norecurse nosync nounwind uwtable
define internal fastcc void @_ZL19Adam7_getpassvaluesPjS_PmS0_S0_jjj(i32* nocapture noundef %0, i32* nocapture noundef %1, i64* nocapture noundef %2, i64* nocapture noundef %3, i64* nocapture noundef %4, i32 noundef %5, i32 noundef %6, i32 noundef %7) unnamed_addr #16 {
  %9 = add i32 %5, 7
  %10 = lshr i32 %9, 3
  store i32 %10, i32* %0, align 4, !tbaa !9
  %11 = add i32 %6, 7
  %12 = lshr i32 %11, 3
  store i32 %12, i32* %1, align 4, !tbaa !9
  %13 = load i32, i32* %0, align 4, !tbaa !9
  %14 = icmp eq i32 %13, 0
  %15 = select i1 %14, i32 0, i32 %12
  store i32 %15, i32* %1, align 4
  %16 = icmp eq i32 %15, 0
  br i1 %16, label %17, label %18

17:                                               ; preds = %8
  store i32 0, i32* %0, align 4, !tbaa !9
  br label %18

18:                                               ; preds = %8, %17
  %19 = add i32 %5, 3
  %20 = lshr i32 %19, 3
  %21 = getelementptr inbounds i32, i32* %0, i64 1
  store i32 %20, i32* %21, align 4, !tbaa !9
  %22 = getelementptr inbounds i32, i32* %1, i64 1
  store i32 %12, i32* %22, align 4, !tbaa !9
  %23 = load i32, i32* %21, align 4, !tbaa !9
  %24 = icmp eq i32 %23, 0
  %25 = select i1 %24, i32 0, i32 %12
  store i32 %25, i32* %22, align 4
  %26 = icmp eq i32 %25, 0
  br i1 %26, label %27, label %28

27:                                               ; preds = %18
  store i32 0, i32* %21, align 4, !tbaa !9
  br label %28

28:                                               ; preds = %27, %18
  %29 = add i32 %5, 3
  %30 = lshr i32 %29, 2
  %31 = getelementptr inbounds i32, i32* %0, i64 2
  store i32 %30, i32* %31, align 4, !tbaa !9
  %32 = add i32 %6, 3
  %33 = lshr i32 %32, 3
  %34 = getelementptr inbounds i32, i32* %1, i64 2
  store i32 %33, i32* %34, align 4, !tbaa !9
  %35 = load i32, i32* %31, align 4, !tbaa !9
  %36 = icmp eq i32 %35, 0
  %37 = select i1 %36, i32 0, i32 %33
  store i32 %37, i32* %34, align 4
  %38 = icmp eq i32 %37, 0
  br i1 %38, label %39, label %40

39:                                               ; preds = %28
  store i32 0, i32* %31, align 4, !tbaa !9
  br label %40

40:                                               ; preds = %39, %28
  %41 = add i32 %5, 1
  %42 = lshr i32 %41, 2
  %43 = getelementptr inbounds i32, i32* %0, i64 3
  store i32 %42, i32* %43, align 4, !tbaa !9
  %44 = add i32 %6, 3
  %45 = lshr i32 %44, 2
  %46 = getelementptr inbounds i32, i32* %1, i64 3
  store i32 %45, i32* %46, align 4, !tbaa !9
  %47 = load i32, i32* %43, align 4, !tbaa !9
  %48 = icmp eq i32 %47, 0
  %49 = select i1 %48, i32 0, i32 %45
  store i32 %49, i32* %46, align 4
  %50 = icmp eq i32 %49, 0
  br i1 %50, label %51, label %52

51:                                               ; preds = %40
  store i32 0, i32* %43, align 4, !tbaa !9
  br label %52

52:                                               ; preds = %51, %40
  %53 = add i32 %5, 1
  %54 = lshr i32 %53, 1
  %55 = getelementptr inbounds i32, i32* %0, i64 4
  store i32 %54, i32* %55, align 4, !tbaa !9
  %56 = add i32 %6, 1
  %57 = lshr i32 %56, 2
  %58 = getelementptr inbounds i32, i32* %1, i64 4
  store i32 %57, i32* %58, align 4, !tbaa !9
  %59 = load i32, i32* %55, align 4, !tbaa !9
  %60 = icmp eq i32 %59, 0
  %61 = select i1 %60, i32 0, i32 %57
  store i32 %61, i32* %58, align 4
  %62 = icmp eq i32 %61, 0
  br i1 %62, label %63, label %64

63:                                               ; preds = %52
  store i32 0, i32* %55, align 4, !tbaa !9
  br label %64

64:                                               ; preds = %63, %52
  %65 = lshr i32 %5, 1
  %66 = getelementptr inbounds i32, i32* %0, i64 5
  store i32 %65, i32* %66, align 4, !tbaa !9
  %67 = add i32 %6, 1
  %68 = lshr i32 %67, 1
  %69 = getelementptr inbounds i32, i32* %1, i64 5
  store i32 %68, i32* %69, align 4, !tbaa !9
  %70 = load i32, i32* %66, align 4, !tbaa !9
  %71 = icmp eq i32 %70, 0
  %72 = select i1 %71, i32 0, i32 %68
  store i32 %72, i32* %69, align 4
  %73 = icmp eq i32 %72, 0
  br i1 %73, label %74, label %75

74:                                               ; preds = %64
  store i32 0, i32* %66, align 4, !tbaa !9
  br label %75

75:                                               ; preds = %74, %64
  %76 = getelementptr inbounds i32, i32* %0, i64 6
  store i32 %5, i32* %76, align 4, !tbaa !9
  %77 = lshr i32 %6, 1
  %78 = getelementptr inbounds i32, i32* %1, i64 6
  store i32 %77, i32* %78, align 4, !tbaa !9
  %79 = load i32, i32* %76, align 4, !tbaa !9
  %80 = icmp eq i32 %79, 0
  %81 = select i1 %80, i32 0, i32 %77
  store i32 %81, i32* %78, align 4
  %82 = icmp eq i32 %81, 0
  br i1 %82, label %83, label %84

83:                                               ; preds = %75
  store i32 0, i32* %76, align 4, !tbaa !9
  br label %84

84:                                               ; preds = %83, %75
  store i64 0, i64* %4, align 8, !tbaa !3
  store i64 0, i64* %3, align 8, !tbaa !3
  store i64 0, i64* %2, align 8, !tbaa !3
  %85 = load i32, i32* %0, align 4, !tbaa !9
  %86 = icmp eq i32 %85, 0
  %87 = load i32, i32* %1, align 4, !tbaa !9
  br i1 %86, label %97, label %88

88:                                               ; preds = %84
  %89 = icmp eq i32 %87, 0
  br i1 %89, label %97, label %90

90:                                               ; preds = %88
  %91 = mul i32 %85, %7
  %92 = add i32 %91, 7
  %93 = lshr i32 %92, 3
  %94 = add nuw nsw i32 %93, 1
  %95 = mul i32 %87, %94
  %96 = zext i32 %95 to i64
  br label %97

97:                                               ; preds = %84, %88, %90
  %98 = phi i32 [ %87, %90 ], [ 0, %88 ], [ %87, %84 ]
  %99 = phi i64 [ %96, %90 ], [ 0, %88 ], [ 0, %84 ]
  %100 = getelementptr inbounds i64, i64* %2, i64 1
  store i64 %99, i64* %100, align 8, !tbaa !3
  %101 = load i64, i64* %3, align 8, !tbaa !3
  %102 = mul i32 %85, %7
  %103 = add i32 %102, 7
  %104 = lshr i32 %103, 3
  %105 = mul i32 %98, %104
  %106 = zext i32 %105 to i64
  %107 = add i64 %101, %106
  %108 = getelementptr inbounds i64, i64* %3, i64 1
  store i64 %107, i64* %108, align 8, !tbaa !3
  %109 = load i64, i64* %4, align 8, !tbaa !3
  %110 = mul i32 %102, %98
  %111 = add i32 %110, 7
  %112 = lshr i32 %111, 3
  %113 = zext i32 %112 to i64
  %114 = add i64 %109, %113
  %115 = getelementptr inbounds i64, i64* %4, i64 1
  store i64 %114, i64* %115, align 8, !tbaa !3
  %116 = load i64, i64* %100, align 8, !tbaa !3
  %117 = load i32, i32* %21, align 4, !tbaa !9
  %118 = icmp eq i32 %117, 0
  %119 = load i32, i32* %22, align 4, !tbaa !9
  br i1 %118, label %129, label %120

120:                                              ; preds = %97
  %121 = icmp eq i32 %119, 0
  br i1 %121, label %129, label %122

122:                                              ; preds = %120
  %123 = mul i32 %117, %7
  %124 = add i32 %123, 7
  %125 = lshr i32 %124, 3
  %126 = add nuw nsw i32 %125, 1
  %127 = mul i32 %119, %126
  %128 = zext i32 %127 to i64
  br label %129

129:                                              ; preds = %97, %122, %120
  %130 = phi i32 [ %119, %122 ], [ 0, %120 ], [ %119, %97 ]
  %131 = phi i64 [ %128, %122 ], [ 0, %120 ], [ 0, %97 ]
  %132 = add i64 %116, %131
  %133 = getelementptr inbounds i64, i64* %2, i64 2
  store i64 %132, i64* %133, align 8, !tbaa !3
  %134 = load i64, i64* %108, align 8, !tbaa !3
  %135 = mul i32 %117, %7
  %136 = add i32 %135, 7
  %137 = lshr i32 %136, 3
  %138 = mul i32 %130, %137
  %139 = zext i32 %138 to i64
  %140 = add i64 %134, %139
  %141 = getelementptr inbounds i64, i64* %3, i64 2
  store i64 %140, i64* %141, align 8, !tbaa !3
  %142 = load i64, i64* %115, align 8, !tbaa !3
  %143 = mul i32 %135, %130
  %144 = add i32 %143, 7
  %145 = lshr i32 %144, 3
  %146 = zext i32 %145 to i64
  %147 = add i64 %142, %146
  %148 = getelementptr inbounds i64, i64* %4, i64 2
  store i64 %147, i64* %148, align 8, !tbaa !3
  %149 = load i64, i64* %133, align 8, !tbaa !3
  %150 = load i32, i32* %31, align 4, !tbaa !9
  %151 = icmp eq i32 %150, 0
  %152 = load i32, i32* %34, align 4, !tbaa !9
  br i1 %151, label %162, label %153

153:                                              ; preds = %129
  %154 = icmp eq i32 %152, 0
  br i1 %154, label %162, label %155

155:                                              ; preds = %153
  %156 = mul i32 %150, %7
  %157 = add i32 %156, 7
  %158 = lshr i32 %157, 3
  %159 = add nuw nsw i32 %158, 1
  %160 = mul i32 %152, %159
  %161 = zext i32 %160 to i64
  br label %162

162:                                              ; preds = %129, %155, %153
  %163 = phi i32 [ %152, %155 ], [ 0, %153 ], [ %152, %129 ]
  %164 = phi i64 [ %161, %155 ], [ 0, %153 ], [ 0, %129 ]
  %165 = add i64 %149, %164
  %166 = getelementptr inbounds i64, i64* %2, i64 3
  store i64 %165, i64* %166, align 8, !tbaa !3
  %167 = load i64, i64* %141, align 8, !tbaa !3
  %168 = mul i32 %150, %7
  %169 = add i32 %168, 7
  %170 = lshr i32 %169, 3
  %171 = mul i32 %163, %170
  %172 = zext i32 %171 to i64
  %173 = add i64 %167, %172
  %174 = getelementptr inbounds i64, i64* %3, i64 3
  store i64 %173, i64* %174, align 8, !tbaa !3
  %175 = load i64, i64* %148, align 8, !tbaa !3
  %176 = mul i32 %168, %163
  %177 = add i32 %176, 7
  %178 = lshr i32 %177, 3
  %179 = zext i32 %178 to i64
  %180 = add i64 %175, %179
  %181 = getelementptr inbounds i64, i64* %4, i64 3
  store i64 %180, i64* %181, align 8, !tbaa !3
  %182 = load i64, i64* %166, align 8, !tbaa !3
  %183 = load i32, i32* %43, align 4, !tbaa !9
  %184 = icmp eq i32 %183, 0
  %185 = load i32, i32* %46, align 4, !tbaa !9
  br i1 %184, label %195, label %186

186:                                              ; preds = %162
  %187 = icmp eq i32 %185, 0
  br i1 %187, label %195, label %188

188:                                              ; preds = %186
  %189 = mul i32 %183, %7
  %190 = add i32 %189, 7
  %191 = lshr i32 %190, 3
  %192 = add nuw nsw i32 %191, 1
  %193 = mul i32 %185, %192
  %194 = zext i32 %193 to i64
  br label %195

195:                                              ; preds = %162, %188, %186
  %196 = phi i32 [ %185, %188 ], [ 0, %186 ], [ %185, %162 ]
  %197 = phi i64 [ %194, %188 ], [ 0, %186 ], [ 0, %162 ]
  %198 = add i64 %182, %197
  %199 = getelementptr inbounds i64, i64* %2, i64 4
  store i64 %198, i64* %199, align 8, !tbaa !3
  %200 = load i64, i64* %174, align 8, !tbaa !3
  %201 = mul i32 %183, %7
  %202 = add i32 %201, 7
  %203 = lshr i32 %202, 3
  %204 = mul i32 %196, %203
  %205 = zext i32 %204 to i64
  %206 = add i64 %200, %205
  %207 = getelementptr inbounds i64, i64* %3, i64 4
  store i64 %206, i64* %207, align 8, !tbaa !3
  %208 = load i64, i64* %181, align 8, !tbaa !3
  %209 = mul i32 %201, %196
  %210 = add i32 %209, 7
  %211 = lshr i32 %210, 3
  %212 = zext i32 %211 to i64
  %213 = add i64 %208, %212
  %214 = getelementptr inbounds i64, i64* %4, i64 4
  store i64 %213, i64* %214, align 8, !tbaa !3
  %215 = load i64, i64* %199, align 8, !tbaa !3
  %216 = load i32, i32* %55, align 4, !tbaa !9
  %217 = icmp eq i32 %216, 0
  %218 = load i32, i32* %58, align 4, !tbaa !9
  br i1 %217, label %228, label %219

219:                                              ; preds = %195
  %220 = icmp eq i32 %218, 0
  br i1 %220, label %228, label %221

221:                                              ; preds = %219
  %222 = mul i32 %216, %7
  %223 = add i32 %222, 7
  %224 = lshr i32 %223, 3
  %225 = add nuw nsw i32 %224, 1
  %226 = mul i32 %218, %225
  %227 = zext i32 %226 to i64
  br label %228

228:                                              ; preds = %195, %221, %219
  %229 = phi i32 [ %218, %221 ], [ 0, %219 ], [ %218, %195 ]
  %230 = phi i64 [ %227, %221 ], [ 0, %219 ], [ 0, %195 ]
  %231 = add i64 %215, %230
  %232 = getelementptr inbounds i64, i64* %2, i64 5
  store i64 %231, i64* %232, align 8, !tbaa !3
  %233 = load i64, i64* %207, align 8, !tbaa !3
  %234 = mul i32 %216, %7
  %235 = add i32 %234, 7
  %236 = lshr i32 %235, 3
  %237 = mul i32 %229, %236
  %238 = zext i32 %237 to i64
  %239 = add i64 %233, %238
  %240 = getelementptr inbounds i64, i64* %3, i64 5
  store i64 %239, i64* %240, align 8, !tbaa !3
  %241 = load i64, i64* %214, align 8, !tbaa !3
  %242 = mul i32 %234, %229
  %243 = add i32 %242, 7
  %244 = lshr i32 %243, 3
  %245 = zext i32 %244 to i64
  %246 = add i64 %241, %245
  %247 = getelementptr inbounds i64, i64* %4, i64 5
  store i64 %246, i64* %247, align 8, !tbaa !3
  %248 = load i64, i64* %232, align 8, !tbaa !3
  %249 = load i32, i32* %66, align 4, !tbaa !9
  %250 = icmp eq i32 %249, 0
  %251 = load i32, i32* %69, align 4, !tbaa !9
  br i1 %250, label %261, label %252

252:                                              ; preds = %228
  %253 = icmp eq i32 %251, 0
  br i1 %253, label %261, label %254

254:                                              ; preds = %252
  %255 = mul i32 %249, %7
  %256 = add i32 %255, 7
  %257 = lshr i32 %256, 3
  %258 = add nuw nsw i32 %257, 1
  %259 = mul i32 %251, %258
  %260 = zext i32 %259 to i64
  br label %261

261:                                              ; preds = %228, %254, %252
  %262 = phi i32 [ %251, %254 ], [ 0, %252 ], [ %251, %228 ]
  %263 = phi i64 [ %260, %254 ], [ 0, %252 ], [ 0, %228 ]
  %264 = add i64 %248, %263
  %265 = getelementptr inbounds i64, i64* %2, i64 6
  store i64 %264, i64* %265, align 8, !tbaa !3
  %266 = load i64, i64* %240, align 8, !tbaa !3
  %267 = mul i32 %249, %7
  %268 = add i32 %267, 7
  %269 = lshr i32 %268, 3
  %270 = mul i32 %262, %269
  %271 = zext i32 %270 to i64
  %272 = add i64 %266, %271
  %273 = getelementptr inbounds i64, i64* %3, i64 6
  store i64 %272, i64* %273, align 8, !tbaa !3
  %274 = load i64, i64* %247, align 8, !tbaa !3
  %275 = mul i32 %267, %262
  %276 = add i32 %275, 7
  %277 = lshr i32 %276, 3
  %278 = zext i32 %277 to i64
  %279 = add i64 %274, %278
  %280 = getelementptr inbounds i64, i64* %4, i64 6
  store i64 %279, i64* %280, align 8, !tbaa !3
  %281 = load i64, i64* %265, align 8, !tbaa !3
  %282 = load i32, i32* %76, align 4, !tbaa !9
  %283 = icmp eq i32 %282, 0
  %284 = load i32, i32* %78, align 4, !tbaa !9
  br i1 %283, label %294, label %285

285:                                              ; preds = %261
  %286 = icmp eq i32 %284, 0
  br i1 %286, label %294, label %287

287:                                              ; preds = %285
  %288 = mul i32 %282, %7
  %289 = add i32 %288, 7
  %290 = lshr i32 %289, 3
  %291 = add nuw nsw i32 %290, 1
  %292 = mul i32 %284, %291
  %293 = zext i32 %292 to i64
  br label %294

294:                                              ; preds = %261, %287, %285
  %295 = phi i32 [ %284, %287 ], [ 0, %285 ], [ %284, %261 ]
  %296 = phi i64 [ %293, %287 ], [ 0, %285 ], [ 0, %261 ]
  %297 = add i64 %281, %296
  %298 = getelementptr inbounds i64, i64* %2, i64 7
  store i64 %297, i64* %298, align 8, !tbaa !3
  %299 = load i64, i64* %273, align 8, !tbaa !3
  %300 = mul i32 %282, %7
  %301 = add i32 %300, 7
  %302 = lshr i32 %301, 3
  %303 = mul i32 %295, %302
  %304 = zext i32 %303 to i64
  %305 = add i64 %299, %304
  %306 = getelementptr inbounds i64, i64* %3, i64 7
  store i64 %305, i64* %306, align 8, !tbaa !3
  %307 = load i64, i64* %280, align 8, !tbaa !3
  %308 = mul i32 %300, %295
  %309 = add i32 %308, 7
  %310 = lshr i32 %309, 3
  %311 = zext i32 %310 to i64
  %312 = add i64 %307, %311
  %313 = getelementptr inbounds i64, i64* %4, i64 7
  store i64 %312, i64* %313, align 8, !tbaa !3
  ret void
}

; Function Attrs: nofree nosync nounwind readnone speculatable willreturn
declare <8 x i32> @llvm.abs.v8i32(<8 x i32>, i1 immarg) #9

; Function Attrs: nofree nosync nounwind readnone speculatable willreturn
declare <4 x i32> @llvm.abs.v4i32(<4 x i32>, i1 immarg) #9

; Function Attrs: nofree nosync nounwind readnone speculatable willreturn
declare <2 x i32> @llvm.abs.v2i32(<2 x i32>, i1 immarg) #9

; Function Attrs: nofree nosync nounwind readnone speculatable willreturn
declare i32 @llvm.abs.i32(i32, i1 immarg) #9

; Function Attrs: nofree nosync nounwind readnone speculatable willreturn
declare <16 x i32> @llvm.abs.v16i32(<16 x i32>, i1 immarg) #9

; Function Attrs: uwtable
define dso_local noundef i32 @_Z21lodepng_decode_memoryPPhPjS1_PKhm16LodePNGColorTypej(i8** nocapture noundef %0, i32* noundef %1, i32* noundef %2, i8* noundef %3, i64 noundef %4, i32 noundef %5, i32 noundef %6) local_unnamed_addr #12 {
  %8 = alloca %struct.LodePNGState, align 8
  %9 = bitcast %struct.LodePNGState* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 544, i8* nonnull %9) #25
  %10 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %8, i64 0, i32 0, i32 4
  store i32 1, i32* %10, align 4, !tbaa !619
  %11 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %8, i64 0, i32 0, i32 5
  %12 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %8, i64 0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %8, i64 0, i32 0, i32 7
  %14 = bitcast i64* %13 to <2 x i64>*
  store <2 x i64> <i64 16777216, i64 16777216>, <2 x i64>* %14, align 8, !tbaa !3
  call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(52) %9, i8 0, i64 52, i1 false) #25
  %15 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %8, i64 0, i32 1, i32 0, i32 0
  %16 = bitcast i32* %15 to <4 x i32>*
  store <4 x i32> <i32 2, i32 1, i32 2048, i32 3>, <4 x i32>* %16, align 8, !tbaa !9
  %17 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %8, i64 0, i32 1, i32 0, i32 4
  store i32 128, i32* %17, align 8, !tbaa !109
  %18 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %8, i64 0, i32 1, i32 0, i32 5
  store i32 1, i32* %18, align 4, !tbaa !110
  %19 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %8, i64 0, i32 1, i32 0, i32 6
  %20 = bitcast {}** %19 to i8*
  call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(24) %20, i8 0, i64 24, i1 false) #25
  %21 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %8, i64 0, i32 1, i32 2
  store i32 1, i32* %21, align 4, !tbaa !620
  %22 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %8, i64 0, i32 1, i32 3
  store i32 5, i32* %22, align 8, !tbaa !621
  %23 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %8, i64 0, i32 1, i32 1
  store i32 1, i32* %23, align 8, !tbaa !622
  %24 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %8, i64 0, i32 1, i32 4
  %25 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %8, i64 0, i32 1, i32 7
  %26 = bitcast i8** %24 to i8*
  call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(16) %26, i8 0, i64 16, i1 false) #25
  store i32 1, i32* %25, align 8, !tbaa !623
  %27 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %8, i64 0, i32 2, i32 4
  %28 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %8, i64 0, i32 2, i32 0
  %29 = bitcast i32* %27 to i8*
  call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(16) %29, i8 0, i64 16, i1 false) #25
  %30 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %8, i64 0, i32 2, i32 1
  %31 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %8, i64 0, i32 2, i32 2
  %32 = bitcast i8** %31 to i8*
  call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(16) %32, i8 0, i64 16, i1 false) #25
  %33 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %8, i64 0, i32 3, i32 3, i32 4
  %34 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %8, i64 0, i32 3, i32 3, i32 0
  %35 = bitcast i32* %33 to i8*
  call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(16) %35, i8 0, i64 16, i1 false) #25
  store i32 6, i32* %34, align 8, !tbaa !147
  %36 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %8, i64 0, i32 3, i32 3, i32 1
  store i32 8, i32* %36, align 4, !tbaa !150
  %37 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %8, i64 0, i32 3, i32 3, i32 2
  %38 = bitcast i8** %37 to i8*
  call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(16) %38, i8 0, i64 16, i1 false) #25
  %39 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %8, i64 0, i32 3, i32 2
  store i32 0, i32* %39, align 8, !tbaa !208
  %40 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %8, i64 0, i32 3, i32 0
  store i32 0, i32* %40, align 8, !tbaa !209
  %41 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %8, i64 0, i32 3, i32 1
  store i32 0, i32* %41, align 4, !tbaa !210
  %42 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %8, i64 0, i32 3, i32 4
  %43 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %8, i64 0, i32 3, i32 18
  store i32 0, i32* %43, align 4, !tbaa !211
  %44 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %8, i64 0, i32 3, i32 22
  store i32 0, i32* %44, align 4, !tbaa !212
  %45 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %8, i64 0, i32 3, i32 24
  store i32 0, i32* %45, align 4, !tbaa !213
  %46 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %8, i64 0, i32 3, i32 33
  store i32 0, i32* %46, align 8, !tbaa !214
  %47 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %8, i64 0, i32 3, i32 35
  store i32 0, i32* %47, align 8, !tbaa !199
  %48 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %8, i64 0, i32 3, i32 36
  %49 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %8, i64 0, i32 3, i32 39
  %50 = bitcast i32* %42 to i8*
  call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(84) %50, i8 0, i64 84, i1 false) #25
  %51 = bitcast i8** %48 to i8*
  call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(16) %51, i8 0, i64 16, i1 false) #25
  %52 = bitcast i32* %49 to i8*
  call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 4 dereferenceable(68) %52, i8 0, i64 68, i1 false) #25
  %53 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %8, i64 0, i32 4
  store i32 1, i32* %53, align 8, !tbaa !304
  store i32 %5, i32* %28, align 8, !tbaa !624
  store i32 %6, i32* %30, align 4, !tbaa !472
  store i32 0, i32* %11, align 8, !tbaa !391
  store i32 0, i32* %12, align 4, !tbaa !393
  %54 = call noundef i32 @_Z14lodepng_decodePPhPjS1_P12LodePNGStatePKhm(i8** noundef %0, i32* noundef %1, i32* noundef %2, %struct.LodePNGState* noundef nonnull %8, i8* noundef %3, i64 noundef %4)
  %55 = load i8*, i8** %31, align 8, !tbaa !151
  %56 = icmp eq i8* %55, null
  br i1 %56, label %58, label %57

57:                                               ; preds = %7
  call void @free(i8* noundef nonnull %55) #25
  br label %58

58:                                               ; preds = %7, %57
  call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(16) %32, i8 0, i64 16, i1 false) #25
  %59 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %8, i64 0, i32 3
  call void @_Z20lodepng_info_cleanupP11LodePNGInfo(%struct.LodePNGInfo* noundef nonnull %59) #25
  call void @llvm.lifetime.end.p0i8(i64 544, i8* nonnull %9) #25
  ret i32 %54
}

; Function Attrs: mustprogress nofree nosync nounwind uwtable willreturn writeonly
define dso_local void @_Z18lodepng_state_initP12LodePNGState(%struct.LodePNGState* nocapture noundef writeonly %0) local_unnamed_addr #20 {
  %2 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %0, i64 0, i32 0, i32 4
  store i32 1, i32* %2, align 4, !tbaa !619
  %3 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %0, i64 0, i32 0, i32 5
  store i32 1, i32* %3, align 8, !tbaa !625
  %4 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %0, i64 0, i32 0, i32 6
  store i32 0, i32* %4, align 4, !tbaa !626
  %5 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %0, i64 0, i32 0, i32 7
  %6 = bitcast i64* %5 to <2 x i64>*
  store <2 x i64> <i64 16777216, i64 16777216>, <2 x i64>* %6, align 8, !tbaa !3
  %7 = bitcast %struct.LodePNGState* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(52) %7, i8 0, i64 52, i1 false) #25
  %8 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %0, i64 0, i32 1, i32 0, i32 0
  %9 = bitcast i32* %8 to <4 x i32>*
  store <4 x i32> <i32 2, i32 1, i32 2048, i32 3>, <4 x i32>* %9, align 8, !tbaa !9
  %10 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %0, i64 0, i32 1, i32 0, i32 4
  store i32 128, i32* %10, align 8, !tbaa !109
  %11 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %0, i64 0, i32 1, i32 0, i32 5
  store i32 1, i32* %11, align 4, !tbaa !110
  %12 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %0, i64 0, i32 1, i32 0, i32 6
  %13 = bitcast {}** %12 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(24) %13, i8 0, i64 24, i1 false) #25
  %14 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %0, i64 0, i32 1, i32 2
  store i32 1, i32* %14, align 4, !tbaa !620
  %15 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %0, i64 0, i32 1, i32 3
  store i32 5, i32* %15, align 8, !tbaa !621
  %16 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %0, i64 0, i32 1, i32 1
  store i32 1, i32* %16, align 8, !tbaa !622
  %17 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %0, i64 0, i32 1, i32 4
  %18 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %0, i64 0, i32 1, i32 7
  %19 = bitcast i8** %17 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(16) %19, i8 0, i64 16, i1 false) #25
  store i32 1, i32* %18, align 8, !tbaa !623
  %20 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %0, i64 0, i32 2, i32 4
  %21 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %0, i64 0, i32 2, i32 0
  %22 = bitcast i32* %20 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(16) %22, i8 0, i64 16, i1 false) #25
  store i32 6, i32* %21, align 8, !tbaa !147
  %23 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %0, i64 0, i32 2, i32 1
  store i32 8, i32* %23, align 4, !tbaa !150
  %24 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %0, i64 0, i32 2, i32 2
  %25 = bitcast i8** %24 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(16) %25, i8 0, i64 16, i1 false) #25
  %26 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %0, i64 0, i32 3, i32 3, i32 4
  %27 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %0, i64 0, i32 3, i32 3, i32 0
  %28 = bitcast i32* %26 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(16) %28, i8 0, i64 16, i1 false) #25
  store i32 6, i32* %27, align 8, !tbaa !147
  %29 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %0, i64 0, i32 3, i32 3, i32 1
  store i32 8, i32* %29, align 4, !tbaa !150
  %30 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %0, i64 0, i32 3, i32 3, i32 2
  %31 = bitcast i8** %30 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(16) %31, i8 0, i64 16, i1 false) #25
  %32 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %0, i64 0, i32 3, i32 2
  store i32 0, i32* %32, align 8, !tbaa !208
  %33 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %0, i64 0, i32 3, i32 0
  store i32 0, i32* %33, align 8, !tbaa !209
  %34 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %0, i64 0, i32 3, i32 1
  store i32 0, i32* %34, align 4, !tbaa !210
  %35 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %0, i64 0, i32 3, i32 4
  %36 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %0, i64 0, i32 3, i32 18
  store i32 0, i32* %36, align 4, !tbaa !211
  %37 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %0, i64 0, i32 3, i32 22
  store i32 0, i32* %37, align 4, !tbaa !212
  %38 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %0, i64 0, i32 3, i32 24
  store i32 0, i32* %38, align 4, !tbaa !213
  %39 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %0, i64 0, i32 3, i32 33
  store i32 0, i32* %39, align 8, !tbaa !214
  %40 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %0, i64 0, i32 3, i32 35
  store i32 0, i32* %40, align 8, !tbaa !199
  %41 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %0, i64 0, i32 3, i32 36
  %42 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %0, i64 0, i32 3, i32 39
  %43 = bitcast i32* %35 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(84) %43, i8 0, i64 84, i1 false) #25
  %44 = bitcast i8** %41 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(16) %44, i8 0, i64 16, i1 false) #25
  %45 = bitcast i32* %42 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 4 dereferenceable(68) %45, i8 0, i64 68, i1 false) #25
  %46 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %0, i64 0, i32 4
  store i32 1, i32* %46, align 8, !tbaa !304
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local void @_Z21lodepng_state_cleanupP12LodePNGState(%struct.LodePNGState* nocapture noundef %0) local_unnamed_addr #3 {
  %2 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %0, i64 0, i32 2, i32 2
  %3 = load i8*, i8** %2, align 8, !tbaa !151
  %4 = icmp eq i8* %3, null
  br i1 %4, label %6, label %5

5:                                                ; preds = %1
  tail call void @free(i8* noundef nonnull %3) #25
  br label %6

6:                                                ; preds = %1, %5
  %7 = bitcast i8** %2 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(16) %7, i8 0, i64 16, i1 false) #25
  %8 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %0, i64 0, i32 3
  tail call void @_Z20lodepng_info_cleanupP11LodePNGInfo(%struct.LodePNGInfo* noundef nonnull %8)
  ret void
}

; Function Attrs: uwtable
define dso_local noundef i32 @_Z16lodepng_decode32PPhPjS1_PKhm(i8** nocapture noundef %0, i32* noundef %1, i32* noundef %2, i8* noundef %3, i64 noundef %4) local_unnamed_addr #12 {
  %6 = tail call noundef i32 @_Z21lodepng_decode_memoryPPhPjS1_PKhm16LodePNGColorTypej(i8** noundef %0, i32* noundef %1, i32* noundef %2, i8* noundef %3, i64 noundef %4, i32 noundef 6, i32 noundef 8)
  ret i32 %6
}

; Function Attrs: uwtable
define dso_local noundef i32 @_Z16lodepng_decode24PPhPjS1_PKhm(i8** nocapture noundef %0, i32* noundef %1, i32* noundef %2, i8* noundef %3, i64 noundef %4) local_unnamed_addr #12 {
  %6 = tail call noundef i32 @_Z21lodepng_decode_memoryPPhPjS1_PKhm16LodePNGColorTypej(i8** noundef %0, i32* noundef %1, i32* noundef %2, i8* noundef %3, i64 noundef %4, i32 noundef 2, i32 noundef 8)
  ret i32 %6
}

; Function Attrs: uwtable
define dso_local noundef i32 @_Z19lodepng_decode_filePPhPjS1_PKc16LodePNGColorTypej(i8** nocapture noundef %0, i32* noundef %1, i32* noundef %2, i8* nocapture noundef readonly %3, i32 noundef %4, i32 noundef %5) local_unnamed_addr #12 {
  %7 = alloca i8*, align 8
  %8 = alloca i64, align 8
  %9 = bitcast i8** %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %9) #25
  store i8* null, i8** %7, align 8, !tbaa !7
  %10 = bitcast i64* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %10) #25
  store i8* null, i8** %0, align 8, !tbaa !7
  store i32 0, i32* %2, align 4, !tbaa !9
  store i32 0, i32* %1, align 4, !tbaa !9
  %11 = call noundef i32 @_Z17lodepng_load_filePPhPmPKc(i8** noundef nonnull %7, i64* noundef nonnull %8, i8* noundef %3), !range !127
  %12 = icmp eq i32 %11, 0
  %13 = load i8*, i8** %7, align 8, !tbaa !7
  br i1 %12, label %14, label %17

14:                                               ; preds = %6
  %15 = load i64, i64* %8, align 8, !tbaa !3
  %16 = tail call noundef i32 @_Z21lodepng_decode_memoryPPhPjS1_PKhm16LodePNGColorTypej(i8** noundef nonnull %0, i32* noundef nonnull %1, i32* noundef nonnull %2, i8* noundef %13, i64 noundef %15, i32 noundef %4, i32 noundef %5)
  br label %17

17:                                               ; preds = %6, %14
  %18 = phi i32 [ %16, %14 ], [ %11, %6 ]
  tail call void @free(i8* noundef %13) #25
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %10) #25
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %9) #25
  ret i32 %18
}

; Function Attrs: uwtable
define dso_local noundef i32 @_Z21lodepng_decode32_filePPhPjS1_PKc(i8** nocapture noundef %0, i32* noundef %1, i32* noundef %2, i8* nocapture noundef readonly %3) local_unnamed_addr #12 {
  %5 = alloca i8*, align 8
  %6 = alloca i64, align 8
  %7 = bitcast i8** %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %7) #25
  store i8* null, i8** %5, align 8, !tbaa !7
  %8 = bitcast i64* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %8) #25
  store i8* null, i8** %0, align 8, !tbaa !7
  store i32 0, i32* %2, align 4, !tbaa !9
  store i32 0, i32* %1, align 4, !tbaa !9
  %9 = call noundef i32 @_Z17lodepng_load_filePPhPmPKc(i8** noundef nonnull %5, i64* noundef nonnull %6, i8* noundef %3), !range !127
  %10 = icmp eq i32 %9, 0
  %11 = load i8*, i8** %5, align 8, !tbaa !7
  br i1 %10, label %12, label %15

12:                                               ; preds = %4
  %13 = load i64, i64* %6, align 8, !tbaa !3
  %14 = tail call noundef i32 @_Z21lodepng_decode_memoryPPhPjS1_PKhm16LodePNGColorTypej(i8** noundef nonnull %0, i32* noundef nonnull %1, i32* noundef nonnull %2, i8* noundef %11, i64 noundef %13, i32 noundef 6, i32 noundef 8)
  br label %15

15:                                               ; preds = %4, %12
  %16 = phi i32 [ %14, %12 ], [ %9, %4 ]
  tail call void @free(i8* noundef %11) #25
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %8) #25
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7) #25
  ret i32 %16
}

; Function Attrs: uwtable
define dso_local noundef i32 @_Z21lodepng_decode24_filePPhPjS1_PKc(i8** nocapture noundef %0, i32* noundef %1, i32* noundef %2, i8* nocapture noundef readonly %3) local_unnamed_addr #12 {
  %5 = alloca i8*, align 8
  %6 = alloca i64, align 8
  %7 = bitcast i8** %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %7) #25
  store i8* null, i8** %5, align 8, !tbaa !7
  %8 = bitcast i64* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %8) #25
  store i8* null, i8** %0, align 8, !tbaa !7
  store i32 0, i32* %2, align 4, !tbaa !9
  store i32 0, i32* %1, align 4, !tbaa !9
  %9 = call noundef i32 @_Z17lodepng_load_filePPhPmPKc(i8** noundef nonnull %5, i64* noundef nonnull %6, i8* noundef %3), !range !127
  %10 = icmp eq i32 %9, 0
  %11 = load i8*, i8** %5, align 8, !tbaa !7
  br i1 %10, label %12, label %15

12:                                               ; preds = %4
  %13 = load i64, i64* %6, align 8, !tbaa !3
  %14 = tail call noundef i32 @_Z21lodepng_decode_memoryPPhPjS1_PKhm16LodePNGColorTypej(i8** noundef nonnull %0, i32* noundef nonnull %1, i32* noundef nonnull %2, i8* noundef %11, i64 noundef %13, i32 noundef 2, i32 noundef 8)
  br label %15

15:                                               ; preds = %4, %12
  %16 = phi i32 [ %14, %12 ], [ %9, %4 ]
  tail call void @free(i8* noundef %11) #25
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %8) #25
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7) #25
  ret i32 %16
}

; Function Attrs: mustprogress nofree nosync nounwind uwtable willreturn writeonly
define dso_local void @_Z29lodepng_decoder_settings_initP22LodePNGDecoderSettings(%struct.LodePNGDecoderSettings* nocapture noundef writeonly %0) local_unnamed_addr #20 {
  %2 = getelementptr inbounds %struct.LodePNGDecoderSettings, %struct.LodePNGDecoderSettings* %0, i64 0, i32 4
  store i32 1, i32* %2, align 4, !tbaa !619
  %3 = getelementptr inbounds %struct.LodePNGDecoderSettings, %struct.LodePNGDecoderSettings* %0, i64 0, i32 5
  store i32 1, i32* %3, align 8, !tbaa !625
  %4 = getelementptr inbounds %struct.LodePNGDecoderSettings, %struct.LodePNGDecoderSettings* %0, i64 0, i32 6
  store i32 0, i32* %4, align 4, !tbaa !626
  %5 = getelementptr inbounds %struct.LodePNGDecoderSettings, %struct.LodePNGDecoderSettings* %0, i64 0, i32 7
  %6 = bitcast i64* %5 to <2 x i64>*
  store <2 x i64> <i64 16777216, i64 16777216>, <2 x i64>* %6, align 8, !tbaa !3
  %7 = bitcast %struct.LodePNGDecoderSettings* %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(52) %7, i8 0, i64 52, i1 false)
  ret void
}

; Function Attrs: mustprogress nofree nosync nounwind uwtable willreturn writeonly
define dso_local void @_Z29lodepng_encoder_settings_initP22LodePNGEncoderSettings(%struct.LodePNGEncoderSettings* nocapture noundef writeonly %0) local_unnamed_addr #20 {
  %2 = bitcast %struct.LodePNGEncoderSettings* %0 to <4 x i32>*
  store <4 x i32> <i32 2, i32 1, i32 2048, i32 3>, <4 x i32>* %2, align 8, !tbaa !9
  %3 = getelementptr inbounds %struct.LodePNGEncoderSettings, %struct.LodePNGEncoderSettings* %0, i64 0, i32 0, i32 4
  store i32 128, i32* %3, align 8, !tbaa !109
  %4 = getelementptr inbounds %struct.LodePNGEncoderSettings, %struct.LodePNGEncoderSettings* %0, i64 0, i32 0, i32 5
  store i32 1, i32* %4, align 4, !tbaa !110
  %5 = getelementptr inbounds %struct.LodePNGEncoderSettings, %struct.LodePNGEncoderSettings* %0, i64 0, i32 0, i32 6
  %6 = bitcast {}** %5 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(24) %6, i8 0, i64 24, i1 false) #25
  %7 = getelementptr inbounds %struct.LodePNGEncoderSettings, %struct.LodePNGEncoderSettings* %0, i64 0, i32 2
  store i32 1, i32* %7, align 4, !tbaa !620
  %8 = getelementptr inbounds %struct.LodePNGEncoderSettings, %struct.LodePNGEncoderSettings* %0, i64 0, i32 3
  store i32 5, i32* %8, align 8, !tbaa !621
  %9 = getelementptr inbounds %struct.LodePNGEncoderSettings, %struct.LodePNGEncoderSettings* %0, i64 0, i32 1
  store i32 1, i32* %9, align 8, !tbaa !622
  %10 = getelementptr inbounds %struct.LodePNGEncoderSettings, %struct.LodePNGEncoderSettings* %0, i64 0, i32 4
  %11 = getelementptr inbounds %struct.LodePNGEncoderSettings, %struct.LodePNGEncoderSettings* %0, i64 0, i32 7
  %12 = bitcast i8** %10 to i8*
  call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(16) %12, i8 0, i64 16, i1 false)
  store i32 1, i32* %11, align 8, !tbaa !623
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local void @_Z18lodepng_state_copyP12LodePNGStatePKS_(%struct.LodePNGState* nocapture noundef %0, %struct.LodePNGState* nocapture noundef readonly %1) local_unnamed_addr #3 {
  %3 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %0, i64 0, i32 2, i32 2
  %4 = load i8*, i8** %3, align 8, !tbaa !151
  %5 = icmp eq i8* %4, null
  br i1 %5, label %7, label %6

6:                                                ; preds = %2
  tail call void @free(i8* noundef nonnull %4) #25
  br label %7

7:                                                ; preds = %6, %2
  %8 = bitcast i8** %3 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(16) %8, i8 0, i64 16, i1 false) #25
  %9 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %0, i64 0, i32 3
  tail call void @_Z20lodepng_info_cleanupP11LodePNGInfo(%struct.LodePNGInfo* noundef nonnull %9) #25
  %10 = bitcast %struct.LodePNGState* %0 to i8*
  %11 = bitcast %struct.LodePNGState* %1 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(544) %10, i8* noundef nonnull align 8 dereferenceable(544) %11, i64 544, i1 false), !tbaa.struct !627
  %12 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %0, i64 0, i32 2
  %13 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %0, i64 0, i32 2, i32 4
  %14 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %12, i64 0, i32 0
  %15 = bitcast i32* %13 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(16) %15, i8 0, i64 16, i1 false) #25
  store i32 6, i32* %14, align 8, !tbaa !147
  %16 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %0, i64 0, i32 2, i32 1
  store i32 8, i32* %16, align 4, !tbaa !150
  %17 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %0, i64 0, i32 3, i32 3, i32 4
  %18 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %0, i64 0, i32 3, i32 3, i32 0
  %19 = bitcast i32* %17 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(16) %19, i8 0, i64 16, i1 false) #25
  store i32 6, i32* %18, align 8, !tbaa !147
  %20 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %0, i64 0, i32 3, i32 3, i32 1
  store i32 8, i32* %20, align 4, !tbaa !150
  %21 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %0, i64 0, i32 3, i32 3, i32 2
  %22 = bitcast i8** %21 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(16) %22, i8 0, i64 16, i1 false) #25
  %23 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %0, i64 0, i32 3, i32 2
  store i32 0, i32* %23, align 8, !tbaa !208
  %24 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %9, i64 0, i32 0
  store i32 0, i32* %24, align 8, !tbaa !209
  %25 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %0, i64 0, i32 3, i32 1
  store i32 0, i32* %25, align 4, !tbaa !210
  %26 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %0, i64 0, i32 3, i32 4
  %27 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %0, i64 0, i32 3, i32 18
  store i32 0, i32* %27, align 4, !tbaa !211
  %28 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %0, i64 0, i32 3, i32 22
  store i32 0, i32* %28, align 4, !tbaa !212
  %29 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %0, i64 0, i32 3, i32 24
  store i32 0, i32* %29, align 4, !tbaa !213
  %30 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %0, i64 0, i32 3, i32 33
  store i32 0, i32* %30, align 8, !tbaa !214
  %31 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %0, i64 0, i32 3, i32 35
  store i32 0, i32* %31, align 8, !tbaa !199
  %32 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %0, i64 0, i32 3, i32 36
  %33 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %0, i64 0, i32 3, i32 39
  %34 = bitcast i32* %26 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(84) %34, i8 0, i64 84, i1 false) #25
  %35 = bitcast i8** %32 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(16) %35, i8 0, i64 16, i1 false) #25
  %36 = bitcast i32* %33 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 4 dereferenceable(68) %36, i8 0, i64 68, i1 false) #25
  %37 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %1, i64 0, i32 2
  tail call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(16) %8, i8 0, i64 16, i1 false) #25
  %38 = bitcast %struct.LodePNGColorMode* %12 to i8*
  %39 = bitcast %struct.LodePNGColorMode* %37 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef nonnull align 1 dereferenceable(40) %38, i8* noundef nonnull align 1 dereferenceable(40) %39, i64 40, i1 false) #25, !tbaa !14, !alias.scope !630
  %40 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %1, i64 0, i32 2, i32 2
  %41 = load i8*, i8** %40, align 8, !tbaa !151
  %42 = icmp eq i8* %41, null
  br i1 %42, label %57, label %43

43:                                               ; preds = %7
  %44 = tail call noalias dereferenceable_or_null(1024) i8* @malloc(i64 noundef 1024) #25
  store i8* %44, i8** %3, align 8, !tbaa !151
  %45 = icmp eq i8* %44, null
  %46 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %1, i64 0, i32 2, i32 3
  %47 = load i64, i64* %46, align 8, !tbaa !156
  br i1 %45, label %48, label %50

48:                                               ; preds = %43
  %49 = icmp eq i64 %47, 0
  br i1 %49, label %57, label %55

50:                                               ; preds = %43
  %51 = shl i64 %47, 2
  %52 = icmp eq i64 %51, 0
  br i1 %52, label %57, label %53

53:                                               ; preds = %50
  %54 = load i8*, i8** %40, align 8, !tbaa !151
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %44, i8* align 1 %54, i64 %51, i1 false) #25, !tbaa !14, !alias.scope !634
  br label %57

55:                                               ; preds = %48
  %56 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %0, i64 0, i32 4
  store i32 83, i32* %56, align 8, !tbaa !304
  br label %61

57:                                               ; preds = %48, %7, %50, %53
  %58 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %0, i64 0, i32 4
  store i32 0, i32* %58, align 8, !tbaa !304
  %59 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %1, i64 0, i32 3
  %60 = tail call noundef i32 @_Z17lodepng_info_copyP11LodePNGInfoPKS_(%struct.LodePNGInfo* noundef nonnull %9, %struct.LodePNGInfo* noundef nonnull %59)
  store i32 %60, i32* %58, align 8, !tbaa !304
  br label %61

61:                                               ; preds = %55, %57
  ret void
}

; Function Attrs: uwtable
define dso_local noundef i32 @_Z14lodepng_encodePPhPmPKhjjP12LodePNGState(i8** nocapture noundef writeonly %0, i64* nocapture noundef writeonly %1, i8* noundef %2, i32 noundef %3, i32 noundef %4, %struct.LodePNGState* noundef %5) local_unnamed_addr #12 {
  %7 = alloca i8*, align 8
  %8 = alloca i64, align 8
  %9 = alloca %struct.ucvector, align 8
  %10 = alloca %struct.LodePNGInfo, align 8
  %11 = alloca %struct.LodePNGColorMode, align 8
  %12 = alloca %struct.LodePNGColorStats, align 8
  %13 = alloca i32, align 4
  %14 = alloca i32, align 4
  %15 = alloca i32, align 4
  %16 = alloca %struct.LodePNGColorMode, align 8
  %17 = bitcast i8** %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %17) #25
  store i8* null, i8** %7, align 8, !tbaa !7
  %18 = bitcast i64* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %18) #25
  store i64 0, i64* %8, align 8, !tbaa !3
  %19 = bitcast %struct.ucvector* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %19) #25
  %20 = bitcast %struct.LodePNGInfo* %10 to i8*
  %21 = bitcast %struct.ucvector* %9 to i8*
  call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(24) %21, i8 0, i64 24, i1 false)
  call void @llvm.lifetime.start.p0i8(i64 328, i8* nonnull %20) #25
  %22 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %5, i64 0, i32 3
  %23 = bitcast %struct.LodePNGColorMode* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %23) #25
  %24 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %10, i64 0, i32 3, i32 4
  %25 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %10, i64 0, i32 3, i32 0
  %26 = bitcast i32* %24 to i8*
  call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(16) %26, i8 0, i64 16, i1 false) #25
  store i32 6, i32* %25, align 8, !tbaa !147
  %27 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %10, i64 0, i32 3, i32 1
  store i32 8, i32* %27, align 4, !tbaa !150
  %28 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %10, i64 0, i32 3, i32 2
  %29 = bitcast i8** %28 to i8*
  call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(16) %29, i8 0, i64 16, i1 false) #25
  %30 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %10, i64 0, i32 2
  store i32 0, i32* %30, align 8, !tbaa !208
  %31 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %10, i64 0, i32 0
  store i32 0, i32* %31, align 8, !tbaa !209
  %32 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %10, i64 0, i32 1
  store i32 0, i32* %32, align 4, !tbaa !210
  %33 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %10, i64 0, i32 4
  %34 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %10, i64 0, i32 18
  store i32 0, i32* %34, align 4, !tbaa !211
  %35 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %10, i64 0, i32 22
  store i32 0, i32* %35, align 4, !tbaa !212
  %36 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %10, i64 0, i32 24
  store i32 0, i32* %36, align 4, !tbaa !213
  %37 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %10, i64 0, i32 33
  store i32 0, i32* %37, align 8, !tbaa !214
  %38 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %10, i64 0, i32 35
  store i32 0, i32* %38, align 8, !tbaa !199
  %39 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %10, i64 0, i32 36
  %40 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %10, i64 0, i32 39
  %41 = bitcast i32* %33 to i8*
  call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(84) %41, i8 0, i64 84, i1 false) #25
  %42 = bitcast i8** %39 to i8*
  call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(16) %42, i8 0, i64 16, i1 false) #25
  %43 = bitcast i32* %40 to i8*
  call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 4 dereferenceable(68) %43, i8 0, i64 68, i1 false) #25
  %44 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %11, i64 0, i32 4
  %45 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %11, i64 0, i32 0
  %46 = bitcast i32* %44 to i8*
  call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(16) %46, i8 0, i64 16, i1 false) #25
  store i32 6, i32* %45, align 8, !tbaa !147
  %47 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %11, i64 0, i32 1
  store i32 8, i32* %47, align 4, !tbaa !150
  %48 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %11, i64 0, i32 2
  %49 = bitcast i8** %48 to i8*
  call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(16) %49, i8 0, i64 16, i1 false) #25
  store i8* null, i8** %0, align 8, !tbaa !7
  store i64 0, i64* %1, align 8, !tbaa !3
  %50 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %5, i64 0, i32 4
  store i32 0, i32* %50, align 8, !tbaa !304
  %51 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %5, i64 0, i32 3, i32 3
  %52 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %51, i64 0, i32 0
  %53 = load i32, i32* %52, align 8, !tbaa !311
  %54 = icmp eq i32 %53, 3
  br i1 %54, label %59, label %55

55:                                               ; preds = %6
  %56 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %5, i64 0, i32 1, i32 5
  %57 = load i32, i32* %56, align 8, !tbaa !638
  %58 = icmp eq i32 %57, 0
  br i1 %58, label %65, label %59

59:                                               ; preds = %55, %6
  %60 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %5, i64 0, i32 3, i32 3, i32 3
  %61 = load i64, i64* %60, align 8, !tbaa !323
  %62 = add i64 %61, -257
  %63 = icmp ult i64 %62, -256
  br i1 %63, label %64, label %65

64:                                               ; preds = %59
  store i32 68, i32* %50, align 8, !tbaa !304
  br label %653

65:                                               ; preds = %59, %55
  %66 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %5, i64 0, i32 1
  %67 = getelementptr inbounds %struct.LodePNGEncoderSettings, %struct.LodePNGEncoderSettings* %66, i64 0, i32 0
  %68 = getelementptr inbounds %struct.LodePNGEncoderSettings, %struct.LodePNGEncoderSettings* %66, i64 0, i32 0, i32 0
  %69 = load i32, i32* %68, align 8, !tbaa !639
  %70 = icmp ugt i32 %69, 2
  br i1 %70, label %71, label %72

71:                                               ; preds = %65
  store i32 61, i32* %50, align 8, !tbaa !304
  br label %653

72:                                               ; preds = %65
  %73 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %5, i64 0, i32 3, i32 2
  %74 = load i32, i32* %73, align 8, !tbaa !208
  %75 = icmp ugt i32 %74, 1
  br i1 %75, label %76, label %77

76:                                               ; preds = %72
  store i32 71, i32* %50, align 8, !tbaa !304
  br label %653

77:                                               ; preds = %72
  %78 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %5, i64 0, i32 3, i32 3, i32 1
  %79 = load i32, i32* %78, align 4, !tbaa !310
  switch i32 %53, label %85 [
    i32 0, label %80
    i32 2, label %81
    i32 3, label %82
    i32 4, label %83
    i32 6, label %84
  ]

80:                                               ; preds = %77
  switch i32 %79, label %85 [
    i32 16, label %87
    i32 8, label %87
    i32 4, label %87
    i32 2, label %87
    i32 1, label %87
  ]

81:                                               ; preds = %77
  switch i32 %79, label %85 [
    i32 16, label %87
    i32 8, label %87
  ]

82:                                               ; preds = %77
  switch i32 %79, label %85 [
    i32 8, label %87
    i32 4, label %87
    i32 2, label %87
    i32 1, label %87
  ]

83:                                               ; preds = %77
  switch i32 %79, label %85 [
    i32 16, label %87
    i32 8, label %87
  ]

84:                                               ; preds = %77
  switch i32 %79, label %85 [
    i32 16, label %87
    i32 8, label %87
  ]

85:                                               ; preds = %84, %83, %81, %80, %82, %77
  %86 = phi i32 [ 37, %84 ], [ 37, %83 ], [ 37, %81 ], [ 31, %77 ], [ 37, %82 ], [ 37, %80 ]
  store i32 %86, i32* %50, align 8, !tbaa !304
  br label %653

87:                                               ; preds = %84, %84, %83, %83, %81, %81, %80, %80, %80, %80, %80, %82, %82, %82, %82
  %88 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %5, i64 0, i32 2
  %89 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %88, i64 0, i32 0
  %90 = load i32, i32* %89, align 8, !tbaa !624
  %91 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %5, i64 0, i32 2, i32 1
  %92 = load i32, i32* %91, align 4, !tbaa !472
  switch i32 %90, label %98 [
    i32 0, label %93
    i32 2, label %94
    i32 3, label %95
    i32 4, label %96
    i32 6, label %97
  ]

93:                                               ; preds = %87
  switch i32 %92, label %98 [
    i32 16, label %100
    i32 8, label %100
    i32 4, label %100
    i32 2, label %100
    i32 1, label %100
  ]

94:                                               ; preds = %87
  switch i32 %92, label %98 [
    i32 16, label %100
    i32 8, label %100
  ]

95:                                               ; preds = %87
  switch i32 %92, label %98 [
    i32 8, label %100
    i32 4, label %100
    i32 2, label %100
    i32 1, label %100
  ]

96:                                               ; preds = %87
  switch i32 %92, label %98 [
    i32 16, label %100
    i32 8, label %100
  ]

97:                                               ; preds = %87
  switch i32 %92, label %98 [
    i32 16, label %100
    i32 8, label %100
  ]

98:                                               ; preds = %97, %96, %94, %93, %95, %87
  %99 = phi i32 [ 37, %97 ], [ 37, %96 ], [ 37, %94 ], [ 31, %87 ], [ 37, %95 ], [ 37, %93 ]
  store i32 %99, i32* %50, align 8, !tbaa !304
  br label %653

100:                                              ; preds = %97, %97, %96, %96, %94, %94, %93, %93, %93, %93, %93, %95, %95, %95, %95
  %101 = call noundef i32 @_Z17lodepng_info_copyP11LodePNGInfoPKS_(%struct.LodePNGInfo* noundef nonnull %10, %struct.LodePNGInfo* noundef nonnull %22)
  %102 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %5, i64 0, i32 1, i32 1
  %103 = load i32, i32* %102, align 8, !tbaa !640
  %104 = icmp eq i32 %103, 0
  br i1 %104, label %296, label %105

105:                                              ; preds = %100
  %106 = bitcast %struct.LodePNGColorStats* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 1072, i8* nonnull %106) #25
  %107 = getelementptr inbounds %struct.LodePNGColorStats, %struct.LodePNGColorStats* %12, i64 0, i32 5
  store i32 0, i32* %107, align 8, !tbaa !289
  %108 = getelementptr inbounds %struct.LodePNGColorStats, %struct.LodePNGColorStats* %12, i64 0, i32 6
  store i32 0, i32* %108, align 4, !tbaa !291
  %109 = getelementptr inbounds %struct.LodePNGColorStats, %struct.LodePNGColorStats* %12, i64 0, i32 8
  call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(14) %106, i8 0, i64 14, i1 false) #25
  store i32 1, i32* %109, align 8, !tbaa !292
  %110 = getelementptr inbounds %struct.LodePNGColorStats, %struct.LodePNGColorStats* %12, i64 0, i32 9
  store i64 0, i64* %110, align 8, !tbaa !293
  %111 = getelementptr inbounds %struct.LodePNGColorStats, %struct.LodePNGColorStats* %12, i64 0, i32 10
  store i32 1, i32* %111, align 8, !tbaa !294
  %112 = getelementptr inbounds %struct.LodePNGColorStats, %struct.LodePNGColorStats* %12, i64 0, i32 11
  store i32 1, i32* %112, align 4, !tbaa !295
  %113 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %5, i64 0, i32 3, i32 35
  %114 = load i32, i32* %113, align 8, !tbaa !199
  %115 = icmp eq i32 %114, 0
  br i1 %115, label %156, label %116

116:                                              ; preds = %105
  %117 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %5, i64 0, i32 3, i32 37
  %118 = load i8*, i8** %117, align 8, !tbaa !197
  %119 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %5, i64 0, i32 3, i32 38
  %120 = load i32, i32* %119, align 8, !tbaa !198
  %121 = icmp ult i32 %120, 20
  br i1 %121, label %156, label %122

122:                                              ; preds = %116
  %123 = getelementptr inbounds i8, i8* %118, i64 16
  %124 = load i8, i8* %123, align 1, !tbaa !14
  %125 = icmp eq i8 %124, 71
  br i1 %125, label %126, label %139

126:                                              ; preds = %122
  %127 = getelementptr inbounds i8, i8* %118, i64 17
  %128 = load i8, i8* %127, align 1, !tbaa !14
  %129 = icmp eq i8 %128, 82
  br i1 %129, label %130, label %139

130:                                              ; preds = %126
  %131 = getelementptr inbounds i8, i8* %118, i64 18
  %132 = load i8, i8* %131, align 1, !tbaa !14
  %133 = icmp eq i8 %132, 65
  br i1 %133, label %134, label %139

134:                                              ; preds = %130
  %135 = getelementptr inbounds i8, i8* %118, i64 19
  %136 = load i8, i8* %135, align 1, !tbaa !14
  %137 = icmp eq i8 %136, 89
  br i1 %137, label %138, label %139

138:                                              ; preds = %134
  store i32 0, i32* %111, align 8, !tbaa !294
  br label %139

139:                                              ; preds = %122, %126, %130, %138, %134
  %140 = getelementptr inbounds i8, i8* %118, i64 16
  %141 = load i8, i8* %140, align 1, !tbaa !14
  %142 = icmp eq i8 %141, 82
  br i1 %142, label %143, label %156

143:                                              ; preds = %139
  %144 = getelementptr inbounds i8, i8* %118, i64 17
  %145 = load i8, i8* %144, align 1, !tbaa !14
  %146 = icmp eq i8 %145, 71
  br i1 %146, label %147, label %156

147:                                              ; preds = %143
  %148 = getelementptr inbounds i8, i8* %118, i64 18
  %149 = load i8, i8* %148, align 1, !tbaa !14
  %150 = icmp eq i8 %149, 66
  br i1 %150, label %151, label %156

151:                                              ; preds = %147
  %152 = getelementptr inbounds i8, i8* %118, i64 19
  %153 = load i8, i8* %152, align 1, !tbaa !14
  %154 = icmp eq i8 %153, 32
  br i1 %154, label %155, label %156

155:                                              ; preds = %151
  store i32 0, i32* %112, align 4, !tbaa !295
  br label %156

156:                                              ; preds = %116, %139, %143, %147, %105, %155, %151
  %157 = call noundef i32 @_Z27lodepng_compute_color_statsP17LodePNGColorStatsPKhjjPK16LodePNGColorMode(%struct.LodePNGColorStats* noundef nonnull %12, i8* noundef %2, i32 noundef %3, i32 noundef %4, %struct.LodePNGColorMode* noundef nonnull %88)
  store i32 %157, i32* %50, align 8, !tbaa !304
  %158 = icmp eq i32 %157, 0
  br i1 %158, label %159, label %294

159:                                              ; preds = %156
  %160 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %5, i64 0, i32 3, i32 4
  %161 = load i32, i32* %160, align 8, !tbaa !324
  %162 = icmp eq i32 %161, 0
  br i1 %162, label %184, label %163

163:                                              ; preds = %159
  %164 = bitcast i32* %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %164) #25
  store i32 0, i32* %13, align 4, !tbaa !9
  %165 = bitcast i32* %14 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %165) #25
  store i32 0, i32* %14, align 4, !tbaa !9
  %166 = bitcast i32* %15 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %166) #25
  store i32 0, i32* %15, align 4, !tbaa !9
  %167 = bitcast %struct.LodePNGColorMode* %16 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %167) #25
  %168 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %16, i64 0, i32 0
  %169 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %16, i64 0, i32 1
  %170 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %16, i64 0, i32 2
  %171 = bitcast i8** %170 to i8*
  call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(32) %171, i8 0, i64 32, i1 false)
  store i32 2, i32* %168, align 8, !tbaa !147, !alias.scope !641
  store i32 16, i32* %169, align 4, !tbaa !150, !alias.scope !641
  %172 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %5, i64 0, i32 3, i32 5
  %173 = load i32, i32* %172, align 4, !tbaa !327
  %174 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %5, i64 0, i32 3, i32 6
  %175 = load i32, i32* %174, align 8, !tbaa !326
  %176 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %5, i64 0, i32 3, i32 7
  %177 = load i32, i32* %176, align 4, !tbaa !325
  %178 = call noundef i32 @_Z19lodepng_convert_rgbPjS_S_jjjPK16LodePNGColorModeS2_(i32* noundef nonnull %13, i32* noundef nonnull %14, i32* noundef nonnull %15, i32 noundef %173, i32 noundef %175, i32 noundef %177, %struct.LodePNGColorMode* noundef nonnull %16, %struct.LodePNGColorMode* noundef nonnull %51)
  %179 = load i32, i32* %13, align 4, !tbaa !9
  %180 = load i32, i32* %14, align 4, !tbaa !9
  %181 = load i32, i32* %15, align 4, !tbaa !9
  %182 = call fastcc noundef i32 @_ZL23lodepng_color_stats_addP17LodePNGColorStatsjjjj(%struct.LodePNGColorStats* noundef nonnull %12, i32 noundef %179, i32 noundef %180, i32 noundef %181)
  store i32 %182, i32* %50, align 8, !tbaa !304
  %183 = icmp eq i32 %182, 0
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %167) #25
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %166) #25
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %165) #25
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %164) #25
  br i1 %183, label %184, label %295

184:                                              ; preds = %163, %159
  %185 = call fastcc noundef i32 @_ZL17auto_choose_colorP16LodePNGColorModePKS_PK17LodePNGColorStats(%struct.LodePNGColorMode* noundef nonnull %11, %struct.LodePNGColorMode* noundef nonnull %88, %struct.LodePNGColorStats* noundef nonnull %12)
  store i32 %185, i32* %50, align 8, !tbaa !304
  %186 = icmp eq i32 %185, 0
  br i1 %186, label %187, label %294

187:                                              ; preds = %184
  %188 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %5, i64 0, i32 3, i32 39
  %189 = load i32, i32* %188, align 4, !tbaa !378
  %190 = icmp eq i32 %189, 0
  br i1 %190, label %258, label %191

191:                                              ; preds = %187
  %192 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %5, i64 0, i32 3, i32 40
  %193 = load i32, i32* %192, align 8, !tbaa !381
  %194 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %5, i64 0, i32 3, i32 41
  %195 = load i32, i32* %194, align 4, !tbaa !380
  %196 = icmp ugt i32 %193, %195
  %197 = select i1 %196, i32 %193, i32 %195
  %198 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %5, i64 0, i32 3, i32 42
  %199 = load i32, i32* %198, align 8, !tbaa !379
  %200 = icmp ugt i32 %197, %199
  %201 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %5, i64 0, i32 3, i32 43
  %202 = load i32, i32* %201, align 4, !tbaa !382
  %203 = select i1 %200, i32 %197, i32 %199
  %204 = icmp ugt i32 %203, %202
  %205 = select i1 %204, i32 %203, i32 %202
  %206 = icmp eq i32 %195, 0
  %207 = icmp eq i32 %195, %193
  %208 = select i1 %206, i1 true, i1 %207
  br i1 %208, label %209, label %217

209:                                              ; preds = %191
  %210 = icmp eq i32 %199, 0
  %211 = icmp eq i32 %199, %193
  %212 = select i1 %210, i1 true, i1 %211
  br i1 %212, label %213, label %217

213:                                              ; preds = %209
  %214 = icmp eq i32 %202, 0
  %215 = icmp eq i32 %202, %193
  %216 = select i1 %214, i1 true, i1 %215
  br label %217

217:                                              ; preds = %213, %209, %191
  %218 = phi i1 [ false, %191 ], [ false, %209 ], [ %216, %213 ]
  %219 = load i32, i32* %25, align 8, !tbaa !311
  %220 = icmp eq i32 %219, 3
  %221 = load i32, i32* %45, align 8
  %222 = icmp eq i32 %221, 3
  %223 = select i1 %220, i1 %222, i1 false
  %224 = icmp eq i32 %219, 2
  %225 = select i1 %224, i1 %222, i1 false
  %226 = icmp ult i32 %205, 9
  %227 = select i1 %225, i1 %226, i1 false
  %228 = icmp eq i32 %219, 6
  %229 = select i1 %228, i1 %222, i1 false
  %230 = icmp eq i32 %202, 8
  %231 = select i1 %229, i1 %230, i1 false
  %232 = select i1 %231, i1 %226, i1 false
  %233 = select i1 %232, i1 true, i1 %227
  %234 = select i1 %233, i1 true, i1 %223
  %235 = zext i1 %234 to i32
  %236 = and i32 %219, -5
  %237 = icmp eq i32 %236, 2
  %238 = load i32, i32* %27, align 4
  %239 = icmp eq i32 %238, 16
  %240 = select i1 %237, i1 %239, i1 false
  br i1 %240, label %241, label %248

241:                                              ; preds = %217
  %242 = icmp eq i32 %221, %219
  %243 = load i32, i32* %47, align 4
  %244 = icmp eq i32 %243, 8
  %245 = select i1 %242, i1 %244, i1 false
  %246 = select i1 %245, i1 %226, i1 false
  %247 = select i1 %246, i32 1, i32 %235
  br label %248

248:                                              ; preds = %241, %217
  %249 = phi i32 [ %235, %217 ], [ %247, %241 ]
  %250 = icmp ne i32 %219, 3
  %251 = icmp ne i32 %221, 3
  %252 = select i1 %250, i1 %251, i1 false
  %253 = select i1 %252, i1 %218, i1 false
  br i1 %253, label %254, label %258

254:                                              ; preds = %248
  %255 = load i32, i32* %47, align 4, !tbaa !150
  %256 = icmp eq i32 %193, %255
  %257 = select i1 %256, i32 1, i32 %249
  br label %258

258:                                              ; preds = %254, %248, %187
  %259 = phi i32 [ 1, %187 ], [ %249, %248 ], [ %257, %254 ]
  %260 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %5, i64 0, i32 1, i32 5
  %261 = load i32, i32* %260, align 8, !tbaa !638
  %262 = icmp eq i32 %261, 0
  br i1 %262, label %273, label %263

263:                                              ; preds = %258
  %264 = load i32, i32* %25, align 8, !tbaa !311
  %265 = and i32 %264, -5
  %266 = icmp eq i32 %265, 0
  br i1 %266, label %273, label %267

267:                                              ; preds = %263
  %268 = load i32, i32* %45, align 8, !tbaa !147
  %269 = and i32 %268, -5
  %270 = icmp eq i32 %269, 0
  %271 = icmp eq i32 %259, 0
  %272 = select i1 %270, i1 true, i1 %271
  br i1 %272, label %293, label %275

273:                                              ; preds = %263, %258
  %274 = icmp eq i32 %259, 0
  br i1 %274, label %293, label %275

275:                                              ; preds = %267, %273
  %276 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %10, i64 0, i32 3
  %277 = call noundef i32 @_Z23lodepng_color_mode_copyP16LodePNGColorModePKS_(%struct.LodePNGColorMode* noundef nonnull %276, %struct.LodePNGColorMode* noundef nonnull %11), !range !127
  %278 = load i32, i32* %160, align 8, !tbaa !324
  %279 = icmp eq i32 %278, 0
  br i1 %279, label %293, label %280

280:                                              ; preds = %275
  %281 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %10, i64 0, i32 5
  %282 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %10, i64 0, i32 6
  %283 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %10, i64 0, i32 7
  %284 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %5, i64 0, i32 3, i32 5
  %285 = load i32, i32* %284, align 4, !tbaa !327
  %286 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %5, i64 0, i32 3, i32 6
  %287 = load i32, i32* %286, align 8, !tbaa !326
  %288 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %5, i64 0, i32 3, i32 7
  %289 = load i32, i32* %288, align 4, !tbaa !325
  %290 = call noundef i32 @_Z19lodepng_convert_rgbPjS_S_jjjPK16LodePNGColorModeS2_(i32* noundef nonnull %281, i32* noundef nonnull %282, i32* noundef nonnull %283, i32 noundef %285, i32 noundef %287, i32 noundef %289, %struct.LodePNGColorMode* noundef nonnull %276, %struct.LodePNGColorMode* noundef nonnull %51)
  %291 = icmp eq i32 %290, 0
  br i1 %291, label %293, label %292

292:                                              ; preds = %280
  store i32 104, i32* %50, align 8, !tbaa !304
  br label %294

293:                                              ; preds = %275, %280, %273, %267
  call void @llvm.lifetime.end.p0i8(i64 1072, i8* nonnull %106) #25
  br label %296

294:                                              ; preds = %292, %156, %184
  call void @llvm.lifetime.end.p0i8(i64 1072, i8* nonnull %106) #25
  br label %653

295:                                              ; preds = %163
  call void @llvm.lifetime.end.p0i8(i64 1072, i8* nonnull %106) #25
  br label %653

296:                                              ; preds = %293, %100
  %297 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %5, i64 0, i32 3, i32 35
  %298 = load i32, i32* %297, align 8, !tbaa !199
  %299 = icmp eq i32 %298, 0
  br i1 %299, label %351, label %300

300:                                              ; preds = %296
  %301 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %5, i64 0, i32 3, i32 37
  %302 = load i8*, i8** %301, align 8, !tbaa !197
  %303 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %5, i64 0, i32 3, i32 38
  %304 = load i32, i32* %303, align 8, !tbaa !198
  %305 = icmp ult i32 %304, 20
  br i1 %305, label %335, label %306

306:                                              ; preds = %300
  %307 = getelementptr inbounds i8, i8* %302, i64 16
  %308 = load i8, i8* %307, align 1, !tbaa !14
  switch i8 %308, label %335 [
    i8 71, label %309
    i8 82, label %322
  ]

309:                                              ; preds = %306
  %310 = getelementptr inbounds i8, i8* %302, i64 17
  %311 = load i8, i8* %310, align 1, !tbaa !14
  %312 = icmp eq i8 %311, 82
  br i1 %312, label %313, label %335

313:                                              ; preds = %309
  %314 = getelementptr inbounds i8, i8* %302, i64 18
  %315 = load i8, i8* %314, align 1, !tbaa !14
  %316 = icmp eq i8 %315, 65
  br i1 %316, label %317, label %335

317:                                              ; preds = %313
  %318 = getelementptr inbounds i8, i8* %302, i64 19
  %319 = load i8, i8* %318, align 1, !tbaa !14
  %320 = icmp eq i8 %319, 89
  %321 = zext i1 %320 to i32
  br label %335

322:                                              ; preds = %306
  %323 = getelementptr inbounds i8, i8* %302, i64 17
  %324 = load i8, i8* %323, align 1, !tbaa !14
  %325 = icmp eq i8 %324, 71
  br i1 %325, label %326, label %335

326:                                              ; preds = %322
  %327 = getelementptr inbounds i8, i8* %302, i64 18
  %328 = load i8, i8* %327, align 1, !tbaa !14
  %329 = icmp eq i8 %328, 66
  br i1 %329, label %330, label %335

330:                                              ; preds = %326
  %331 = getelementptr inbounds i8, i8* %302, i64 19
  %332 = load i8, i8* %331, align 1, !tbaa !14
  %333 = icmp eq i8 %332, 32
  %334 = zext i1 %333 to i32
  br label %335

335:                                              ; preds = %306, %317, %313, %309, %300, %322, %326, %330
  %336 = phi i32 [ 0, %326 ], [ 0, %322 ], [ 0, %330 ], [ 0, %300 ], [ 0, %313 ], [ 0, %309 ], [ %321, %317 ], [ 0, %306 ]
  %337 = phi i32 [ 0, %326 ], [ 0, %322 ], [ %334, %330 ], [ 0, %300 ], [ 0, %313 ], [ 0, %309 ], [ 0, %317 ], [ 0, %306 ]
  %338 = or i32 %337, %336
  %339 = icmp eq i32 %338, 0
  br i1 %339, label %340, label %341

340:                                              ; preds = %335
  store i32 100, i32* %50, align 8, !tbaa !304
  br label %653

341:                                              ; preds = %335
  %342 = load i32, i32* %25, align 8, !tbaa !311
  %343 = and i32 %342, -5
  %344 = icmp eq i32 %343, 0
  %345 = zext i1 %344 to i32
  %346 = icmp eq i32 %336, %345
  br i1 %346, label %351, label %347

347:                                              ; preds = %341
  %348 = load i32, i32* %102, align 8, !tbaa !640
  %349 = icmp eq i32 %348, 0
  %350 = select i1 %349, i32 101, i32 102
  store i32 %350, i32* %50, align 8, !tbaa !304
  br label %653

351:                                              ; preds = %341, %296
  %352 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %10, i64 0, i32 3
  %353 = call fastcc noundef i32 @_ZL24lodepng_color_mode_equalPK16LodePNGColorModeS1_(%struct.LodePNGColorMode* noundef nonnull %88, %struct.LodePNGColorMode* noundef nonnull %352), !range !322
  %354 = icmp eq i32 %353, 0
  br i1 %354, label %355, label %380

355:                                              ; preds = %351
  %356 = zext i32 %3 to i64
  %357 = zext i32 %4 to i64
  %358 = mul nuw i64 %357, %356
  %359 = call noundef i32 @_Z15lodepng_get_bppPK16LodePNGColorMode(%struct.LodePNGColorMode* noundef nonnull %352)
  %360 = zext i32 %359 to i64
  %361 = mul i64 %358, %360
  %362 = add i64 %361, 7
  %363 = lshr i64 %362, 3
  %364 = call noalias i8* @malloc(i64 noundef %363) #25
  %365 = icmp eq i8* %364, null
  %366 = icmp ugt i64 %362, 7
  %367 = select i1 %365, i1 %366, i1 false
  br i1 %367, label %368, label %369

368:                                              ; preds = %355
  store i32 83, i32* %50, align 8, !tbaa !304
  br label %376

369:                                              ; preds = %355
  %370 = load i32, i32* %50, align 8, !tbaa !304
  %371 = icmp eq i32 %370, 0
  br i1 %371, label %372, label %376

372:                                              ; preds = %369
  %373 = call noundef i32 @_Z15lodepng_convertPhPKhPK16LodePNGColorModeS4_jj(i8* noundef %364, i8* noundef %2, %struct.LodePNGColorMode* noundef nonnull %352, %struct.LodePNGColorMode* noundef nonnull %88, i32 noundef %3, i32 noundef %4)
  store i32 %373, i32* %50, align 8, !tbaa !304
  %374 = icmp eq i32 %373, 0
  br i1 %374, label %377, label %375

375:                                              ; preds = %372
  call void @free(i8* noundef %364) #25
  br label %653

376:                                              ; preds = %368, %369
  call void @free(i8* noundef %364) #25
  br label %653

377:                                              ; preds = %372
  %378 = call fastcc noundef i32 @_ZL19preProcessScanlinesPPhPmPKhjjPK11LodePNGInfoPK22LodePNGEncoderSettings(i8** noundef nonnull %7, i64* noundef nonnull %8, i8* noundef %364, i32 noundef %3, i32 noundef %4, %struct.LodePNGInfo* noundef nonnull %10, %struct.LodePNGEncoderSettings* noundef nonnull %66)
  store i32 %378, i32* %50, align 8, !tbaa !304
  call void @free(i8* noundef %364) #25
  %379 = icmp eq i32 %378, 0
  br i1 %379, label %383, label %653

380:                                              ; preds = %351
  %381 = call fastcc noundef i32 @_ZL19preProcessScanlinesPPhPmPKhjjPK11LodePNGInfoPK22LodePNGEncoderSettings(i8** noundef nonnull %7, i64* noundef nonnull %8, i8* noundef %2, i32 noundef %3, i32 noundef %4, %struct.LodePNGInfo* noundef nonnull %10, %struct.LodePNGEncoderSettings* noundef nonnull %66)
  store i32 %381, i32* %50, align 8, !tbaa !304
  %382 = icmp eq i32 %381, 0
  br i1 %382, label %383, label %653

383:                                              ; preds = %377, %380
  %384 = call fastcc noundef i32 @_ZL14writeSignatureP8ucvector(%struct.ucvector* noundef nonnull %9), !range !127
  store i32 %384, i32* %50, align 8, !tbaa !304
  %385 = icmp eq i32 %384, 0
  br i1 %385, label %386, label %653

386:                                              ; preds = %383
  %387 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %352, i64 0, i32 0
  %388 = load i32, i32* %387, align 8, !tbaa !311
  %389 = load i32, i32* %27, align 4, !tbaa !310
  %390 = load i32, i32* %30, align 8, !tbaa !208
  %391 = call fastcc noundef i32 @_ZL13addChunk_IHDRP8ucvectorjj16LodePNGColorTypejj(%struct.ucvector* noundef nonnull %9, i32 noundef %3, i32 noundef %4, i32 noundef %388, i32 noundef %389, i32 noundef %390), !range !127
  store i32 %391, i32* %50, align 8, !tbaa !304
  %392 = icmp eq i32 %391, 0
  br i1 %392, label %393, label %653

393:                                              ; preds = %386
  %394 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %10, i64 0, i32 44, i64 0
  %395 = load i8*, i8** %394, align 8, !tbaa !7
  %396 = icmp eq i8* %395, null
  br i1 %396, label %402, label %397

397:                                              ; preds = %393
  %398 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %10, i64 0, i32 45, i64 0
  %399 = load i64, i64* %398, align 8, !tbaa !3
  %400 = call fastcc noundef i32 @_ZL16addUnknownChunksP8ucvectorPhm(%struct.ucvector* noundef nonnull %9, i8* noundef nonnull %395, i64 noundef %399)
  store i32 %400, i32* %50, align 8, !tbaa !304
  %401 = icmp eq i32 %400, 0
  br i1 %401, label %402, label %653

402:                                              ; preds = %397, %393
  %403 = load i32, i32* %38, align 8, !tbaa !199
  %404 = icmp eq i32 %403, 0
  br i1 %404, label %408, label %405

405:                                              ; preds = %402
  %406 = call fastcc noundef i32 @_ZL13addChunk_iCCPP8ucvectorPK11LodePNGInfoP23LodePNGCompressSettings(%struct.ucvector* noundef nonnull %9, %struct.LodePNGInfo* noundef nonnull %10, %struct.LodePNGCompressSettings* noundef nonnull %67)
  store i32 %406, i32* %50, align 8, !tbaa !304
  %407 = icmp eq i32 %406, 0
  br i1 %407, label %408, label %653

408:                                              ; preds = %405, %402
  %409 = load i32, i32* %37, align 8, !tbaa !214
  %410 = icmp eq i32 %409, 0
  br i1 %410, label %416, label %411

411:                                              ; preds = %408
  %412 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %10, i64 0, i32 34
  %413 = load i32, i32* %412, align 4, !tbaa !320
  %414 = call fastcc noundef i32 @_ZL13addChunk_sRGBP8ucvectorPK11LodePNGInfo(%struct.ucvector* noundef nonnull %9, i32 %413)
  store i32 %414, i32* %50, align 8, !tbaa !304
  %415 = icmp eq i32 %414, 0
  br i1 %415, label %416, label %653

416:                                              ; preds = %411, %408
  %417 = load i32, i32* %35, align 4, !tbaa !212
  %418 = icmp eq i32 %417, 0
  br i1 %418, label %422, label %419

419:                                              ; preds = %416
  %420 = call fastcc noundef i32 @_ZL13addChunk_gAMAP8ucvectorPK11LodePNGInfo(%struct.ucvector* noundef nonnull %9, %struct.LodePNGInfo* noundef nonnull %10), !range !127
  store i32 %420, i32* %50, align 8, !tbaa !304
  %421 = icmp eq i32 %420, 0
  br i1 %421, label %422, label %653

422:                                              ; preds = %419, %416
  %423 = load i32, i32* %36, align 4, !tbaa !213
  %424 = icmp eq i32 %423, 0
  br i1 %424, label %428, label %425

425:                                              ; preds = %422
  %426 = call fastcc noundef i32 @_ZL13addChunk_cHRMP8ucvectorPK11LodePNGInfo(%struct.ucvector* noundef nonnull %9, %struct.LodePNGInfo* noundef nonnull %10), !range !127
  store i32 %426, i32* %50, align 8, !tbaa !304
  %427 = icmp eq i32 %426, 0
  br i1 %427, label %428, label %653

428:                                              ; preds = %425, %422
  %429 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %5, i64 0, i32 3, i32 39
  %430 = load i32, i32* %429, align 4, !tbaa !378
  %431 = icmp eq i32 %430, 0
  br i1 %431, label %435, label %432

432:                                              ; preds = %428
  %433 = call fastcc noundef i32 @_ZL13addChunk_sBITP8ucvectorPK11LodePNGInfo(%struct.ucvector* noundef nonnull %9, %struct.LodePNGInfo* noundef nonnull %10), !range !321
  store i32 %433, i32* %50, align 8, !tbaa !304
  %434 = icmp eq i32 %433, 0
  br i1 %434, label %435, label %653

435:                                              ; preds = %432, %428
  %436 = load i32, i32* %387, align 8, !tbaa !311
  %437 = icmp eq i32 %436, 3
  br i1 %437, label %438, label %441

438:                                              ; preds = %435
  %439 = call fastcc noundef i32 @_ZL13addChunk_PLTEP8ucvectorPK16LodePNGColorMode(%struct.ucvector* noundef nonnull %9, %struct.LodePNGColorMode* noundef nonnull %352), !range !127
  store i32 %439, i32* %50, align 8, !tbaa !304
  %440 = icmp eq i32 %439, 0
  br i1 %440, label %441, label %653

441:                                              ; preds = %438, %435
  %442 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %5, i64 0, i32 1, i32 5
  %443 = load i32, i32* %442, align 8, !tbaa !638
  %444 = icmp eq i32 %443, 0
  br i1 %444, label %452, label %445

445:                                              ; preds = %441
  %446 = load i32, i32* %387, align 8, !tbaa !311
  %447 = and i32 %446, -5
  %448 = icmp eq i32 %447, 2
  br i1 %448, label %449, label %452

449:                                              ; preds = %445
  %450 = call fastcc noundef i32 @_ZL13addChunk_PLTEP8ucvectorPK16LodePNGColorMode(%struct.ucvector* noundef nonnull %9, %struct.LodePNGColorMode* noundef nonnull %352), !range !127
  store i32 %450, i32* %50, align 8, !tbaa !304
  %451 = icmp eq i32 %450, 0
  br i1 %451, label %452, label %653

452:                                              ; preds = %449, %445, %441
  %453 = call fastcc noundef i32 @_ZL13addChunk_tRNSP8ucvectorPK16LodePNGColorMode(%struct.ucvector* noundef nonnull %9, %struct.LodePNGColorMode* noundef nonnull %352)
  store i32 %453, i32* %50, align 8, !tbaa !304
  %454 = icmp eq i32 %453, 0
  br i1 %454, label %455, label %653

455:                                              ; preds = %452
  %456 = load i32, i32* %33, align 8, !tbaa !324
  %457 = icmp eq i32 %456, 0
  br i1 %457, label %461, label %458

458:                                              ; preds = %455
  %459 = call fastcc noundef i32 @_ZL13addChunk_bKGDP8ucvectorPK11LodePNGInfo(%struct.ucvector* noundef nonnull %9, %struct.LodePNGInfo* noundef nonnull %10), !range !127
  store i32 %459, i32* %50, align 8, !tbaa !304
  %460 = icmp eq i32 %459, 0
  br i1 %460, label %461, label %653

461:                                              ; preds = %458, %455
  %462 = load i32, i32* %34, align 4, !tbaa !211
  %463 = icmp eq i32 %462, 0
  br i1 %463, label %467, label %464

464:                                              ; preds = %461
  %465 = call fastcc noundef i32 @_ZL13addChunk_pHYsP8ucvectorPK11LodePNGInfo(%struct.ucvector* noundef nonnull %9, %struct.LodePNGInfo* noundef nonnull %10), !range !127
  store i32 %465, i32* %50, align 8, !tbaa !304
  %466 = icmp eq i32 %465, 0
  br i1 %466, label %467, label %653

467:                                              ; preds = %464, %461
  %468 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %10, i64 0, i32 44, i64 1
  %469 = load i8*, i8** %468, align 8, !tbaa !7
  %470 = icmp eq i8* %469, null
  br i1 %470, label %476, label %471

471:                                              ; preds = %467
  %472 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %10, i64 0, i32 45, i64 1
  %473 = load i64, i64* %472, align 8, !tbaa !3
  %474 = call fastcc noundef i32 @_ZL16addUnknownChunksP8ucvectorPhm(%struct.ucvector* noundef nonnull %9, i8* noundef nonnull %469, i64 noundef %473)
  store i32 %474, i32* %50, align 8, !tbaa !304
  %475 = icmp eq i32 %474, 0
  br i1 %475, label %476, label %653

476:                                              ; preds = %471, %467
  %477 = load i8*, i8** %7, align 8, !tbaa !7
  %478 = load i64, i64* %8, align 8, !tbaa !3
  %479 = call fastcc noundef i32 @_ZL13addChunk_IDATP8ucvectorPKhmP23LodePNGCompressSettings(%struct.ucvector* noundef nonnull %9, i8* noundef %477, i64 noundef %478, %struct.LodePNGCompressSettings* noundef nonnull %67)
  store i32 %479, i32* %50, align 8, !tbaa !304
  %480 = icmp eq i32 %479, 0
  br i1 %480, label %481, label %653

481:                                              ; preds = %476
  %482 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %10, i64 0, i32 16
  %483 = load i32, i32* %482, align 8, !tbaa !355
  %484 = icmp eq i32 %483, 0
  br i1 %484, label %489, label %485

485:                                              ; preds = %481
  %486 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %10, i64 0, i32 17
  %487 = call fastcc noundef i32 @_ZL13addChunk_tIMEP8ucvectorPK11LodePNGTime(%struct.ucvector* noundef nonnull %9, %struct.LodePNGTime* noundef nonnull %486), !range !127
  store i32 %487, i32* %50, align 8, !tbaa !304
  %488 = icmp eq i32 %487, 0
  br i1 %488, label %489, label %653

489:                                              ; preds = %485, %481
  %490 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %10, i64 0, i32 8
  %491 = load i64, i64* %490, align 8, !tbaa !165
  %492 = icmp eq i64 %491, 0
  br i1 %492, label %541, label %493

493:                                              ; preds = %489
  %494 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %10, i64 0, i32 9
  %495 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %5, i64 0, i32 1, i32 7
  %496 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %10, i64 0, i32 10
  br label %497

497:                                              ; preds = %493, %533
  %498 = phi i64 [ 0, %493 ], [ %534, %533 ]
  %499 = load i8**, i8*** %494, align 8, !tbaa !162
  %500 = getelementptr inbounds i8*, i8** %499, i64 %498
  %501 = load i8*, i8** %500, align 8, !tbaa !7
  br label %502

502:                                              ; preds = %502, %497
  %503 = phi i8* [ %501, %497 ], [ %506, %502 ]
  %504 = load i8, i8* %503, align 1, !tbaa !14
  %505 = icmp eq i8 %504, 0
  %506 = getelementptr inbounds i8, i8* %503, i64 1
  br i1 %505, label %507, label %502

507:                                              ; preds = %502
  %508 = ptrtoint i8* %503 to i64
  %509 = ptrtoint i8* %501 to i64
  %510 = sub i64 %508, %509
  %511 = icmp ugt i64 %510, 79
  br i1 %511, label %512, label %513

512:                                              ; preds = %507
  store i32 66, i32* %50, align 8, !tbaa !304
  br label %653

513:                                              ; preds = %507, %513
  %514 = phi i8* [ %517, %513 ], [ %501, %507 ]
  %515 = load i8, i8* %514, align 1, !tbaa !14
  %516 = icmp eq i8 %515, 0
  %517 = getelementptr inbounds i8, i8* %514, i64 1
  br i1 %516, label %518, label %513

518:                                              ; preds = %513
  %519 = icmp eq i8* %514, %501
  br i1 %519, label %520, label %521

520:                                              ; preds = %518
  store i32 67, i32* %50, align 8, !tbaa !304
  br label %653

521:                                              ; preds = %518
  %522 = load i32, i32* %495, align 8, !tbaa !644
  %523 = icmp eq i32 %522, 0
  %524 = load i8**, i8*** %496, align 8, !tbaa !166
  %525 = getelementptr inbounds i8*, i8** %524, i64 %498
  %526 = load i8*, i8** %525, align 8, !tbaa !7
  br i1 %523, label %530, label %527

527:                                              ; preds = %521
  %528 = call fastcc noundef i32 @_ZL13addChunk_zTXtP8ucvectorPKcS2_P23LodePNGCompressSettings(%struct.ucvector* noundef nonnull %9, i8* noundef %501, i8* noundef %526, %struct.LodePNGCompressSettings* noundef nonnull %67)
  store i32 %528, i32* %50, align 8, !tbaa !304
  %529 = icmp eq i32 %528, 0
  br i1 %529, label %533, label %653

530:                                              ; preds = %521
  %531 = call fastcc noundef i32 @_ZL13addChunk_tEXtP8ucvectorPKcS2_(%struct.ucvector* noundef nonnull %9, i8* noundef %501, i8* noundef %526), !range !315
  store i32 %531, i32* %50, align 8, !tbaa !304
  %532 = icmp eq i32 %531, 0
  br i1 %532, label %533, label %653

533:                                              ; preds = %527, %530
  %534 = add i64 %498, 1
  %535 = load i64, i64* %490, align 8, !tbaa !165
  %536 = icmp eq i64 %534, %535
  br i1 %536, label %537, label %497

537:                                              ; preds = %533
  %538 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %5, i64 0, i32 1, i32 6
  %539 = load i32, i32* %538, align 4, !tbaa !645
  %540 = icmp eq i32 %539, 0
  br i1 %540, label %591, label %545

541:                                              ; preds = %489
  %542 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %5, i64 0, i32 1, i32 6
  %543 = load i32, i32* %542, align 4, !tbaa !645
  %544 = icmp eq i32 %543, 0
  br i1 %544, label %591, label %587

545:                                              ; preds = %537
  %546 = icmp eq i64 %534, 0
  br i1 %546, label %587, label %547

547:                                              ; preds = %545
  %548 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %10, i64 0, i32 9
  %549 = load i8**, i8*** %548, align 8, !tbaa !162
  br label %550

550:                                              ; preds = %547, %584
  %551 = phi i64 [ 0, %547 ], [ %585, %584 ]
  %552 = getelementptr inbounds i8*, i8** %549, i64 %551
  %553 = load i8*, i8** %552, align 8, !tbaa !7
  %554 = load i8, i8* %553, align 1, !tbaa !14
  %555 = icmp eq i8 %554, 76
  br i1 %555, label %556, label %584

556:                                              ; preds = %550
  %557 = getelementptr inbounds i8, i8* %553, i64 1
  %558 = load i8, i8* %557, align 1, !tbaa !14
  %559 = icmp eq i8 %558, 111
  br i1 %559, label %560, label %584

560:                                              ; preds = %556
  %561 = getelementptr inbounds i8, i8* %553, i64 2
  %562 = load i8, i8* %561, align 1, !tbaa !14
  %563 = icmp eq i8 %562, 100
  br i1 %563, label %564, label %584

564:                                              ; preds = %560
  %565 = getelementptr inbounds i8, i8* %553, i64 3
  %566 = load i8, i8* %565, align 1, !tbaa !14
  %567 = icmp eq i8 %566, 101
  br i1 %567, label %568, label %584

568:                                              ; preds = %564
  %569 = getelementptr inbounds i8, i8* %553, i64 4
  %570 = load i8, i8* %569, align 1, !tbaa !14
  %571 = icmp eq i8 %570, 80
  br i1 %571, label %572, label %584

572:                                              ; preds = %568
  %573 = getelementptr inbounds i8, i8* %553, i64 5
  %574 = load i8, i8* %573, align 1, !tbaa !14
  %575 = icmp eq i8 %574, 78
  br i1 %575, label %576, label %584

576:                                              ; preds = %572
  %577 = getelementptr inbounds i8, i8* %553, i64 6
  %578 = load i8, i8* %577, align 1, !tbaa !14
  %579 = icmp eq i8 %578, 71
  br i1 %579, label %580, label %584

580:                                              ; preds = %576
  %581 = getelementptr inbounds i8, i8* %553, i64 7
  %582 = load i8, i8* %581, align 1, !tbaa !14
  %583 = icmp eq i8 %582, 0
  br i1 %583, label %591, label %584

584:                                              ; preds = %550, %556, %560, %564, %568, %572, %576, %580
  %585 = add nuw i64 %551, 1
  %586 = icmp eq i64 %551, %498
  br i1 %586, label %587, label %550

587:                                              ; preds = %584, %541, %545
  %588 = load i8*, i8** @LODEPNG_VERSION_STRING, align 8, !tbaa !7
  %589 = call fastcc noundef i32 @_ZL13addChunk_tEXtP8ucvectorPKcS2_(%struct.ucvector* noundef nonnull %9, i8* noundef getelementptr inbounds ([8 x i8], [8 x i8]* @.str.16, i64 0, i64 0), i8* noundef %588), !range !315
  store i32 %589, i32* %50, align 8, !tbaa !304
  %590 = icmp eq i32 %589, 0
  br i1 %590, label %591, label %653

591:                                              ; preds = %580, %541, %587, %537
  %592 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %10, i64 0, i32 11
  %593 = load i64, i64* %592, align 8, !tbaa !175
  %594 = icmp eq i64 %593, 0
  br i1 %594, label %642, label %595

595:                                              ; preds = %591
  %596 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %10, i64 0, i32 12
  %597 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %5, i64 0, i32 1, i32 7
  %598 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %10, i64 0, i32 13
  %599 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %10, i64 0, i32 14
  %600 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %10, i64 0, i32 15
  br label %604

601:                                              ; preds = %628
  %602 = load i64, i64* %592, align 8, !tbaa !175
  %603 = icmp eq i64 %641, %602
  br i1 %603, label %642, label %604

604:                                              ; preds = %595, %601
  %605 = phi i64 [ 0, %595 ], [ %641, %601 ]
  %606 = load i8**, i8*** %596, align 8, !tbaa !176
  %607 = getelementptr inbounds i8*, i8** %606, i64 %605
  %608 = load i8*, i8** %607, align 8, !tbaa !7
  br label %609

609:                                              ; preds = %609, %604
  %610 = phi i8* [ %608, %604 ], [ %613, %609 ]
  %611 = load i8, i8* %610, align 1, !tbaa !14
  %612 = icmp eq i8 %611, 0
  %613 = getelementptr inbounds i8, i8* %610, i64 1
  br i1 %612, label %614, label %609

614:                                              ; preds = %609
  %615 = ptrtoint i8* %610 to i64
  %616 = ptrtoint i8* %608 to i64
  %617 = sub i64 %615, %616
  %618 = icmp ugt i64 %617, 79
  br i1 %618, label %619, label %620

619:                                              ; preds = %614
  store i32 66, i32* %50, align 8, !tbaa !304
  br label %653

620:                                              ; preds = %614, %620
  %621 = phi i8* [ %624, %620 ], [ %608, %614 ]
  %622 = load i8, i8* %621, align 1, !tbaa !14
  %623 = icmp eq i8 %622, 0
  %624 = getelementptr inbounds i8, i8* %621, i64 1
  br i1 %623, label %625, label %620

625:                                              ; preds = %620
  %626 = icmp eq i8* %621, %608
  br i1 %626, label %627, label %628

627:                                              ; preds = %625
  store i32 67, i32* %50, align 8, !tbaa !304
  br label %653

628:                                              ; preds = %625
  %629 = load i32, i32* %597, align 8, !tbaa !644
  %630 = load i8**, i8*** %598, align 8, !tbaa !177
  %631 = getelementptr inbounds i8*, i8** %630, i64 %605
  %632 = load i8*, i8** %631, align 8, !tbaa !7
  %633 = load i8**, i8*** %599, align 8, !tbaa !178
  %634 = getelementptr inbounds i8*, i8** %633, i64 %605
  %635 = load i8*, i8** %634, align 8, !tbaa !7
  %636 = load i8**, i8*** %600, align 8, !tbaa !179
  %637 = getelementptr inbounds i8*, i8** %636, i64 %605
  %638 = load i8*, i8** %637, align 8, !tbaa !7
  %639 = call fastcc noundef i32 @_ZL13addChunk_iTXtP8ucvectorjPKcS2_S2_S2_P23LodePNGCompressSettings(%struct.ucvector* noundef nonnull %9, i32 noundef %629, i8* noundef %608, i8* noundef %632, i8* noundef %635, i8* noundef %638, %struct.LodePNGCompressSettings* noundef nonnull %67)
  store i32 %639, i32* %50, align 8, !tbaa !304
  %640 = icmp eq i32 %639, 0
  %641 = add i64 %605, 1
  br i1 %640, label %601, label %653

642:                                              ; preds = %601, %591
  %643 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %10, i64 0, i32 44, i64 2
  %644 = load i8*, i8** %643, align 8, !tbaa !7
  %645 = icmp eq i8* %644, null
  br i1 %645, label %651, label %646

646:                                              ; preds = %642
  %647 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %10, i64 0, i32 45, i64 2
  %648 = load i64, i64* %647, align 8, !tbaa !3
  %649 = call fastcc noundef i32 @_ZL16addUnknownChunksP8ucvectorPhm(%struct.ucvector* noundef nonnull %9, i8* noundef nonnull %644, i64 noundef %648)
  store i32 %649, i32* %50, align 8, !tbaa !304
  %650 = icmp eq i32 %649, 0
  br i1 %650, label %651, label %653

651:                                              ; preds = %646, %642
  %652 = call fastcc noundef i32 @_ZL13addChunk_IENDP8ucvector(%struct.ucvector* noundef nonnull %9), !range !127
  store i32 %652, i32* %50, align 8, !tbaa !304
  br label %653

653:                                              ; preds = %527, %530, %628, %376, %651, %295, %340, %347, %512, %520, %619, %627, %383, %386, %397, %405, %411, %419, %425, %432, %438, %449, %452, %458, %464, %471, %476, %485, %646, %587, %375, %294, %98, %85, %377, %380, %76, %71, %64
  call void @_Z20lodepng_info_cleanupP11LodePNGInfo(%struct.LodePNGInfo* noundef nonnull %10)
  %654 = load i8*, i8** %7, align 8, !tbaa !7
  call void @free(i8* noundef %654) #25
  %655 = load i8*, i8** %48, align 8, !tbaa !151
  %656 = icmp eq i8* %655, null
  br i1 %656, label %658, label %657

657:                                              ; preds = %653
  call void @free(i8* noundef nonnull %655) #25
  br label %658

658:                                              ; preds = %657, %653
  %659 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %9, i64 0, i32 0
  %660 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %9, i64 0, i32 1
  %661 = load i8*, i8** %659, align 8, !tbaa !39
  store i8* %661, i8** %0, align 8, !tbaa !7
  %662 = load i64, i64* %660, align 8, !tbaa !44
  store i64 %662, i64* %1, align 8, !tbaa !3
  %663 = load i32, i32* %50, align 8, !tbaa !304
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %23) #25
  call void @llvm.lifetime.end.p0i8(i64 328, i8* nonnull %20) #25
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %19) #25
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %18) #25
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %17) #25
  ret i32 %663
}

; Function Attrs: nounwind uwtable
define internal fastcc noundef i32 @_ZL23lodepng_color_stats_addP17LodePNGColorStatsjjjj(%struct.LodePNGColorStats* noundef %0, i32 noundef %1, i32 noundef %2, i32 noundef %3) unnamed_addr #3 {
  %5 = alloca [8 x i8], align 1
  %6 = alloca %struct.LodePNGColorMode, align 8
  %7 = getelementptr inbounds [8 x i8], [8 x i8]* %5, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %7) #25
  %8 = bitcast %struct.LodePNGColorMode* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %8) #25
  %9 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %6, i64 0, i32 4
  %10 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %6, i64 0, i32 0
  %11 = bitcast i32* %9 to i8*
  call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(16) %11, i8 0, i64 16, i1 false) #25
  %12 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %6, i64 0, i32 1
  %13 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %6, i64 0, i32 2
  %14 = bitcast i8** %13 to i8*
  call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(16) %14, i8 0, i64 16, i1 false) #25
  %15 = lshr i32 %1, 8
  %16 = trunc i32 %15 to i8
  store i8 %16, i8* %7, align 1, !tbaa !14
  %17 = trunc i32 %1 to i8
  %18 = getelementptr inbounds [8 x i8], [8 x i8]* %5, i64 0, i64 1
  store i8 %17, i8* %18, align 1, !tbaa !14
  %19 = lshr i32 %2, 8
  %20 = trunc i32 %19 to i8
  %21 = getelementptr inbounds [8 x i8], [8 x i8]* %5, i64 0, i64 2
  store i8 %20, i8* %21, align 1, !tbaa !14
  %22 = trunc i32 %2 to i8
  %23 = getelementptr inbounds [8 x i8], [8 x i8]* %5, i64 0, i64 3
  store i8 %22, i8* %23, align 1, !tbaa !14
  %24 = lshr i32 %3, 8
  %25 = trunc i32 %24 to i8
  %26 = getelementptr inbounds [8 x i8], [8 x i8]* %5, i64 0, i64 4
  store i8 %25, i8* %26, align 1, !tbaa !14
  %27 = trunc i32 %3 to i8
  %28 = getelementptr inbounds [8 x i8], [8 x i8]* %5, i64 0, i64 5
  store i8 %27, i8* %28, align 1, !tbaa !14
  %29 = getelementptr inbounds [8 x i8], [8 x i8]* %5, i64 0, i64 6
  store i8 -1, i8* %29, align 1, !tbaa !14
  %30 = getelementptr inbounds [8 x i8], [8 x i8]* %5, i64 0, i64 7
  store i8 -1, i8* %30, align 1, !tbaa !14
  store i32 16, i32* %12, align 4, !tbaa !150
  store i32 6, i32* %10, align 8, !tbaa !147
  %31 = call noundef i32 @_Z27lodepng_compute_color_statsP17LodePNGColorStatsPKhjjPK16LodePNGColorMode(%struct.LodePNGColorStats* noundef %0, i8* noundef nonnull %7, i32 noundef 1, i32 noundef 1, %struct.LodePNGColorMode* noundef nonnull %6)
  %32 = load i8*, i8** %13, align 8, !tbaa !151
  %33 = icmp eq i8* %32, null
  br i1 %33, label %35, label %34

34:                                               ; preds = %4
  call void @free(i8* noundef nonnull %32) #25
  br label %35

35:                                               ; preds = %4, %34
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %8) #25
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7) #25
  ret i32 %31
}

; Function Attrs: nounwind uwtable
define internal fastcc noundef i32 @_ZL17auto_choose_colorP16LodePNGColorModePKS_PK17LodePNGColorStats(%struct.LodePNGColorMode* nocapture noundef %0, %struct.LodePNGColorMode* nocapture noundef readonly %1, %struct.LodePNGColorStats* nocapture noundef readonly %2) unnamed_addr #3 {
  %4 = getelementptr inbounds %struct.LodePNGColorStats, %struct.LodePNGColorStats* %2, i64 0, i32 9
  %5 = load i64, i64* %4, align 8, !tbaa !293
  %6 = getelementptr inbounds %struct.LodePNGColorStats, %struct.LodePNGColorStats* %2, i64 0, i32 5
  %7 = load i32, i32* %6, align 8, !tbaa !289
  %8 = getelementptr inbounds %struct.LodePNGColorStats, %struct.LodePNGColorStats* %2, i64 0, i32 1
  %9 = load i32, i32* %8, align 4, !tbaa !303
  %10 = getelementptr inbounds %struct.LodePNGColorStats, %struct.LodePNGColorStats* %2, i64 0, i32 8
  %11 = load i32, i32* %10, align 8, !tbaa !292
  %12 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %0, i64 0, i32 4
  store i32 0, i32* %12, align 8, !tbaa !161
  %13 = icmp ne i32 %9, 0
  %14 = icmp ult i64 %5, 17
  %15 = select i1 %13, i1 %14, i1 false
  %16 = icmp ugt i32 %11, 8
  %17 = select i1 %16, i32 %11, i32 8
  %18 = select i1 %15, i32 %17, i32 %11
  %19 = getelementptr inbounds %struct.LodePNGColorStats, %struct.LodePNGColorStats* %2, i64 0, i32 0
  %20 = load i32, i32* %19, align 8, !tbaa !299
  %21 = icmp eq i32 %20, 0
  %22 = getelementptr inbounds %struct.LodePNGColorStats, %struct.LodePNGColorStats* %2, i64 0, i32 11
  %23 = load i32, i32* %22, align 4, !tbaa !295
  %24 = icmp ne i32 %23, 0
  %25 = select i1 %24, i1 %21, i1 false
  %26 = xor i1 %25, true
  %27 = icmp ult i32 %18, 8
  %28 = select i1 %26, i1 %27, i1 false
  %29 = select i1 %28, i32 8, i32 %18
  %30 = getelementptr inbounds %struct.LodePNGColorStats, %struct.LodePNGColorStats* %2, i64 0, i32 6
  %31 = load i32, i32* %30, align 4, !tbaa !291
  %32 = zext i32 %31 to i64
  %33 = icmp ult i32 %31, 3
  br i1 %33, label %39, label %34

34:                                               ; preds = %3
  %35 = icmp ult i32 %31, 5
  br i1 %35, label %39, label %36

36:                                               ; preds = %34
  %37 = icmp ult i32 %31, 17
  %38 = select i1 %37, i32 4, i32 8
  br label %39

39:                                               ; preds = %36, %34, %3
  %40 = phi i32 [ 1, %3 ], [ %38, %36 ], [ 2, %34 ]
  %41 = icmp ult i32 %31, 257
  %42 = icmp ult i32 %29, 9
  %43 = select i1 %41, i1 %42, i1 false
  %44 = icmp ne i32 %31, 0
  %45 = and i1 %44, %43
  %46 = shl nuw nsw i64 %32, 1
  %47 = icmp uge i64 %5, %46
  %48 = icmp ne i32 %7, 0
  %49 = select i1 %15, i1 true, i1 %48
  %50 = select i1 %26, i1 true, i1 %49
  %51 = icmp ugt i32 %29, %40
  %52 = select i1 %50, i1 true, i1 %51
  %53 = getelementptr inbounds %struct.LodePNGColorStats, %struct.LodePNGColorStats* %2, i64 0, i32 10
  %54 = load i32, i32* %53, align 8, !tbaa !294
  %55 = icmp ne i32 %54, 0
  %56 = select i1 %55, i1 %52, i1 false
  %57 = select i1 %56, i1 %47, i1 false
  %58 = select i1 %57, i1 %45, i1 false
  br i1 %58, label %59, label %178

59:                                               ; preds = %39
  %60 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %0, i64 0, i32 2
  %61 = load i8*, i8** %60, align 8, !tbaa !151
  %62 = icmp eq i8* %61, null
  br i1 %62, label %64, label %63

63:                                               ; preds = %59
  tail call void @free(i8* noundef nonnull %61) #25
  br label %64

64:                                               ; preds = %59, %63
  %65 = bitcast i8** %60 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(16) %65, i8 0, i64 16, i1 false) #25
  %66 = load i32, i32* %30, align 4, !tbaa !291
  %67 = icmp eq i32 %66, 0
  br i1 %67, label %141, label %68

68:                                               ; preds = %64
  %69 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %0, i64 0, i32 3
  br label %70

70:                                               ; preds = %139, %68
  %71 = phi i64 [ 0, %68 ], [ %134, %139 ]
  %72 = phi i8* [ null, %68 ], [ %140, %139 ]
  %73 = phi i64 [ 0, %68 ], [ %135, %139 ]
  %74 = shl i64 %73, 2
  %75 = getelementptr inbounds %struct.LodePNGColorStats, %struct.LodePNGColorStats* %2, i64 0, i32 7, i64 %74
  %76 = load i8, i8* %75, align 1, !tbaa !14
  %77 = or i64 %74, 1
  %78 = getelementptr inbounds %struct.LodePNGColorStats, %struct.LodePNGColorStats* %2, i64 0, i32 7, i64 %77
  %79 = load i8, i8* %78, align 1, !tbaa !14
  %80 = or i64 %74, 2
  %81 = getelementptr inbounds %struct.LodePNGColorStats, %struct.LodePNGColorStats* %2, i64 0, i32 7, i64 %80
  %82 = load i8, i8* %81, align 1, !tbaa !14
  %83 = or i64 %74, 3
  %84 = getelementptr inbounds %struct.LodePNGColorStats, %struct.LodePNGColorStats* %2, i64 0, i32 7, i64 %83
  %85 = load i8, i8* %84, align 1, !tbaa !14
  %86 = icmp eq i8* %72, null
  br i1 %86, label %87, label %111

87:                                               ; preds = %70
  %88 = tail call noalias dereferenceable_or_null(1024) i8* @malloc(i64 noundef 1024) #25
  store i8* %88, i8** %60, align 8, !tbaa !151
  %89 = icmp eq i8* %88, null
  br i1 %89, label %141, label %90

90:                                               ; preds = %87, %90
  %91 = phi i8* [ %106, %90 ], [ %88, %87 ]
  %92 = phi i64 [ %104, %90 ], [ 0, %87 ]
  %93 = shl i64 %92, 2
  %94 = getelementptr inbounds i8, i8* %91, i64 %93
  store i8 0, i8* %94, align 1, !tbaa !14
  %95 = load i8*, i8** %60, align 8, !tbaa !151
  %96 = or i64 %93, 1
  %97 = getelementptr inbounds i8, i8* %95, i64 %96
  store i8 0, i8* %97, align 1, !tbaa !14
  %98 = load i8*, i8** %60, align 8, !tbaa !151
  %99 = or i64 %93, 2
  %100 = getelementptr inbounds i8, i8* %98, i64 %99
  store i8 0, i8* %100, align 1, !tbaa !14
  %101 = load i8*, i8** %60, align 8, !tbaa !151
  %102 = or i64 %93, 3
  %103 = getelementptr inbounds i8, i8* %101, i64 %102
  store i8 -1, i8* %103, align 1, !tbaa !14
  %104 = add nuw nsw i64 %92, 1
  %105 = icmp eq i64 %104, 256
  %106 = load i8*, i8** %60, align 8, !tbaa !151
  br i1 %105, label %107, label %90

107:                                              ; preds = %90
  %108 = icmp eq i8* %106, null
  br i1 %108, label %141, label %109

109:                                              ; preds = %107
  %110 = load i64, i64* %69, align 8, !tbaa !156
  br label %111

111:                                              ; preds = %109, %70
  %112 = phi i64 [ %110, %109 ], [ %71, %70 ]
  %113 = phi i8* [ %106, %109 ], [ %72, %70 ]
  %114 = icmp ugt i64 %112, 255
  br i1 %114, label %141, label %115

115:                                              ; preds = %111
  %116 = shl nuw nsw i64 %112, 2
  %117 = getelementptr inbounds i8, i8* %113, i64 %116
  store i8 %76, i8* %117, align 1, !tbaa !14
  %118 = load i8*, i8** %60, align 8, !tbaa !151
  %119 = load i64, i64* %69, align 8, !tbaa !156
  %120 = shl i64 %119, 2
  %121 = or i64 %120, 1
  %122 = getelementptr inbounds i8, i8* %118, i64 %121
  store i8 %79, i8* %122, align 1, !tbaa !14
  %123 = load i8*, i8** %60, align 8, !tbaa !151
  %124 = load i64, i64* %69, align 8, !tbaa !156
  %125 = shl i64 %124, 2
  %126 = or i64 %125, 2
  %127 = getelementptr inbounds i8, i8* %123, i64 %126
  store i8 %82, i8* %127, align 1, !tbaa !14
  %128 = load i8*, i8** %60, align 8, !tbaa !151
  %129 = load i64, i64* %69, align 8, !tbaa !156
  %130 = shl i64 %129, 2
  %131 = or i64 %130, 3
  %132 = getelementptr inbounds i8, i8* %128, i64 %131
  store i8 %85, i8* %132, align 1, !tbaa !14
  %133 = load i64, i64* %69, align 8, !tbaa !156
  %134 = add i64 %133, 1
  store i64 %134, i64* %69, align 8, !tbaa !156
  %135 = add i64 %73, 1
  %136 = load i32, i32* %30, align 4, !tbaa !291
  %137 = zext i32 %136 to i64
  %138 = icmp eq i64 %135, %137
  br i1 %138, label %141, label %139

139:                                              ; preds = %115
  %140 = load i8*, i8** %60, align 8, !tbaa !151
  br label %70

141:                                              ; preds = %115, %107, %111, %87, %64
  %142 = phi i32 [ 0, %64 ], [ 83, %87 ], [ 108, %111 ], [ 83, %107 ], [ 0, %115 ]
  %143 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %0, i64 0, i32 0
  store i32 3, i32* %143, align 8, !tbaa !147
  %144 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %0, i64 0, i32 1
  store i32 %40, i32* %144, align 4, !tbaa !150
  %145 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %1, i64 0, i32 0
  %146 = load i32, i32* %145, align 8, !tbaa !147
  %147 = icmp eq i32 %146, 3
  br i1 %147, label %148, label %204

148:                                              ; preds = %141
  %149 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %1, i64 0, i32 3
  %150 = load i64, i64* %149, align 8, !tbaa !156
  %151 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %0, i64 0, i32 3
  %152 = load i64, i64* %151, align 8, !tbaa !156
  %153 = icmp ult i64 %150, %152
  br i1 %153, label %204, label %154

154:                                              ; preds = %148
  %155 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %1, i64 0, i32 1
  %156 = load i32, i32* %155, align 4, !tbaa !150
  %157 = icmp eq i32 %156, %40
  br i1 %157, label %158, label %204

158:                                              ; preds = %154
  %159 = load i8*, i8** %60, align 8, !tbaa !151
  %160 = icmp eq i8* %159, null
  br i1 %160, label %162, label %161

161:                                              ; preds = %158
  tail call void @free(i8* noundef nonnull %159) #25
  br label %162

162:                                              ; preds = %161, %158
  %163 = bitcast %struct.LodePNGColorMode* %0 to i8*
  %164 = bitcast %struct.LodePNGColorMode* %1 to i8*
  %165 = bitcast i8** %60 to i8*
  call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(16) %165, i8 0, i64 16, i1 false)
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef nonnull align 1 dereferenceable(40) %163, i8* noundef nonnull align 1 dereferenceable(40) %164, i64 40, i1 false) #25, !tbaa !14, !alias.scope !646
  %166 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %1, i64 0, i32 2
  %167 = load i8*, i8** %166, align 8, !tbaa !151
  %168 = icmp eq i8* %167, null
  br i1 %168, label %204, label %169

169:                                              ; preds = %162
  %170 = tail call noalias dereferenceable_or_null(1024) i8* @malloc(i64 noundef 1024) #25
  store i8* %170, i8** %60, align 8, !tbaa !151
  %171 = icmp eq i8* %170, null
  br i1 %171, label %204, label %172

172:                                              ; preds = %169
  %173 = load i64, i64* %149, align 8, !tbaa !156
  %174 = shl i64 %173, 2
  %175 = icmp eq i64 %174, 0
  br i1 %175, label %204, label %176

176:                                              ; preds = %172
  %177 = load i8*, i8** %166, align 8, !tbaa !151
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %170, i8* align 1 %177, i64 %174, i1 false) #25, !tbaa !14, !alias.scope !650
  br label %204

178:                                              ; preds = %39
  %179 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %0, i64 0, i32 1
  store i32 %29, i32* %179, align 4, !tbaa !150
  %180 = select i1 %25, i32 4, i32 6
  %181 = select i1 %25, i32 0, i32 2
  %182 = select i1 %49, i32 %180, i32 %181
  %183 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %0, i64 0, i32 0
  store i32 %182, i32* %183, align 8, !tbaa !147
  %184 = icmp eq i32 %9, 0
  %185 = select i1 %184, i1 true, i1 %14
  br i1 %185, label %204, label %186

186:                                              ; preds = %178
  %187 = shl nsw i32 -1, %29
  %188 = xor i32 %187, -1
  %189 = getelementptr inbounds %struct.LodePNGColorStats, %struct.LodePNGColorStats* %2, i64 0, i32 2
  %190 = load i16, i16* %189, align 8, !tbaa !300
  %191 = zext i16 %190 to i32
  %192 = and i32 %191, %188
  %193 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %0, i64 0, i32 5
  store i32 %192, i32* %193, align 4, !tbaa !235
  %194 = getelementptr inbounds %struct.LodePNGColorStats, %struct.LodePNGColorStats* %2, i64 0, i32 3
  %195 = load i16, i16* %194, align 2, !tbaa !301
  %196 = zext i16 %195 to i32
  %197 = and i32 %196, %188
  %198 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %0, i64 0, i32 6
  store i32 %197, i32* %198, align 8, !tbaa !236
  %199 = getelementptr inbounds %struct.LodePNGColorStats, %struct.LodePNGColorStats* %2, i64 0, i32 4
  %200 = load i16, i16* %199, align 4, !tbaa !302
  %201 = zext i16 %200 to i32
  %202 = and i32 %201, %188
  %203 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %0, i64 0, i32 7
  store i32 %202, i32* %203, align 4, !tbaa !237
  store i32 1, i32* %12, align 8, !tbaa !161
  br label %204

204:                                              ; preds = %169, %176, %172, %162, %141, %148, %154, %178, %186
  %205 = phi i32 [ 0, %186 ], [ 0, %178 ], [ %142, %154 ], [ %142, %148 ], [ %142, %141 ], [ %142, %162 ], [ %142, %172 ], [ %142, %176 ], [ %142, %169 ]
  ret i32 %205
}

; Function Attrs: nofree norecurse nosync nounwind readonly uwtable
define internal fastcc noundef i32 @_ZL24lodepng_color_mode_equalPK16LodePNGColorModeS1_(%struct.LodePNGColorMode* nocapture noundef readonly %0, %struct.LodePNGColorMode* nocapture noundef readonly %1) unnamed_addr #13 {
  %3 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %0, i64 0, i32 0
  %4 = load i32, i32* %3, align 8, !tbaa !147
  %5 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %1, i64 0, i32 0
  %6 = load i32, i32* %5, align 8, !tbaa !147
  %7 = icmp eq i32 %4, %6
  br i1 %7, label %8, label %85

8:                                                ; preds = %2
  %9 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %0, i64 0, i32 1
  %10 = load i32, i32* %9, align 4, !tbaa !150
  %11 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %1, i64 0, i32 1
  %12 = load i32, i32* %11, align 4, !tbaa !150
  %13 = icmp eq i32 %10, %12
  br i1 %13, label %14, label %85

14:                                               ; preds = %8
  %15 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %0, i64 0, i32 4
  %16 = load i32, i32* %15, align 8, !tbaa !161
  %17 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %1, i64 0, i32 4
  %18 = load i32, i32* %17, align 8, !tbaa !161
  %19 = icmp eq i32 %16, %18
  br i1 %19, label %20, label %85

20:                                               ; preds = %14
  %21 = icmp eq i32 %16, 0
  br i1 %21, label %40, label %22

22:                                               ; preds = %20
  %23 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %0, i64 0, i32 5
  %24 = load i32, i32* %23, align 4, !tbaa !235
  %25 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %1, i64 0, i32 5
  %26 = load i32, i32* %25, align 4, !tbaa !235
  %27 = icmp eq i32 %24, %26
  br i1 %27, label %28, label %85

28:                                               ; preds = %22
  %29 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %0, i64 0, i32 6
  %30 = load i32, i32* %29, align 8, !tbaa !236
  %31 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %1, i64 0, i32 6
  %32 = load i32, i32* %31, align 8, !tbaa !236
  %33 = icmp eq i32 %30, %32
  br i1 %33, label %34, label %85

34:                                               ; preds = %28
  %35 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %0, i64 0, i32 7
  %36 = load i32, i32* %35, align 4, !tbaa !237
  %37 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %1, i64 0, i32 7
  %38 = load i32, i32* %37, align 4, !tbaa !237
  %39 = icmp eq i32 %36, %38
  br i1 %39, label %40, label %85

40:                                               ; preds = %34, %20
  %41 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %0, i64 0, i32 3
  %42 = load i64, i64* %41, align 8, !tbaa !156
  %43 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %1, i64 0, i32 3
  %44 = load i64, i64* %43, align 8, !tbaa !156
  %45 = icmp eq i64 %42, %44
  br i1 %45, label %46, label %85

46:                                               ; preds = %40
  %47 = shl i64 %42, 2
  %48 = icmp eq i64 %47, 0
  br i1 %48, label %85, label %49

49:                                               ; preds = %46
  %50 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %0, i64 0, i32 2
  %51 = load i8*, i8** %50, align 8, !tbaa !151
  %52 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %1, i64 0, i32 2
  %53 = load i8*, i8** %52, align 8, !tbaa !151
  br label %77

54:                                               ; preds = %77
  %55 = getelementptr inbounds i8, i8* %51, i64 %84
  %56 = load i8, i8* %55, align 1, !tbaa !14
  %57 = getelementptr inbounds i8, i8* %53, i64 %84
  %58 = load i8, i8* %57, align 1, !tbaa !14
  %59 = icmp eq i8 %56, %58
  %60 = or i64 %78, 2
  br i1 %59, label %61, label %85

61:                                               ; preds = %54
  %62 = getelementptr inbounds i8, i8* %51, i64 %60
  %63 = load i8, i8* %62, align 1, !tbaa !14
  %64 = getelementptr inbounds i8, i8* %53, i64 %60
  %65 = load i8, i8* %64, align 1, !tbaa !14
  %66 = icmp eq i8 %63, %65
  %67 = or i64 %78, 3
  br i1 %66, label %68, label %85

68:                                               ; preds = %61
  %69 = getelementptr inbounds i8, i8* %51, i64 %67
  %70 = load i8, i8* %69, align 1, !tbaa !14
  %71 = getelementptr inbounds i8, i8* %53, i64 %67
  %72 = load i8, i8* %71, align 1, !tbaa !14
  %73 = icmp eq i8 %70, %72
  %74 = add nuw i64 %78, 4
  br i1 %73, label %75, label %85

75:                                               ; preds = %68
  %76 = icmp eq i64 %74, %47
  br i1 %76, label %85, label %77

77:                                               ; preds = %75, %49
  %78 = phi i64 [ 0, %49 ], [ %74, %75 ]
  %79 = getelementptr inbounds i8, i8* %51, i64 %78
  %80 = load i8, i8* %79, align 1, !tbaa !14
  %81 = getelementptr inbounds i8, i8* %53, i64 %78
  %82 = load i8, i8* %81, align 1, !tbaa !14
  %83 = icmp eq i8 %80, %82
  %84 = or i64 %78, 1
  br i1 %83, label %54, label %85

85:                                               ; preds = %77, %54, %61, %68, %75, %46, %40, %34, %28, %22, %14, %8, %2
  %86 = phi i32 [ 0, %2 ], [ 0, %8 ], [ 0, %14 ], [ 0, %22 ], [ 0, %28 ], [ 0, %34 ], [ 0, %40 ], [ 1, %46 ], [ 0, %77 ], [ 0, %54 ], [ 0, %61 ], [ 0, %68 ], [ 1, %75 ]
  ret i32 %86
}

; Function Attrs: uwtable
define internal fastcc noundef i32 @_ZL19preProcessScanlinesPPhPmPKhjjPK11LodePNGInfoPK22LodePNGEncoderSettings(i8** nocapture noundef %0, i64* nocapture noundef %1, i8* noundef %2, i32 noundef %3, i32 noundef %4, %struct.LodePNGInfo* nocapture noundef readonly %5, %struct.LodePNGEncoderSettings* nocapture noundef readonly %6) unnamed_addr #12 {
  %8 = alloca [7 x i32], align 16
  %9 = alloca [7 x i32], align 16
  %10 = alloca [8 x i64], align 16
  %11 = alloca [8 x i64], align 16
  %12 = alloca [8 x i64], align 16
  %13 = alloca [7 x i32], align 16
  %14 = alloca [7 x i32], align 16
  %15 = alloca [8 x i64], align 16
  %16 = alloca [8 x i64], align 16
  %17 = alloca [8 x i64], align 16
  %18 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %5, i64 0, i32 3, i32 0
  %19 = load i32, i32* %18, align 8, !tbaa !147
  %20 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %5, i64 0, i32 3, i32 1
  %21 = load i32, i32* %20, align 4, !tbaa !150
  switch i32 %19, label %26 [
    i32 0, label %27
    i32 2, label %22
    i32 3, label %27
    i32 4, label %23
    i32 6, label %24
    i32 255, label %25
  ]

22:                                               ; preds = %7
  br label %27

23:                                               ; preds = %7
  br label %27

24:                                               ; preds = %7
  br label %27

25:                                               ; preds = %7
  br label %27

26:                                               ; preds = %7
  br label %27

27:                                               ; preds = %7, %7, %22, %23, %24, %25, %26
  %28 = phi i32 [ 0, %26 ], [ 0, %25 ], [ 4, %24 ], [ 2, %23 ], [ 3, %22 ], [ 1, %7 ], [ 1, %7 ]
  %29 = mul i32 %28, %21
  %30 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %5, i64 0, i32 2
  %31 = load i32, i32* %30, align 8, !tbaa !208
  %32 = icmp eq i32 %31, 0
  br i1 %32, label %33, label %64

33:                                               ; preds = %27
  %34 = mul i32 %29, %3
  %35 = add i32 %34, 7
  %36 = lshr i32 %35, 3
  %37 = mul i32 %36, %4
  %38 = add i32 %37, %4
  %39 = zext i32 %38 to i64
  store i64 %39, i64* %1, align 8, !tbaa !3
  %40 = tail call noalias i8* @malloc(i64 noundef %39) #25
  store i8* %40, i8** %0, align 8, !tbaa !7
  %41 = icmp ne i8* %40, null
  %42 = icmp eq i32 %38, 0
  %43 = select i1 %41, i1 true, i1 %42
  br i1 %43, label %44, label %934

44:                                               ; preds = %33
  %45 = icmp ult i32 %29, 8
  br i1 %45, label %46, label %62

46:                                               ; preds = %44
  %47 = and i32 %35, -8
  %48 = icmp eq i32 %34, %47
  br i1 %48, label %62, label %49

49:                                               ; preds = %46
  %50 = zext i32 %37 to i64
  %51 = tail call noalias i8* @malloc(i64 noundef %50) #25
  %52 = icmp eq i8* %51, null
  br i1 %52, label %60, label %53

53:                                               ; preds = %49
  %54 = zext i32 %47 to i64
  %55 = zext i32 %34 to i64
  tail call fastcc void @_ZL14addPaddingBitsPhPKhmmj(i8* noundef nonnull %51, i8* noundef %2, i64 noundef %54, i64 noundef %55, i32 noundef %4)
  %56 = load i8*, i8** %0, align 8, !tbaa !7
  %57 = load i32, i32* %18, align 8, !tbaa !147
  %58 = load i32, i32* %20, align 4, !tbaa !150
  %59 = tail call fastcc noundef i32 @_ZL6filterPhPKhjjPK16LodePNGColorModePK22LodePNGEncoderSettings(i8* noundef %56, i8* noundef nonnull %51, i32 noundef %3, i32 noundef %4, i32 %57, i32 %58, %struct.LodePNGEncoderSettings* noundef %6)
  br label %60

60:                                               ; preds = %53, %49
  %61 = phi i32 [ 83, %49 ], [ %59, %53 ]
  tail call void @free(i8* noundef %51) #25
  br label %934

62:                                               ; preds = %46, %44
  %63 = tail call fastcc noundef i32 @_ZL6filterPhPKhjjPK16LodePNGColorModePK22LodePNGEncoderSettings(i8* noundef %40, i8* noundef %2, i32 noundef %3, i32 noundef %4, i32 %19, i32 %21, %struct.LodePNGEncoderSettings* noundef %6)
  br label %934

64:                                               ; preds = %27
  %65 = bitcast [7 x i32]* %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 28, i8* nonnull %65) #25
  %66 = bitcast [7 x i32]* %14 to i8*
  call void @llvm.lifetime.start.p0i8(i64 28, i8* nonnull %66) #25
  %67 = bitcast [8 x i64]* %15 to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %67) #25
  %68 = bitcast [8 x i64]* %16 to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %68) #25
  %69 = bitcast [8 x i64]* %17 to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %69) #25
  %70 = getelementptr inbounds [7 x i32], [7 x i32]* %13, i64 0, i64 0
  %71 = getelementptr inbounds [7 x i32], [7 x i32]* %14, i64 0, i64 0
  %72 = getelementptr inbounds [8 x i64], [8 x i64]* %15, i64 0, i64 0
  %73 = getelementptr inbounds [8 x i64], [8 x i64]* %16, i64 0, i64 0
  %74 = getelementptr inbounds [8 x i64], [8 x i64]* %17, i64 0, i64 0
  call fastcc void @_ZL19Adam7_getpassvaluesPjS_PmS0_S0_jjj(i32* noundef nonnull %70, i32* noundef nonnull %71, i64* noundef nonnull %72, i64* noundef nonnull %73, i64* noundef nonnull %74, i32 noundef %3, i32 noundef %4, i32 noundef %29)
  %75 = getelementptr inbounds [8 x i64], [8 x i64]* %15, i64 0, i64 7
  %76 = load i64, i64* %75, align 8, !tbaa !3
  store i64 %76, i64* %1, align 8, !tbaa !3
  %77 = tail call noalias i8* @malloc(i64 noundef %76) #25
  store i8* %77, i8** %0, align 8, !tbaa !7
  %78 = icmp eq i8* %77, null
  %79 = getelementptr inbounds [8 x i64], [8 x i64]* %17, i64 0, i64 7
  %80 = load i64, i64* %79, align 8, !tbaa !3
  %81 = tail call noalias i8* @malloc(i64 noundef %80) #25
  %82 = icmp eq i8* %81, null
  %83 = icmp ne i64 %80, 0
  %84 = and i1 %83, %82
  %85 = or i1 %78, %84
  br i1 %85, label %932, label %86

86:                                               ; preds = %64
  %87 = bitcast [7 x i32]* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 28, i8* nonnull %87) #25
  %88 = bitcast [7 x i32]* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 28, i8* nonnull %88) #25
  %89 = bitcast [8 x i64]* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %89) #25
  %90 = bitcast [8 x i64]* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %90) #25
  %91 = bitcast [8 x i64]* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %91) #25
  %92 = getelementptr inbounds [7 x i32], [7 x i32]* %8, i64 0, i64 0
  %93 = getelementptr inbounds [7 x i32], [7 x i32]* %9, i64 0, i64 0
  %94 = getelementptr inbounds [8 x i64], [8 x i64]* %10, i64 0, i64 0
  %95 = getelementptr inbounds [8 x i64], [8 x i64]* %11, i64 0, i64 0
  %96 = getelementptr inbounds [8 x i64], [8 x i64]* %12, i64 0, i64 0
  call fastcc void @_ZL19Adam7_getpassvaluesPjS_PmS0_S0_jjj(i32* noundef nonnull %92, i32* noundef nonnull %93, i64* noundef nonnull %94, i64* noundef nonnull %95, i64* noundef nonnull %96, i32 noundef %3, i32 noundef %4, i32 noundef %29) #25
  %97 = icmp ugt i32 %29, 7
  br i1 %97, label %183, label %98

98:                                               ; preds = %86
  %99 = icmp eq i32 %29, 0
  br i1 %99, label %100, label %101

100:                                              ; preds = %98
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %91) #25
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %90) #25
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %89) #25
  call void @llvm.lifetime.end.p0i8(i64 28, i8* nonnull %88) #25
  call void @llvm.lifetime.end.p0i8(i64 28, i8* nonnull %87) #25
  br label %652

101:                                              ; preds = %98, %110
  %102 = phi i64 [ %111, %110 ], [ 0, %98 ]
  %103 = getelementptr inbounds [7 x i32], [7 x i32]* %8, i64 0, i64 %102
  %104 = load i32, i32* %103, align 4, !tbaa !9
  %105 = getelementptr inbounds [7 x i32], [7 x i32]* %9, i64 0, i64 %102
  %106 = load i32, i32* %105, align 4, !tbaa !9
  %107 = icmp eq i32 %106, 0
  %108 = icmp eq i32 %104, 0
  %109 = select i1 %107, i1 true, i1 %108
  br i1 %109, label %110, label %113

110:                                              ; preds = %180, %101
  %111 = add nuw nsw i64 %102, 1
  %112 = icmp eq i64 %111, 7
  br i1 %112, label %638, label %101

113:                                              ; preds = %101
  %114 = getelementptr inbounds [8 x i64], [8 x i64]* %12, i64 0, i64 %102
  %115 = getelementptr inbounds [7 x i32], [7 x i32]* @_ZL8ADAM7_DX, i64 0, i64 %102
  %116 = getelementptr inbounds [7 x i32], [7 x i32]* @_ZL8ADAM7_IX, i64 0, i64 %102
  %117 = getelementptr inbounds [7 x i32], [7 x i32]* @_ZL8ADAM7_DY, i64 0, i64 %102
  %118 = getelementptr inbounds [7 x i32], [7 x i32]* @_ZL8ADAM7_IY, i64 0, i64 %102
  %119 = load i32, i32* %118, align 4, !tbaa !9
  %120 = load i32, i32* %117, align 4, !tbaa !9
  %121 = load i32, i32* %116, align 4, !tbaa !9
  %122 = load i32, i32* %115, align 4, !tbaa !9
  %123 = load i64, i64* %114, align 8, !tbaa !3
  %124 = shl i64 %123, 3
  %125 = zext i32 %104 to i64
  br label %126

126:                                              ; preds = %180, %113
  %127 = phi i32 [ 0, %113 ], [ %181, %180 ]
  %128 = mul i32 %127, %120
  %129 = add i32 %128, %119
  %130 = mul i32 %129, %3
  %131 = mul i32 %127, %104
  %132 = add i32 %130, %121
  br label %133

133:                                              ; preds = %177, %126
  %134 = phi i64 [ %178, %177 ], [ 0, %126 ]
  %135 = trunc i64 %134 to i32
  %136 = mul i32 %122, %135
  %137 = add i32 %132, %136
  %138 = mul i32 %137, %29
  %139 = zext i32 %138 to i64
  %140 = add i32 %131, %135
  %141 = mul i32 %140, %29
  %142 = zext i32 %141 to i64
  %143 = add i64 %124, %142
  br label %144

144:                                              ; preds = %173, %133
  %145 = phi i32 [ 0, %133 ], [ %175, %173 ]
  %146 = phi i64 [ %139, %133 ], [ %154, %173 ]
  %147 = phi i64 [ %143, %133 ], [ %174, %173 ]
  %148 = lshr i64 %146, 3
  %149 = getelementptr inbounds i8, i8* %2, i64 %148
  %150 = load i8, i8* %149, align 1, !tbaa !14
  %151 = trunc i64 %146 to i8
  %152 = and i8 %151, 7
  %153 = xor i8 %152, 7
  %154 = add nuw nsw i64 %146, 1
  %155 = shl nuw i8 1, %153
  %156 = and i8 %155, %150
  %157 = icmp eq i8 %156, 0
  %158 = trunc i64 %147 to i8
  %159 = and i8 %158, 7
  %160 = xor i8 %159, 7
  %161 = shl nuw i8 1, %160
  br i1 %157, label %167, label %162

162:                                              ; preds = %144
  %163 = lshr i64 %147, 3
  %164 = getelementptr inbounds i8, i8* %81, i64 %163
  %165 = load i8, i8* %164, align 1, !tbaa !14
  %166 = or i8 %165, %161
  store i8 %166, i8* %164, align 1, !tbaa !14
  br label %173

167:                                              ; preds = %144
  %168 = xor i8 %161, -1
  %169 = lshr i64 %147, 3
  %170 = getelementptr inbounds i8, i8* %81, i64 %169
  %171 = load i8, i8* %170, align 1, !tbaa !14
  %172 = and i8 %171, %168
  store i8 %172, i8* %170, align 1, !tbaa !14
  br label %173

173:                                              ; preds = %167, %162
  %174 = add i64 %147, 1
  %175 = add nuw i32 %145, 1
  %176 = icmp eq i32 %175, %29
  br i1 %176, label %177, label %144

177:                                              ; preds = %173
  %178 = add nuw nsw i64 %134, 1
  %179 = icmp eq i64 %178, %125
  br i1 %179, label %180, label %133

180:                                              ; preds = %177
  %181 = add nuw i32 %127, 1
  %182 = icmp eq i32 %181, %106
  br i1 %182, label %110, label %126

183:                                              ; preds = %86
  %184 = lshr i32 %29, 3
  %185 = zext i32 %184 to i64
  %186 = load i32, i32* %93, align 16, !tbaa !9
  %187 = icmp eq i32 %186, 0
  br i1 %187, label %188, label %580

188:                                              ; preds = %635, %580, %183
  %189 = getelementptr inbounds [7 x i32], [7 x i32]* %9, i64 0, i64 1
  %190 = load i32, i32* %189, align 4, !tbaa !9
  %191 = icmp eq i32 %190, 0
  br i1 %191, label %253, label %192

192:                                              ; preds = %188
  %193 = getelementptr inbounds [7 x i32], [7 x i32]* %8, i64 0, i64 1
  %194 = load i32, i32* %193, align 4, !tbaa !9
  %195 = icmp eq i32 %194, 0
  br i1 %195, label %253, label %196

196:                                              ; preds = %192
  %197 = getelementptr inbounds [8 x i64], [8 x i64]* %12, i64 0, i64 1
  %198 = load i64, i64* %197, align 8, !tbaa !3
  %199 = zext i32 %194 to i64
  %200 = getelementptr i8, i8* %81, i64 %198
  %201 = shl i32 %3, 3
  %202 = zext i32 %201 to i64
  %203 = zext i32 %190 to i64
  %204 = and i64 %199, 1
  %205 = icmp eq i32 %194, 1
  %206 = and i64 %199, 4294967294
  %207 = icmp eq i64 %204, 0
  br label %208

208:                                              ; preds = %250, %196
  %209 = phi i64 [ %251, %250 ], [ 0, %196 ]
  %210 = mul nuw i64 %209, %199
  %211 = mul nuw i64 %209, %202
  %212 = or i64 %211, 4
  br i1 %205, label %238, label %213

213:                                              ; preds = %208, %213
  %214 = phi i64 [ %235, %213 ], [ 0, %208 ]
  %215 = phi i64 [ %236, %213 ], [ 0, %208 ]
  %216 = add nuw i64 %210, %214
  %217 = and i64 %216, 4294967295
  %218 = mul nuw nsw i64 %217, %185
  %219 = getelementptr i8, i8* %200, i64 %218
  %220 = shl nuw nsw i64 %214, 3
  %221 = add nuw i64 %212, %220
  %222 = and i64 %221, 4294967292
  %223 = mul nuw nsw i64 %222, %185
  %224 = getelementptr i8, i8* %2, i64 %223
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %219, i8* align 1 %224, i64 %185, i1 false), !tbaa !14
  %225 = or i64 %214, 1
  %226 = add nuw i64 %210, %225
  %227 = and i64 %226, 4294967295
  %228 = mul nuw nsw i64 %227, %185
  %229 = getelementptr i8, i8* %200, i64 %228
  %230 = shl nuw nsw i64 %225, 3
  %231 = add nuw i64 %212, %230
  %232 = and i64 %231, 4294967292
  %233 = mul nuw nsw i64 %232, %185
  %234 = getelementptr i8, i8* %2, i64 %233
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %229, i8* align 1 %234, i64 %185, i1 false), !tbaa !14
  %235 = add nuw nsw i64 %214, 2
  %236 = add i64 %215, 2
  %237 = icmp eq i64 %236, %206
  br i1 %237, label %238, label %213

238:                                              ; preds = %213, %208
  %239 = phi i64 [ 0, %208 ], [ %235, %213 ]
  br i1 %207, label %250, label %240

240:                                              ; preds = %238
  %241 = add nuw i64 %210, %239
  %242 = and i64 %241, 4294967295
  %243 = mul nuw nsw i64 %242, %185
  %244 = getelementptr i8, i8* %200, i64 %243
  %245 = shl nuw nsw i64 %239, 3
  %246 = add nuw i64 %212, %245
  %247 = and i64 %246, 4294967292
  %248 = mul nuw nsw i64 %247, %185
  %249 = getelementptr i8, i8* %2, i64 %248
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %244, i8* align 1 %249, i64 %185, i1 false), !tbaa !14
  br label %250

250:                                              ; preds = %238, %240
  %251 = add nuw nsw i64 %209, 1
  %252 = icmp eq i64 %251, %203
  br i1 %252, label %253, label %208

253:                                              ; preds = %250, %192, %188
  %254 = getelementptr inbounds [7 x i32], [7 x i32]* %9, i64 0, i64 2
  %255 = load i32, i32* %254, align 8, !tbaa !9
  %256 = icmp eq i32 %255, 0
  br i1 %256, label %320, label %257

257:                                              ; preds = %253
  %258 = getelementptr inbounds [7 x i32], [7 x i32]* %8, i64 0, i64 2
  %259 = load i32, i32* %258, align 8, !tbaa !9
  %260 = icmp eq i32 %259, 0
  br i1 %260, label %320, label %261

261:                                              ; preds = %257
  %262 = getelementptr inbounds [8 x i64], [8 x i64]* %12, i64 0, i64 2
  %263 = load i64, i64* %262, align 16, !tbaa !3
  %264 = zext i32 %259 to i64
  %265 = getelementptr i8, i8* %81, i64 %263
  %266 = shl i32 %3, 2
  %267 = zext i32 %266 to i64
  %268 = shl i32 %3, 3
  %269 = zext i32 %268 to i64
  %270 = zext i32 %255 to i64
  %271 = and i64 %264, 1
  %272 = icmp eq i32 %259, 1
  %273 = and i64 %264, 4294967294
  %274 = icmp eq i64 %271, 0
  br label %275

275:                                              ; preds = %317, %261
  %276 = phi i64 [ %318, %317 ], [ 0, %261 ]
  %277 = mul nuw i64 %276, %264
  %278 = mul nuw i64 %276, %269
  %279 = add nuw i64 %278, %267
  br i1 %272, label %305, label %280

280:                                              ; preds = %275, %280
  %281 = phi i64 [ %302, %280 ], [ 0, %275 ]
  %282 = phi i64 [ %303, %280 ], [ 0, %275 ]
  %283 = add nuw i64 %277, %281
  %284 = and i64 %283, 4294967295
  %285 = mul nuw nsw i64 %284, %185
  %286 = getelementptr i8, i8* %265, i64 %285
  %287 = shl nuw nsw i64 %281, 2
  %288 = add nuw i64 %279, %287
  %289 = and i64 %288, 4294967292
  %290 = mul nuw nsw i64 %289, %185
  %291 = getelementptr i8, i8* %2, i64 %290
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %286, i8* align 1 %291, i64 %185, i1 false), !tbaa !14
  %292 = or i64 %281, 1
  %293 = add nuw i64 %277, %292
  %294 = and i64 %293, 4294967295
  %295 = mul nuw nsw i64 %294, %185
  %296 = getelementptr i8, i8* %265, i64 %295
  %297 = shl nuw nsw i64 %292, 2
  %298 = add nuw i64 %279, %297
  %299 = and i64 %298, 4294967292
  %300 = mul nuw nsw i64 %299, %185
  %301 = getelementptr i8, i8* %2, i64 %300
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %296, i8* align 1 %301, i64 %185, i1 false), !tbaa !14
  %302 = add nuw nsw i64 %281, 2
  %303 = add i64 %282, 2
  %304 = icmp eq i64 %303, %273
  br i1 %304, label %305, label %280

305:                                              ; preds = %280, %275
  %306 = phi i64 [ 0, %275 ], [ %302, %280 ]
  br i1 %274, label %317, label %307

307:                                              ; preds = %305
  %308 = add nuw i64 %277, %306
  %309 = and i64 %308, 4294967295
  %310 = mul nuw nsw i64 %309, %185
  %311 = getelementptr i8, i8* %265, i64 %310
  %312 = shl nuw nsw i64 %306, 2
  %313 = add nuw i64 %279, %312
  %314 = and i64 %313, 4294967292
  %315 = mul nuw nsw i64 %314, %185
  %316 = getelementptr i8, i8* %2, i64 %315
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %311, i8* align 1 %316, i64 %185, i1 false), !tbaa !14
  br label %317

317:                                              ; preds = %305, %307
  %318 = add nuw nsw i64 %276, 1
  %319 = icmp eq i64 %318, %270
  br i1 %319, label %320, label %275

320:                                              ; preds = %317, %257, %253
  %321 = getelementptr inbounds [7 x i32], [7 x i32]* %9, i64 0, i64 3
  %322 = load i32, i32* %321, align 4, !tbaa !9
  %323 = icmp eq i32 %322, 0
  br i1 %323, label %385, label %324

324:                                              ; preds = %320
  %325 = getelementptr inbounds [7 x i32], [7 x i32]* %8, i64 0, i64 3
  %326 = load i32, i32* %325, align 4, !tbaa !9
  %327 = icmp eq i32 %326, 0
  br i1 %327, label %385, label %328

328:                                              ; preds = %324
  %329 = getelementptr inbounds [8 x i64], [8 x i64]* %12, i64 0, i64 3
  %330 = load i64, i64* %329, align 8, !tbaa !3
  %331 = zext i32 %326 to i64
  %332 = getelementptr i8, i8* %81, i64 %330
  %333 = shl i32 %3, 2
  %334 = zext i32 %333 to i64
  %335 = zext i32 %322 to i64
  %336 = and i64 %331, 1
  %337 = icmp eq i32 %326, 1
  %338 = and i64 %331, 4294967294
  %339 = icmp eq i64 %336, 0
  br label %340

340:                                              ; preds = %382, %328
  %341 = phi i64 [ %383, %382 ], [ 0, %328 ]
  %342 = mul nuw i64 %341, %331
  %343 = mul nuw i64 %341, %334
  %344 = or i64 %343, 2
  br i1 %337, label %370, label %345

345:                                              ; preds = %340, %345
  %346 = phi i64 [ %367, %345 ], [ 0, %340 ]
  %347 = phi i64 [ %368, %345 ], [ 0, %340 ]
  %348 = add nuw i64 %342, %346
  %349 = and i64 %348, 4294967295
  %350 = mul nuw nsw i64 %349, %185
  %351 = getelementptr i8, i8* %332, i64 %350
  %352 = shl nuw nsw i64 %346, 2
  %353 = add nuw i64 %344, %352
  %354 = and i64 %353, 4294967294
  %355 = mul nuw nsw i64 %354, %185
  %356 = getelementptr i8, i8* %2, i64 %355
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %351, i8* align 1 %356, i64 %185, i1 false), !tbaa !14
  %357 = or i64 %346, 1
  %358 = add nuw i64 %342, %357
  %359 = and i64 %358, 4294967295
  %360 = mul nuw nsw i64 %359, %185
  %361 = getelementptr i8, i8* %332, i64 %360
  %362 = shl nuw nsw i64 %357, 2
  %363 = add nuw i64 %344, %362
  %364 = and i64 %363, 4294967294
  %365 = mul nuw nsw i64 %364, %185
  %366 = getelementptr i8, i8* %2, i64 %365
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %361, i8* align 1 %366, i64 %185, i1 false), !tbaa !14
  %367 = add nuw nsw i64 %346, 2
  %368 = add i64 %347, 2
  %369 = icmp eq i64 %368, %338
  br i1 %369, label %370, label %345

370:                                              ; preds = %345, %340
  %371 = phi i64 [ 0, %340 ], [ %367, %345 ]
  br i1 %339, label %382, label %372

372:                                              ; preds = %370
  %373 = add nuw i64 %342, %371
  %374 = and i64 %373, 4294967295
  %375 = mul nuw nsw i64 %374, %185
  %376 = getelementptr i8, i8* %332, i64 %375
  %377 = shl nuw nsw i64 %371, 2
  %378 = add nuw i64 %344, %377
  %379 = and i64 %378, 4294967294
  %380 = mul nuw nsw i64 %379, %185
  %381 = getelementptr i8, i8* %2, i64 %380
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %376, i8* align 1 %381, i64 %185, i1 false), !tbaa !14
  br label %382

382:                                              ; preds = %370, %372
  %383 = add nuw nsw i64 %341, 1
  %384 = icmp eq i64 %383, %335
  br i1 %384, label %385, label %340

385:                                              ; preds = %382, %324, %320
  %386 = getelementptr inbounds [7 x i32], [7 x i32]* %9, i64 0, i64 4
  %387 = load i32, i32* %386, align 16, !tbaa !9
  %388 = icmp eq i32 %387, 0
  br i1 %388, label %452, label %389

389:                                              ; preds = %385
  %390 = getelementptr inbounds [7 x i32], [7 x i32]* %8, i64 0, i64 4
  %391 = load i32, i32* %390, align 16, !tbaa !9
  %392 = icmp eq i32 %391, 0
  br i1 %392, label %452, label %393

393:                                              ; preds = %389
  %394 = getelementptr inbounds [8 x i64], [8 x i64]* %12, i64 0, i64 4
  %395 = load i64, i64* %394, align 16, !tbaa !3
  %396 = zext i32 %391 to i64
  %397 = getelementptr i8, i8* %81, i64 %395
  %398 = shl i32 %3, 1
  %399 = zext i32 %398 to i64
  %400 = shl i32 %3, 2
  %401 = zext i32 %400 to i64
  %402 = zext i32 %387 to i64
  %403 = and i64 %396, 1
  %404 = icmp eq i32 %391, 1
  %405 = and i64 %396, 4294967294
  %406 = icmp eq i64 %403, 0
  br label %407

407:                                              ; preds = %449, %393
  %408 = phi i64 [ %450, %449 ], [ 0, %393 ]
  %409 = mul nuw i64 %408, %396
  %410 = mul nuw i64 %408, %401
  %411 = add nuw i64 %410, %399
  br i1 %404, label %437, label %412

412:                                              ; preds = %407, %412
  %413 = phi i64 [ %434, %412 ], [ 0, %407 ]
  %414 = phi i64 [ %435, %412 ], [ 0, %407 ]
  %415 = add nuw i64 %409, %413
  %416 = and i64 %415, 4294967295
  %417 = mul nuw nsw i64 %416, %185
  %418 = getelementptr i8, i8* %397, i64 %417
  %419 = shl nuw nsw i64 %413, 1
  %420 = add nuw i64 %411, %419
  %421 = and i64 %420, 4294967294
  %422 = mul nuw nsw i64 %421, %185
  %423 = getelementptr i8, i8* %2, i64 %422
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %418, i8* align 1 %423, i64 %185, i1 false), !tbaa !14
  %424 = or i64 %413, 1
  %425 = add nuw i64 %409, %424
  %426 = and i64 %425, 4294967295
  %427 = mul nuw nsw i64 %426, %185
  %428 = getelementptr i8, i8* %397, i64 %427
  %429 = shl nuw nsw i64 %424, 1
  %430 = add nuw i64 %411, %429
  %431 = and i64 %430, 4294967294
  %432 = mul nuw nsw i64 %431, %185
  %433 = getelementptr i8, i8* %2, i64 %432
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %428, i8* align 1 %433, i64 %185, i1 false), !tbaa !14
  %434 = add nuw nsw i64 %413, 2
  %435 = add i64 %414, 2
  %436 = icmp eq i64 %435, %405
  br i1 %436, label %437, label %412

437:                                              ; preds = %412, %407
  %438 = phi i64 [ 0, %407 ], [ %434, %412 ]
  br i1 %406, label %449, label %439

439:                                              ; preds = %437
  %440 = add nuw i64 %409, %438
  %441 = and i64 %440, 4294967295
  %442 = mul nuw nsw i64 %441, %185
  %443 = getelementptr i8, i8* %397, i64 %442
  %444 = shl nuw nsw i64 %438, 1
  %445 = add nuw i64 %411, %444
  %446 = and i64 %445, 4294967294
  %447 = mul nuw nsw i64 %446, %185
  %448 = getelementptr i8, i8* %2, i64 %447
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %443, i8* align 1 %448, i64 %185, i1 false), !tbaa !14
  br label %449

449:                                              ; preds = %437, %439
  %450 = add nuw nsw i64 %408, 1
  %451 = icmp eq i64 %450, %402
  br i1 %451, label %452, label %407

452:                                              ; preds = %449, %389, %385
  %453 = getelementptr inbounds [7 x i32], [7 x i32]* %9, i64 0, i64 5
  %454 = load i32, i32* %453, align 4, !tbaa !9
  %455 = icmp eq i32 %454, 0
  br i1 %455, label %517, label %456

456:                                              ; preds = %452
  %457 = getelementptr inbounds [7 x i32], [7 x i32]* %8, i64 0, i64 5
  %458 = load i32, i32* %457, align 4, !tbaa !9
  %459 = icmp eq i32 %458, 0
  br i1 %459, label %517, label %460

460:                                              ; preds = %456
  %461 = getelementptr inbounds [8 x i64], [8 x i64]* %12, i64 0, i64 5
  %462 = load i64, i64* %461, align 8, !tbaa !3
  %463 = zext i32 %458 to i64
  %464 = getelementptr i8, i8* %81, i64 %462
  %465 = shl i32 %3, 1
  %466 = zext i32 %465 to i64
  %467 = zext i32 %454 to i64
  %468 = and i64 %463, 1
  %469 = icmp eq i32 %458, 1
  %470 = and i64 %463, 4294967294
  %471 = icmp eq i64 %468, 0
  br label %472

472:                                              ; preds = %514, %460
  %473 = phi i64 [ %515, %514 ], [ 0, %460 ]
  %474 = mul nuw i64 %473, %463
  %475 = mul nuw i64 %473, %466
  %476 = or i64 %475, 1
  br i1 %469, label %502, label %477

477:                                              ; preds = %472, %477
  %478 = phi i64 [ %499, %477 ], [ 0, %472 ]
  %479 = phi i64 [ %500, %477 ], [ 0, %472 ]
  %480 = add nuw i64 %474, %478
  %481 = and i64 %480, 4294967295
  %482 = mul nuw nsw i64 %481, %185
  %483 = getelementptr i8, i8* %464, i64 %482
  %484 = shl nuw nsw i64 %478, 1
  %485 = add nuw i64 %476, %484
  %486 = and i64 %485, 4294967295
  %487 = mul nuw nsw i64 %486, %185
  %488 = getelementptr i8, i8* %2, i64 %487
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %483, i8* align 1 %488, i64 %185, i1 false), !tbaa !14
  %489 = or i64 %478, 1
  %490 = add nuw i64 %474, %489
  %491 = and i64 %490, 4294967295
  %492 = mul nuw nsw i64 %491, %185
  %493 = getelementptr i8, i8* %464, i64 %492
  %494 = shl nuw nsw i64 %489, 1
  %495 = add nuw i64 %476, %494
  %496 = and i64 %495, 4294967295
  %497 = mul nuw nsw i64 %496, %185
  %498 = getelementptr i8, i8* %2, i64 %497
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %493, i8* align 1 %498, i64 %185, i1 false), !tbaa !14
  %499 = add nuw nsw i64 %478, 2
  %500 = add i64 %479, 2
  %501 = icmp eq i64 %500, %470
  br i1 %501, label %502, label %477

502:                                              ; preds = %477, %472
  %503 = phi i64 [ 0, %472 ], [ %499, %477 ]
  br i1 %471, label %514, label %504

504:                                              ; preds = %502
  %505 = add nuw i64 %474, %503
  %506 = and i64 %505, 4294967295
  %507 = mul nuw nsw i64 %506, %185
  %508 = getelementptr i8, i8* %464, i64 %507
  %509 = shl nuw nsw i64 %503, 1
  %510 = add nuw i64 %476, %509
  %511 = and i64 %510, 4294967295
  %512 = mul nuw nsw i64 %511, %185
  %513 = getelementptr i8, i8* %2, i64 %512
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %508, i8* align 1 %513, i64 %185, i1 false), !tbaa !14
  br label %514

514:                                              ; preds = %502, %504
  %515 = add nuw nsw i64 %473, 1
  %516 = icmp eq i64 %515, %467
  br i1 %516, label %517, label %472

517:                                              ; preds = %514, %456, %452
  %518 = getelementptr inbounds [7 x i32], [7 x i32]* %9, i64 0, i64 6
  %519 = load i32, i32* %518, align 8, !tbaa !9
  %520 = icmp eq i32 %519, 0
  br i1 %520, label %638, label %521

521:                                              ; preds = %517
  %522 = getelementptr inbounds [7 x i32], [7 x i32]* %8, i64 0, i64 6
  %523 = load i32, i32* %522, align 8, !tbaa !9
  %524 = icmp eq i32 %523, 0
  br i1 %524, label %638, label %525

525:                                              ; preds = %521
  %526 = getelementptr inbounds [8 x i64], [8 x i64]* %12, i64 0, i64 6
  %527 = load i64, i64* %526, align 16, !tbaa !3
  %528 = zext i32 %523 to i64
  %529 = getelementptr i8, i8* %81, i64 %527
  %530 = zext i32 %3 to i64
  %531 = shl i32 %3, 1
  %532 = zext i32 %531 to i64
  %533 = zext i32 %519 to i64
  %534 = and i64 %528, 1
  %535 = icmp eq i32 %523, 1
  %536 = and i64 %528, 4294967294
  %537 = icmp eq i64 %534, 0
  br label %538

538:                                              ; preds = %577, %525
  %539 = phi i64 [ %578, %577 ], [ 0, %525 ]
  %540 = mul nuw i64 %539, %528
  %541 = mul nuw i64 %539, %532
  %542 = add nuw i64 %541, %530
  br i1 %535, label %566, label %543

543:                                              ; preds = %538, %543
  %544 = phi i64 [ %563, %543 ], [ 0, %538 ]
  %545 = phi i64 [ %564, %543 ], [ 0, %538 ]
  %546 = add nuw i64 %540, %544
  %547 = and i64 %546, 4294967295
  %548 = mul nuw nsw i64 %547, %185
  %549 = getelementptr i8, i8* %529, i64 %548
  %550 = add nuw i64 %542, %544
  %551 = and i64 %550, 4294967295
  %552 = mul nuw nsw i64 %551, %185
  %553 = getelementptr i8, i8* %2, i64 %552
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %549, i8* align 1 %553, i64 %185, i1 false), !tbaa !14
  %554 = or i64 %544, 1
  %555 = add nuw i64 %540, %554
  %556 = and i64 %555, 4294967295
  %557 = mul nuw nsw i64 %556, %185
  %558 = getelementptr i8, i8* %529, i64 %557
  %559 = add nuw i64 %542, %554
  %560 = and i64 %559, 4294967295
  %561 = mul nuw nsw i64 %560, %185
  %562 = getelementptr i8, i8* %2, i64 %561
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %558, i8* align 1 %562, i64 %185, i1 false), !tbaa !14
  %563 = add nuw nsw i64 %544, 2
  %564 = add i64 %545, 2
  %565 = icmp eq i64 %564, %536
  br i1 %565, label %566, label %543

566:                                              ; preds = %543, %538
  %567 = phi i64 [ 0, %538 ], [ %563, %543 ]
  br i1 %537, label %577, label %568

568:                                              ; preds = %566
  %569 = add nuw i64 %540, %567
  %570 = and i64 %569, 4294967295
  %571 = mul nuw nsw i64 %570, %185
  %572 = getelementptr i8, i8* %529, i64 %571
  %573 = add nuw i64 %542, %567
  %574 = and i64 %573, 4294967295
  %575 = mul nuw nsw i64 %574, %185
  %576 = getelementptr i8, i8* %2, i64 %575
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %572, i8* align 1 %576, i64 %185, i1 false), !tbaa !14
  br label %577

577:                                              ; preds = %566, %568
  %578 = add nuw nsw i64 %539, 1
  %579 = icmp eq i64 %578, %533
  br i1 %579, label %638, label %538

580:                                              ; preds = %183
  %581 = load i32, i32* %92, align 16, !tbaa !9
  %582 = icmp eq i32 %581, 0
  br i1 %582, label %188, label %583

583:                                              ; preds = %580
  %584 = load i64, i64* %96, align 16, !tbaa !3
  %585 = zext i32 %581 to i64
  %586 = getelementptr i8, i8* %81, i64 %584
  %587 = shl i32 %3, 3
  %588 = zext i32 %587 to i64
  %589 = zext i32 %186 to i64
  %590 = and i64 %585, 1
  %591 = icmp eq i32 %581, 1
  %592 = and i64 %585, 4294967294
  %593 = icmp eq i64 %590, 0
  br label %594

594:                                              ; preds = %635, %583
  %595 = phi i64 [ %636, %635 ], [ 0, %583 ]
  %596 = mul nuw i64 %595, %585
  %597 = mul nuw i64 %595, %588
  br i1 %591, label %623, label %598

598:                                              ; preds = %594, %598
  %599 = phi i64 [ %620, %598 ], [ 0, %594 ]
  %600 = phi i64 [ %621, %598 ], [ 0, %594 ]
  %601 = add nuw i64 %596, %599
  %602 = and i64 %601, 4294967295
  %603 = mul nuw nsw i64 %602, %185
  %604 = getelementptr i8, i8* %586, i64 %603
  %605 = shl nuw nsw i64 %599, 3
  %606 = add nuw i64 %597, %605
  %607 = and i64 %606, 4294967288
  %608 = mul nuw nsw i64 %607, %185
  %609 = getelementptr i8, i8* %2, i64 %608
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %604, i8* align 1 %609, i64 %185, i1 false), !tbaa !14
  %610 = or i64 %599, 1
  %611 = add nuw i64 %596, %610
  %612 = and i64 %611, 4294967295
  %613 = mul nuw nsw i64 %612, %185
  %614 = getelementptr i8, i8* %586, i64 %613
  %615 = shl nuw nsw i64 %610, 3
  %616 = add nuw i64 %597, %615
  %617 = and i64 %616, 4294967288
  %618 = mul nuw nsw i64 %617, %185
  %619 = getelementptr i8, i8* %2, i64 %618
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %614, i8* align 1 %619, i64 %185, i1 false), !tbaa !14
  %620 = add nuw nsw i64 %599, 2
  %621 = add i64 %600, 2
  %622 = icmp eq i64 %621, %592
  br i1 %622, label %623, label %598

623:                                              ; preds = %598, %594
  %624 = phi i64 [ 0, %594 ], [ %620, %598 ]
  br i1 %593, label %635, label %625

625:                                              ; preds = %623
  %626 = add nuw i64 %596, %624
  %627 = and i64 %626, 4294967295
  %628 = mul nuw nsw i64 %627, %185
  %629 = getelementptr i8, i8* %586, i64 %628
  %630 = shl nuw nsw i64 %624, 3
  %631 = add nuw i64 %597, %630
  %632 = and i64 %631, 4294967288
  %633 = mul nuw nsw i64 %632, %185
  %634 = getelementptr i8, i8* %2, i64 %633
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %629, i8* align 1 %634, i64 %185, i1 false), !tbaa !14
  br label %635

635:                                              ; preds = %623, %625
  %636 = add nuw nsw i64 %595, 1
  %637 = icmp eq i64 %636, %589
  br i1 %637, label %188, label %594

638:                                              ; preds = %110, %577, %517, %521
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %91) #25
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %90) #25
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %89) #25
  call void @llvm.lifetime.end.p0i8(i64 28, i8* nonnull %88) #25
  call void @llvm.lifetime.end.p0i8(i64 28, i8* nonnull %87) #25
  %639 = icmp ult i32 %29, 8
  br i1 %639, label %652, label %640

640:                                              ; preds = %638
  %641 = load i8*, i8** %0, align 8, !tbaa !7
  %642 = load i64, i64* %72, align 16, !tbaa !3
  %643 = getelementptr inbounds i8, i8* %641, i64 %642
  %644 = load i64, i64* %73, align 16, !tbaa !3
  %645 = getelementptr inbounds i8, i8* %81, i64 %644
  %646 = load i32, i32* %70, align 16, !tbaa !9
  %647 = load i32, i32* %71, align 16, !tbaa !9
  %648 = load i32, i32* %18, align 8, !tbaa !147
  %649 = load i32, i32* %20, align 4, !tbaa !150
  %650 = tail call fastcc noundef i32 @_ZL6filterPhPKhjjPK16LodePNGColorModePK22LodePNGEncoderSettings(i8* noundef %643, i8* noundef %645, i32 noundef %646, i32 noundef %647, i32 %648, i32 %649, %struct.LodePNGEncoderSettings* noundef %6)
  %651 = icmp eq i32 %650, 0
  br i1 %651, label %837, label %932

652:                                              ; preds = %100, %638
  %653 = getelementptr inbounds [8 x i64], [8 x i64]* %16, i64 0, i64 1
  %654 = load i64, i64* %653, align 8, !tbaa !3
  %655 = load i64, i64* %73, align 16, !tbaa !3
  %656 = sub i64 %654, %655
  %657 = tail call noalias i8* @malloc(i64 noundef %656) #25
  %658 = icmp eq i8* %657, null
  br i1 %658, label %932, label %820

659:                                              ; preds = %820
  %660 = getelementptr inbounds [8 x i64], [8 x i64]* %16, i64 0, i64 2
  %661 = load i64, i64* %660, align 16, !tbaa !3
  %662 = sub i64 %661, %654
  %663 = tail call noalias i8* @malloc(i64 noundef %662) #25
  %664 = icmp eq i8* %663, null
  br i1 %664, label %932, label %665

665:                                              ; preds = %659
  %666 = getelementptr inbounds [8 x i64], [8 x i64]* %17, i64 0, i64 1
  %667 = load i64, i64* %666, align 8, !tbaa !3
  %668 = getelementptr inbounds i8, i8* %81, i64 %667
  %669 = getelementptr inbounds [7 x i32], [7 x i32]* %13, i64 0, i64 1
  %670 = load i32, i32* %669, align 4, !tbaa !9
  %671 = mul i32 %670, %29
  %672 = add i32 %671, 7
  %673 = and i32 %672, -8
  %674 = zext i32 %673 to i64
  %675 = zext i32 %671 to i64
  %676 = getelementptr inbounds [7 x i32], [7 x i32]* %14, i64 0, i64 1
  %677 = load i32, i32* %676, align 4, !tbaa !9
  tail call fastcc void @_ZL14addPaddingBitsPhPKhmmj(i8* noundef nonnull %663, i8* noundef %668, i64 noundef %674, i64 noundef %675, i32 noundef %677)
  %678 = load i8*, i8** %0, align 8, !tbaa !7
  %679 = getelementptr inbounds [8 x i64], [8 x i64]* %15, i64 0, i64 1
  %680 = load i64, i64* %679, align 8, !tbaa !3
  %681 = getelementptr inbounds i8, i8* %678, i64 %680
  %682 = load i32, i32* %18, align 8, !tbaa !147
  %683 = load i32, i32* %20, align 4, !tbaa !150
  %684 = tail call fastcc noundef i32 @_ZL6filterPhPKhjjPK16LodePNGColorModePK22LodePNGEncoderSettings(i8* noundef %681, i8* noundef nonnull %663, i32 noundef %670, i32 noundef %677, i32 %682, i32 %683, %struct.LodePNGEncoderSettings* noundef %6)
  tail call void @free(i8* noundef nonnull %663) #25
  %685 = icmp eq i32 %684, 0
  br i1 %685, label %686, label %932

686:                                              ; preds = %665
  %687 = getelementptr inbounds [8 x i64], [8 x i64]* %16, i64 0, i64 3
  %688 = load i64, i64* %687, align 8, !tbaa !3
  %689 = sub i64 %688, %661
  %690 = tail call noalias i8* @malloc(i64 noundef %689) #25
  %691 = icmp eq i8* %690, null
  br i1 %691, label %932, label %692

692:                                              ; preds = %686
  %693 = getelementptr inbounds [8 x i64], [8 x i64]* %17, i64 0, i64 2
  %694 = load i64, i64* %693, align 16, !tbaa !3
  %695 = getelementptr inbounds i8, i8* %81, i64 %694
  %696 = getelementptr inbounds [7 x i32], [7 x i32]* %13, i64 0, i64 2
  %697 = load i32, i32* %696, align 8, !tbaa !9
  %698 = mul i32 %697, %29
  %699 = add i32 %698, 7
  %700 = and i32 %699, -8
  %701 = zext i32 %700 to i64
  %702 = zext i32 %698 to i64
  %703 = getelementptr inbounds [7 x i32], [7 x i32]* %14, i64 0, i64 2
  %704 = load i32, i32* %703, align 8, !tbaa !9
  tail call fastcc void @_ZL14addPaddingBitsPhPKhmmj(i8* noundef nonnull %690, i8* noundef %695, i64 noundef %701, i64 noundef %702, i32 noundef %704)
  %705 = load i8*, i8** %0, align 8, !tbaa !7
  %706 = getelementptr inbounds [8 x i64], [8 x i64]* %15, i64 0, i64 2
  %707 = load i64, i64* %706, align 16, !tbaa !3
  %708 = getelementptr inbounds i8, i8* %705, i64 %707
  %709 = load i32, i32* %18, align 8, !tbaa !147
  %710 = load i32, i32* %20, align 4, !tbaa !150
  %711 = tail call fastcc noundef i32 @_ZL6filterPhPKhjjPK16LodePNGColorModePK22LodePNGEncoderSettings(i8* noundef %708, i8* noundef nonnull %690, i32 noundef %697, i32 noundef %704, i32 %709, i32 %710, %struct.LodePNGEncoderSettings* noundef %6)
  tail call void @free(i8* noundef nonnull %690) #25
  %712 = icmp eq i32 %711, 0
  br i1 %712, label %713, label %932

713:                                              ; preds = %692
  %714 = getelementptr inbounds [8 x i64], [8 x i64]* %16, i64 0, i64 4
  %715 = load i64, i64* %714, align 16, !tbaa !3
  %716 = sub i64 %715, %688
  %717 = tail call noalias i8* @malloc(i64 noundef %716) #25
  %718 = icmp eq i8* %717, null
  br i1 %718, label %932, label %719

719:                                              ; preds = %713
  %720 = getelementptr inbounds [8 x i64], [8 x i64]* %17, i64 0, i64 3
  %721 = load i64, i64* %720, align 8, !tbaa !3
  %722 = getelementptr inbounds i8, i8* %81, i64 %721
  %723 = getelementptr inbounds [7 x i32], [7 x i32]* %13, i64 0, i64 3
  %724 = load i32, i32* %723, align 4, !tbaa !9
  %725 = mul i32 %724, %29
  %726 = add i32 %725, 7
  %727 = and i32 %726, -8
  %728 = zext i32 %727 to i64
  %729 = zext i32 %725 to i64
  %730 = getelementptr inbounds [7 x i32], [7 x i32]* %14, i64 0, i64 3
  %731 = load i32, i32* %730, align 4, !tbaa !9
  tail call fastcc void @_ZL14addPaddingBitsPhPKhmmj(i8* noundef nonnull %717, i8* noundef %722, i64 noundef %728, i64 noundef %729, i32 noundef %731)
  %732 = load i8*, i8** %0, align 8, !tbaa !7
  %733 = getelementptr inbounds [8 x i64], [8 x i64]* %15, i64 0, i64 3
  %734 = load i64, i64* %733, align 8, !tbaa !3
  %735 = getelementptr inbounds i8, i8* %732, i64 %734
  %736 = load i32, i32* %18, align 8, !tbaa !147
  %737 = load i32, i32* %20, align 4, !tbaa !150
  %738 = tail call fastcc noundef i32 @_ZL6filterPhPKhjjPK16LodePNGColorModePK22LodePNGEncoderSettings(i8* noundef %735, i8* noundef nonnull %717, i32 noundef %724, i32 noundef %731, i32 %736, i32 %737, %struct.LodePNGEncoderSettings* noundef %6)
  tail call void @free(i8* noundef nonnull %717) #25
  %739 = icmp eq i32 %738, 0
  br i1 %739, label %740, label %932

740:                                              ; preds = %719
  %741 = getelementptr inbounds [8 x i64], [8 x i64]* %16, i64 0, i64 5
  %742 = load i64, i64* %741, align 8, !tbaa !3
  %743 = sub i64 %742, %715
  %744 = tail call noalias i8* @malloc(i64 noundef %743) #25
  %745 = icmp eq i8* %744, null
  br i1 %745, label %932, label %746

746:                                              ; preds = %740
  %747 = getelementptr inbounds [8 x i64], [8 x i64]* %17, i64 0, i64 4
  %748 = load i64, i64* %747, align 16, !tbaa !3
  %749 = getelementptr inbounds i8, i8* %81, i64 %748
  %750 = getelementptr inbounds [7 x i32], [7 x i32]* %13, i64 0, i64 4
  %751 = load i32, i32* %750, align 16, !tbaa !9
  %752 = mul i32 %751, %29
  %753 = add i32 %752, 7
  %754 = and i32 %753, -8
  %755 = zext i32 %754 to i64
  %756 = zext i32 %752 to i64
  %757 = getelementptr inbounds [7 x i32], [7 x i32]* %14, i64 0, i64 4
  %758 = load i32, i32* %757, align 16, !tbaa !9
  tail call fastcc void @_ZL14addPaddingBitsPhPKhmmj(i8* noundef nonnull %744, i8* noundef %749, i64 noundef %755, i64 noundef %756, i32 noundef %758)
  %759 = load i8*, i8** %0, align 8, !tbaa !7
  %760 = getelementptr inbounds [8 x i64], [8 x i64]* %15, i64 0, i64 4
  %761 = load i64, i64* %760, align 16, !tbaa !3
  %762 = getelementptr inbounds i8, i8* %759, i64 %761
  %763 = load i32, i32* %18, align 8, !tbaa !147
  %764 = load i32, i32* %20, align 4, !tbaa !150
  %765 = tail call fastcc noundef i32 @_ZL6filterPhPKhjjPK16LodePNGColorModePK22LodePNGEncoderSettings(i8* noundef %762, i8* noundef nonnull %744, i32 noundef %751, i32 noundef %758, i32 %763, i32 %764, %struct.LodePNGEncoderSettings* noundef %6)
  tail call void @free(i8* noundef nonnull %744) #25
  %766 = icmp eq i32 %765, 0
  br i1 %766, label %767, label %932

767:                                              ; preds = %746
  %768 = getelementptr inbounds [8 x i64], [8 x i64]* %16, i64 0, i64 6
  %769 = load i64, i64* %768, align 16, !tbaa !3
  %770 = sub i64 %769, %742
  %771 = tail call noalias i8* @malloc(i64 noundef %770) #25
  %772 = icmp eq i8* %771, null
  br i1 %772, label %932, label %773

773:                                              ; preds = %767
  %774 = getelementptr inbounds [8 x i64], [8 x i64]* %17, i64 0, i64 5
  %775 = load i64, i64* %774, align 8, !tbaa !3
  %776 = getelementptr inbounds i8, i8* %81, i64 %775
  %777 = getelementptr inbounds [7 x i32], [7 x i32]* %13, i64 0, i64 5
  %778 = load i32, i32* %777, align 4, !tbaa !9
  %779 = mul i32 %778, %29
  %780 = add i32 %779, 7
  %781 = and i32 %780, -8
  %782 = zext i32 %781 to i64
  %783 = zext i32 %779 to i64
  %784 = getelementptr inbounds [7 x i32], [7 x i32]* %14, i64 0, i64 5
  %785 = load i32, i32* %784, align 4, !tbaa !9
  tail call fastcc void @_ZL14addPaddingBitsPhPKhmmj(i8* noundef nonnull %771, i8* noundef %776, i64 noundef %782, i64 noundef %783, i32 noundef %785)
  %786 = load i8*, i8** %0, align 8, !tbaa !7
  %787 = getelementptr inbounds [8 x i64], [8 x i64]* %15, i64 0, i64 5
  %788 = load i64, i64* %787, align 8, !tbaa !3
  %789 = getelementptr inbounds i8, i8* %786, i64 %788
  %790 = load i32, i32* %18, align 8, !tbaa !147
  %791 = load i32, i32* %20, align 4, !tbaa !150
  %792 = tail call fastcc noundef i32 @_ZL6filterPhPKhjjPK16LodePNGColorModePK22LodePNGEncoderSettings(i8* noundef %789, i8* noundef nonnull %771, i32 noundef %778, i32 noundef %785, i32 %790, i32 %791, %struct.LodePNGEncoderSettings* noundef %6)
  tail call void @free(i8* noundef nonnull %771) #25
  %793 = icmp eq i32 %792, 0
  br i1 %793, label %794, label %932

794:                                              ; preds = %773
  %795 = getelementptr inbounds [8 x i64], [8 x i64]* %16, i64 0, i64 7
  %796 = load i64, i64* %795, align 8, !tbaa !3
  %797 = sub i64 %796, %769
  %798 = tail call noalias i8* @malloc(i64 noundef %797) #25
  %799 = icmp eq i8* %798, null
  br i1 %799, label %932, label %800

800:                                              ; preds = %794
  %801 = getelementptr inbounds [8 x i64], [8 x i64]* %17, i64 0, i64 6
  %802 = load i64, i64* %801, align 16, !tbaa !3
  %803 = getelementptr inbounds i8, i8* %81, i64 %802
  %804 = getelementptr inbounds [7 x i32], [7 x i32]* %13, i64 0, i64 6
  %805 = load i32, i32* %804, align 8, !tbaa !9
  %806 = mul i32 %805, %29
  %807 = add i32 %806, 7
  %808 = and i32 %807, -8
  %809 = zext i32 %808 to i64
  %810 = zext i32 %806 to i64
  %811 = getelementptr inbounds [7 x i32], [7 x i32]* %14, i64 0, i64 6
  %812 = load i32, i32* %811, align 8, !tbaa !9
  tail call fastcc void @_ZL14addPaddingBitsPhPKhmmj(i8* noundef nonnull %798, i8* noundef %803, i64 noundef %809, i64 noundef %810, i32 noundef %812)
  %813 = load i8*, i8** %0, align 8, !tbaa !7
  %814 = getelementptr inbounds [8 x i64], [8 x i64]* %15, i64 0, i64 6
  %815 = load i64, i64* %814, align 16, !tbaa !3
  %816 = getelementptr inbounds i8, i8* %813, i64 %815
  %817 = load i32, i32* %18, align 8, !tbaa !147
  %818 = load i32, i32* %20, align 4, !tbaa !150
  %819 = tail call fastcc noundef i32 @_ZL6filterPhPKhjjPK16LodePNGColorModePK22LodePNGEncoderSettings(i8* noundef %816, i8* noundef nonnull %798, i32 noundef %805, i32 noundef %812, i32 %817, i32 %818, %struct.LodePNGEncoderSettings* noundef %6)
  tail call void @free(i8* noundef nonnull %798) #25
  br label %932

820:                                              ; preds = %652
  %821 = load i64, i64* %74, align 16, !tbaa !3
  %822 = getelementptr inbounds i8, i8* %81, i64 %821
  %823 = load i32, i32* %70, align 16, !tbaa !9
  %824 = mul i32 %823, %29
  %825 = add i32 %824, 7
  %826 = and i32 %825, -8
  %827 = zext i32 %826 to i64
  %828 = zext i32 %824 to i64
  %829 = load i32, i32* %71, align 16, !tbaa !9
  tail call fastcc void @_ZL14addPaddingBitsPhPKhmmj(i8* noundef nonnull %657, i8* noundef %822, i64 noundef %827, i64 noundef %828, i32 noundef %829)
  %830 = load i8*, i8** %0, align 8, !tbaa !7
  %831 = load i64, i64* %72, align 16, !tbaa !3
  %832 = getelementptr inbounds i8, i8* %830, i64 %831
  %833 = load i32, i32* %18, align 8, !tbaa !147
  %834 = load i32, i32* %20, align 4, !tbaa !150
  %835 = tail call fastcc noundef i32 @_ZL6filterPhPKhjjPK16LodePNGColorModePK22LodePNGEncoderSettings(i8* noundef %832, i8* noundef nonnull %657, i32 noundef %823, i32 noundef %829, i32 %833, i32 %834, %struct.LodePNGEncoderSettings* noundef %6)
  tail call void @free(i8* noundef nonnull %657) #25
  %836 = icmp eq i32 %835, 0
  br i1 %836, label %659, label %932

837:                                              ; preds = %640
  %838 = load i8*, i8** %0, align 8, !tbaa !7
  %839 = getelementptr inbounds [8 x i64], [8 x i64]* %15, i64 0, i64 1
  %840 = load i64, i64* %839, align 8, !tbaa !3
  %841 = getelementptr inbounds i8, i8* %838, i64 %840
  %842 = getelementptr inbounds [8 x i64], [8 x i64]* %16, i64 0, i64 1
  %843 = load i64, i64* %842, align 8, !tbaa !3
  %844 = getelementptr inbounds i8, i8* %81, i64 %843
  %845 = getelementptr inbounds [7 x i32], [7 x i32]* %13, i64 0, i64 1
  %846 = load i32, i32* %845, align 4, !tbaa !9
  %847 = getelementptr inbounds [7 x i32], [7 x i32]* %14, i64 0, i64 1
  %848 = load i32, i32* %847, align 4, !tbaa !9
  %849 = load i32, i32* %18, align 8, !tbaa !147
  %850 = load i32, i32* %20, align 4, !tbaa !150
  %851 = tail call fastcc noundef i32 @_ZL6filterPhPKhjjPK16LodePNGColorModePK22LodePNGEncoderSettings(i8* noundef %841, i8* noundef %844, i32 noundef %846, i32 noundef %848, i32 %849, i32 %850, %struct.LodePNGEncoderSettings* noundef %6)
  %852 = icmp eq i32 %851, 0
  br i1 %852, label %853, label %932

853:                                              ; preds = %837
  %854 = load i8*, i8** %0, align 8, !tbaa !7
  %855 = getelementptr inbounds [8 x i64], [8 x i64]* %15, i64 0, i64 2
  %856 = load i64, i64* %855, align 16, !tbaa !3
  %857 = getelementptr inbounds i8, i8* %854, i64 %856
  %858 = getelementptr inbounds [8 x i64], [8 x i64]* %16, i64 0, i64 2
  %859 = load i64, i64* %858, align 16, !tbaa !3
  %860 = getelementptr inbounds i8, i8* %81, i64 %859
  %861 = getelementptr inbounds [7 x i32], [7 x i32]* %13, i64 0, i64 2
  %862 = load i32, i32* %861, align 8, !tbaa !9
  %863 = getelementptr inbounds [7 x i32], [7 x i32]* %14, i64 0, i64 2
  %864 = load i32, i32* %863, align 8, !tbaa !9
  %865 = load i32, i32* %18, align 8, !tbaa !147
  %866 = load i32, i32* %20, align 4, !tbaa !150
  %867 = tail call fastcc noundef i32 @_ZL6filterPhPKhjjPK16LodePNGColorModePK22LodePNGEncoderSettings(i8* noundef %857, i8* noundef %860, i32 noundef %862, i32 noundef %864, i32 %865, i32 %866, %struct.LodePNGEncoderSettings* noundef %6)
  %868 = icmp eq i32 %867, 0
  br i1 %868, label %869, label %932

869:                                              ; preds = %853
  %870 = load i8*, i8** %0, align 8, !tbaa !7
  %871 = getelementptr inbounds [8 x i64], [8 x i64]* %15, i64 0, i64 3
  %872 = load i64, i64* %871, align 8, !tbaa !3
  %873 = getelementptr inbounds i8, i8* %870, i64 %872
  %874 = getelementptr inbounds [8 x i64], [8 x i64]* %16, i64 0, i64 3
  %875 = load i64, i64* %874, align 8, !tbaa !3
  %876 = getelementptr inbounds i8, i8* %81, i64 %875
  %877 = getelementptr inbounds [7 x i32], [7 x i32]* %13, i64 0, i64 3
  %878 = load i32, i32* %877, align 4, !tbaa !9
  %879 = getelementptr inbounds [7 x i32], [7 x i32]* %14, i64 0, i64 3
  %880 = load i32, i32* %879, align 4, !tbaa !9
  %881 = load i32, i32* %18, align 8, !tbaa !147
  %882 = load i32, i32* %20, align 4, !tbaa !150
  %883 = tail call fastcc noundef i32 @_ZL6filterPhPKhjjPK16LodePNGColorModePK22LodePNGEncoderSettings(i8* noundef %873, i8* noundef %876, i32 noundef %878, i32 noundef %880, i32 %881, i32 %882, %struct.LodePNGEncoderSettings* noundef %6)
  %884 = icmp eq i32 %883, 0
  br i1 %884, label %885, label %932

885:                                              ; preds = %869
  %886 = load i8*, i8** %0, align 8, !tbaa !7
  %887 = getelementptr inbounds [8 x i64], [8 x i64]* %15, i64 0, i64 4
  %888 = load i64, i64* %887, align 16, !tbaa !3
  %889 = getelementptr inbounds i8, i8* %886, i64 %888
  %890 = getelementptr inbounds [8 x i64], [8 x i64]* %16, i64 0, i64 4
  %891 = load i64, i64* %890, align 16, !tbaa !3
  %892 = getelementptr inbounds i8, i8* %81, i64 %891
  %893 = getelementptr inbounds [7 x i32], [7 x i32]* %13, i64 0, i64 4
  %894 = load i32, i32* %893, align 16, !tbaa !9
  %895 = getelementptr inbounds [7 x i32], [7 x i32]* %14, i64 0, i64 4
  %896 = load i32, i32* %895, align 16, !tbaa !9
  %897 = load i32, i32* %18, align 8, !tbaa !147
  %898 = load i32, i32* %20, align 4, !tbaa !150
  %899 = tail call fastcc noundef i32 @_ZL6filterPhPKhjjPK16LodePNGColorModePK22LodePNGEncoderSettings(i8* noundef %889, i8* noundef %892, i32 noundef %894, i32 noundef %896, i32 %897, i32 %898, %struct.LodePNGEncoderSettings* noundef %6)
  %900 = icmp eq i32 %899, 0
  br i1 %900, label %901, label %932

901:                                              ; preds = %885
  %902 = load i8*, i8** %0, align 8, !tbaa !7
  %903 = getelementptr inbounds [8 x i64], [8 x i64]* %15, i64 0, i64 5
  %904 = load i64, i64* %903, align 8, !tbaa !3
  %905 = getelementptr inbounds i8, i8* %902, i64 %904
  %906 = getelementptr inbounds [8 x i64], [8 x i64]* %16, i64 0, i64 5
  %907 = load i64, i64* %906, align 8, !tbaa !3
  %908 = getelementptr inbounds i8, i8* %81, i64 %907
  %909 = getelementptr inbounds [7 x i32], [7 x i32]* %13, i64 0, i64 5
  %910 = load i32, i32* %909, align 4, !tbaa !9
  %911 = getelementptr inbounds [7 x i32], [7 x i32]* %14, i64 0, i64 5
  %912 = load i32, i32* %911, align 4, !tbaa !9
  %913 = load i32, i32* %18, align 8, !tbaa !147
  %914 = load i32, i32* %20, align 4, !tbaa !150
  %915 = tail call fastcc noundef i32 @_ZL6filterPhPKhjjPK16LodePNGColorModePK22LodePNGEncoderSettings(i8* noundef %905, i8* noundef %908, i32 noundef %910, i32 noundef %912, i32 %913, i32 %914, %struct.LodePNGEncoderSettings* noundef %6)
  %916 = icmp eq i32 %915, 0
  br i1 %916, label %917, label %932

917:                                              ; preds = %901
  %918 = load i8*, i8** %0, align 8, !tbaa !7
  %919 = getelementptr inbounds [8 x i64], [8 x i64]* %15, i64 0, i64 6
  %920 = load i64, i64* %919, align 16, !tbaa !3
  %921 = getelementptr inbounds i8, i8* %918, i64 %920
  %922 = getelementptr inbounds [8 x i64], [8 x i64]* %16, i64 0, i64 6
  %923 = load i64, i64* %922, align 16, !tbaa !3
  %924 = getelementptr inbounds i8, i8* %81, i64 %923
  %925 = getelementptr inbounds [7 x i32], [7 x i32]* %13, i64 0, i64 6
  %926 = load i32, i32* %925, align 8, !tbaa !9
  %927 = getelementptr inbounds [7 x i32], [7 x i32]* %14, i64 0, i64 6
  %928 = load i32, i32* %927, align 8, !tbaa !9
  %929 = load i32, i32* %18, align 8, !tbaa !147
  %930 = load i32, i32* %20, align 4, !tbaa !150
  %931 = tail call fastcc noundef i32 @_ZL6filterPhPKhjjPK16LodePNGColorModePK22LodePNGEncoderSettings(i8* noundef %921, i8* noundef %924, i32 noundef %926, i32 noundef %928, i32 %929, i32 %930, %struct.LodePNGEncoderSettings* noundef %6)
  br label %932

932:                                              ; preds = %917, %800, %640, %837, %853, %869, %885, %901, %820, %652, %659, %665, %686, %692, %713, %719, %740, %746, %767, %773, %794, %64
  %933 = phi i32 [ 83, %64 ], [ %835, %820 ], [ 83, %652 ], [ 83, %659 ], [ %684, %665 ], [ 83, %686 ], [ %711, %692 ], [ 83, %713 ], [ %738, %719 ], [ 83, %740 ], [ %765, %746 ], [ 83, %767 ], [ %792, %773 ], [ 83, %794 ], [ %650, %640 ], [ %851, %837 ], [ %867, %853 ], [ %883, %869 ], [ %899, %885 ], [ %915, %901 ], [ %819, %800 ], [ %931, %917 ]
  tail call void @free(i8* noundef %81) #25
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %69) #25
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %68) #25
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %67) #25
  call void @llvm.lifetime.end.p0i8(i64 28, i8* nonnull %66) #25
  call void @llvm.lifetime.end.p0i8(i64 28, i8* nonnull %65) #25
  br label %934

934:                                              ; preds = %33, %62, %60, %932
  %935 = phi i32 [ %61, %60 ], [ %63, %62 ], [ %933, %932 ], [ 83, %33 ]
  ret i32 %935
}

; Function Attrs: mustprogress nounwind uwtable willreturn
define internal fastcc noundef i32 @_ZL14writeSignatureP8ucvector(%struct.ucvector* nocapture noundef %0) unnamed_addr #19 {
  %2 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %0, i64 0, i32 1
  %3 = load i64, i64* %2, align 8, !tbaa !44
  %4 = add i64 %3, 8
  store i64 %4, i64* %2, align 8, !tbaa !44
  %5 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %0, i64 0, i32 2
  %6 = load i64, i64* %5, align 8, !tbaa !45
  %7 = icmp ult i64 %6, %4
  br i1 %7, label %11, label %8

8:                                                ; preds = %1
  %9 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %0, i64 0, i32 0
  %10 = load i8*, i8** %9, align 8, !tbaa !39
  br label %19

11:                                               ; preds = %1
  %12 = lshr i64 %6, 1
  %13 = add i64 %12, %4
  %14 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %0, i64 0, i32 0
  %15 = load i8*, i8** %14, align 8, !tbaa !39
  %16 = tail call i8* @realloc(i8* noundef %15, i64 noundef %13) #25
  %17 = icmp eq i8* %16, null
  br i1 %17, label %23, label %18

18:                                               ; preds = %11
  store i64 %13, i64* %5, align 8, !tbaa !45
  store i8* %16, i8** %14, align 8, !tbaa !39
  br label %19

19:                                               ; preds = %8, %18
  %20 = phi i8* [ %10, %8 ], [ %16, %18 ]
  %21 = getelementptr inbounds i8, i8* %20, i64 %3
  %22 = bitcast i8* %21 to i64*
  store i64 727905341920923785, i64* %22, align 1, !tbaa !14, !alias.scope !654
  br label %23

23:                                               ; preds = %11, %19
  %24 = phi i32 [ 0, %19 ], [ 83, %11 ]
  ret i32 %24
}

; Function Attrs: nounwind uwtable
define internal fastcc noundef i32 @_ZL13addChunk_IHDRP8ucvectorjj16LodePNGColorTypejj(%struct.ucvector* nocapture noundef %0, i32 noundef %1, i32 noundef %2, i32 noundef %3, i32 noundef %4, i32 noundef %5) unnamed_addr #3 {
  %7 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %0, i64 0, i32 1
  %8 = load i64, i64* %7, align 8, !tbaa !44
  %9 = icmp ugt i64 %8, -14
  br i1 %9, label %68, label %10

10:                                               ; preds = %6
  %11 = add i64 %8, 25
  %12 = icmp ult i64 %8, -25
  br i1 %12, label %13, label %68

13:                                               ; preds = %10
  store i64 %11, i64* %7, align 8, !tbaa !44
  %14 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %0, i64 0, i32 2
  %15 = load i64, i64* %14, align 8, !tbaa !45
  %16 = icmp ult i64 %15, %11
  br i1 %16, label %20, label %17

17:                                               ; preds = %13
  %18 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %0, i64 0, i32 0
  %19 = load i8*, i8** %18, align 8, !tbaa !39
  br label %28

20:                                               ; preds = %13
  %21 = lshr i64 %15, 1
  %22 = add i64 %21, %11
  %23 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %0, i64 0, i32 0
  %24 = load i8*, i8** %23, align 8, !tbaa !39
  %25 = tail call i8* @realloc(i8* noundef %24, i64 noundef %22) #25
  %26 = icmp eq i8* %25, null
  br i1 %26, label %68, label %27

27:                                               ; preds = %20
  store i64 %22, i64* %14, align 8, !tbaa !45
  store i8* %25, i8** %23, align 8, !tbaa !39
  br label %28

28:                                               ; preds = %27, %17
  %29 = phi i8* [ %19, %17 ], [ %25, %27 ]
  %30 = getelementptr inbounds i8, i8* %29, i64 %11
  %31 = getelementptr inbounds i8, i8* %30, i64 -13
  %32 = getelementptr inbounds i8, i8* %31, i64 -12
  store i8 0, i8* %32, align 1, !tbaa !14
  %33 = getelementptr inbounds i8, i8* %32, i64 1
  store i8 0, i8* %33, align 1, !tbaa !14
  %34 = getelementptr inbounds i8, i8* %32, i64 2
  store i8 0, i8* %34, align 1, !tbaa !14
  %35 = getelementptr inbounds i8, i8* %32, i64 3
  store i8 13, i8* %35, align 1, !tbaa !14
  %36 = getelementptr inbounds i8, i8* %32, i64 4
  %37 = bitcast i8* %36 to i32*
  store i32 1380206665, i32* %37, align 1, !tbaa !14
  %38 = getelementptr inbounds i8, i8* %32, i64 8
  %39 = lshr i32 %1, 24
  %40 = trunc i32 %39 to i8
  store i8 %40, i8* %38, align 1, !tbaa !14
  %41 = lshr i32 %1, 16
  %42 = trunc i32 %41 to i8
  %43 = getelementptr inbounds i8, i8* %38, i64 1
  store i8 %42, i8* %43, align 1, !tbaa !14
  %44 = lshr i32 %1, 8
  %45 = trunc i32 %44 to i8
  %46 = getelementptr inbounds i8, i8* %38, i64 2
  store i8 %45, i8* %46, align 1, !tbaa !14
  %47 = trunc i32 %1 to i8
  %48 = getelementptr inbounds i8, i8* %38, i64 3
  store i8 %47, i8* %48, align 1, !tbaa !14
  %49 = getelementptr inbounds i8, i8* %32, i64 12
  %50 = lshr i32 %2, 24
  %51 = trunc i32 %50 to i8
  store i8 %51, i8* %49, align 1, !tbaa !14
  %52 = lshr i32 %2, 16
  %53 = trunc i32 %52 to i8
  %54 = getelementptr inbounds i8, i8* %49, i64 1
  store i8 %53, i8* %54, align 1, !tbaa !14
  %55 = lshr i32 %2, 8
  %56 = trunc i32 %55 to i8
  %57 = getelementptr inbounds i8, i8* %49, i64 2
  store i8 %56, i8* %57, align 1, !tbaa !14
  %58 = trunc i32 %2 to i8
  %59 = getelementptr inbounds i8, i8* %49, i64 3
  store i8 %58, i8* %59, align 1, !tbaa !14
  %60 = trunc i32 %4 to i8
  %61 = getelementptr inbounds i8, i8* %32, i64 16
  store i8 %60, i8* %61, align 1, !tbaa !14
  %62 = trunc i32 %3 to i8
  %63 = getelementptr inbounds i8, i8* %32, i64 17
  store i8 %62, i8* %63, align 1, !tbaa !14
  %64 = getelementptr inbounds i8, i8* %32, i64 18
  store i8 0, i8* %64, align 1, !tbaa !14
  %65 = getelementptr inbounds i8, i8* %32, i64 19
  store i8 0, i8* %65, align 1, !tbaa !14
  %66 = trunc i32 %5 to i8
  %67 = getelementptr inbounds i8, i8* %32, i64 20
  store i8 %66, i8* %67, align 1, !tbaa !14
  tail call void @_Z26lodepng_chunk_generate_crcPh(i8* noundef nonnull %32)
  br label %68

68:                                               ; preds = %20, %10, %6, %28
  %69 = phi i32 [ 0, %28 ], [ 83, %20 ], [ 77, %10 ], [ 77, %6 ]
  ret i32 %69
}

; Function Attrs: nounwind uwtable
define internal fastcc noundef i32 @_ZL16addUnknownChunksP8ucvectorPhm(%struct.ucvector* nocapture noundef %0, i8* noundef %1, i64 noundef %2) unnamed_addr #3 {
  %4 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %0, i64 0, i32 0
  %5 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %0, i64 0, i32 1
  %6 = ptrtoint i8* %1 to i64
  %7 = icmp eq i64 %2, 0
  br i1 %7, label %109, label %8

8:                                                ; preds = %3
  %9 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %0, i64 0, i32 2
  %10 = getelementptr inbounds i8, i8* %1, i64 %2
  %11 = ptrtoint i8* %10 to i64
  %12 = load i64, i64* %5, align 8, !tbaa !3
  br label %13

13:                                               ; preds = %8, %104
  %14 = phi i64 [ %12, %8 ], [ %35, %104 ]
  %15 = phi i64 [ %6, %8 ], [ %106, %104 ]
  %16 = phi i8* [ %1, %8 ], [ %105, %104 ]
  %17 = load i8, i8* %16, align 1, !tbaa !14
  %18 = zext i8 %17 to i64
  %19 = shl nuw nsw i64 %18, 24
  %20 = getelementptr inbounds i8, i8* %16, i64 1
  %21 = load i8, i8* %20, align 1, !tbaa !14
  %22 = zext i8 %21 to i64
  %23 = shl nuw nsw i64 %22, 16
  %24 = or i64 %23, %19
  %25 = getelementptr inbounds i8, i8* %16, i64 2
  %26 = load i8, i8* %25, align 1, !tbaa !14
  %27 = zext i8 %26 to i64
  %28 = shl nuw nsw i64 %27, 8
  %29 = or i64 %24, %28
  %30 = getelementptr inbounds i8, i8* %16, i64 3
  %31 = load i8, i8* %30, align 1, !tbaa !14
  %32 = zext i8 %31 to i64
  %33 = or i64 %29, %32
  %34 = add nuw nsw i64 %33, 12
  %35 = add i64 %34, %14
  %36 = icmp ult i64 %35, %14
  br i1 %36, label %109, label %37

37:                                               ; preds = %13
  %38 = load i8*, i8** %4, align 8, !tbaa !7
  %39 = tail call i8* @realloc(i8* noundef %38, i64 noundef %35) #25
  %40 = icmp eq i8* %39, null
  br i1 %40, label %109, label %41

41:                                               ; preds = %37
  store i8* %39, i8** %4, align 8, !tbaa !7
  store i64 %35, i64* %5, align 8, !tbaa !3
  %42 = getelementptr inbounds i8, i8* %39, i64 %14
  br label %43

43:                                               ; preds = %43, %41
  %44 = phi i64 [ 0, %41 ], [ %49, %43 ]
  %45 = getelementptr inbounds i8, i8* %16, i64 %44
  %46 = load i8, i8* %45, align 1, !tbaa !14
  %47 = getelementptr inbounds i8, i8* %42, i64 %44
  store i8 %46, i8* %47, align 1, !tbaa !14
  %48 = add nuw nsw i64 %44, 1
  %49 = and i64 %48, 4294967295
  %50 = icmp eq i64 %34, %49
  br i1 %50, label %51, label %43

51:                                               ; preds = %43
  store i64 %35, i64* %9, align 8, !tbaa !45
  %52 = sub i64 %11, %15
  %53 = icmp uge i8* %16, %10
  %54 = icmp ult i64 %52, 12
  %55 = or i1 %53, %54
  br i1 %55, label %104, label %56

56:                                               ; preds = %51
  %57 = load i8, i8* %16, align 1, !tbaa !14
  %58 = icmp eq i8 %57, -119
  %59 = load i8, i8* %20, align 1, !tbaa !14
  %60 = icmp eq i8 %59, 80
  %61 = select i1 %58, i1 %60, i1 false
  %62 = load i8, i8* %25, align 1, !tbaa !14
  br i1 %61, label %63, label %86

63:                                               ; preds = %56
  %64 = icmp eq i8 %62, 78
  br i1 %64, label %65, label %86

65:                                               ; preds = %63
  %66 = load i8, i8* %30, align 1, !tbaa !14
  %67 = icmp eq i8 %66, 71
  br i1 %67, label %68, label %86

68:                                               ; preds = %65
  %69 = getelementptr inbounds i8, i8* %16, i64 4
  %70 = load i8, i8* %69, align 1, !tbaa !14
  %71 = icmp eq i8 %70, 13
  br i1 %71, label %72, label %86

72:                                               ; preds = %68
  %73 = getelementptr inbounds i8, i8* %16, i64 5
  %74 = load i8, i8* %73, align 1, !tbaa !14
  %75 = icmp eq i8 %74, 10
  br i1 %75, label %76, label %86

76:                                               ; preds = %72
  %77 = getelementptr inbounds i8, i8* %16, i64 6
  %78 = load i8, i8* %77, align 1, !tbaa !14
  %79 = icmp eq i8 %78, 26
  br i1 %79, label %80, label %86

80:                                               ; preds = %76
  %81 = getelementptr inbounds i8, i8* %16, i64 7
  %82 = load i8, i8* %81, align 1, !tbaa !14
  %83 = icmp eq i8 %82, 10
  br i1 %83, label %84, label %86

84:                                               ; preds = %80
  %85 = getelementptr inbounds i8, i8* %16, i64 8
  br label %104

86:                                               ; preds = %56, %80, %76, %72, %68, %65, %63
  %87 = phi i8 [ 78, %80 ], [ 78, %76 ], [ 78, %72 ], [ 78, %68 ], [ 78, %65 ], [ %62, %63 ], [ %62, %56 ]
  %88 = phi i8 [ 80, %80 ], [ 80, %76 ], [ 80, %72 ], [ 80, %68 ], [ 80, %65 ], [ 80, %63 ], [ %59, %56 ]
  %89 = zext i8 %57 to i64
  %90 = shl nuw nsw i64 %89, 24
  %91 = zext i8 %88 to i64
  %92 = shl nuw nsw i64 %91, 16
  %93 = zext i8 %87 to i64
  %94 = shl nuw nsw i64 %93, 8
  %95 = load i8, i8* %30, align 1, !tbaa !14
  %96 = zext i8 %95 to i64
  %97 = or i64 %90, %92
  %98 = or i64 %97, 12
  %99 = add nuw nsw i64 %98, %96
  %100 = add nuw nsw i64 %99, %94
  %101 = icmp ugt i64 %100, %52
  %102 = getelementptr inbounds i8, i8* %16, i64 %100
  %103 = select i1 %101, i8* %10, i8* %102
  br label %104

104:                                              ; preds = %51, %84, %86
  %105 = phi i8* [ %85, %84 ], [ %103, %86 ], [ %10, %51 ]
  %106 = ptrtoint i8* %105 to i64
  %107 = sub i64 %106, %6
  %108 = icmp ult i64 %107, %2
  br i1 %108, label %13, label %109

109:                                              ; preds = %104, %13, %37, %3
  %110 = phi i32 [ 0, %3 ], [ 83, %37 ], [ 77, %13 ], [ 0, %104 ]
  ret i32 %110
}

; Function Attrs: uwtable
define internal fastcc noundef i32 @_ZL13addChunk_iCCPP8ucvectorPK11LodePNGInfoP23LodePNGCompressSettings(%struct.ucvector* nocapture noundef %0, %struct.LodePNGInfo* nocapture noundef readonly %1, %struct.LodePNGCompressSettings* noundef %2) unnamed_addr #12 {
  %4 = alloca i8*, align 8
  %5 = alloca i64, align 8
  %6 = bitcast i8** %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %6) #25
  store i8* null, i8** %4, align 8, !tbaa !7
  %7 = bitcast i64* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %7) #25
  store i64 0, i64* %5, align 8, !tbaa !3
  %8 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %1, i64 0, i32 36
  %9 = load i8*, i8** %8, align 8, !tbaa !196
  br label %10

10:                                               ; preds = %10, %3
  %11 = phi i8* [ %9, %3 ], [ %14, %10 ]
  %12 = load i8, i8* %11, align 1, !tbaa !14
  %13 = icmp eq i8 %12, 0
  %14 = getelementptr inbounds i8, i8* %11, i64 1
  br i1 %13, label %15, label %10

15:                                               ; preds = %10
  %16 = ptrtoint i8* %11 to i64
  %17 = ptrtoint i8* %9 to i64
  %18 = sub i64 %16, %17
  %19 = add i64 %18, -80
  %20 = icmp ult i64 %19, -79
  br i1 %20, label %98, label %21

21:                                               ; preds = %15
  %22 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %1, i64 0, i32 37
  %23 = load i8*, i8** %22, align 8, !tbaa !197
  %24 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %1, i64 0, i32 38
  %25 = load i32, i32* %24, align 8, !tbaa !198
  %26 = zext i32 %25 to i64
  %27 = getelementptr inbounds %struct.LodePNGCompressSettings, %struct.LodePNGCompressSettings* %2, i64 0, i32 6
  %28 = bitcast {}** %27 to i32 (i8**, i64*, i8*, i64, %struct.LodePNGCompressSettings*)**
  %29 = load i32 (i8**, i64*, i8*, i64, %struct.LodePNGCompressSettings*)*, i32 (i8**, i64*, i8*, i64, %struct.LodePNGCompressSettings*)** %28, align 8, !tbaa !658
  %30 = icmp eq i32 (i8**, i64*, i8*, i64, %struct.LodePNGCompressSettings*)* %29, null
  br i1 %30, label %34, label %31

31:                                               ; preds = %21
  %32 = call noundef i32 %29(i8** noundef nonnull %4, i64* noundef nonnull %5, i8* noundef %23, i64 noundef %26, %struct.LodePNGCompressSettings* noundef nonnull %2)
  %33 = icmp eq i32 %32, 0
  br i1 %33, label %37, label %95

34:                                               ; preds = %21
  %35 = call noundef i32 @_Z21lodepng_zlib_compressPPhPmPKhmPK23LodePNGCompressSettings(i8** noundef nonnull %4, i64* noundef nonnull %5, i8* noundef %23, i64 noundef %26, %struct.LodePNGCompressSettings* noundef nonnull %2)
  %36 = icmp eq i32 %35, 0
  br i1 %36, label %37, label %95

37:                                               ; preds = %31, %34
  %38 = add nuw nsw i64 %18, 2
  %39 = load i64, i64* %5, align 8, !tbaa !3
  %40 = add i64 %38, %39
  %41 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %0, i64 0, i32 1
  %42 = load i64, i64* %41, align 8, !tbaa !44
  %43 = and i64 %40, 4294967295
  %44 = add i64 %43, %42
  %45 = icmp ult i64 %44, %42
  br i1 %45, label %95, label %46

46:                                               ; preds = %37
  %47 = add i64 %44, 12
  %48 = icmp ult i64 %44, -12
  br i1 %48, label %49, label %95

49:                                               ; preds = %46
  store i64 %47, i64* %41, align 8, !tbaa !44
  %50 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %0, i64 0, i32 2
  %51 = load i64, i64* %50, align 8, !tbaa !45
  %52 = icmp ult i64 %51, %47
  br i1 %52, label %56, label %53

53:                                               ; preds = %49
  %54 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %0, i64 0, i32 0
  %55 = load i8*, i8** %54, align 8, !tbaa !39
  br label %64

56:                                               ; preds = %49
  %57 = lshr i64 %51, 1
  %58 = add i64 %57, %47
  %59 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %0, i64 0, i32 0
  %60 = load i8*, i8** %59, align 8, !tbaa !39
  %61 = call i8* @realloc(i8* noundef %60, i64 noundef %58) #25
  %62 = icmp eq i8* %61, null
  br i1 %62, label %95, label %63

63:                                               ; preds = %56
  store i64 %58, i64* %50, align 8, !tbaa !45
  store i8* %61, i8** %59, align 8, !tbaa !39
  br label %64

64:                                               ; preds = %63, %53
  %65 = phi i8* [ %55, %53 ], [ %61, %63 ]
  %66 = getelementptr inbounds i8, i8* %65, i64 %47
  %67 = sub nsw i64 0, %43
  %68 = getelementptr inbounds i8, i8* %66, i64 %67
  %69 = getelementptr inbounds i8, i8* %68, i64 -12
  %70 = lshr i64 %40, 24
  %71 = trunc i64 %70 to i8
  store i8 %71, i8* %69, align 1, !tbaa !14
  %72 = lshr i64 %40, 16
  %73 = trunc i64 %72 to i8
  %74 = getelementptr inbounds i8, i8* %69, i64 1
  store i8 %73, i8* %74, align 1, !tbaa !14
  %75 = lshr i64 %40, 8
  %76 = trunc i64 %75 to i8
  %77 = getelementptr inbounds i8, i8* %69, i64 2
  store i8 %76, i8* %77, align 1, !tbaa !14
  %78 = trunc i64 %40 to i8
  %79 = getelementptr inbounds i8, i8* %69, i64 3
  store i8 %78, i8* %79, align 1, !tbaa !14
  %80 = getelementptr inbounds i8, i8* %69, i64 4
  %81 = bitcast i8* %80 to i32*
  store i32 1346585449, i32* %81, align 1, !tbaa !14
  %82 = getelementptr inbounds i8, i8* %69, i64 8
  %83 = load i8*, i8** %8, align 8, !tbaa !196
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %82, i8* align 1 %83, i64 %18, i1 false) #25, !tbaa !14, !alias.scope !659
  %84 = add nuw nsw i64 %18, 8
  %85 = getelementptr inbounds i8, i8* %69, i64 %84
  store i8 0, i8* %85, align 1, !tbaa !14
  %86 = add nuw nsw i64 %18, 9
  %87 = getelementptr inbounds i8, i8* %69, i64 %86
  store i8 0, i8* %87, align 1, !tbaa !14
  %88 = load i64, i64* %5, align 8, !tbaa !3
  %89 = icmp eq i64 %88, 0
  br i1 %89, label %94, label %90

90:                                               ; preds = %64
  %91 = load i8*, i8** %4, align 8, !tbaa !7
  %92 = getelementptr inbounds i8, i8* %69, i64 10
  %93 = getelementptr inbounds i8, i8* %92, i64 %18
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %93, i8* align 1 %91, i64 %88, i1 false) #25, !tbaa !14, !alias.scope !663
  br label %94

94:                                               ; preds = %64, %90
  call void @_Z26lodepng_chunk_generate_crcPh(i8* noundef nonnull %69)
  br label %95

95:                                               ; preds = %31, %56, %46, %37, %34, %94
  %96 = phi i32 [ 0, %94 ], [ 83, %56 ], [ 77, %46 ], [ 77, %37 ], [ %35, %34 ], [ 111, %31 ]
  %97 = load i8*, i8** %4, align 8, !tbaa !7
  call void @free(i8* noundef %97) #25
  br label %98

98:                                               ; preds = %15, %95
  %99 = phi i32 [ %96, %95 ], [ 89, %15 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7) #25
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %6) #25
  ret i32 %99
}

; Function Attrs: nounwind uwtable
define internal fastcc noundef i32 @_ZL13addChunk_sRGBP8ucvectorPK11LodePNGInfo(%struct.ucvector* nocapture noundef %0, i32 %1) unnamed_addr #3 {
  %3 = trunc i32 %1 to i8
  %4 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %0, i64 0, i32 1
  %5 = load i64, i64* %4, align 8, !tbaa !44
  %6 = icmp eq i64 %5, -1
  br i1 %6, label %36, label %7

7:                                                ; preds = %2
  %8 = add i64 %5, 13
  %9 = icmp ult i64 %5, -13
  br i1 %9, label %10, label %36

10:                                               ; preds = %7
  store i64 %8, i64* %4, align 8, !tbaa !44
  %11 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %0, i64 0, i32 2
  %12 = load i64, i64* %11, align 8, !tbaa !45
  %13 = icmp ult i64 %12, %8
  br i1 %13, label %17, label %14

14:                                               ; preds = %10
  %15 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %0, i64 0, i32 0
  %16 = load i8*, i8** %15, align 8, !tbaa !39
  br label %25

17:                                               ; preds = %10
  %18 = lshr i64 %12, 1
  %19 = add i64 %18, %8
  %20 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %0, i64 0, i32 0
  %21 = load i8*, i8** %20, align 8, !tbaa !39
  %22 = tail call i8* @realloc(i8* noundef %21, i64 noundef %19) #25
  %23 = icmp eq i8* %22, null
  br i1 %23, label %36, label %24

24:                                               ; preds = %17
  store i64 %19, i64* %11, align 8, !tbaa !45
  store i8* %22, i8** %20, align 8, !tbaa !39
  br label %25

25:                                               ; preds = %24, %14
  %26 = phi i8* [ %16, %14 ], [ %22, %24 ]
  %27 = getelementptr inbounds i8, i8* %26, i64 %8
  %28 = getelementptr inbounds i8, i8* %27, i64 -1
  %29 = getelementptr inbounds i8, i8* %28, i64 -12
  store i8 0, i8* %29, align 1, !tbaa !14
  %30 = getelementptr inbounds i8, i8* %29, i64 1
  store i8 0, i8* %30, align 1, !tbaa !14
  %31 = getelementptr inbounds i8, i8* %29, i64 2
  store i8 0, i8* %31, align 1, !tbaa !14
  %32 = getelementptr inbounds i8, i8* %29, i64 3
  store i8 1, i8* %32, align 1, !tbaa !14
  %33 = getelementptr inbounds i8, i8* %29, i64 4
  %34 = bitcast i8* %33 to i32*
  store i32 1111970419, i32* %34, align 1, !tbaa !14
  %35 = getelementptr inbounds i8, i8* %27, i64 -5
  store i8 %3, i8* %35, align 1, !tbaa !14, !alias.scope !667
  tail call void @_Z26lodepng_chunk_generate_crcPh(i8* noundef nonnull %29) #25
  br label %36

36:                                               ; preds = %2, %7, %17, %25
  %37 = phi i32 [ 0, %25 ], [ 83, %17 ], [ 77, %7 ], [ 77, %2 ]
  ret i32 %37
}

; Function Attrs: nounwind uwtable
define internal fastcc noundef i32 @_ZL13addChunk_gAMAP8ucvectorPK11LodePNGInfo(%struct.ucvector* nocapture noundef %0, %struct.LodePNGInfo* nocapture noundef readonly %1) unnamed_addr #3 {
  %3 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %0, i64 0, i32 1
  %4 = load i64, i64* %3, align 8, !tbaa !44
  %5 = icmp ugt i64 %4, -5
  br i1 %5, label %47, label %6

6:                                                ; preds = %2
  %7 = add i64 %4, 16
  %8 = icmp ult i64 %4, -16
  br i1 %8, label %9, label %47

9:                                                ; preds = %6
  store i64 %7, i64* %3, align 8, !tbaa !44
  %10 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %0, i64 0, i32 2
  %11 = load i64, i64* %10, align 8, !tbaa !45
  %12 = icmp ult i64 %11, %7
  br i1 %12, label %16, label %13

13:                                               ; preds = %9
  %14 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %0, i64 0, i32 0
  %15 = load i8*, i8** %14, align 8, !tbaa !39
  br label %24

16:                                               ; preds = %9
  %17 = lshr i64 %11, 1
  %18 = add i64 %17, %7
  %19 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %0, i64 0, i32 0
  %20 = load i8*, i8** %19, align 8, !tbaa !39
  %21 = tail call i8* @realloc(i8* noundef %20, i64 noundef %18) #25
  %22 = icmp eq i8* %21, null
  br i1 %22, label %47, label %23

23:                                               ; preds = %16
  store i64 %18, i64* %10, align 8, !tbaa !45
  store i8* %21, i8** %19, align 8, !tbaa !39
  br label %24

24:                                               ; preds = %23, %13
  %25 = phi i8* [ %15, %13 ], [ %21, %23 ]
  %26 = getelementptr inbounds i8, i8* %25, i64 %7
  %27 = getelementptr inbounds i8, i8* %26, i64 -4
  %28 = getelementptr inbounds i8, i8* %27, i64 -12
  store i8 0, i8* %28, align 1, !tbaa !14
  %29 = getelementptr inbounds i8, i8* %28, i64 1
  store i8 0, i8* %29, align 1, !tbaa !14
  %30 = getelementptr inbounds i8, i8* %28, i64 2
  store i8 0, i8* %30, align 1, !tbaa !14
  %31 = getelementptr inbounds i8, i8* %28, i64 3
  store i8 4, i8* %31, align 1, !tbaa !14
  %32 = getelementptr inbounds i8, i8* %28, i64 4
  %33 = bitcast i8* %32 to i32*
  store i32 1095582055, i32* %33, align 1, !tbaa !14
  %34 = getelementptr inbounds i8, i8* %28, i64 8
  %35 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %1, i64 0, i32 23
  %36 = load i32, i32* %35, align 8, !tbaa !318
  %37 = lshr i32 %36, 24
  %38 = trunc i32 %37 to i8
  store i8 %38, i8* %34, align 1, !tbaa !14
  %39 = lshr i32 %36, 16
  %40 = trunc i32 %39 to i8
  %41 = getelementptr inbounds i8, i8* %34, i64 1
  store i8 %40, i8* %41, align 1, !tbaa !14
  %42 = lshr i32 %36, 8
  %43 = trunc i32 %42 to i8
  %44 = getelementptr inbounds i8, i8* %34, i64 2
  store i8 %43, i8* %44, align 1, !tbaa !14
  %45 = trunc i32 %36 to i8
  %46 = getelementptr inbounds i8, i8* %34, i64 3
  store i8 %45, i8* %46, align 1, !tbaa !14
  tail call void @_Z26lodepng_chunk_generate_crcPh(i8* noundef nonnull %28)
  br label %47

47:                                               ; preds = %16, %6, %2, %24
  %48 = phi i32 [ 0, %24 ], [ 83, %16 ], [ 77, %6 ], [ 77, %2 ]
  ret i32 %48
}

; Function Attrs: nounwind uwtable
define internal fastcc noundef i32 @_ZL13addChunk_cHRMP8ucvectorPK11LodePNGInfo(%struct.ucvector* nocapture noundef %0, %struct.LodePNGInfo* nocapture noundef readonly %1) unnamed_addr #3 {
  %3 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %0, i64 0, i32 1
  %4 = load i64, i64* %3, align 8, !tbaa !44
  %5 = icmp ugt i64 %4, -33
  br i1 %5, label %138, label %6

6:                                                ; preds = %2
  %7 = add i64 %4, 44
  %8 = icmp ult i64 %4, -44
  br i1 %8, label %9, label %138

9:                                                ; preds = %6
  store i64 %7, i64* %3, align 8, !tbaa !44
  %10 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %0, i64 0, i32 2
  %11 = load i64, i64* %10, align 8, !tbaa !45
  %12 = icmp ult i64 %11, %7
  br i1 %12, label %16, label %13

13:                                               ; preds = %9
  %14 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %0, i64 0, i32 0
  %15 = load i8*, i8** %14, align 8, !tbaa !39
  br label %24

16:                                               ; preds = %9
  %17 = lshr i64 %11, 1
  %18 = add i64 %17, %7
  %19 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %0, i64 0, i32 0
  %20 = load i8*, i8** %19, align 8, !tbaa !39
  %21 = tail call i8* @realloc(i8* noundef %20, i64 noundef %18) #25
  %22 = icmp eq i8* %21, null
  br i1 %22, label %138, label %23

23:                                               ; preds = %16
  store i64 %18, i64* %10, align 8, !tbaa !45
  store i8* %21, i8** %19, align 8, !tbaa !39
  br label %24

24:                                               ; preds = %23, %13
  %25 = phi i8* [ %15, %13 ], [ %21, %23 ]
  %26 = getelementptr inbounds i8, i8* %25, i64 %7
  %27 = getelementptr inbounds i8, i8* %26, i64 -32
  %28 = getelementptr inbounds i8, i8* %27, i64 -12
  store i8 0, i8* %28, align 1, !tbaa !14
  %29 = getelementptr inbounds i8, i8* %28, i64 1
  store i8 0, i8* %29, align 1, !tbaa !14
  %30 = getelementptr inbounds i8, i8* %28, i64 2
  store i8 0, i8* %30, align 1, !tbaa !14
  %31 = getelementptr inbounds i8, i8* %28, i64 3
  store i8 32, i8* %31, align 1, !tbaa !14
  %32 = getelementptr inbounds i8, i8* %28, i64 4
  %33 = bitcast i8* %32 to i32*
  store i32 1297238115, i32* %33, align 1, !tbaa !14
  %34 = getelementptr inbounds i8, i8* %28, i64 8
  %35 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %1, i64 0, i32 25
  %36 = load i32, i32* %35, align 8, !tbaa !365
  %37 = lshr i32 %36, 24
  %38 = trunc i32 %37 to i8
  store i8 %38, i8* %34, align 1, !tbaa !14
  %39 = lshr i32 %36, 16
  %40 = trunc i32 %39 to i8
  %41 = getelementptr inbounds i8, i8* %34, i64 1
  store i8 %40, i8* %41, align 1, !tbaa !14
  %42 = lshr i32 %36, 8
  %43 = trunc i32 %42 to i8
  %44 = getelementptr inbounds i8, i8* %34, i64 2
  store i8 %43, i8* %44, align 1, !tbaa !14
  %45 = trunc i32 %36 to i8
  %46 = getelementptr inbounds i8, i8* %34, i64 3
  store i8 %45, i8* %46, align 1, !tbaa !14
  %47 = getelementptr inbounds i8, i8* %28, i64 12
  %48 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %1, i64 0, i32 26
  %49 = load i32, i32* %48, align 4, !tbaa !366
  %50 = lshr i32 %49, 24
  %51 = trunc i32 %50 to i8
  store i8 %51, i8* %47, align 1, !tbaa !14
  %52 = lshr i32 %49, 16
  %53 = trunc i32 %52 to i8
  %54 = getelementptr inbounds i8, i8* %47, i64 1
  store i8 %53, i8* %54, align 1, !tbaa !14
  %55 = lshr i32 %49, 8
  %56 = trunc i32 %55 to i8
  %57 = getelementptr inbounds i8, i8* %47, i64 2
  store i8 %56, i8* %57, align 1, !tbaa !14
  %58 = trunc i32 %49 to i8
  %59 = getelementptr inbounds i8, i8* %47, i64 3
  store i8 %58, i8* %59, align 1, !tbaa !14
  %60 = getelementptr inbounds i8, i8* %28, i64 16
  %61 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %1, i64 0, i32 27
  %62 = load i32, i32* %61, align 8, !tbaa !367
  %63 = lshr i32 %62, 24
  %64 = trunc i32 %63 to i8
  store i8 %64, i8* %60, align 1, !tbaa !14
  %65 = lshr i32 %62, 16
  %66 = trunc i32 %65 to i8
  %67 = getelementptr inbounds i8, i8* %60, i64 1
  store i8 %66, i8* %67, align 1, !tbaa !14
  %68 = lshr i32 %62, 8
  %69 = trunc i32 %68 to i8
  %70 = getelementptr inbounds i8, i8* %60, i64 2
  store i8 %69, i8* %70, align 1, !tbaa !14
  %71 = trunc i32 %62 to i8
  %72 = getelementptr inbounds i8, i8* %60, i64 3
  store i8 %71, i8* %72, align 1, !tbaa !14
  %73 = getelementptr inbounds i8, i8* %28, i64 20
  %74 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %1, i64 0, i32 28
  %75 = load i32, i32* %74, align 4, !tbaa !368
  %76 = lshr i32 %75, 24
  %77 = trunc i32 %76 to i8
  store i8 %77, i8* %73, align 1, !tbaa !14
  %78 = lshr i32 %75, 16
  %79 = trunc i32 %78 to i8
  %80 = getelementptr inbounds i8, i8* %73, i64 1
  store i8 %79, i8* %80, align 1, !tbaa !14
  %81 = lshr i32 %75, 8
  %82 = trunc i32 %81 to i8
  %83 = getelementptr inbounds i8, i8* %73, i64 2
  store i8 %82, i8* %83, align 1, !tbaa !14
  %84 = trunc i32 %75 to i8
  %85 = getelementptr inbounds i8, i8* %73, i64 3
  store i8 %84, i8* %85, align 1, !tbaa !14
  %86 = getelementptr inbounds i8, i8* %28, i64 24
  %87 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %1, i64 0, i32 29
  %88 = load i32, i32* %87, align 8, !tbaa !369
  %89 = lshr i32 %88, 24
  %90 = trunc i32 %89 to i8
  store i8 %90, i8* %86, align 1, !tbaa !14
  %91 = lshr i32 %88, 16
  %92 = trunc i32 %91 to i8
  %93 = getelementptr inbounds i8, i8* %86, i64 1
  store i8 %92, i8* %93, align 1, !tbaa !14
  %94 = lshr i32 %88, 8
  %95 = trunc i32 %94 to i8
  %96 = getelementptr inbounds i8, i8* %86, i64 2
  store i8 %95, i8* %96, align 1, !tbaa !14
  %97 = trunc i32 %88 to i8
  %98 = getelementptr inbounds i8, i8* %86, i64 3
  store i8 %97, i8* %98, align 1, !tbaa !14
  %99 = getelementptr inbounds i8, i8* %28, i64 28
  %100 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %1, i64 0, i32 30
  %101 = load i32, i32* %100, align 4, !tbaa !370
  %102 = lshr i32 %101, 24
  %103 = trunc i32 %102 to i8
  store i8 %103, i8* %99, align 1, !tbaa !14
  %104 = lshr i32 %101, 16
  %105 = trunc i32 %104 to i8
  %106 = getelementptr inbounds i8, i8* %99, i64 1
  store i8 %105, i8* %106, align 1, !tbaa !14
  %107 = lshr i32 %101, 8
  %108 = trunc i32 %107 to i8
  %109 = getelementptr inbounds i8, i8* %99, i64 2
  store i8 %108, i8* %109, align 1, !tbaa !14
  %110 = trunc i32 %101 to i8
  %111 = getelementptr inbounds i8, i8* %99, i64 3
  store i8 %110, i8* %111, align 1, !tbaa !14
  %112 = getelementptr inbounds i8, i8* %28, i64 32
  %113 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %1, i64 0, i32 31
  %114 = load i32, i32* %113, align 8, !tbaa !371
  %115 = lshr i32 %114, 24
  %116 = trunc i32 %115 to i8
  store i8 %116, i8* %112, align 1, !tbaa !14
  %117 = lshr i32 %114, 16
  %118 = trunc i32 %117 to i8
  %119 = getelementptr inbounds i8, i8* %112, i64 1
  store i8 %118, i8* %119, align 1, !tbaa !14
  %120 = lshr i32 %114, 8
  %121 = trunc i32 %120 to i8
  %122 = getelementptr inbounds i8, i8* %112, i64 2
  store i8 %121, i8* %122, align 1, !tbaa !14
  %123 = trunc i32 %114 to i8
  %124 = getelementptr inbounds i8, i8* %112, i64 3
  store i8 %123, i8* %124, align 1, !tbaa !14
  %125 = getelementptr inbounds i8, i8* %28, i64 36
  %126 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %1, i64 0, i32 32
  %127 = load i32, i32* %126, align 4, !tbaa !372
  %128 = lshr i32 %127, 24
  %129 = trunc i32 %128 to i8
  store i8 %129, i8* %125, align 1, !tbaa !14
  %130 = lshr i32 %127, 16
  %131 = trunc i32 %130 to i8
  %132 = getelementptr inbounds i8, i8* %125, i64 1
  store i8 %131, i8* %132, align 1, !tbaa !14
  %133 = lshr i32 %127, 8
  %134 = trunc i32 %133 to i8
  %135 = getelementptr inbounds i8, i8* %125, i64 2
  store i8 %134, i8* %135, align 1, !tbaa !14
  %136 = trunc i32 %127 to i8
  %137 = getelementptr inbounds i8, i8* %125, i64 3
  store i8 %136, i8* %137, align 1, !tbaa !14
  tail call void @_Z26lodepng_chunk_generate_crcPh(i8* noundef nonnull %28)
  br label %138

138:                                              ; preds = %16, %6, %2, %24
  %139 = phi i32 [ 0, %24 ], [ 83, %16 ], [ 77, %6 ], [ 77, %2 ]
  ret i32 %139
}

; Function Attrs: nounwind uwtable
define internal fastcc noundef i32 @_ZL13addChunk_sBITP8ucvectorPK11LodePNGInfo(%struct.ucvector* nocapture noundef %0, %struct.LodePNGInfo* nocapture noundef readonly %1) unnamed_addr #3 {
  %3 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %1, i64 0, i32 3, i32 0
  %4 = load i32, i32* %3, align 8, !tbaa !311
  %5 = icmp eq i32 %4, 3
  br i1 %5, label %50, label %6

6:                                                ; preds = %2
  %7 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %1, i64 0, i32 3, i32 1
  %8 = load i32, i32* %7, align 4, !tbaa !310
  switch i32 %4, label %230 [
    i32 0, label %9
    i32 2, label %50
    i32 6, label %160
    i32 4, label %110
  ]

9:                                                ; preds = %6
  %10 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %1, i64 0, i32 40
  %11 = load i32, i32* %10, align 8, !tbaa !381
  %12 = icmp eq i32 %11, 0
  %13 = icmp ugt i32 %11, %8
  %14 = select i1 %12, i1 true, i1 %13
  br i1 %14, label %230, label %15

15:                                               ; preds = %9
  %16 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %0, i64 0, i32 1
  %17 = load i64, i64* %16, align 8, !tbaa !44
  %18 = icmp eq i64 %17, -1
  br i1 %18, label %230, label %19

19:                                               ; preds = %15
  %20 = add i64 %17, 13
  %21 = icmp ult i64 %17, -13
  br i1 %21, label %22, label %230

22:                                               ; preds = %19
  store i64 %20, i64* %16, align 8, !tbaa !44
  %23 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %0, i64 0, i32 2
  %24 = load i64, i64* %23, align 8, !tbaa !45
  %25 = icmp ult i64 %24, %20
  br i1 %25, label %29, label %26

26:                                               ; preds = %22
  %27 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %0, i64 0, i32 0
  %28 = load i8*, i8** %27, align 8, !tbaa !39
  br label %37

29:                                               ; preds = %22
  %30 = lshr i64 %24, 1
  %31 = add i64 %30, %20
  %32 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %0, i64 0, i32 0
  %33 = load i8*, i8** %32, align 8, !tbaa !39
  %34 = tail call i8* @realloc(i8* noundef %33, i64 noundef %31) #25
  %35 = icmp eq i8* %34, null
  br i1 %35, label %230, label %36

36:                                               ; preds = %29
  store i64 %31, i64* %23, align 8, !tbaa !45
  store i8* %34, i8** %32, align 8, !tbaa !39
  br label %37

37:                                               ; preds = %36, %26
  %38 = phi i8* [ %28, %26 ], [ %34, %36 ]
  %39 = getelementptr inbounds i8, i8* %38, i64 %20
  %40 = getelementptr inbounds i8, i8* %39, i64 -1
  %41 = getelementptr inbounds i8, i8* %40, i64 -12
  store i8 0, i8* %41, align 1, !tbaa !14
  %42 = getelementptr inbounds i8, i8* %41, i64 1
  store i8 0, i8* %42, align 1, !tbaa !14
  %43 = getelementptr inbounds i8, i8* %41, i64 2
  store i8 0, i8* %43, align 1, !tbaa !14
  %44 = getelementptr inbounds i8, i8* %41, i64 3
  store i8 1, i8* %44, align 1, !tbaa !14
  %45 = getelementptr inbounds i8, i8* %41, i64 4
  %46 = bitcast i8* %45 to i32*
  store i32 1414087283, i32* %46, align 1, !tbaa !14
  %47 = load i32, i32* %10, align 8, !tbaa !381
  %48 = trunc i32 %47 to i8
  %49 = getelementptr inbounds i8, i8* %41, i64 8
  store i8 %48, i8* %49, align 1, !tbaa !14
  br label %228

50:                                               ; preds = %2, %6
  %51 = phi i32 [ %8, %6 ], [ 8, %2 ]
  %52 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %1, i64 0, i32 40
  %53 = load i32, i32* %52, align 8, !tbaa !381
  %54 = icmp eq i32 %53, 0
  br i1 %54, label %230, label %55

55:                                               ; preds = %50
  %56 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %1, i64 0, i32 41
  %57 = load i32, i32* %56, align 4, !tbaa !380
  %58 = icmp eq i32 %57, 0
  br i1 %58, label %230, label %59

59:                                               ; preds = %55
  %60 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %1, i64 0, i32 42
  %61 = load i32, i32* %60, align 8, !tbaa !379
  %62 = icmp eq i32 %61, 0
  br i1 %62, label %230, label %63

63:                                               ; preds = %59
  %64 = icmp ugt i32 %53, %51
  %65 = icmp ugt i32 %57, %51
  %66 = select i1 %64, i1 true, i1 %65
  %67 = icmp ugt i32 %61, %51
  %68 = select i1 %66, i1 true, i1 %67
  br i1 %68, label %230, label %69

69:                                               ; preds = %63
  %70 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %0, i64 0, i32 1
  %71 = load i64, i64* %70, align 8, !tbaa !44
  %72 = icmp ugt i64 %71, -4
  br i1 %72, label %230, label %73

73:                                               ; preds = %69
  %74 = add i64 %71, 15
  %75 = icmp ult i64 %71, -15
  br i1 %75, label %76, label %230

76:                                               ; preds = %73
  store i64 %74, i64* %70, align 8, !tbaa !44
  %77 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %0, i64 0, i32 2
  %78 = load i64, i64* %77, align 8, !tbaa !45
  %79 = icmp ult i64 %78, %74
  br i1 %79, label %83, label %80

80:                                               ; preds = %76
  %81 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %0, i64 0, i32 0
  %82 = load i8*, i8** %81, align 8, !tbaa !39
  br label %91

83:                                               ; preds = %76
  %84 = lshr i64 %78, 1
  %85 = add i64 %84, %74
  %86 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %0, i64 0, i32 0
  %87 = load i8*, i8** %86, align 8, !tbaa !39
  %88 = tail call i8* @realloc(i8* noundef %87, i64 noundef %85) #25
  %89 = icmp eq i8* %88, null
  br i1 %89, label %230, label %90

90:                                               ; preds = %83
  store i64 %85, i64* %77, align 8, !tbaa !45
  store i8* %88, i8** %86, align 8, !tbaa !39
  br label %91

91:                                               ; preds = %90, %80
  %92 = phi i8* [ %82, %80 ], [ %88, %90 ]
  %93 = getelementptr inbounds i8, i8* %92, i64 %74
  %94 = getelementptr inbounds i8, i8* %93, i64 -3
  %95 = getelementptr inbounds i8, i8* %94, i64 -12
  store i8 0, i8* %95, align 1, !tbaa !14
  %96 = getelementptr inbounds i8, i8* %95, i64 1
  store i8 0, i8* %96, align 1, !tbaa !14
  %97 = getelementptr inbounds i8, i8* %95, i64 2
  store i8 0, i8* %97, align 1, !tbaa !14
  %98 = getelementptr inbounds i8, i8* %95, i64 3
  store i8 3, i8* %98, align 1, !tbaa !14
  %99 = getelementptr inbounds i8, i8* %95, i64 4
  %100 = bitcast i8* %99 to i32*
  store i32 1414087283, i32* %100, align 1, !tbaa !14
  %101 = load i32, i32* %52, align 8, !tbaa !381
  %102 = trunc i32 %101 to i8
  %103 = getelementptr inbounds i8, i8* %95, i64 8
  store i8 %102, i8* %103, align 1, !tbaa !14
  %104 = load i32, i32* %56, align 4, !tbaa !380
  %105 = trunc i32 %104 to i8
  %106 = getelementptr inbounds i8, i8* %95, i64 9
  store i8 %105, i8* %106, align 1, !tbaa !14
  %107 = load i32, i32* %60, align 8, !tbaa !379
  %108 = trunc i32 %107 to i8
  %109 = getelementptr inbounds i8, i8* %95, i64 10
  store i8 %108, i8* %109, align 1, !tbaa !14
  br label %228

110:                                              ; preds = %6
  %111 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %1, i64 0, i32 40
  %112 = load i32, i32* %111, align 8, !tbaa !381
  %113 = icmp eq i32 %112, 0
  br i1 %113, label %230, label %114

114:                                              ; preds = %110
  %115 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %1, i64 0, i32 43
  %116 = load i32, i32* %115, align 4, !tbaa !382
  %117 = icmp eq i32 %116, 0
  br i1 %117, label %230, label %118

118:                                              ; preds = %114
  %119 = icmp ugt i32 %112, %8
  %120 = icmp ugt i32 %116, %8
  %121 = select i1 %119, i1 true, i1 %120
  br i1 %121, label %230, label %122

122:                                              ; preds = %118
  %123 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %0, i64 0, i32 1
  %124 = load i64, i64* %123, align 8, !tbaa !44
  %125 = icmp ugt i64 %124, -3
  br i1 %125, label %230, label %126

126:                                              ; preds = %122
  %127 = add i64 %124, 14
  %128 = icmp ult i64 %124, -14
  br i1 %128, label %129, label %230

129:                                              ; preds = %126
  store i64 %127, i64* %123, align 8, !tbaa !44
  %130 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %0, i64 0, i32 2
  %131 = load i64, i64* %130, align 8, !tbaa !45
  %132 = icmp ult i64 %131, %127
  br i1 %132, label %136, label %133

133:                                              ; preds = %129
  %134 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %0, i64 0, i32 0
  %135 = load i8*, i8** %134, align 8, !tbaa !39
  br label %144

136:                                              ; preds = %129
  %137 = lshr i64 %131, 1
  %138 = add i64 %137, %127
  %139 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %0, i64 0, i32 0
  %140 = load i8*, i8** %139, align 8, !tbaa !39
  %141 = tail call i8* @realloc(i8* noundef %140, i64 noundef %138) #25
  %142 = icmp eq i8* %141, null
  br i1 %142, label %230, label %143

143:                                              ; preds = %136
  store i64 %138, i64* %130, align 8, !tbaa !45
  store i8* %141, i8** %139, align 8, !tbaa !39
  br label %144

144:                                              ; preds = %143, %133
  %145 = phi i8* [ %135, %133 ], [ %141, %143 ]
  %146 = getelementptr inbounds i8, i8* %145, i64 %127
  %147 = getelementptr inbounds i8, i8* %146, i64 -2
  %148 = getelementptr inbounds i8, i8* %147, i64 -12
  store i8 0, i8* %148, align 1, !tbaa !14
  %149 = getelementptr inbounds i8, i8* %148, i64 1
  store i8 0, i8* %149, align 1, !tbaa !14
  %150 = getelementptr inbounds i8, i8* %148, i64 2
  store i8 0, i8* %150, align 1, !tbaa !14
  %151 = getelementptr inbounds i8, i8* %148, i64 3
  store i8 2, i8* %151, align 1, !tbaa !14
  %152 = getelementptr inbounds i8, i8* %148, i64 4
  %153 = bitcast i8* %152 to i32*
  store i32 1414087283, i32* %153, align 1, !tbaa !14
  %154 = load i32, i32* %111, align 8, !tbaa !381
  %155 = trunc i32 %154 to i8
  %156 = getelementptr inbounds i8, i8* %148, i64 8
  store i8 %155, i8* %156, align 1, !tbaa !14
  %157 = load i32, i32* %115, align 4, !tbaa !382
  %158 = trunc i32 %157 to i8
  %159 = getelementptr inbounds i8, i8* %148, i64 9
  store i8 %158, i8* %159, align 1, !tbaa !14
  br label %228

160:                                              ; preds = %6
  %161 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %1, i64 0, i32 40
  %162 = load i32, i32* %161, align 8, !tbaa !381
  %163 = icmp eq i32 %162, 0
  br i1 %163, label %230, label %164

164:                                              ; preds = %160
  %165 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %1, i64 0, i32 41
  %166 = load i32, i32* %165, align 4, !tbaa !380
  %167 = icmp eq i32 %166, 0
  br i1 %167, label %230, label %168

168:                                              ; preds = %164
  %169 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %1, i64 0, i32 42
  %170 = load i32, i32* %169, align 8, !tbaa !379
  %171 = icmp eq i32 %170, 0
  br i1 %171, label %230, label %172

172:                                              ; preds = %168
  %173 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %1, i64 0, i32 43
  %174 = load i32, i32* %173, align 4, !tbaa !382
  %175 = icmp eq i32 %174, 0
  %176 = icmp ugt i32 %162, %8
  %177 = select i1 %175, i1 true, i1 %176
  %178 = icmp ugt i32 %166, %8
  %179 = select i1 %177, i1 true, i1 %178
  %180 = icmp ugt i32 %170, %8
  %181 = select i1 %179, i1 true, i1 %180
  %182 = icmp ugt i32 %174, %8
  %183 = select i1 %181, i1 true, i1 %182
  br i1 %183, label %230, label %184

184:                                              ; preds = %172
  %185 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %0, i64 0, i32 1
  %186 = load i64, i64* %185, align 8, !tbaa !44
  %187 = icmp ugt i64 %186, -5
  br i1 %187, label %230, label %188

188:                                              ; preds = %184
  %189 = add i64 %186, 16
  %190 = icmp ult i64 %186, -16
  br i1 %190, label %191, label %230

191:                                              ; preds = %188
  store i64 %189, i64* %185, align 8, !tbaa !44
  %192 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %0, i64 0, i32 2
  %193 = load i64, i64* %192, align 8, !tbaa !45
  %194 = icmp ult i64 %193, %189
  br i1 %194, label %198, label %195

195:                                              ; preds = %191
  %196 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %0, i64 0, i32 0
  %197 = load i8*, i8** %196, align 8, !tbaa !39
  br label %206

198:                                              ; preds = %191
  %199 = lshr i64 %193, 1
  %200 = add i64 %199, %189
  %201 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %0, i64 0, i32 0
  %202 = load i8*, i8** %201, align 8, !tbaa !39
  %203 = tail call i8* @realloc(i8* noundef %202, i64 noundef %200) #25
  %204 = icmp eq i8* %203, null
  br i1 %204, label %230, label %205

205:                                              ; preds = %198
  store i64 %200, i64* %192, align 8, !tbaa !45
  store i8* %203, i8** %201, align 8, !tbaa !39
  br label %206

206:                                              ; preds = %205, %195
  %207 = phi i8* [ %197, %195 ], [ %203, %205 ]
  %208 = getelementptr inbounds i8, i8* %207, i64 %189
  %209 = getelementptr inbounds i8, i8* %208, i64 -4
  %210 = getelementptr inbounds i8, i8* %209, i64 -12
  store i8 0, i8* %210, align 1, !tbaa !14
  %211 = getelementptr inbounds i8, i8* %210, i64 1
  store i8 0, i8* %211, align 1, !tbaa !14
  %212 = getelementptr inbounds i8, i8* %210, i64 2
  store i8 0, i8* %212, align 1, !tbaa !14
  %213 = getelementptr inbounds i8, i8* %210, i64 3
  store i8 4, i8* %213, align 1, !tbaa !14
  %214 = getelementptr inbounds i8, i8* %210, i64 4
  %215 = bitcast i8* %214 to i32*
  store i32 1414087283, i32* %215, align 1, !tbaa !14
  %216 = load i32, i32* %161, align 8, !tbaa !381
  %217 = trunc i32 %216 to i8
  %218 = getelementptr inbounds i8, i8* %210, i64 8
  store i8 %217, i8* %218, align 1, !tbaa !14
  %219 = load i32, i32* %165, align 4, !tbaa !380
  %220 = trunc i32 %219 to i8
  %221 = getelementptr inbounds i8, i8* %210, i64 9
  store i8 %220, i8* %221, align 1, !tbaa !14
  %222 = load i32, i32* %169, align 8, !tbaa !379
  %223 = trunc i32 %222 to i8
  %224 = getelementptr inbounds i8, i8* %210, i64 10
  store i8 %223, i8* %224, align 1, !tbaa !14
  %225 = load i32, i32* %173, align 4, !tbaa !382
  %226 = trunc i32 %225 to i8
  %227 = getelementptr inbounds i8, i8* %210, i64 11
  store i8 %226, i8* %227, align 1, !tbaa !14
  br label %228

228:                                              ; preds = %206, %144, %91, %37
  %229 = phi i8* [ %41, %37 ], [ %95, %91 ], [ %148, %144 ], [ %210, %206 ]
  tail call void @_Z26lodepng_chunk_generate_crcPh(i8* noundef nonnull %229)
  br label %230

230:                                              ; preds = %198, %188, %184, %136, %126, %122, %83, %73, %69, %29, %19, %15, %6, %228, %160, %164, %168, %172, %118, %110, %114, %63, %50, %55, %59, %9
  %231 = phi i32 [ 115, %9 ], [ 115, %59 ], [ 115, %55 ], [ 115, %50 ], [ 115, %63 ], [ 115, %114 ], [ 115, %110 ], [ 115, %118 ], [ 115, %172 ], [ 115, %168 ], [ 115, %164 ], [ 115, %160 ], [ 0, %228 ], [ 0, %6 ], [ 83, %29 ], [ 77, %19 ], [ 77, %15 ], [ 83, %83 ], [ 77, %73 ], [ 77, %69 ], [ 83, %136 ], [ 77, %126 ], [ 77, %122 ], [ 83, %198 ], [ 77, %188 ], [ 77, %184 ]
  ret i32 %231
}

; Function Attrs: nounwind uwtable
define internal fastcc noundef i32 @_ZL13addChunk_PLTEP8ucvectorPK16LodePNGColorMode(%struct.ucvector* nocapture noundef %0, %struct.LodePNGColorMode* nocapture noundef readonly %1) unnamed_addr #3 {
  %3 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %1, i64 0, i32 3
  %4 = load i64, i64* %3, align 8, !tbaa !156
  %5 = add i64 %4, -257
  %6 = icmp ult i64 %5, -256
  br i1 %6, label %80, label %7

7:                                                ; preds = %2
  %8 = trunc i64 %4 to i32
  %9 = mul nuw nsw i32 %8, 3
  %10 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %0, i64 0, i32 1
  %11 = load i64, i64* %10, align 8, !tbaa !44
  %12 = zext i32 %9 to i64
  %13 = add i64 %11, %12
  %14 = icmp ult i64 %13, %11
  br i1 %14, label %80, label %15

15:                                               ; preds = %7
  %16 = add i64 %13, 12
  %17 = icmp ult i64 %13, -12
  br i1 %17, label %18, label %80

18:                                               ; preds = %15
  store i64 %16, i64* %10, align 8, !tbaa !44
  %19 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %0, i64 0, i32 2
  %20 = load i64, i64* %19, align 8, !tbaa !45
  %21 = icmp ult i64 %20, %16
  br i1 %21, label %25, label %22

22:                                               ; preds = %18
  %23 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %0, i64 0, i32 0
  %24 = load i8*, i8** %23, align 8, !tbaa !39
  br label %33

25:                                               ; preds = %18
  %26 = lshr i64 %20, 1
  %27 = add i64 %26, %16
  %28 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %0, i64 0, i32 0
  %29 = load i8*, i8** %28, align 8, !tbaa !39
  %30 = tail call i8* @realloc(i8* noundef %29, i64 noundef %27) #25
  %31 = icmp eq i8* %30, null
  br i1 %31, label %80, label %32

32:                                               ; preds = %25
  store i64 %27, i64* %19, align 8, !tbaa !45
  store i8* %30, i8** %28, align 8, !tbaa !39
  br label %33

33:                                               ; preds = %22, %32
  %34 = phi i8* [ %24, %22 ], [ %30, %32 ]
  %35 = getelementptr inbounds i8, i8* %34, i64 %16
  %36 = sub nsw i64 0, %12
  %37 = getelementptr inbounds i8, i8* %35, i64 %36
  %38 = getelementptr inbounds i8, i8* %37, i64 -12
  %39 = lshr i32 %9, 24
  %40 = trunc i32 %39 to i8
  store i8 %40, i8* %38, align 1, !tbaa !14
  %41 = lshr i32 %9, 16
  %42 = trunc i32 %41 to i8
  %43 = getelementptr inbounds i8, i8* %38, i64 1
  store i8 %42, i8* %43, align 1, !tbaa !14
  %44 = lshr i32 %9, 8
  %45 = trunc i32 %44 to i8
  %46 = getelementptr inbounds i8, i8* %38, i64 2
  store i8 %45, i8* %46, align 1, !tbaa !14
  %47 = trunc i32 %9 to i8
  %48 = getelementptr inbounds i8, i8* %38, i64 3
  store i8 %47, i8* %48, align 1, !tbaa !14
  %49 = getelementptr inbounds i8, i8* %38, i64 4
  %50 = bitcast i8* %49 to i32*
  store i32 1163152464, i32* %50, align 1, !tbaa !14
  %51 = load i64, i64* %3, align 8, !tbaa !156
  %52 = icmp eq i64 %51, 0
  br i1 %52, label %79, label %53

53:                                               ; preds = %33
  %54 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %1, i64 0, i32 2
  br label %55

55:                                               ; preds = %53, %55
  %56 = phi i64 [ 8, %53 ], [ %74, %55 ]
  %57 = phi i64 [ 0, %53 ], [ %76, %55 ]
  %58 = load i8*, i8** %54, align 8, !tbaa !151
  %59 = shl i64 %57, 2
  %60 = getelementptr inbounds i8, i8* %58, i64 %59
  %61 = load i8, i8* %60, align 1, !tbaa !14
  %62 = add i64 %56, 1
  %63 = getelementptr inbounds i8, i8* %38, i64 %56
  store i8 %61, i8* %63, align 1, !tbaa !14
  %64 = load i8*, i8** %54, align 8, !tbaa !151
  %65 = or i64 %59, 1
  %66 = getelementptr inbounds i8, i8* %64, i64 %65
  %67 = load i8, i8* %66, align 1, !tbaa !14
  %68 = add i64 %56, 2
  %69 = getelementptr inbounds i8, i8* %38, i64 %62
  store i8 %67, i8* %69, align 1, !tbaa !14
  %70 = load i8*, i8** %54, align 8, !tbaa !151
  %71 = or i64 %59, 2
  %72 = getelementptr inbounds i8, i8* %70, i64 %71
  %73 = load i8, i8* %72, align 1, !tbaa !14
  %74 = add i64 %56, 3
  %75 = getelementptr inbounds i8, i8* %38, i64 %68
  store i8 %73, i8* %75, align 1, !tbaa !14
  %76 = add i64 %57, 1
  %77 = load i64, i64* %3, align 8, !tbaa !156
  %78 = icmp eq i64 %76, %77
  br i1 %78, label %79, label %55

79:                                               ; preds = %55, %33
  tail call void @_Z26lodepng_chunk_generate_crcPh(i8* noundef nonnull %38)
  br label %80

80:                                               ; preds = %25, %15, %7, %2, %79
  %81 = phi i32 [ 0, %79 ], [ 68, %2 ], [ 83, %25 ], [ 77, %15 ], [ 77, %7 ]
  ret i32 %81
}

; Function Attrs: nounwind uwtable
define internal fastcc noundef i32 @_ZL13addChunk_tRNSP8ucvectorPK16LodePNGColorMode(%struct.ucvector* nocapture noundef %0, %struct.LodePNGColorMode* nocapture noundef readonly %1) unnamed_addr #3 {
  %3 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %1, i64 0, i32 0
  %4 = load i32, i32* %3, align 8, !tbaa !147
  switch i32 %4, label %206 [
    i32 3, label %5
    i32 0, label %89
    i32 2, label %133
  ]

5:                                                ; preds = %2
  %6 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %1, i64 0, i32 3
  %7 = load i64, i64* %6, align 8, !tbaa !156
  %8 = icmp eq i64 %7, 0
  br i1 %8, label %206, label %9

9:                                                ; preds = %5
  %10 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %1, i64 0, i32 2
  %11 = load i8*, i8** %10, align 8, !tbaa !151
  br label %12

12:                                               ; preds = %9, %19
  %13 = phi i64 [ %7, %9 ], [ %20, %19 ]
  %14 = shl i64 %13, 2
  %15 = add i64 %14, -1
  %16 = getelementptr inbounds i8, i8* %11, i64 %15
  %17 = load i8, i8* %16, align 1, !tbaa !14
  %18 = icmp eq i8 %17, -1
  br i1 %18, label %19, label %22

19:                                               ; preds = %12
  %20 = add i64 %13, -1
  %21 = icmp eq i64 %20, 0
  br i1 %21, label %206, label %12

22:                                               ; preds = %12
  %23 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %0, i64 0, i32 1
  %24 = load i64, i64* %23, align 8, !tbaa !44
  %25 = and i64 %13, 4294967295
  %26 = add i64 %24, %25
  %27 = icmp ult i64 %26, %24
  br i1 %27, label %206, label %28

28:                                               ; preds = %22
  %29 = add i64 %26, 12
  %30 = icmp ult i64 %26, -12
  br i1 %30, label %31, label %206

31:                                               ; preds = %28
  store i64 %29, i64* %23, align 8, !tbaa !44
  %32 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %0, i64 0, i32 2
  %33 = load i64, i64* %32, align 8, !tbaa !45
  %34 = icmp ult i64 %33, %29
  br i1 %34, label %38, label %35

35:                                               ; preds = %31
  %36 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %0, i64 0, i32 0
  %37 = load i8*, i8** %36, align 8, !tbaa !39
  br label %46

38:                                               ; preds = %31
  %39 = lshr i64 %33, 1
  %40 = add i64 %39, %29
  %41 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %0, i64 0, i32 0
  %42 = load i8*, i8** %41, align 8, !tbaa !39
  %43 = tail call i8* @realloc(i8* noundef %42, i64 noundef %40) #25
  %44 = icmp eq i8* %43, null
  br i1 %44, label %206, label %45

45:                                               ; preds = %38
  store i64 %40, i64* %32, align 8, !tbaa !45
  store i8* %43, i8** %41, align 8, !tbaa !39
  br label %46

46:                                               ; preds = %45, %35
  %47 = phi i8* [ %37, %35 ], [ %43, %45 ]
  %48 = getelementptr inbounds i8, i8* %47, i64 %29
  %49 = sub nsw i64 0, %25
  %50 = getelementptr inbounds i8, i8* %48, i64 %49
  %51 = getelementptr inbounds i8, i8* %50, i64 -12
  %52 = lshr i64 %13, 24
  %53 = trunc i64 %52 to i8
  store i8 %53, i8* %51, align 1, !tbaa !14
  %54 = lshr i64 %13, 16
  %55 = trunc i64 %54 to i8
  %56 = getelementptr inbounds i8, i8* %51, i64 1
  store i8 %55, i8* %56, align 1, !tbaa !14
  %57 = lshr i64 %13, 8
  %58 = trunc i64 %57 to i8
  %59 = getelementptr inbounds i8, i8* %51, i64 2
  store i8 %58, i8* %59, align 1, !tbaa !14
  %60 = trunc i64 %13 to i8
  %61 = getelementptr inbounds i8, i8* %51, i64 3
  store i8 %60, i8* %61, align 1, !tbaa !14
  %62 = getelementptr inbounds i8, i8* %51, i64 4
  %63 = bitcast i8* %62 to i32*
  store i32 1397641844, i32* %63, align 1, !tbaa !14
  %64 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %1, i64 0, i32 2
  %65 = and i64 %13, 1
  %66 = icmp eq i64 %13, 1
  br i1 %66, label %193, label %67

67:                                               ; preds = %46
  %68 = and i64 %13, -2
  br label %69

69:                                               ; preds = %69, %67
  %70 = phi i64 [ 0, %67 ], [ %86, %69 ]
  %71 = phi i64 [ 0, %67 ], [ %87, %69 ]
  %72 = load i8*, i8** %64, align 8, !tbaa !151
  %73 = shl i64 %70, 2
  %74 = or i64 %73, 3
  %75 = getelementptr inbounds i8, i8* %72, i64 %74
  %76 = load i8, i8* %75, align 1, !tbaa !14
  %77 = add i64 %70, 8
  %78 = getelementptr inbounds i8, i8* %51, i64 %77
  store i8 %76, i8* %78, align 1, !tbaa !14
  %79 = load i8*, i8** %64, align 8, !tbaa !151
  %80 = shl i64 %70, 2
  %81 = or i64 %80, 7
  %82 = getelementptr inbounds i8, i8* %79, i64 %81
  %83 = load i8, i8* %82, align 1, !tbaa !14
  %84 = add i64 %70, 9
  %85 = getelementptr inbounds i8, i8* %51, i64 %84
  store i8 %83, i8* %85, align 1, !tbaa !14
  %86 = add i64 %70, 2
  %87 = add i64 %71, 2
  %88 = icmp eq i64 %87, %68
  br i1 %88, label %193, label %69

89:                                               ; preds = %2
  %90 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %1, i64 0, i32 4
  %91 = load i32, i32* %90, align 8, !tbaa !161
  %92 = icmp eq i32 %91, 0
  br i1 %92, label %206, label %93

93:                                               ; preds = %89
  %94 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %0, i64 0, i32 1
  %95 = load i64, i64* %94, align 8, !tbaa !44
  %96 = icmp ugt i64 %95, -3
  br i1 %96, label %206, label %97

97:                                               ; preds = %93
  %98 = add i64 %95, 14
  %99 = icmp ult i64 %95, -14
  br i1 %99, label %100, label %206

100:                                              ; preds = %97
  store i64 %98, i64* %94, align 8, !tbaa !44
  %101 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %0, i64 0, i32 2
  %102 = load i64, i64* %101, align 8, !tbaa !45
  %103 = icmp ult i64 %102, %98
  br i1 %103, label %107, label %104

104:                                              ; preds = %100
  %105 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %0, i64 0, i32 0
  %106 = load i8*, i8** %105, align 8, !tbaa !39
  br label %115

107:                                              ; preds = %100
  %108 = lshr i64 %102, 1
  %109 = add i64 %108, %98
  %110 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %0, i64 0, i32 0
  %111 = load i8*, i8** %110, align 8, !tbaa !39
  %112 = tail call i8* @realloc(i8* noundef %111, i64 noundef %109) #25
  %113 = icmp eq i8* %112, null
  br i1 %113, label %206, label %114

114:                                              ; preds = %107
  store i64 %109, i64* %101, align 8, !tbaa !45
  store i8* %112, i8** %110, align 8, !tbaa !39
  br label %115

115:                                              ; preds = %114, %104
  %116 = phi i8* [ %106, %104 ], [ %112, %114 ]
  %117 = getelementptr inbounds i8, i8* %116, i64 %98
  %118 = getelementptr inbounds i8, i8* %117, i64 -2
  %119 = getelementptr inbounds i8, i8* %118, i64 -12
  store i8 0, i8* %119, align 1, !tbaa !14
  %120 = getelementptr inbounds i8, i8* %119, i64 1
  store i8 0, i8* %120, align 1, !tbaa !14
  %121 = getelementptr inbounds i8, i8* %119, i64 2
  store i8 0, i8* %121, align 1, !tbaa !14
  %122 = getelementptr inbounds i8, i8* %119, i64 3
  store i8 2, i8* %122, align 1, !tbaa !14
  %123 = getelementptr inbounds i8, i8* %119, i64 4
  %124 = bitcast i8* %123 to i32*
  store i32 1397641844, i32* %124, align 1, !tbaa !14
  %125 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %1, i64 0, i32 5
  %126 = load i32, i32* %125, align 4, !tbaa !235
  %127 = lshr i32 %126, 8
  %128 = trunc i32 %127 to i8
  %129 = getelementptr inbounds i8, i8* %119, i64 8
  store i8 %128, i8* %129, align 1, !tbaa !14
  %130 = load i32, i32* %125, align 4, !tbaa !235
  %131 = trunc i32 %130 to i8
  %132 = getelementptr inbounds i8, i8* %119, i64 9
  store i8 %131, i8* %132, align 1, !tbaa !14
  br label %204

133:                                              ; preds = %2
  %134 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %1, i64 0, i32 4
  %135 = load i32, i32* %134, align 8, !tbaa !161
  %136 = icmp eq i32 %135, 0
  br i1 %136, label %206, label %137

137:                                              ; preds = %133
  %138 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %0, i64 0, i32 1
  %139 = load i64, i64* %138, align 8, !tbaa !44
  %140 = icmp ugt i64 %139, -7
  br i1 %140, label %206, label %141

141:                                              ; preds = %137
  %142 = add i64 %139, 18
  %143 = icmp ult i64 %139, -18
  br i1 %143, label %144, label %206

144:                                              ; preds = %141
  store i64 %142, i64* %138, align 8, !tbaa !44
  %145 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %0, i64 0, i32 2
  %146 = load i64, i64* %145, align 8, !tbaa !45
  %147 = icmp ult i64 %146, %142
  br i1 %147, label %151, label %148

148:                                              ; preds = %144
  %149 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %0, i64 0, i32 0
  %150 = load i8*, i8** %149, align 8, !tbaa !39
  br label %159

151:                                              ; preds = %144
  %152 = lshr i64 %146, 1
  %153 = add i64 %152, %142
  %154 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %0, i64 0, i32 0
  %155 = load i8*, i8** %154, align 8, !tbaa !39
  %156 = tail call i8* @realloc(i8* noundef %155, i64 noundef %153) #25
  %157 = icmp eq i8* %156, null
  br i1 %157, label %206, label %158

158:                                              ; preds = %151
  store i64 %153, i64* %145, align 8, !tbaa !45
  store i8* %156, i8** %154, align 8, !tbaa !39
  br label %159

159:                                              ; preds = %158, %148
  %160 = phi i8* [ %150, %148 ], [ %156, %158 ]
  %161 = getelementptr inbounds i8, i8* %160, i64 %142
  %162 = getelementptr inbounds i8, i8* %161, i64 -6
  %163 = getelementptr inbounds i8, i8* %162, i64 -12
  store i8 0, i8* %163, align 1, !tbaa !14
  %164 = getelementptr inbounds i8, i8* %163, i64 1
  store i8 0, i8* %164, align 1, !tbaa !14
  %165 = getelementptr inbounds i8, i8* %163, i64 2
  store i8 0, i8* %165, align 1, !tbaa !14
  %166 = getelementptr inbounds i8, i8* %163, i64 3
  store i8 6, i8* %166, align 1, !tbaa !14
  %167 = getelementptr inbounds i8, i8* %163, i64 4
  %168 = bitcast i8* %167 to i32*
  store i32 1397641844, i32* %168, align 1, !tbaa !14
  %169 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %1, i64 0, i32 5
  %170 = load i32, i32* %169, align 4, !tbaa !235
  %171 = lshr i32 %170, 8
  %172 = trunc i32 %171 to i8
  %173 = getelementptr inbounds i8, i8* %163, i64 8
  store i8 %172, i8* %173, align 1, !tbaa !14
  %174 = load i32, i32* %169, align 4, !tbaa !235
  %175 = trunc i32 %174 to i8
  %176 = getelementptr inbounds i8, i8* %163, i64 9
  store i8 %175, i8* %176, align 1, !tbaa !14
  %177 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %1, i64 0, i32 6
  %178 = load i32, i32* %177, align 8, !tbaa !236
  %179 = lshr i32 %178, 8
  %180 = trunc i32 %179 to i8
  %181 = getelementptr inbounds i8, i8* %163, i64 10
  store i8 %180, i8* %181, align 1, !tbaa !14
  %182 = load i32, i32* %177, align 8, !tbaa !236
  %183 = trunc i32 %182 to i8
  %184 = getelementptr inbounds i8, i8* %163, i64 11
  store i8 %183, i8* %184, align 1, !tbaa !14
  %185 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %1, i64 0, i32 7
  %186 = load i32, i32* %185, align 4, !tbaa !237
  %187 = lshr i32 %186, 8
  %188 = trunc i32 %187 to i8
  %189 = getelementptr inbounds i8, i8* %163, i64 12
  store i8 %188, i8* %189, align 1, !tbaa !14
  %190 = load i32, i32* %185, align 4, !tbaa !237
  %191 = trunc i32 %190 to i8
  %192 = getelementptr inbounds i8, i8* %163, i64 13
  store i8 %191, i8* %192, align 1, !tbaa !14
  br label %204

193:                                              ; preds = %69, %46
  %194 = phi i64 [ 0, %46 ], [ %86, %69 ]
  %195 = icmp eq i64 %65, 0
  br i1 %195, label %204, label %196

196:                                              ; preds = %193
  %197 = load i8*, i8** %64, align 8, !tbaa !151
  %198 = shl i64 %194, 2
  %199 = or i64 %198, 3
  %200 = getelementptr inbounds i8, i8* %197, i64 %199
  %201 = load i8, i8* %200, align 1, !tbaa !14
  %202 = add i64 %194, 8
  %203 = getelementptr inbounds i8, i8* %51, i64 %202
  store i8 %201, i8* %203, align 1, !tbaa !14
  br label %204

204:                                              ; preds = %196, %193, %115, %159
  %205 = phi i8* [ %119, %115 ], [ %163, %159 ], [ %51, %193 ], [ %51, %196 ]
  tail call void @_Z26lodepng_chunk_generate_crcPh(i8* noundef nonnull %205)
  br label %206

206:                                              ; preds = %19, %5, %89, %133, %2, %151, %141, %137, %107, %97, %93, %38, %28, %22, %204
  %207 = phi i32 [ 0, %204 ], [ 83, %38 ], [ 77, %28 ], [ 77, %22 ], [ 83, %107 ], [ 77, %97 ], [ 77, %93 ], [ 83, %151 ], [ 77, %141 ], [ 77, %137 ], [ 0, %2 ], [ 0, %133 ], [ 0, %89 ], [ 0, %5 ], [ 0, %19 ]
  ret i32 %207
}

; Function Attrs: nounwind uwtable
define internal fastcc noundef i32 @_ZL13addChunk_bKGDP8ucvectorPK11LodePNGInfo(%struct.ucvector* nocapture noundef %0, %struct.LodePNGInfo* nocapture noundef readonly %1) unnamed_addr #3 {
  %3 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %1, i64 0, i32 3, i32 0
  %4 = load i32, i32* %3, align 8, !tbaa !311
  switch i32 %4, label %139 [
    i32 0, label %5
    i32 4, label %5
    i32 2, label %45
    i32 6, label %45
    i32 3, label %101
  ]

5:                                                ; preds = %2, %2
  %6 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %0, i64 0, i32 1
  %7 = load i64, i64* %6, align 8, !tbaa !44
  %8 = icmp ugt i64 %7, -3
  br i1 %8, label %139, label %9

9:                                                ; preds = %5
  %10 = add i64 %7, 14
  %11 = icmp ult i64 %7, -14
  br i1 %11, label %12, label %139

12:                                               ; preds = %9
  store i64 %10, i64* %6, align 8, !tbaa !44
  %13 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %0, i64 0, i32 2
  %14 = load i64, i64* %13, align 8, !tbaa !45
  %15 = icmp ult i64 %14, %10
  br i1 %15, label %19, label %16

16:                                               ; preds = %12
  %17 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %0, i64 0, i32 0
  %18 = load i8*, i8** %17, align 8, !tbaa !39
  br label %27

19:                                               ; preds = %12
  %20 = lshr i64 %14, 1
  %21 = add i64 %20, %10
  %22 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %0, i64 0, i32 0
  %23 = load i8*, i8** %22, align 8, !tbaa !39
  %24 = tail call i8* @realloc(i8* noundef %23, i64 noundef %21) #25
  %25 = icmp eq i8* %24, null
  br i1 %25, label %139, label %26

26:                                               ; preds = %19
  store i64 %21, i64* %13, align 8, !tbaa !45
  store i8* %24, i8** %22, align 8, !tbaa !39
  br label %27

27:                                               ; preds = %26, %16
  %28 = phi i8* [ %18, %16 ], [ %24, %26 ]
  %29 = getelementptr inbounds i8, i8* %28, i64 %10
  %30 = getelementptr inbounds i8, i8* %29, i64 -2
  %31 = getelementptr inbounds i8, i8* %30, i64 -12
  store i8 0, i8* %31, align 1, !tbaa !14
  %32 = getelementptr inbounds i8, i8* %31, i64 1
  store i8 0, i8* %32, align 1, !tbaa !14
  %33 = getelementptr inbounds i8, i8* %31, i64 2
  store i8 0, i8* %33, align 1, !tbaa !14
  %34 = getelementptr inbounds i8, i8* %31, i64 3
  store i8 2, i8* %34, align 1, !tbaa !14
  %35 = getelementptr inbounds i8, i8* %31, i64 4
  %36 = bitcast i8* %35 to i32*
  store i32 1145523042, i32* %36, align 1, !tbaa !14
  %37 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %1, i64 0, i32 5
  %38 = load i32, i32* %37, align 4, !tbaa !327
  %39 = lshr i32 %38, 8
  %40 = trunc i32 %39 to i8
  %41 = getelementptr inbounds i8, i8* %31, i64 8
  store i8 %40, i8* %41, align 1, !tbaa !14
  %42 = load i32, i32* %37, align 4, !tbaa !327
  %43 = trunc i32 %42 to i8
  %44 = getelementptr inbounds i8, i8* %31, i64 9
  store i8 %43, i8* %44, align 1, !tbaa !14
  br label %137

45:                                               ; preds = %2, %2
  %46 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %0, i64 0, i32 1
  %47 = load i64, i64* %46, align 8, !tbaa !44
  %48 = icmp ugt i64 %47, -7
  br i1 %48, label %139, label %49

49:                                               ; preds = %45
  %50 = add i64 %47, 18
  %51 = icmp ult i64 %47, -18
  br i1 %51, label %52, label %139

52:                                               ; preds = %49
  store i64 %50, i64* %46, align 8, !tbaa !44
  %53 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %0, i64 0, i32 2
  %54 = load i64, i64* %53, align 8, !tbaa !45
  %55 = icmp ult i64 %54, %50
  br i1 %55, label %59, label %56

56:                                               ; preds = %52
  %57 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %0, i64 0, i32 0
  %58 = load i8*, i8** %57, align 8, !tbaa !39
  br label %67

59:                                               ; preds = %52
  %60 = lshr i64 %54, 1
  %61 = add i64 %60, %50
  %62 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %0, i64 0, i32 0
  %63 = load i8*, i8** %62, align 8, !tbaa !39
  %64 = tail call i8* @realloc(i8* noundef %63, i64 noundef %61) #25
  %65 = icmp eq i8* %64, null
  br i1 %65, label %139, label %66

66:                                               ; preds = %59
  store i64 %61, i64* %53, align 8, !tbaa !45
  store i8* %64, i8** %62, align 8, !tbaa !39
  br label %67

67:                                               ; preds = %66, %56
  %68 = phi i8* [ %58, %56 ], [ %64, %66 ]
  %69 = getelementptr inbounds i8, i8* %68, i64 %50
  %70 = getelementptr inbounds i8, i8* %69, i64 -6
  %71 = getelementptr inbounds i8, i8* %70, i64 -12
  store i8 0, i8* %71, align 1, !tbaa !14
  %72 = getelementptr inbounds i8, i8* %71, i64 1
  store i8 0, i8* %72, align 1, !tbaa !14
  %73 = getelementptr inbounds i8, i8* %71, i64 2
  store i8 0, i8* %73, align 1, !tbaa !14
  %74 = getelementptr inbounds i8, i8* %71, i64 3
  store i8 6, i8* %74, align 1, !tbaa !14
  %75 = getelementptr inbounds i8, i8* %71, i64 4
  %76 = bitcast i8* %75 to i32*
  store i32 1145523042, i32* %76, align 1, !tbaa !14
  %77 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %1, i64 0, i32 5
  %78 = load i32, i32* %77, align 4, !tbaa !327
  %79 = lshr i32 %78, 8
  %80 = trunc i32 %79 to i8
  %81 = getelementptr inbounds i8, i8* %71, i64 8
  store i8 %80, i8* %81, align 1, !tbaa !14
  %82 = load i32, i32* %77, align 4, !tbaa !327
  %83 = trunc i32 %82 to i8
  %84 = getelementptr inbounds i8, i8* %71, i64 9
  store i8 %83, i8* %84, align 1, !tbaa !14
  %85 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %1, i64 0, i32 6
  %86 = load i32, i32* %85, align 8, !tbaa !326
  %87 = lshr i32 %86, 8
  %88 = trunc i32 %87 to i8
  %89 = getelementptr inbounds i8, i8* %71, i64 10
  store i8 %88, i8* %89, align 1, !tbaa !14
  %90 = load i32, i32* %85, align 8, !tbaa !326
  %91 = trunc i32 %90 to i8
  %92 = getelementptr inbounds i8, i8* %71, i64 11
  store i8 %91, i8* %92, align 1, !tbaa !14
  %93 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %1, i64 0, i32 7
  %94 = load i32, i32* %93, align 4, !tbaa !325
  %95 = lshr i32 %94, 8
  %96 = trunc i32 %95 to i8
  %97 = getelementptr inbounds i8, i8* %71, i64 12
  store i8 %96, i8* %97, align 1, !tbaa !14
  %98 = load i32, i32* %93, align 4, !tbaa !325
  %99 = trunc i32 %98 to i8
  %100 = getelementptr inbounds i8, i8* %71, i64 13
  store i8 %99, i8* %100, align 1, !tbaa !14
  br label %137

101:                                              ; preds = %2
  %102 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %0, i64 0, i32 1
  %103 = load i64, i64* %102, align 8, !tbaa !44
  %104 = icmp eq i64 %103, -1
  br i1 %104, label %139, label %105

105:                                              ; preds = %101
  %106 = add i64 %103, 13
  %107 = icmp ult i64 %103, -13
  br i1 %107, label %108, label %139

108:                                              ; preds = %105
  store i64 %106, i64* %102, align 8, !tbaa !44
  %109 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %0, i64 0, i32 2
  %110 = load i64, i64* %109, align 8, !tbaa !45
  %111 = icmp ult i64 %110, %106
  br i1 %111, label %115, label %112

112:                                              ; preds = %108
  %113 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %0, i64 0, i32 0
  %114 = load i8*, i8** %113, align 8, !tbaa !39
  br label %123

115:                                              ; preds = %108
  %116 = lshr i64 %110, 1
  %117 = add i64 %116, %106
  %118 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %0, i64 0, i32 0
  %119 = load i8*, i8** %118, align 8, !tbaa !39
  %120 = tail call i8* @realloc(i8* noundef %119, i64 noundef %117) #25
  %121 = icmp eq i8* %120, null
  br i1 %121, label %139, label %122

122:                                              ; preds = %115
  store i64 %117, i64* %109, align 8, !tbaa !45
  store i8* %120, i8** %118, align 8, !tbaa !39
  br label %123

123:                                              ; preds = %122, %112
  %124 = phi i8* [ %114, %112 ], [ %120, %122 ]
  %125 = getelementptr inbounds i8, i8* %124, i64 %106
  %126 = getelementptr inbounds i8, i8* %125, i64 -1
  %127 = getelementptr inbounds i8, i8* %126, i64 -12
  store i8 0, i8* %127, align 1, !tbaa !14
  %128 = getelementptr inbounds i8, i8* %127, i64 1
  store i8 0, i8* %128, align 1, !tbaa !14
  %129 = getelementptr inbounds i8, i8* %127, i64 2
  store i8 0, i8* %129, align 1, !tbaa !14
  %130 = getelementptr inbounds i8, i8* %127, i64 3
  store i8 1, i8* %130, align 1, !tbaa !14
  %131 = getelementptr inbounds i8, i8* %127, i64 4
  %132 = bitcast i8* %131 to i32*
  store i32 1145523042, i32* %132, align 1, !tbaa !14
  %133 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %1, i64 0, i32 5
  %134 = load i32, i32* %133, align 4, !tbaa !327
  %135 = trunc i32 %134 to i8
  %136 = getelementptr inbounds i8, i8* %127, i64 8
  store i8 %135, i8* %136, align 1, !tbaa !14
  br label %137

137:                                              ; preds = %123, %67, %27
  %138 = phi i8* [ %31, %27 ], [ %71, %67 ], [ %127, %123 ]
  tail call void @_Z26lodepng_chunk_generate_crcPh(i8* noundef nonnull %138)
  br label %139

139:                                              ; preds = %115, %105, %101, %59, %49, %45, %19, %9, %5, %2, %137
  %140 = phi i32 [ 0, %137 ], [ 0, %2 ], [ 83, %19 ], [ 77, %9 ], [ 77, %5 ], [ 83, %59 ], [ 77, %49 ], [ 77, %45 ], [ 83, %115 ], [ 77, %105 ], [ 77, %101 ]
  ret i32 %140
}

; Function Attrs: nounwind uwtable
define internal fastcc noundef i32 @_ZL13addChunk_pHYsP8ucvectorPK11LodePNGInfo(%struct.ucvector* nocapture noundef %0, %struct.LodePNGInfo* nocapture noundef readonly %1) unnamed_addr #3 {
  %3 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %0, i64 0, i32 1
  %4 = load i64, i64* %3, align 8, !tbaa !44
  %5 = icmp ugt i64 %4, -10
  br i1 %5, label %64, label %6

6:                                                ; preds = %2
  %7 = add i64 %4, 21
  %8 = icmp ult i64 %4, -21
  br i1 %8, label %9, label %64

9:                                                ; preds = %6
  store i64 %7, i64* %3, align 8, !tbaa !44
  %10 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %0, i64 0, i32 2
  %11 = load i64, i64* %10, align 8, !tbaa !45
  %12 = icmp ult i64 %11, %7
  br i1 %12, label %16, label %13

13:                                               ; preds = %9
  %14 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %0, i64 0, i32 0
  %15 = load i8*, i8** %14, align 8, !tbaa !39
  br label %24

16:                                               ; preds = %9
  %17 = lshr i64 %11, 1
  %18 = add i64 %17, %7
  %19 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %0, i64 0, i32 0
  %20 = load i8*, i8** %19, align 8, !tbaa !39
  %21 = tail call i8* @realloc(i8* noundef %20, i64 noundef %18) #25
  %22 = icmp eq i8* %21, null
  br i1 %22, label %64, label %23

23:                                               ; preds = %16
  store i64 %18, i64* %10, align 8, !tbaa !45
  store i8* %21, i8** %19, align 8, !tbaa !39
  br label %24

24:                                               ; preds = %23, %13
  %25 = phi i8* [ %15, %13 ], [ %21, %23 ]
  %26 = getelementptr inbounds i8, i8* %25, i64 %7
  %27 = getelementptr inbounds i8, i8* %26, i64 -9
  %28 = getelementptr inbounds i8, i8* %27, i64 -12
  store i8 0, i8* %28, align 1, !tbaa !14
  %29 = getelementptr inbounds i8, i8* %28, i64 1
  store i8 0, i8* %29, align 1, !tbaa !14
  %30 = getelementptr inbounds i8, i8* %28, i64 2
  store i8 0, i8* %30, align 1, !tbaa !14
  %31 = getelementptr inbounds i8, i8* %28, i64 3
  store i8 9, i8* %31, align 1, !tbaa !14
  %32 = getelementptr inbounds i8, i8* %28, i64 4
  %33 = bitcast i8* %32 to i32*
  store i32 1935231088, i32* %33, align 1, !tbaa !14
  %34 = getelementptr inbounds i8, i8* %28, i64 8
  %35 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %1, i64 0, i32 19
  %36 = load i32, i32* %35, align 8, !tbaa !362
  %37 = lshr i32 %36, 24
  %38 = trunc i32 %37 to i8
  store i8 %38, i8* %34, align 1, !tbaa !14
  %39 = lshr i32 %36, 16
  %40 = trunc i32 %39 to i8
  %41 = getelementptr inbounds i8, i8* %34, i64 1
  store i8 %40, i8* %41, align 1, !tbaa !14
  %42 = lshr i32 %36, 8
  %43 = trunc i32 %42 to i8
  %44 = getelementptr inbounds i8, i8* %34, i64 2
  store i8 %43, i8* %44, align 1, !tbaa !14
  %45 = trunc i32 %36 to i8
  %46 = getelementptr inbounds i8, i8* %34, i64 3
  store i8 %45, i8* %46, align 1, !tbaa !14
  %47 = getelementptr inbounds i8, i8* %28, i64 12
  %48 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %1, i64 0, i32 20
  %49 = load i32, i32* %48, align 4, !tbaa !363
  %50 = lshr i32 %49, 24
  %51 = trunc i32 %50 to i8
  store i8 %51, i8* %47, align 1, !tbaa !14
  %52 = lshr i32 %49, 16
  %53 = trunc i32 %52 to i8
  %54 = getelementptr inbounds i8, i8* %47, i64 1
  store i8 %53, i8* %54, align 1, !tbaa !14
  %55 = lshr i32 %49, 8
  %56 = trunc i32 %55 to i8
  %57 = getelementptr inbounds i8, i8* %47, i64 2
  store i8 %56, i8* %57, align 1, !tbaa !14
  %58 = trunc i32 %49 to i8
  %59 = getelementptr inbounds i8, i8* %47, i64 3
  store i8 %58, i8* %59, align 1, !tbaa !14
  %60 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %1, i64 0, i32 21
  %61 = load i32, i32* %60, align 8, !tbaa !364
  %62 = trunc i32 %61 to i8
  %63 = getelementptr inbounds i8, i8* %28, i64 16
  store i8 %62, i8* %63, align 1, !tbaa !14
  tail call void @_Z26lodepng_chunk_generate_crcPh(i8* noundef nonnull %28)
  br label %64

64:                                               ; preds = %16, %6, %2, %24
  %65 = phi i32 [ 0, %24 ], [ 83, %16 ], [ 77, %6 ], [ 77, %2 ]
  ret i32 %65
}

; Function Attrs: uwtable
define internal fastcc noundef i32 @_ZL13addChunk_IDATP8ucvectorPKhmP23LodePNGCompressSettings(%struct.ucvector* nocapture noundef %0, i8* noundef %1, i64 noundef %2, %struct.LodePNGCompressSettings* noundef %3) unnamed_addr #12 {
  %5 = alloca i8*, align 8
  %6 = alloca i64, align 8
  %7 = bitcast i8** %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %7) #25
  store i8* null, i8** %5, align 8, !tbaa !7
  %8 = bitcast i64* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %8) #25
  store i64 0, i64* %6, align 8, !tbaa !3
  %9 = getelementptr inbounds %struct.LodePNGCompressSettings, %struct.LodePNGCompressSettings* %3, i64 0, i32 6
  %10 = bitcast {}** %9 to i32 (i8**, i64*, i8*, i64, %struct.LodePNGCompressSettings*)**
  %11 = load i32 (i8**, i64*, i8*, i64, %struct.LodePNGCompressSettings*)*, i32 (i8**, i64*, i8*, i64, %struct.LodePNGCompressSettings*)** %10, align 8, !tbaa !658
  %12 = icmp eq i32 (i8**, i64*, i8*, i64, %struct.LodePNGCompressSettings*)* %11, null
  br i1 %12, label %16, label %13

13:                                               ; preds = %4
  %14 = call noundef i32 %11(i8** noundef nonnull %5, i64* noundef nonnull %6, i8* noundef %1, i64 noundef %2, %struct.LodePNGCompressSettings* noundef nonnull %3)
  %15 = icmp eq i32 %14, 0
  br i1 %15, label %19, label %68

16:                                               ; preds = %4
  %17 = call noundef i32 @_Z21lodepng_zlib_compressPPhPmPKhmPK23LodePNGCompressSettings(i8** noundef nonnull %5, i64* noundef nonnull %6, i8* noundef %1, i64 noundef %2, %struct.LodePNGCompressSettings* noundef nonnull %3)
  %18 = icmp eq i32 %17, 0
  br i1 %18, label %19, label %68

19:                                               ; preds = %13, %16
  %20 = load i64, i64* %6, align 8, !tbaa !3
  %21 = trunc i64 %20 to i32
  %22 = load i8*, i8** %5, align 8, !tbaa !7
  %23 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %0, i64 0, i32 1
  %24 = load i64, i64* %23, align 8, !tbaa !44
  %25 = and i64 %20, 4294967295
  %26 = add i64 %24, %25
  %27 = icmp ult i64 %26, %24
  br i1 %27, label %68, label %28

28:                                               ; preds = %19
  %29 = add i64 %26, 12
  %30 = icmp ult i64 %26, -12
  br i1 %30, label %31, label %68

31:                                               ; preds = %28
  store i64 %29, i64* %23, align 8, !tbaa !44
  %32 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %0, i64 0, i32 2
  %33 = load i64, i64* %32, align 8, !tbaa !45
  %34 = icmp ult i64 %33, %29
  br i1 %34, label %38, label %35

35:                                               ; preds = %31
  %36 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %0, i64 0, i32 0
  %37 = load i8*, i8** %36, align 8, !tbaa !39
  br label %46

38:                                               ; preds = %31
  %39 = lshr i64 %33, 1
  %40 = add i64 %39, %29
  %41 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %0, i64 0, i32 0
  %42 = load i8*, i8** %41, align 8, !tbaa !39
  %43 = call i8* @realloc(i8* noundef %42, i64 noundef %40) #25
  %44 = icmp eq i8* %43, null
  br i1 %44, label %68, label %45

45:                                               ; preds = %38
  store i64 %40, i64* %32, align 8, !tbaa !45
  store i8* %43, i8** %41, align 8, !tbaa !39
  br label %46

46:                                               ; preds = %45, %35
  %47 = phi i8* [ %37, %35 ], [ %43, %45 ]
  %48 = getelementptr inbounds i8, i8* %47, i64 %29
  %49 = sub nsw i64 0, %25
  %50 = getelementptr inbounds i8, i8* %48, i64 %49
  %51 = getelementptr inbounds i8, i8* %50, i64 -12
  %52 = lshr i64 %20, 24
  %53 = trunc i64 %52 to i8
  store i8 %53, i8* %51, align 1, !tbaa !14
  %54 = lshr i64 %20, 16
  %55 = trunc i64 %54 to i8
  %56 = getelementptr inbounds i8, i8* %51, i64 1
  store i8 %55, i8* %56, align 1, !tbaa !14
  %57 = lshr i64 %20, 8
  %58 = trunc i64 %57 to i8
  %59 = getelementptr inbounds i8, i8* %51, i64 2
  store i8 %58, i8* %59, align 1, !tbaa !14
  %60 = trunc i64 %20 to i8
  %61 = getelementptr inbounds i8, i8* %51, i64 3
  store i8 %60, i8* %61, align 1, !tbaa !14
  %62 = getelementptr inbounds i8, i8* %51, i64 4
  %63 = bitcast i8* %62 to i32*
  store i32 1413563465, i32* %63, align 1, !tbaa !14
  %64 = icmp eq i32 %21, 0
  br i1 %64, label %67, label %65

65:                                               ; preds = %46
  %66 = getelementptr inbounds i8, i8* %51, i64 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %66, i8* align 1 %22, i64 %25, i1 false) #25, !tbaa !14, !alias.scope !671
  br label %67

67:                                               ; preds = %65, %46
  call void @_Z26lodepng_chunk_generate_crcPh(i8* noundef nonnull %51) #25
  br label %68

68:                                               ; preds = %13, %67, %38, %28, %19, %16
  %69 = phi i32 [ %17, %16 ], [ 0, %67 ], [ 83, %38 ], [ 77, %28 ], [ 77, %19 ], [ 111, %13 ]
  %70 = load i8*, i8** %5, align 8, !tbaa !7
  call void @free(i8* noundef %70) #25
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %8) #25
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7) #25
  ret i32 %69
}

; Function Attrs: nounwind uwtable
define internal fastcc noundef i32 @_ZL13addChunk_tIMEP8ucvectorPK11LodePNGTime(%struct.ucvector* nocapture noundef %0, %struct.LodePNGTime* nocapture noundef readonly %1) unnamed_addr #3 {
  %3 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %0, i64 0, i32 1
  %4 = load i64, i64* %3, align 8, !tbaa !44
  %5 = icmp ugt i64 %4, -8
  br i1 %5, label %62, label %6

6:                                                ; preds = %2
  %7 = add i64 %4, 19
  %8 = icmp ult i64 %4, -19
  br i1 %8, label %9, label %62

9:                                                ; preds = %6
  store i64 %7, i64* %3, align 8, !tbaa !44
  %10 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %0, i64 0, i32 2
  %11 = load i64, i64* %10, align 8, !tbaa !45
  %12 = icmp ult i64 %11, %7
  br i1 %12, label %16, label %13

13:                                               ; preds = %9
  %14 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %0, i64 0, i32 0
  %15 = load i8*, i8** %14, align 8, !tbaa !39
  br label %24

16:                                               ; preds = %9
  %17 = lshr i64 %11, 1
  %18 = add i64 %17, %7
  %19 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %0, i64 0, i32 0
  %20 = load i8*, i8** %19, align 8, !tbaa !39
  %21 = tail call i8* @realloc(i8* noundef %20, i64 noundef %18) #25
  %22 = icmp eq i8* %21, null
  br i1 %22, label %62, label %23

23:                                               ; preds = %16
  store i64 %18, i64* %10, align 8, !tbaa !45
  store i8* %21, i8** %19, align 8, !tbaa !39
  br label %24

24:                                               ; preds = %23, %13
  %25 = phi i8* [ %15, %13 ], [ %21, %23 ]
  %26 = getelementptr inbounds i8, i8* %25, i64 %7
  %27 = getelementptr inbounds i8, i8* %26, i64 -7
  %28 = getelementptr inbounds i8, i8* %27, i64 -12
  store i8 0, i8* %28, align 1, !tbaa !14
  %29 = getelementptr inbounds i8, i8* %28, i64 1
  store i8 0, i8* %29, align 1, !tbaa !14
  %30 = getelementptr inbounds i8, i8* %28, i64 2
  store i8 0, i8* %30, align 1, !tbaa !14
  %31 = getelementptr inbounds i8, i8* %28, i64 3
  store i8 7, i8* %31, align 1, !tbaa !14
  %32 = getelementptr inbounds i8, i8* %28, i64 4
  %33 = bitcast i8* %32 to i32*
  store i32 1162692980, i32* %33, align 1, !tbaa !14
  %34 = getelementptr inbounds %struct.LodePNGTime, %struct.LodePNGTime* %1, i64 0, i32 0
  %35 = load i32, i32* %34, align 4, !tbaa !675
  %36 = lshr i32 %35, 8
  %37 = trunc i32 %36 to i8
  %38 = getelementptr inbounds i8, i8* %28, i64 8
  store i8 %37, i8* %38, align 1, !tbaa !14
  %39 = load i32, i32* %34, align 4, !tbaa !675
  %40 = trunc i32 %39 to i8
  %41 = getelementptr inbounds i8, i8* %28, i64 9
  store i8 %40, i8* %41, align 1, !tbaa !14
  %42 = getelementptr inbounds %struct.LodePNGTime, %struct.LodePNGTime* %1, i64 0, i32 1
  %43 = load i32, i32* %42, align 4, !tbaa !676
  %44 = trunc i32 %43 to i8
  %45 = getelementptr inbounds i8, i8* %28, i64 10
  store i8 %44, i8* %45, align 1, !tbaa !14
  %46 = getelementptr inbounds %struct.LodePNGTime, %struct.LodePNGTime* %1, i64 0, i32 2
  %47 = load i32, i32* %46, align 4, !tbaa !677
  %48 = trunc i32 %47 to i8
  %49 = getelementptr inbounds i8, i8* %28, i64 11
  store i8 %48, i8* %49, align 1, !tbaa !14
  %50 = getelementptr inbounds %struct.LodePNGTime, %struct.LodePNGTime* %1, i64 0, i32 3
  %51 = load i32, i32* %50, align 4, !tbaa !678
  %52 = trunc i32 %51 to i8
  %53 = getelementptr inbounds i8, i8* %28, i64 12
  store i8 %52, i8* %53, align 1, !tbaa !14
  %54 = getelementptr inbounds %struct.LodePNGTime, %struct.LodePNGTime* %1, i64 0, i32 4
  %55 = load i32, i32* %54, align 4, !tbaa !679
  %56 = trunc i32 %55 to i8
  %57 = getelementptr inbounds i8, i8* %28, i64 13
  store i8 %56, i8* %57, align 1, !tbaa !14
  %58 = getelementptr inbounds %struct.LodePNGTime, %struct.LodePNGTime* %1, i64 0, i32 5
  %59 = load i32, i32* %58, align 4, !tbaa !680
  %60 = trunc i32 %59 to i8
  %61 = getelementptr inbounds i8, i8* %28, i64 14
  store i8 %60, i8* %61, align 1, !tbaa !14
  tail call void @_Z26lodepng_chunk_generate_crcPh(i8* noundef nonnull %28)
  br label %62

62:                                               ; preds = %16, %6, %2, %24
  %63 = phi i32 [ 0, %24 ], [ 83, %16 ], [ 77, %6 ], [ 77, %2 ]
  ret i32 %63
}

; Function Attrs: uwtable
define internal fastcc noundef i32 @_ZL13addChunk_zTXtP8ucvectorPKcS2_P23LodePNGCompressSettings(%struct.ucvector* nocapture noundef %0, i8* noundef %1, i8* noundef %2, %struct.LodePNGCompressSettings* noundef %3) unnamed_addr #12 {
  %5 = alloca i8*, align 8
  %6 = alloca i64, align 8
  %7 = bitcast i8** %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %7) #25
  store i8* null, i8** %5, align 8, !tbaa !7
  %8 = bitcast i64* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %8) #25
  store i64 0, i64* %6, align 8, !tbaa !3
  br label %9

9:                                                ; preds = %9, %4
  %10 = phi i8* [ %2, %4 ], [ %13, %9 ]
  %11 = load i8, i8* %10, align 1, !tbaa !14
  %12 = icmp eq i8 %11, 0
  %13 = getelementptr inbounds i8, i8* %10, i64 1
  br i1 %12, label %14, label %9

14:                                               ; preds = %9
  %15 = ptrtoint i8* %2 to i64
  br label %16

16:                                               ; preds = %16, %14
  %17 = phi i8* [ %1, %14 ], [ %20, %16 ]
  %18 = load i8, i8* %17, align 1, !tbaa !14
  %19 = icmp eq i8 %18, 0
  %20 = getelementptr inbounds i8, i8* %17, i64 1
  br i1 %19, label %21, label %16

21:                                               ; preds = %16
  %22 = ptrtoint i8* %10 to i64
  %23 = sub i64 %22, %15
  %24 = ptrtoint i8* %17 to i64
  %25 = ptrtoint i8* %1 to i64
  %26 = sub i64 %24, %25
  %27 = add i64 %26, -80
  %28 = icmp ult i64 %27, -79
  br i1 %28, label %100, label %29

29:                                               ; preds = %21
  %30 = getelementptr inbounds %struct.LodePNGCompressSettings, %struct.LodePNGCompressSettings* %3, i64 0, i32 6
  %31 = bitcast {}** %30 to i32 (i8**, i64*, i8*, i64, %struct.LodePNGCompressSettings*)**
  %32 = load i32 (i8**, i64*, i8*, i64, %struct.LodePNGCompressSettings*)*, i32 (i8**, i64*, i8*, i64, %struct.LodePNGCompressSettings*)** %31, align 8, !tbaa !658
  %33 = icmp eq i32 (i8**, i64*, i8*, i64, %struct.LodePNGCompressSettings*)* %32, null
  br i1 %33, label %37, label %34

34:                                               ; preds = %29
  %35 = call noundef i32 %32(i8** noundef nonnull %5, i64* noundef nonnull %6, i8* noundef %2, i64 noundef %23, %struct.LodePNGCompressSettings* noundef nonnull %3)
  %36 = icmp eq i32 %35, 0
  br i1 %36, label %40, label %97

37:                                               ; preds = %29
  %38 = call noundef i32 @_Z21lodepng_zlib_compressPPhPmPKhmPK23LodePNGCompressSettings(i8** noundef nonnull %5, i64* noundef nonnull %6, i8* noundef %2, i64 noundef %23, %struct.LodePNGCompressSettings* noundef nonnull %3)
  %39 = icmp eq i32 %38, 0
  br i1 %39, label %40, label %97

40:                                               ; preds = %34, %37
  %41 = add nuw nsw i64 %26, 2
  %42 = load i64, i64* %6, align 8, !tbaa !3
  %43 = add i64 %41, %42
  %44 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %0, i64 0, i32 1
  %45 = load i64, i64* %44, align 8, !tbaa !44
  %46 = and i64 %43, 4294967295
  %47 = add i64 %46, %45
  %48 = icmp ult i64 %47, %45
  br i1 %48, label %97, label %49

49:                                               ; preds = %40
  %50 = add i64 %47, 12
  %51 = icmp ult i64 %47, -12
  br i1 %51, label %52, label %97

52:                                               ; preds = %49
  store i64 %50, i64* %44, align 8, !tbaa !44
  %53 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %0, i64 0, i32 2
  %54 = load i64, i64* %53, align 8, !tbaa !45
  %55 = icmp ult i64 %54, %50
  br i1 %55, label %59, label %56

56:                                               ; preds = %52
  %57 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %0, i64 0, i32 0
  %58 = load i8*, i8** %57, align 8, !tbaa !39
  br label %67

59:                                               ; preds = %52
  %60 = lshr i64 %54, 1
  %61 = add i64 %60, %50
  %62 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %0, i64 0, i32 0
  %63 = load i8*, i8** %62, align 8, !tbaa !39
  %64 = call i8* @realloc(i8* noundef %63, i64 noundef %61) #25
  %65 = icmp eq i8* %64, null
  br i1 %65, label %97, label %66

66:                                               ; preds = %59
  store i64 %61, i64* %53, align 8, !tbaa !45
  store i8* %64, i8** %62, align 8, !tbaa !39
  br label %67

67:                                               ; preds = %66, %56
  %68 = phi i8* [ %58, %56 ], [ %64, %66 ]
  %69 = getelementptr inbounds i8, i8* %68, i64 %50
  %70 = sub nsw i64 0, %46
  %71 = getelementptr inbounds i8, i8* %69, i64 %70
  %72 = getelementptr inbounds i8, i8* %71, i64 -12
  %73 = lshr i64 %43, 24
  %74 = trunc i64 %73 to i8
  store i8 %74, i8* %72, align 1, !tbaa !14
  %75 = lshr i64 %43, 16
  %76 = trunc i64 %75 to i8
  %77 = getelementptr inbounds i8, i8* %72, i64 1
  store i8 %76, i8* %77, align 1, !tbaa !14
  %78 = lshr i64 %43, 8
  %79 = trunc i64 %78 to i8
  %80 = getelementptr inbounds i8, i8* %72, i64 2
  store i8 %79, i8* %80, align 1, !tbaa !14
  %81 = trunc i64 %43 to i8
  %82 = getelementptr inbounds i8, i8* %72, i64 3
  store i8 %81, i8* %82, align 1, !tbaa !14
  %83 = getelementptr inbounds i8, i8* %72, i64 4
  %84 = bitcast i8* %83 to i32*
  store i32 1951945850, i32* %84, align 1, !tbaa !14
  %85 = getelementptr inbounds i8, i8* %72, i64 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %85, i8* align 1 %1, i64 %26, i1 false) #25, !tbaa !14, !alias.scope !681
  %86 = add nuw nsw i64 %26, 8
  %87 = getelementptr inbounds i8, i8* %72, i64 %86
  store i8 0, i8* %87, align 1, !tbaa !14
  %88 = add nuw nsw i64 %26, 9
  %89 = getelementptr inbounds i8, i8* %72, i64 %88
  store i8 0, i8* %89, align 1, !tbaa !14
  %90 = load i64, i64* %6, align 8, !tbaa !3
  %91 = icmp eq i64 %90, 0
  br i1 %91, label %96, label %92

92:                                               ; preds = %67
  %93 = load i8*, i8** %5, align 8, !tbaa !7
  %94 = getelementptr inbounds i8, i8* %72, i64 10
  %95 = getelementptr inbounds i8, i8* %94, i64 %26
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %95, i8* align 1 %93, i64 %90, i1 false) #25, !tbaa !14, !alias.scope !685
  br label %96

96:                                               ; preds = %67, %92
  call void @_Z26lodepng_chunk_generate_crcPh(i8* noundef nonnull %72)
  br label %97

97:                                               ; preds = %34, %59, %49, %40, %37, %96
  %98 = phi i32 [ 0, %96 ], [ 83, %59 ], [ 77, %49 ], [ 77, %40 ], [ %38, %37 ], [ 111, %34 ]
  %99 = load i8*, i8** %5, align 8, !tbaa !7
  call void @free(i8* noundef %99) #25
  br label %100

100:                                              ; preds = %21, %97
  %101 = phi i32 [ %98, %97 ], [ 89, %21 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %8) #25
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7) #25
  ret i32 %101
}

; Function Attrs: nounwind uwtable
define internal fastcc noundef i32 @_ZL13addChunk_tEXtP8ucvectorPKcS2_(%struct.ucvector* nocapture noundef %0, i8* noundef %1, i8* noundef %2) unnamed_addr #3 {
  br label %4

4:                                                ; preds = %4, %3
  %5 = phi i8* [ %1, %3 ], [ %8, %4 ]
  %6 = load i8, i8* %5, align 1, !tbaa !14
  %7 = icmp eq i8 %6, 0
  %8 = getelementptr inbounds i8, i8* %5, i64 1
  br i1 %7, label %9, label %4

9:                                                ; preds = %4
  %10 = ptrtoint i8* %1 to i64
  br label %11

11:                                               ; preds = %11, %9
  %12 = phi i8* [ %2, %9 ], [ %15, %11 ]
  %13 = load i8, i8* %12, align 1, !tbaa !14
  %14 = icmp eq i8 %13, 0
  %15 = getelementptr inbounds i8, i8* %12, i64 1
  br i1 %14, label %16, label %11

16:                                               ; preds = %11
  %17 = ptrtoint i8* %5 to i64
  %18 = sub i64 %17, %10
  %19 = ptrtoint i8* %12 to i64
  %20 = ptrtoint i8* %2 to i64
  %21 = sub i64 %19, %20
  %22 = add i64 %18, -80
  %23 = icmp ult i64 %22, -79
  br i1 %23, label %76, label %24

24:                                               ; preds = %16
  %25 = add nuw nsw i64 %18, 1
  %26 = add i64 %25, %21
  %27 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %0, i64 0, i32 1
  %28 = load i64, i64* %27, align 8, !tbaa !44
  %29 = and i64 %26, 4294967295
  %30 = add i64 %28, %29
  %31 = icmp ult i64 %30, %28
  br i1 %31, label %76, label %32

32:                                               ; preds = %24
  %33 = add i64 %30, 12
  %34 = icmp ult i64 %30, -12
  br i1 %34, label %35, label %76

35:                                               ; preds = %32
  store i64 %33, i64* %27, align 8, !tbaa !44
  %36 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %0, i64 0, i32 2
  %37 = load i64, i64* %36, align 8, !tbaa !45
  %38 = icmp ult i64 %37, %33
  br i1 %38, label %42, label %39

39:                                               ; preds = %35
  %40 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %0, i64 0, i32 0
  %41 = load i8*, i8** %40, align 8, !tbaa !39
  br label %50

42:                                               ; preds = %35
  %43 = lshr i64 %37, 1
  %44 = add i64 %43, %33
  %45 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %0, i64 0, i32 0
  %46 = load i8*, i8** %45, align 8, !tbaa !39
  %47 = tail call i8* @realloc(i8* noundef %46, i64 noundef %44) #25
  %48 = icmp eq i8* %47, null
  br i1 %48, label %76, label %49

49:                                               ; preds = %42
  store i64 %44, i64* %36, align 8, !tbaa !45
  store i8* %47, i8** %45, align 8, !tbaa !39
  br label %50

50:                                               ; preds = %49, %39
  %51 = phi i8* [ %41, %39 ], [ %47, %49 ]
  %52 = getelementptr inbounds i8, i8* %51, i64 %33
  %53 = sub nsw i64 0, %29
  %54 = getelementptr inbounds i8, i8* %52, i64 %53
  %55 = getelementptr inbounds i8, i8* %54, i64 -12
  %56 = lshr i64 %26, 24
  %57 = trunc i64 %56 to i8
  store i8 %57, i8* %55, align 1, !tbaa !14
  %58 = lshr i64 %26, 16
  %59 = trunc i64 %58 to i8
  %60 = getelementptr inbounds i8, i8* %55, i64 1
  store i8 %59, i8* %60, align 1, !tbaa !14
  %61 = lshr i64 %26, 8
  %62 = trunc i64 %61 to i8
  %63 = getelementptr inbounds i8, i8* %55, i64 2
  store i8 %62, i8* %63, align 1, !tbaa !14
  %64 = trunc i64 %26 to i8
  %65 = getelementptr inbounds i8, i8* %55, i64 3
  store i8 %64, i8* %65, align 1, !tbaa !14
  %66 = getelementptr inbounds i8, i8* %55, i64 4
  %67 = bitcast i8* %66 to i32*
  store i32 1951942004, i32* %67, align 1, !tbaa !14
  %68 = getelementptr inbounds i8, i8* %55, i64 8
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %68, i8* align 1 %1, i64 %18, i1 false) #25, !tbaa !14, !alias.scope !689
  %69 = add nuw nsw i64 %18, 8
  %70 = getelementptr inbounds i8, i8* %55, i64 %69
  store i8 0, i8* %70, align 1, !tbaa !14
  %71 = icmp eq i64 %21, 0
  br i1 %71, label %75, label %72

72:                                               ; preds = %50
  %73 = getelementptr inbounds i8, i8* %55, i64 9
  %74 = getelementptr inbounds i8, i8* %73, i64 %18
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %74, i8* align 1 %2, i64 %21, i1 false) #25, !tbaa !14, !alias.scope !693
  br label %75

75:                                               ; preds = %50, %72
  tail call void @_Z26lodepng_chunk_generate_crcPh(i8* noundef nonnull %55)
  br label %76

76:                                               ; preds = %42, %32, %24, %16, %75
  %77 = phi i32 [ 0, %75 ], [ 89, %16 ], [ 83, %42 ], [ 77, %32 ], [ 77, %24 ]
  ret i32 %77
}

; Function Attrs: uwtable
define internal fastcc noundef i32 @_ZL13addChunk_iTXtP8ucvectorjPKcS2_S2_S2_P23LodePNGCompressSettings(%struct.ucvector* nocapture noundef %0, i32 noundef %1, i8* noundef %2, i8* noundef %3, i8* noundef %4, i8* noundef %5, %struct.LodePNGCompressSettings* noundef %6) unnamed_addr #12 {
  %8 = alloca i8*, align 8
  %9 = alloca i64, align 8
  %10 = bitcast i8** %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %10) #25
  store i8* null, i8** %8, align 8, !tbaa !7
  %11 = bitcast i64* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %11) #25
  store i64 0, i64* %9, align 8, !tbaa !3
  br label %12

12:                                               ; preds = %12, %7
  %13 = phi i8* [ %5, %7 ], [ %16, %12 ]
  %14 = load i8, i8* %13, align 1, !tbaa !14
  %15 = icmp eq i8 %14, 0
  %16 = getelementptr inbounds i8, i8* %13, i64 1
  br i1 %15, label %17, label %12

17:                                               ; preds = %12
  %18 = ptrtoint i8* %5 to i64
  br label %19

19:                                               ; preds = %19, %17
  %20 = phi i8* [ %2, %17 ], [ %23, %19 ]
  %21 = load i8, i8* %20, align 1, !tbaa !14
  %22 = icmp eq i8 %21, 0
  %23 = getelementptr inbounds i8, i8* %20, i64 1
  br i1 %22, label %24, label %19

24:                                               ; preds = %19
  %25 = ptrtoint i8* %13 to i64
  %26 = sub i64 %25, %18
  %27 = ptrtoint i8* %2 to i64
  br label %28

28:                                               ; preds = %28, %24
  %29 = phi i8* [ %3, %24 ], [ %32, %28 ]
  %30 = load i8, i8* %29, align 1, !tbaa !14
  %31 = icmp eq i8 %30, 0
  %32 = getelementptr inbounds i8, i8* %29, i64 1
  br i1 %31, label %33, label %28

33:                                               ; preds = %28
  %34 = ptrtoint i8* %20 to i64
  %35 = sub i64 %34, %27
  %36 = ptrtoint i8* %3 to i64
  br label %37

37:                                               ; preds = %37, %33
  %38 = phi i8* [ %4, %33 ], [ %41, %37 ]
  %39 = load i8, i8* %38, align 1, !tbaa !14
  %40 = icmp eq i8 %39, 0
  %41 = getelementptr inbounds i8, i8* %38, i64 1
  br i1 %40, label %42, label %37

42:                                               ; preds = %37
  %43 = ptrtoint i8* %29 to i64
  %44 = sub i64 %43, %36
  %45 = ptrtoint i8* %38 to i64
  %46 = ptrtoint i8* %4 to i64
  %47 = sub i64 %45, %46
  %48 = add i64 %35, -80
  %49 = icmp ult i64 %48, -79
  br i1 %49, label %149, label %50

50:                                               ; preds = %42
  %51 = icmp eq i32 %1, 0
  br i1 %51, label %63, label %52

52:                                               ; preds = %50
  %53 = getelementptr inbounds %struct.LodePNGCompressSettings, %struct.LodePNGCompressSettings* %6, i64 0, i32 6
  %54 = bitcast {}** %53 to i32 (i8**, i64*, i8*, i64, %struct.LodePNGCompressSettings*)**
  %55 = load i32 (i8**, i64*, i8*, i64, %struct.LodePNGCompressSettings*)*, i32 (i8**, i64*, i8*, i64, %struct.LodePNGCompressSettings*)** %54, align 8, !tbaa !658
  %56 = icmp eq i32 (i8**, i64*, i8*, i64, %struct.LodePNGCompressSettings*)* %55, null
  br i1 %56, label %60, label %57

57:                                               ; preds = %52
  %58 = call noundef i32 %55(i8** noundef nonnull %8, i64* noundef nonnull %9, i8* noundef %5, i64 noundef %26, %struct.LodePNGCompressSettings* noundef nonnull %6)
  %59 = icmp eq i32 %58, 0
  br i1 %59, label %63, label %146

60:                                               ; preds = %52
  %61 = call noundef i32 @_Z21lodepng_zlib_compressPPhPmPKhmPK23LodePNGCompressSettings(i8** noundef nonnull %8, i64* noundef nonnull %9, i8* noundef %5, i64 noundef %26, %struct.LodePNGCompressSettings* noundef nonnull %6)
  %62 = icmp eq i32 %61, 0
  br i1 %62, label %63, label %146

63:                                               ; preds = %57, %50, %60
  %64 = load i64, i64* %9, align 8
  %65 = select i1 %51, i64 %26, i64 %64
  %66 = add nuw nsw i64 %35, 5
  %67 = add i64 %66, %44
  %68 = add i64 %67, %47
  %69 = add i64 %68, %65
  %70 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %0, i64 0, i32 1
  %71 = load i64, i64* %70, align 8, !tbaa !44
  %72 = and i64 %69, 4294967295
  %73 = add i64 %72, %71
  %74 = icmp ult i64 %73, %71
  br i1 %74, label %146, label %75

75:                                               ; preds = %63
  %76 = add i64 %73, 12
  %77 = icmp ult i64 %73, -12
  br i1 %77, label %78, label %146

78:                                               ; preds = %75
  store i64 %76, i64* %70, align 8, !tbaa !44
  %79 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %0, i64 0, i32 2
  %80 = load i64, i64* %79, align 8, !tbaa !45
  %81 = icmp ult i64 %80, %76
  br i1 %81, label %85, label %82

82:                                               ; preds = %78
  %83 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %0, i64 0, i32 0
  %84 = load i8*, i8** %83, align 8, !tbaa !39
  br label %93

85:                                               ; preds = %78
  %86 = lshr i64 %80, 1
  %87 = add i64 %86, %76
  %88 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %0, i64 0, i32 0
  %89 = load i8*, i8** %88, align 8, !tbaa !39
  %90 = call i8* @realloc(i8* noundef %89, i64 noundef %87) #25
  %91 = icmp eq i8* %90, null
  br i1 %91, label %146, label %92

92:                                               ; preds = %85
  store i64 %87, i64* %79, align 8, !tbaa !45
  store i8* %90, i8** %88, align 8, !tbaa !39
  br label %93

93:                                               ; preds = %92, %82
  %94 = phi i8* [ %84, %82 ], [ %90, %92 ]
  %95 = getelementptr inbounds i8, i8* %94, i64 %76
  %96 = sub nsw i64 0, %72
  %97 = getelementptr inbounds i8, i8* %95, i64 %96
  %98 = getelementptr inbounds i8, i8* %97, i64 -12
  %99 = lshr i64 %69, 24
  %100 = trunc i64 %99 to i8
  store i8 %100, i8* %98, align 1, !tbaa !14
  %101 = lshr i64 %69, 16
  %102 = trunc i64 %101 to i8
  %103 = getelementptr inbounds i8, i8* %98, i64 1
  store i8 %102, i8* %103, align 1, !tbaa !14
  %104 = lshr i64 %69, 8
  %105 = trunc i64 %104 to i8
  %106 = getelementptr inbounds i8, i8* %98, i64 2
  store i8 %105, i8* %106, align 1, !tbaa !14
  %107 = trunc i64 %69 to i8
  %108 = getelementptr inbounds i8, i8* %98, i64 3
  store i8 %107, i8* %108, align 1, !tbaa !14
  %109 = getelementptr inbounds i8, i8* %98, i64 4
  %110 = bitcast i8* %109 to i32*
  store i32 1951945833, i32* %110, align 1, !tbaa !14
  %111 = getelementptr inbounds i8, i8* %98, i64 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %111, i8* align 1 %2, i64 %35, i1 false) #25, !tbaa !14, !alias.scope !697
  %112 = add nuw nsw i64 %35, 8
  %113 = add nuw nsw i64 %35, 9
  %114 = getelementptr inbounds i8, i8* %98, i64 %112
  store i8 0, i8* %114, align 1, !tbaa !14
  %115 = xor i1 %51, true
  %116 = zext i1 %115 to i8
  %117 = add nuw nsw i64 %35, 10
  %118 = getelementptr inbounds i8, i8* %98, i64 %113
  store i8 %116, i8* %118, align 1, !tbaa !14
  %119 = add nuw nsw i64 %35, 11
  %120 = getelementptr inbounds i8, i8* %98, i64 %117
  store i8 0, i8* %120, align 1, !tbaa !14
  %121 = icmp eq i64 %44, 0
  br i1 %121, label %124, label %122

122:                                              ; preds = %93
  %123 = getelementptr inbounds i8, i8* %98, i64 %119
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %123, i8* align 1 %3, i64 %44, i1 false) #25, !tbaa !14, !alias.scope !701
  br label %124

124:                                              ; preds = %93, %122
  %125 = add i64 %44, %119
  %126 = add i64 %125, 1
  %127 = getelementptr inbounds i8, i8* %98, i64 %125
  store i8 0, i8* %127, align 1, !tbaa !14
  %128 = icmp eq i64 %47, 0
  br i1 %128, label %131, label %129

129:                                              ; preds = %124
  %130 = getelementptr inbounds i8, i8* %98, i64 %126
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %130, i8* align 1 %4, i64 %47, i1 false) #25, !tbaa !14, !alias.scope !705
  br label %131

131:                                              ; preds = %124, %129
  %132 = add i64 %47, %126
  %133 = add i64 %132, 1
  %134 = getelementptr inbounds i8, i8* %98, i64 %132
  store i8 0, i8* %134, align 1, !tbaa !14
  br i1 %51, label %141, label %135

135:                                              ; preds = %131
  %136 = load i64, i64* %9, align 8, !tbaa !3
  %137 = icmp eq i64 %136, 0
  br i1 %137, label %145, label %138

138:                                              ; preds = %135
  %139 = load i8*, i8** %8, align 8, !tbaa !7
  %140 = getelementptr inbounds i8, i8* %98, i64 %133
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %140, i8* align 1 %139, i64 %136, i1 false) #25, !tbaa !14, !alias.scope !709
  br label %145

141:                                              ; preds = %131
  %142 = icmp eq i64 %26, 0
  br i1 %142, label %145, label %143

143:                                              ; preds = %141
  %144 = getelementptr inbounds i8, i8* %98, i64 %133
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %144, i8* align 1 %5, i64 %26, i1 false) #25, !tbaa !14, !alias.scope !713
  br label %145

145:                                              ; preds = %143, %141, %138, %135
  call void @_Z26lodepng_chunk_generate_crcPh(i8* noundef nonnull %98)
  br label %146

146:                                              ; preds = %57, %85, %75, %63, %60, %145
  %147 = phi i32 [ 0, %145 ], [ 83, %85 ], [ 77, %75 ], [ 77, %63 ], [ %61, %60 ], [ 111, %57 ]
  %148 = load i8*, i8** %8, align 8, !tbaa !7
  call void @free(i8* noundef %148) #25
  br label %149

149:                                              ; preds = %42, %146
  %150 = phi i32 [ %147, %146 ], [ 89, %42 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %11) #25
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %10) #25
  ret i32 %150
}

; Function Attrs: nounwind uwtable
define internal fastcc noundef i32 @_ZL13addChunk_IENDP8ucvector(%struct.ucvector* nocapture noundef %0) unnamed_addr #3 {
  %2 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %0, i64 0, i32 1
  %3 = load i64, i64* %2, align 8, !tbaa !44
  %4 = add i64 %3, 12
  %5 = icmp ult i64 %3, -12
  br i1 %5, label %6, label %27

6:                                                ; preds = %1
  store i64 %4, i64* %2, align 8, !tbaa !44
  %7 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %0, i64 0, i32 2
  %8 = load i64, i64* %7, align 8, !tbaa !45
  %9 = icmp ult i64 %8, %4
  br i1 %9, label %13, label %10

10:                                               ; preds = %6
  %11 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %0, i64 0, i32 0
  %12 = load i8*, i8** %11, align 8, !tbaa !39
  br label %21

13:                                               ; preds = %6
  %14 = lshr i64 %8, 1
  %15 = add i64 %14, %4
  %16 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %0, i64 0, i32 0
  %17 = load i8*, i8** %16, align 8, !tbaa !39
  %18 = tail call i8* @realloc(i8* noundef %17, i64 noundef %15) #25
  %19 = icmp eq i8* %18, null
  br i1 %19, label %27, label %20

20:                                               ; preds = %13
  store i64 %15, i64* %7, align 8, !tbaa !45
  store i8* %18, i8** %16, align 8, !tbaa !39
  br label %21

21:                                               ; preds = %20, %10
  %22 = phi i8* [ %12, %10 ], [ %18, %20 ]
  %23 = getelementptr inbounds i8, i8* %22, i64 %3
  %24 = getelementptr inbounds i8, i8* %23, i64 4
  %25 = bitcast i8* %24 to i32*
  %26 = bitcast i8* %23 to i32*
  store i32 0, i32* %26, align 1
  store i32 1145980233, i32* %25, align 1, !tbaa !14
  tail call void @_Z26lodepng_chunk_generate_crcPh(i8* noundef nonnull %23) #25
  br label %27

27:                                               ; preds = %1, %13, %21
  %28 = phi i32 [ 0, %21 ], [ 83, %13 ], [ 77, %1 ]
  ret i32 %28
}

; Function Attrs: nofree nosync nounwind uwtable
define internal fastcc void @_ZL14addPaddingBitsPhPKhmmj(i8* nocapture noundef %0, i8* nocapture noundef readonly %1, i64 noundef %2, i64 noundef %3, i32 noundef %4) unnamed_addr #8 {
  %6 = sub i64 %2, %3
  %7 = icmp eq i32 %4, 0
  br i1 %7, label %195, label %8

8:                                                ; preds = %5
  %9 = icmp eq i64 %3, 0
  %10 = icmp eq i64 %6, 0
  br i1 %9, label %141, label %11

11:                                               ; preds = %8
  br i1 %10, label %19, label %12

12:                                               ; preds = %11
  %13 = xor i64 %3, -1
  %14 = and i64 %6, 1
  %15 = sub i64 0, %2
  %16 = icmp eq i64 %13, %15
  %17 = and i64 %6, -2
  %18 = icmp eq i64 %14, 0
  br label %59

19:                                               ; preds = %11, %55
  %20 = phi i32 [ %57, %55 ], [ 0, %11 ]
  %21 = phi i64 [ %56, %55 ], [ 0, %11 ]
  %22 = phi i64 [ %23, %55 ], [ 0, %11 ]
  %23 = add i64 %22, %3
  br label %24

24:                                               ; preds = %52, %19
  %25 = phi i64 [ %21, %19 ], [ %33, %52 ]
  %26 = phi i64 [ %22, %19 ], [ %53, %52 ]
  %27 = lshr i64 %25, 3
  %28 = getelementptr inbounds i8, i8* %1, i64 %27
  %29 = load i8, i8* %28, align 1, !tbaa !14
  %30 = trunc i64 %25 to i8
  %31 = and i8 %30, 7
  %32 = xor i8 %31, 7
  %33 = add i64 %25, 1
  %34 = shl nuw i8 1, %32
  %35 = and i8 %29, %34
  %36 = icmp eq i8 %35, 0
  %37 = trunc i64 %26 to i8
  %38 = and i8 %37, 7
  %39 = xor i8 %38, 7
  %40 = shl nuw i8 1, %39
  br i1 %36, label %46, label %41

41:                                               ; preds = %24
  %42 = lshr i64 %26, 3
  %43 = getelementptr inbounds i8, i8* %0, i64 %42
  %44 = load i8, i8* %43, align 1, !tbaa !14
  %45 = or i8 %44, %40
  store i8 %45, i8* %43, align 1, !tbaa !14
  br label %52

46:                                               ; preds = %24
  %47 = xor i8 %40, -1
  %48 = lshr i64 %26, 3
  %49 = getelementptr inbounds i8, i8* %0, i64 %48
  %50 = load i8, i8* %49, align 1, !tbaa !14
  %51 = and i8 %50, %47
  store i8 %51, i8* %49, align 1, !tbaa !14
  br label %52

52:                                               ; preds = %46, %41
  %53 = add i64 %26, 1
  %54 = icmp eq i64 %53, %23
  br i1 %54, label %55, label %24

55:                                               ; preds = %52
  %56 = add i64 %21, %3
  %57 = add nuw i32 %20, 1
  %58 = icmp eq i32 %57, %4
  br i1 %58, label %195, label %19

59:                                               ; preds = %12, %136
  %60 = phi i32 [ %139, %136 ], [ 0, %12 ]
  %61 = phi i64 [ %138, %136 ], [ 0, %12 ]
  %62 = phi i64 [ %137, %136 ], [ 0, %12 ]
  br label %88

63:                                               ; preds = %121, %63
  %64 = phi i64 [ %85, %63 ], [ %118, %121 ]
  %65 = phi i64 [ %86, %63 ], [ 0, %121 ]
  %66 = trunc i64 %64 to i8
  %67 = and i8 %66, 7
  %68 = xor i8 %67, 7
  %69 = shl nuw i8 1, %68
  %70 = xor i8 %69, -1
  %71 = lshr i64 %64, 3
  %72 = getelementptr inbounds i8, i8* %0, i64 %71
  %73 = load i8, i8* %72, align 1, !tbaa !14
  %74 = and i8 %73, %70
  store i8 %74, i8* %72, align 1, !tbaa !14
  %75 = add i64 %64, 1
  %76 = trunc i64 %75 to i8
  %77 = and i8 %76, 7
  %78 = xor i8 %77, 7
  %79 = shl nuw i8 1, %78
  %80 = xor i8 %79, -1
  %81 = lshr i64 %75, 3
  %82 = getelementptr inbounds i8, i8* %0, i64 %81
  %83 = load i8, i8* %82, align 1, !tbaa !14
  %84 = and i8 %83, %80
  store i8 %84, i8* %82, align 1, !tbaa !14
  %85 = add i64 %64, 2
  %86 = add i64 %65, 2
  %87 = icmp eq i64 %86, %17
  br i1 %87, label %122, label %63

88:                                               ; preds = %59, %117
  %89 = phi i64 [ 0, %59 ], [ %119, %117 ]
  %90 = phi i64 [ %61, %59 ], [ %98, %117 ]
  %91 = phi i64 [ %62, %59 ], [ %118, %117 ]
  %92 = lshr i64 %90, 3
  %93 = getelementptr inbounds i8, i8* %1, i64 %92
  %94 = load i8, i8* %93, align 1, !tbaa !14
  %95 = trunc i64 %90 to i8
  %96 = and i8 %95, 7
  %97 = xor i8 %96, 7
  %98 = add i64 %90, 1
  %99 = shl nuw i8 1, %97
  %100 = and i8 %94, %99
  %101 = icmp eq i8 %100, 0
  %102 = trunc i64 %91 to i8
  %103 = and i8 %102, 7
  %104 = xor i8 %103, 7
  %105 = shl nuw i8 1, %104
  br i1 %101, label %111, label %106

106:                                              ; preds = %88
  %107 = lshr i64 %91, 3
  %108 = getelementptr inbounds i8, i8* %0, i64 %107
  %109 = load i8, i8* %108, align 1, !tbaa !14
  %110 = or i8 %109, %105
  store i8 %110, i8* %108, align 1, !tbaa !14
  br label %117

111:                                              ; preds = %88
  %112 = xor i8 %105, -1
  %113 = lshr i64 %91, 3
  %114 = getelementptr inbounds i8, i8* %0, i64 %113
  %115 = load i8, i8* %114, align 1, !tbaa !14
  %116 = and i8 %115, %112
  store i8 %116, i8* %114, align 1, !tbaa !14
  br label %117

117:                                              ; preds = %111, %106
  %118 = add i64 %91, 1
  %119 = add nuw i64 %89, 1
  %120 = icmp eq i64 %119, %3
  br i1 %120, label %121, label %88

121:                                              ; preds = %117
  br i1 %16, label %122, label %63

122:                                              ; preds = %63, %121
  %123 = phi i64 [ undef, %121 ], [ %85, %63 ]
  %124 = phi i64 [ %118, %121 ], [ %85, %63 ]
  br i1 %18, label %136, label %125

125:                                              ; preds = %122
  %126 = trunc i64 %124 to i8
  %127 = and i8 %126, 7
  %128 = xor i8 %127, 7
  %129 = shl nuw i8 1, %128
  %130 = xor i8 %129, -1
  %131 = lshr i64 %124, 3
  %132 = getelementptr inbounds i8, i8* %0, i64 %131
  %133 = load i8, i8* %132, align 1, !tbaa !14
  %134 = and i8 %133, %130
  store i8 %134, i8* %132, align 1, !tbaa !14
  %135 = add i64 %124, 1
  br label %136

136:                                              ; preds = %122, %125
  %137 = phi i64 [ %123, %122 ], [ %135, %125 ]
  %138 = add i64 %61, %3
  %139 = add nuw i32 %60, 1
  %140 = icmp eq i32 %139, %4
  br i1 %140, label %195, label %59

141:                                              ; preds = %8
  br i1 %10, label %195, label %142

142:                                              ; preds = %141
  %143 = xor i64 %3, -1
  %144 = and i64 %6, 1
  %145 = sub i64 0, %2
  %146 = icmp eq i64 %143, %145
  %147 = and i64 %6, -2
  %148 = icmp eq i64 %144, 0
  br label %149

149:                                              ; preds = %142, %191
  %150 = phi i32 [ %193, %191 ], [ 0, %142 ]
  %151 = phi i64 [ %192, %191 ], [ 0, %142 ]
  br i1 %146, label %177, label %152

152:                                              ; preds = %149, %152
  %153 = phi i64 [ %174, %152 ], [ %151, %149 ]
  %154 = phi i64 [ %175, %152 ], [ 0, %149 ]
  %155 = trunc i64 %153 to i8
  %156 = and i8 %155, 7
  %157 = xor i8 %156, 7
  %158 = shl nuw i8 1, %157
  %159 = xor i8 %158, -1
  %160 = lshr i64 %153, 3
  %161 = getelementptr inbounds i8, i8* %0, i64 %160
  %162 = load i8, i8* %161, align 1, !tbaa !14
  %163 = and i8 %162, %159
  store i8 %163, i8* %161, align 1, !tbaa !14
  %164 = add i64 %153, 1
  %165 = trunc i64 %164 to i8
  %166 = and i8 %165, 7
  %167 = xor i8 %166, 7
  %168 = shl nuw i8 1, %167
  %169 = xor i8 %168, -1
  %170 = lshr i64 %164, 3
  %171 = getelementptr inbounds i8, i8* %0, i64 %170
  %172 = load i8, i8* %171, align 1, !tbaa !14
  %173 = and i8 %172, %169
  store i8 %173, i8* %171, align 1, !tbaa !14
  %174 = add i64 %153, 2
  %175 = add i64 %154, 2
  %176 = icmp eq i64 %175, %147
  br i1 %176, label %177, label %152

177:                                              ; preds = %152, %149
  %178 = phi i64 [ undef, %149 ], [ %174, %152 ]
  %179 = phi i64 [ %151, %149 ], [ %174, %152 ]
  br i1 %148, label %191, label %180

180:                                              ; preds = %177
  %181 = trunc i64 %179 to i8
  %182 = and i8 %181, 7
  %183 = xor i8 %182, 7
  %184 = shl nuw i8 1, %183
  %185 = xor i8 %184, -1
  %186 = lshr i64 %179, 3
  %187 = getelementptr inbounds i8, i8* %0, i64 %186
  %188 = load i8, i8* %187, align 1, !tbaa !14
  %189 = and i8 %188, %185
  store i8 %189, i8* %187, align 1, !tbaa !14
  %190 = add i64 %179, 1
  br label %191

191:                                              ; preds = %177, %180
  %192 = phi i64 [ %178, %177 ], [ %190, %180 ]
  %193 = add nuw i32 %150, 1
  %194 = icmp eq i32 %193, %4
  br i1 %194, label %195, label %149

195:                                              ; preds = %136, %55, %191, %141, %5
  ret void
}

; Function Attrs: uwtable
define internal fastcc noundef i32 @_ZL6filterPhPKhjjPK16LodePNGColorModePK22LodePNGEncoderSettings(i8* nocapture noundef writeonly %0, i8* noundef %1, i32 noundef %2, i32 noundef %3, i32 %4, i32 %5, %struct.LodePNGEncoderSettings* nocapture noundef readonly %6) unnamed_addr #12 {
  %8 = alloca [5 x i8*], align 16
  %9 = alloca [5 x i8*], align 16
  %10 = alloca [256 x i32], align 16
  %11 = alloca [5 x i64], align 16
  %12 = alloca [5 x i8*], align 16
  %13 = alloca i8*, align 8
  %14 = alloca %struct.LodePNGCompressSettings, align 8
  switch i32 %4, label %19 [
    i32 0, label %20
    i32 2, label %15
    i32 3, label %20
    i32 4, label %16
    i32 6, label %17
    i32 255, label %18
  ]

15:                                               ; preds = %7
  br label %20

16:                                               ; preds = %7
  br label %20

17:                                               ; preds = %7
  br label %20

18:                                               ; preds = %7
  br label %20

19:                                               ; preds = %7
  br label %20

20:                                               ; preds = %7, %7, %15, %16, %17, %18, %19
  %21 = phi i32 [ 0, %19 ], [ 0, %18 ], [ 4, %17 ], [ 2, %16 ], [ 3, %15 ], [ 1, %7 ], [ 1, %7 ]
  %22 = mul i32 %21, %5
  %23 = lshr i32 %2, 3
  %24 = zext i32 %23 to i64
  %25 = zext i32 %22 to i64
  %26 = mul nuw nsw i64 %25, %24
  %27 = and i32 %2, 7
  %28 = mul i32 %22, %27
  %29 = add i32 %28, 7
  %30 = lshr i32 %29, 3
  %31 = zext i32 %30 to i64
  %32 = add nuw nsw i64 %26, %31
  %33 = add nuw nsw i64 %32, 1
  %34 = add i32 %22, 7
  %35 = lshr i32 %34, 3
  %36 = zext i32 %35 to i64
  %37 = getelementptr inbounds %struct.LodePNGEncoderSettings, %struct.LodePNGEncoderSettings* %6, i64 0, i32 3
  %38 = load i32, i32* %37, align 8, !tbaa !621
  %39 = getelementptr inbounds %struct.LodePNGEncoderSettings, %struct.LodePNGEncoderSettings* %6, i64 0, i32 2
  %40 = load i32, i32* %39, align 4, !tbaa !620
  %41 = icmp eq i32 %40, 0
  br i1 %41, label %46, label %42

42:                                               ; preds = %20
  %43 = icmp eq i32 %4, 3
  %44 = icmp ult i32 %5, 8
  %45 = select i1 %43, i1 true, i1 %44
  br i1 %45, label %48, label %46

46:                                               ; preds = %42, %20
  %47 = icmp eq i32 %22, 0
  br i1 %47, label %486, label %50

48:                                               ; preds = %42
  %49 = icmp eq i32 %22, 0
  br i1 %49, label %486, label %52

50:                                               ; preds = %46
  %51 = icmp ult i32 %38, 5
  br i1 %51, label %52, label %69

52:                                               ; preds = %48, %50
  %53 = phi i32 [ %38, %50 ], [ 0, %48 ]
  %54 = trunc i32 %53 to i8
  %55 = icmp eq i32 %3, 0
  br i1 %55, label %486, label %56

56:                                               ; preds = %52
  %57 = zext i32 %3 to i64
  br label %58

58:                                               ; preds = %56, %58
  %59 = phi i64 [ 0, %56 ], [ %67, %58 ]
  %60 = phi i8* [ null, %56 ], [ %66, %58 ]
  %61 = mul i64 %33, %59
  %62 = mul i64 %32, %59
  %63 = getelementptr inbounds i8, i8* %0, i64 %61
  store i8 %54, i8* %63, align 1, !tbaa !14
  %64 = add i64 %61, 1
  %65 = getelementptr inbounds i8, i8* %0, i64 %64
  %66 = getelementptr inbounds i8, i8* %1, i64 %62
  tail call fastcc void @_ZL14filterScanlinePhPKhS1_mmh(i8* noundef %65, i8* noundef %66, i8* noundef %60, i64 noundef %32, i64 noundef %36, i8 noundef zeroext %54)
  %67 = add nuw nsw i64 %59, 1
  %68 = icmp eq i64 %67, %57
  br i1 %68, label %486, label %58

69:                                               ; preds = %50
  switch i32 %38, label %486 [
    i32 5, label %75
    i32 6, label %219
    i32 8, label %70
    i32 7, label %363
  ]

70:                                               ; preds = %69
  %71 = icmp eq i32 %3, 0
  br i1 %71, label %486, label %72

72:                                               ; preds = %70
  %73 = getelementptr inbounds %struct.LodePNGEncoderSettings, %struct.LodePNGEncoderSettings* %6, i64 0, i32 4
  %74 = zext i32 %3 to i64
  br label %349

75:                                               ; preds = %69
  %76 = bitcast [5 x i8*]* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %76) #25
  %77 = tail call noalias i8* @malloc(i64 noundef %32) #25
  %78 = getelementptr inbounds [5 x i8*], [5 x i8*]* %8, i64 0, i64 0
  store i8* %77, i8** %78, align 16, !tbaa !7
  %79 = icmp eq i8* %77, null
  %80 = tail call noalias i8* @malloc(i64 noundef %32) #25
  %81 = getelementptr inbounds [5 x i8*], [5 x i8*]* %8, i64 0, i64 1
  store i8* %80, i8** %81, align 8, !tbaa !7
  %82 = icmp eq i8* %80, null
  %83 = or i1 %82, %79
  %84 = tail call noalias i8* @malloc(i64 noundef %32) #25
  %85 = getelementptr inbounds [5 x i8*], [5 x i8*]* %8, i64 0, i64 2
  store i8* %84, i8** %85, align 16, !tbaa !7
  %86 = icmp eq i8* %84, null
  %87 = or i1 %86, %83
  %88 = tail call noalias i8* @malloc(i64 noundef %32) #25
  %89 = getelementptr inbounds [5 x i8*], [5 x i8*]* %8, i64 0, i64 3
  store i8* %88, i8** %89, align 8, !tbaa !7
  %90 = icmp eq i8* %88, null
  %91 = or i1 %90, %87
  %92 = tail call noalias i8* @malloc(i64 noundef %32) #25
  %93 = getelementptr inbounds [5 x i8*], [5 x i8*]* %8, i64 0, i64 4
  store i8* %92, i8** %93, align 16, !tbaa !7
  %94 = icmp eq i8* %92, null
  %95 = or i1 %94, %91
  %96 = select i1 %95, i32 83, i32 0
  %97 = icmp eq i32 %3, 0
  %98 = or i1 %95, %97
  br i1 %98, label %218, label %99

99:                                               ; preds = %75
  %100 = icmp eq i64 %32, 0
  %101 = zext i32 %3 to i64
  br label %102

102:                                              ; preds = %215, %99
  %103 = phi i64 [ 0, %99 ], [ %216, %215 ]
  %104 = phi i8* [ null, %99 ], [ %106, %215 ]
  %105 = mul i64 %32, %103
  %106 = getelementptr inbounds i8, i8* %1, i64 %105
  tail call fastcc void @_ZL14filterScanlinePhPKhS1_mmh(i8* noundef %77, i8* noundef %106, i8* noundef %104, i64 noundef %32, i64 noundef %36, i8 noundef zeroext 0)
  br i1 %100, label %107, label %108

107:                                              ; preds = %102
  tail call fastcc void @_ZL14filterScanlinePhPKhS1_mmh(i8* noundef %80, i8* noundef %106, i8* noundef %104, i64 noundef %32, i64 noundef %36, i8 noundef zeroext 1)
  br label %133

108:                                              ; preds = %102, %108
  %109 = phi i64 [ %116, %108 ], [ 0, %102 ]
  %110 = phi i64 [ %114, %108 ], [ 0, %102 ]
  %111 = getelementptr inbounds i8, i8* %77, i64 %109
  %112 = load i8, i8* %111, align 1, !tbaa !14
  %113 = zext i8 %112 to i64
  %114 = add i64 %110, %113
  %115 = add nuw nsw i64 %109, 1
  %116 = and i64 %115, 4294967295
  %117 = icmp eq i64 %32, %116
  br i1 %117, label %118, label %108

118:                                              ; preds = %108
  tail call fastcc void @_ZL14filterScanlinePhPKhS1_mmh(i8* noundef %80, i8* noundef %106, i8* noundef %104, i64 noundef %32, i64 noundef %36, i8 noundef zeroext 1)
  br i1 %100, label %133, label %119

119:                                              ; preds = %118, %119
  %120 = phi i64 [ %131, %119 ], [ 0, %118 ]
  %121 = phi i64 [ %129, %119 ], [ 0, %118 ]
  %122 = getelementptr inbounds i8, i8* %80, i64 %120
  %123 = load i8, i8* %122, align 1, !tbaa !14
  %124 = zext i8 %123 to i32
  %125 = icmp sgt i8 %123, -1
  %126 = xor i32 %124, 255
  %127 = select i1 %125, i32 %124, i32 %126
  %128 = zext i32 %127 to i64
  %129 = add i64 %121, %128
  %130 = add nuw nsw i64 %120, 1
  %131 = and i64 %130, 4294967295
  %132 = icmp eq i64 %32, %131
  br i1 %132, label %133, label %119

133:                                              ; preds = %119, %118, %107
  %134 = phi i64 [ %114, %118 ], [ 0, %107 ], [ %114, %119 ]
  %135 = phi i64 [ 0, %118 ], [ 0, %107 ], [ %129, %119 ]
  %136 = icmp ult i64 %135, %134
  %137 = select i1 %136, i64 %135, i64 %134
  %138 = zext i1 %136 to i8
  tail call fastcc void @_ZL14filterScanlinePhPKhS1_mmh(i8* noundef %84, i8* noundef %106, i8* noundef %104, i64 noundef %32, i64 noundef %36, i8 noundef zeroext 2)
  br i1 %100, label %153, label %139

139:                                              ; preds = %133, %139
  %140 = phi i64 [ %151, %139 ], [ 0, %133 ]
  %141 = phi i64 [ %149, %139 ], [ 0, %133 ]
  %142 = getelementptr inbounds i8, i8* %84, i64 %140
  %143 = load i8, i8* %142, align 1, !tbaa !14
  %144 = zext i8 %143 to i32
  %145 = icmp sgt i8 %143, -1
  %146 = xor i32 %144, 255
  %147 = select i1 %145, i32 %144, i32 %146
  %148 = zext i32 %147 to i64
  %149 = add i64 %141, %148
  %150 = add nuw nsw i64 %140, 1
  %151 = and i64 %150, 4294967295
  %152 = icmp eq i64 %32, %151
  br i1 %152, label %153, label %139

153:                                              ; preds = %139, %133
  %154 = phi i64 [ 0, %133 ], [ %149, %139 ]
  %155 = icmp ult i64 %154, %137
  %156 = select i1 %155, i64 %154, i64 %137
  %157 = select i1 %155, i8 2, i8 %138
  tail call fastcc void @_ZL14filterScanlinePhPKhS1_mmh(i8* noundef %88, i8* noundef %106, i8* noundef %104, i64 noundef %32, i64 noundef %36, i8 noundef zeroext 3)
  br i1 %100, label %172, label %158

158:                                              ; preds = %153, %158
  %159 = phi i64 [ %170, %158 ], [ 0, %153 ]
  %160 = phi i64 [ %168, %158 ], [ 0, %153 ]
  %161 = getelementptr inbounds i8, i8* %88, i64 %159
  %162 = load i8, i8* %161, align 1, !tbaa !14
  %163 = zext i8 %162 to i32
  %164 = icmp sgt i8 %162, -1
  %165 = xor i32 %163, 255
  %166 = select i1 %164, i32 %163, i32 %165
  %167 = zext i32 %166 to i64
  %168 = add i64 %160, %167
  %169 = add nuw nsw i64 %159, 1
  %170 = and i64 %169, 4294967295
  %171 = icmp eq i64 %32, %170
  br i1 %171, label %172, label %158

172:                                              ; preds = %158, %153
  %173 = phi i64 [ 0, %153 ], [ %168, %158 ]
  %174 = icmp ult i64 %173, %156
  %175 = select i1 %174, i64 %173, i64 %156
  %176 = select i1 %174, i8 3, i8 %157
  tail call fastcc void @_ZL14filterScanlinePhPKhS1_mmh(i8* noundef %92, i8* noundef %106, i8* noundef %104, i64 noundef %32, i64 noundef %36, i8 noundef zeroext 4)
  br i1 %100, label %177, label %182

177:                                              ; preds = %172
  %178 = icmp eq i64 %175, 0
  %179 = select i1 %178, i8 %176, i8 4
  %180 = mul nuw nsw i64 %33, %103
  %181 = getelementptr inbounds i8, i8* %0, i64 %180
  store i8 %179, i8* %181, align 1, !tbaa !14
  br label %215

182:                                              ; preds = %172, %182
  %183 = phi i64 [ %194, %182 ], [ 0, %172 ]
  %184 = phi i64 [ %192, %182 ], [ 0, %172 ]
  %185 = getelementptr inbounds i8, i8* %92, i64 %183
  %186 = load i8, i8* %185, align 1, !tbaa !14
  %187 = zext i8 %186 to i32
  %188 = icmp sgt i8 %186, -1
  %189 = xor i32 %187, 255
  %190 = select i1 %188, i32 %187, i32 %189
  %191 = zext i32 %190 to i64
  %192 = add i64 %184, %191
  %193 = add nuw nsw i64 %183, 1
  %194 = and i64 %193, 4294967295
  %195 = icmp eq i64 %32, %194
  br i1 %195, label %196, label %182

196:                                              ; preds = %182
  %197 = icmp ult i64 %192, %175
  %198 = select i1 %197, i8 4, i8 %176
  %199 = mul i64 %33, %103
  %200 = getelementptr inbounds i8, i8* %0, i64 %199
  store i8 %198, i8* %200, align 1, !tbaa !14
  br i1 %100, label %215, label %201

201:                                              ; preds = %196
  %202 = zext i8 %198 to i64
  %203 = getelementptr inbounds [5 x i8*], [5 x i8*]* %8, i64 0, i64 %202
  %204 = load i8*, i8** %203, align 8, !tbaa !7
  %205 = add i64 %199, 1
  br label %206

206:                                              ; preds = %201, %206
  %207 = phi i64 [ 0, %201 ], [ %213, %206 ]
  %208 = getelementptr inbounds i8, i8* %204, i64 %207
  %209 = load i8, i8* %208, align 1, !tbaa !14
  %210 = add i64 %205, %207
  %211 = getelementptr inbounds i8, i8* %0, i64 %210
  store i8 %209, i8* %211, align 1, !tbaa !14
  %212 = add nuw nsw i64 %207, 1
  %213 = and i64 %212, 4294967295
  %214 = icmp eq i64 %32, %213
  br i1 %214, label %215, label %206

215:                                              ; preds = %206, %177, %196
  %216 = add nuw nsw i64 %103, 1
  %217 = icmp eq i64 %216, %101
  br i1 %217, label %218, label %102

218:                                              ; preds = %215, %75
  tail call void @free(i8* noundef %77) #25
  tail call void @free(i8* noundef %80) #25
  tail call void @free(i8* noundef %84) #25
  tail call void @free(i8* noundef %88) #25
  tail call void @free(i8* noundef %92) #25
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %76) #25
  br label %486

219:                                              ; preds = %69
  %220 = bitcast [5 x i8*]* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %220) #25
  %221 = bitcast [256 x i32]* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 1024, i8* nonnull %221) #25
  %222 = tail call noalias i8* @malloc(i64 noundef %32) #25
  %223 = getelementptr inbounds [5 x i8*], [5 x i8*]* %9, i64 0, i64 0
  store i8* %222, i8** %223, align 16, !tbaa !7
  %224 = icmp eq i8* %222, null
  %225 = tail call noalias i8* @malloc(i64 noundef %32) #25
  %226 = getelementptr inbounds [5 x i8*], [5 x i8*]* %9, i64 0, i64 1
  store i8* %225, i8** %226, align 8, !tbaa !7
  %227 = icmp eq i8* %225, null
  %228 = or i1 %227, %224
  %229 = tail call noalias i8* @malloc(i64 noundef %32) #25
  %230 = getelementptr inbounds [5 x i8*], [5 x i8*]* %9, i64 0, i64 2
  store i8* %229, i8** %230, align 16, !tbaa !7
  %231 = icmp eq i8* %229, null
  %232 = or i1 %231, %228
  %233 = tail call noalias i8* @malloc(i64 noundef %32) #25
  %234 = getelementptr inbounds [5 x i8*], [5 x i8*]* %9, i64 0, i64 3
  store i8* %233, i8** %234, align 8, !tbaa !7
  %235 = icmp eq i8* %233, null
  %236 = or i1 %235, %232
  %237 = tail call noalias i8* @malloc(i64 noundef %32) #25
  %238 = getelementptr inbounds [5 x i8*], [5 x i8*]* %9, i64 0, i64 4
  store i8* %237, i8** %238, align 16, !tbaa !7
  %239 = icmp eq i8* %237, null
  %240 = or i1 %239, %236
  %241 = select i1 %240, i32 83, i32 0
  %242 = icmp eq i32 %3, 0
  %243 = or i1 %240, %242
  br i1 %243, label %348, label %244

244:                                              ; preds = %219
  %245 = icmp eq i64 %32, 0
  %246 = zext i32 %3 to i64
  br label %247

247:                                              ; preds = %244, %345
  %248 = phi i64 [ 0, %244 ], [ %346, %345 ]
  %249 = phi i8* [ null, %244 ], [ %253, %345 ]
  %250 = phi i32 [ 0, %244 ], [ %324, %345 ]
  %251 = phi i64 [ 0, %244 ], [ %323, %345 ]
  %252 = mul i64 %32, %248
  %253 = getelementptr inbounds i8, i8* %1, i64 %252
  br label %254

254:                                              ; preds = %247, %319
  %255 = phi i64 [ 0, %247 ], [ %325, %319 ]
  %256 = phi i32 [ %250, %247 ], [ %324, %319 ]
  %257 = phi i64 [ %251, %247 ], [ %323, %319 ]
  %258 = trunc i64 %255 to i32
  %259 = getelementptr inbounds [5 x i8*], [5 x i8*]* %9, i64 0, i64 %255
  %260 = load i8*, i8** %259, align 8, !tbaa !7
  %261 = trunc i64 %255 to i8
  tail call fastcc void @_ZL14filterScanlinePhPKhS1_mmh(i8* noundef %260, i8* noundef %253, i8* noundef %249, i64 noundef %32, i64 noundef %36, i8 noundef zeroext %261)
  call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 16 dereferenceable(1024) %221, i8 0, i64 1024, i1 false) #25, !tbaa !14, !alias.scope !717
  br i1 %245, label %273, label %262

262:                                              ; preds = %254, %262
  %263 = phi i64 [ %271, %262 ], [ 0, %254 ]
  %264 = getelementptr inbounds i8, i8* %260, i64 %263
  %265 = load i8, i8* %264, align 1, !tbaa !14
  %266 = zext i8 %265 to i64
  %267 = getelementptr inbounds [256 x i32], [256 x i32]* %10, i64 0, i64 %266
  %268 = load i32, i32* %267, align 4, !tbaa !9
  %269 = add i32 %268, 1
  store i32 %269, i32* %267, align 4, !tbaa !9
  %270 = add nuw nsw i64 %263, 1
  %271 = and i64 %270, 4294967295
  %272 = icmp eq i64 %32, %271
  br i1 %272, label %273, label %262

273:                                              ; preds = %262, %254
  %274 = getelementptr inbounds [256 x i32], [256 x i32]* %10, i64 0, i64 %255
  %275 = load i32, i32* %274, align 4, !tbaa !9
  %276 = add i32 %275, 1
  store i32 %276, i32* %274, align 4, !tbaa !9
  br label %277

277:                                              ; preds = %273, %314
  %278 = phi i64 [ 0, %273 ], [ %317, %314 ]
  %279 = phi i64 [ 0, %273 ], [ %316, %314 ]
  %280 = getelementptr inbounds [256 x i32], [256 x i32]* %10, i64 0, i64 %278
  %281 = load i32, i32* %280, align 4, !tbaa !9
  %282 = zext i32 %281 to i64
  %283 = icmp eq i32 %281, 0
  br i1 %283, label %314, label %284

284:                                              ; preds = %277
  %285 = icmp ugt i32 %281, 65535
  %286 = lshr i64 %282, 16
  %287 = select i1 %285, i64 %286, i64 %282
  %288 = select i1 %285, i64 16, i64 0
  %289 = icmp ugt i64 %287, 255
  %290 = or i64 %288, 8
  %291 = lshr i64 %287, 8
  %292 = select i1 %289, i64 %291, i64 %287
  %293 = select i1 %289, i64 %290, i64 %288
  %294 = icmp ugt i64 %292, 15
  %295 = or i64 %293, 4
  %296 = lshr i64 %292, 4
  %297 = select i1 %294, i64 %296, i64 %292
  %298 = select i1 %294, i64 %295, i64 %293
  %299 = icmp ugt i64 %297, 3
  %300 = or i64 %298, 2
  %301 = lshr i64 %297, 2
  %302 = select i1 %299, i64 %301, i64 %297
  %303 = select i1 %299, i64 %300, i64 %298
  %304 = icmp ugt i64 %302, 1
  %305 = zext i1 %304 to i64
  %306 = add i64 %303, %305
  %307 = mul i64 %306, %282
  %308 = trunc i64 %306 to i32
  %309 = shl nuw i32 1, %308
  %310 = zext i32 %309 to i64
  %311 = sub nsw i64 %282, %310
  %312 = shl nsw i64 %311, 1
  %313 = add i64 %312, %307
  br label %314

314:                                              ; preds = %277, %284
  %315 = phi i64 [ %313, %284 ], [ 0, %277 ]
  %316 = add i64 %315, %279
  %317 = add nuw nsw i64 %278, 1
  %318 = icmp eq i64 %317, 256
  br i1 %318, label %319, label %277

319:                                              ; preds = %314
  %320 = icmp eq i64 %255, 0
  %321 = icmp ugt i64 %316, %257
  %322 = select i1 %320, i1 true, i1 %321
  %323 = select i1 %322, i64 %316, i64 %257
  %324 = select i1 %322, i32 %258, i32 %256
  %325 = add nuw nsw i64 %255, 1
  %326 = icmp eq i64 %325, 5
  br i1 %326, label %327, label %254

327:                                              ; preds = %319
  %328 = trunc i32 %324 to i8
  %329 = mul i64 %33, %248
  %330 = getelementptr inbounds i8, i8* %0, i64 %329
  store i8 %328, i8* %330, align 1, !tbaa !14
  br i1 %245, label %345, label %331

331:                                              ; preds = %327
  %332 = zext i32 %324 to i64
  %333 = getelementptr inbounds [5 x i8*], [5 x i8*]* %9, i64 0, i64 %332
  %334 = load i8*, i8** %333, align 8, !tbaa !7
  %335 = add i64 %329, 1
  br label %336

336:                                              ; preds = %331, %336
  %337 = phi i64 [ 0, %331 ], [ %343, %336 ]
  %338 = getelementptr inbounds i8, i8* %334, i64 %337
  %339 = load i8, i8* %338, align 1, !tbaa !14
  %340 = add i64 %335, %337
  %341 = getelementptr inbounds i8, i8* %0, i64 %340
  store i8 %339, i8* %341, align 1, !tbaa !14
  %342 = add nuw nsw i64 %337, 1
  %343 = and i64 %342, 4294967295
  %344 = icmp eq i64 %32, %343
  br i1 %344, label %345, label %336

345:                                              ; preds = %336, %327
  %346 = add nuw nsw i64 %248, 1
  %347 = icmp eq i64 %346, %246
  br i1 %347, label %348, label %247

348:                                              ; preds = %345, %219
  tail call void @free(i8* noundef %222) #25
  tail call void @free(i8* noundef %225) #25
  tail call void @free(i8* noundef %229) #25
  tail call void @free(i8* noundef %233) #25
  tail call void @free(i8* noundef %237) #25
  call void @llvm.lifetime.end.p0i8(i64 1024, i8* nonnull %221) #25
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %220) #25
  br label %486

349:                                              ; preds = %72, %349
  %350 = phi i64 [ 0, %72 ], [ %361, %349 ]
  %351 = phi i8* [ null, %72 ], [ %360, %349 ]
  %352 = mul i64 %33, %350
  %353 = mul i64 %32, %350
  %354 = load i8*, i8** %73, align 8, !tbaa !720
  %355 = getelementptr inbounds i8, i8* %354, i64 %350
  %356 = load i8, i8* %355, align 1, !tbaa !14
  %357 = getelementptr inbounds i8, i8* %0, i64 %352
  store i8 %356, i8* %357, align 1, !tbaa !14
  %358 = add i64 %352, 1
  %359 = getelementptr inbounds i8, i8* %0, i64 %358
  %360 = getelementptr inbounds i8, i8* %1, i64 %353
  tail call fastcc void @_ZL14filterScanlinePhPKhS1_mmh(i8* noundef %359, i8* noundef %360, i8* noundef %351, i64 noundef %32, i64 noundef %36, i8 noundef zeroext %356)
  %361 = add nuw nsw i64 %350, 1
  %362 = icmp eq i64 %361, %74
  br i1 %362, label %486, label %349

363:                                              ; preds = %69
  %364 = bitcast [5 x i64]* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %364) #25
  %365 = bitcast [5 x i8*]* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %365) #25
  %366 = bitcast i8** %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %366) #25
  %367 = bitcast %struct.LodePNGCompressSettings* %14 to i8*
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %367) #25
  %368 = bitcast %struct.LodePNGEncoderSettings* %6 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(48) %367, i8* noundef nonnull align 1 dereferenceable(48) %368, i64 48, i1 false) #25, !tbaa !14, !alias.scope !721
  %369 = getelementptr inbounds %struct.LodePNGCompressSettings, %struct.LodePNGCompressSettings* %14, i64 0, i32 0
  store i32 1, i32* %369, align 8, !tbaa !85
  %370 = getelementptr inbounds %struct.LodePNGCompressSettings, %struct.LodePNGCompressSettings* %14, i64 0, i32 6
  %371 = bitcast {}** %370 to i32 (i8**, i64*, i8*, i64, %struct.LodePNGCompressSettings*)**
  %372 = tail call noalias i8* @malloc(i64 noundef %32) #25
  %373 = getelementptr inbounds [5 x i8*], [5 x i8*]* %12, i64 0, i64 0
  %374 = bitcast {}** %370 to i8*
  call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(16) %374, i8 0, i64 16, i1 false)
  store i8* %372, i8** %373, align 16, !tbaa !7
  %375 = icmp eq i8* %372, null
  %376 = tail call noalias i8* @malloc(i64 noundef %32) #25
  %377 = getelementptr inbounds [5 x i8*], [5 x i8*]* %12, i64 0, i64 1
  store i8* %376, i8** %377, align 8, !tbaa !7
  %378 = icmp eq i8* %376, null
  %379 = or i1 %378, %375
  %380 = tail call noalias i8* @malloc(i64 noundef %32) #25
  %381 = getelementptr inbounds [5 x i8*], [5 x i8*]* %12, i64 0, i64 2
  store i8* %380, i8** %381, align 16, !tbaa !7
  %382 = icmp eq i8* %380, null
  %383 = or i1 %382, %379
  %384 = tail call noalias i8* @malloc(i64 noundef %32) #25
  %385 = getelementptr inbounds [5 x i8*], [5 x i8*]* %12, i64 0, i64 3
  store i8* %384, i8** %385, align 8, !tbaa !7
  %386 = icmp eq i8* %384, null
  %387 = or i1 %386, %383
  %388 = tail call noalias i8* @malloc(i64 noundef %32) #25
  %389 = getelementptr inbounds [5 x i8*], [5 x i8*]* %12, i64 0, i64 4
  store i8* %388, i8** %389, align 16, !tbaa !7
  %390 = icmp eq i8* %388, null
  %391 = or i1 %390, %387
  %392 = select i1 %391, i32 83, i32 0
  %393 = icmp eq i32 %3, 0
  %394 = or i1 %391, %393
  br i1 %394, label %485, label %395

395:                                              ; preds = %363
  %396 = and i64 %32, 4294967295
  %397 = icmp eq i64 %32, 0
  %398 = zext i32 %3 to i64
  %399 = getelementptr inbounds [5 x i64], [5 x i64]* %11, i64 0, i64 0
  %400 = getelementptr inbounds [5 x i64], [5 x i64]* %11, i64 0, i64 1
  %401 = getelementptr inbounds [5 x i64], [5 x i64]* %11, i64 0, i64 2
  %402 = getelementptr inbounds [5 x i64], [5 x i64]* %11, i64 0, i64 3
  %403 = getelementptr inbounds [5 x i64], [5 x i64]* %11, i64 0, i64 4
  br label %404

404:                                              ; preds = %395, %482
  %405 = phi i64 [ 0, %395 ], [ %483, %482 ]
  %406 = phi i8* [ null, %395 ], [ %408, %482 ]
  %407 = mul i64 %32, %405
  %408 = getelementptr inbounds i8, i8* %1, i64 %407
  call fastcc void @_ZL14filterScanlinePhPKhS1_mmh(i8* noundef %372, i8* noundef %408, i8* noundef %406, i64 noundef %32, i64 noundef %36, i8 noundef zeroext 0)
  store i64 0, i64* %399, align 16, !tbaa !3
  store i8* null, i8** %13, align 8, !tbaa !7
  %409 = load i32 (i8**, i64*, i8*, i64, %struct.LodePNGCompressSettings*)*, i32 (i8**, i64*, i8*, i64, %struct.LodePNGCompressSettings*)** %371, align 8, !tbaa !658
  %410 = icmp eq i32 (i8**, i64*, i8*, i64, %struct.LodePNGCompressSettings*)* %409, null
  br i1 %410, label %413, label %411

411:                                              ; preds = %404
  %412 = call noundef i32 %409(i8** noundef nonnull %13, i64* noundef nonnull %399, i8* noundef %372, i64 noundef %396, %struct.LodePNGCompressSettings* noundef nonnull %14)
  br label %415

413:                                              ; preds = %404
  %414 = call noundef i32 @_Z21lodepng_zlib_compressPPhPmPKhmPK23LodePNGCompressSettings(i8** noundef nonnull %13, i64* noundef nonnull %399, i8* noundef %372, i64 noundef %396, %struct.LodePNGCompressSettings* noundef nonnull %14)
  br label %415

415:                                              ; preds = %411, %413
  %416 = load i8*, i8** %13, align 8, !tbaa !7
  call void @free(i8* noundef %416) #25
  %417 = load i64, i64* %399, align 16, !tbaa !3
  call fastcc void @_ZL14filterScanlinePhPKhS1_mmh(i8* noundef %376, i8* noundef %408, i8* noundef %406, i64 noundef %32, i64 noundef %36, i8 noundef zeroext 1)
  store i64 0, i64* %400, align 8, !tbaa !3
  store i8* null, i8** %13, align 8, !tbaa !7
  %418 = load i32 (i8**, i64*, i8*, i64, %struct.LodePNGCompressSettings*)*, i32 (i8**, i64*, i8*, i64, %struct.LodePNGCompressSettings*)** %371, align 8, !tbaa !658
  %419 = icmp eq i32 (i8**, i64*, i8*, i64, %struct.LodePNGCompressSettings*)* %418, null
  br i1 %419, label %422, label %420

420:                                              ; preds = %415
  %421 = call noundef i32 %418(i8** noundef nonnull %13, i64* noundef nonnull %400, i8* noundef %376, i64 noundef %396, %struct.LodePNGCompressSettings* noundef nonnull %14)
  br label %424

422:                                              ; preds = %415
  %423 = call noundef i32 @_Z21lodepng_zlib_compressPPhPmPKhmPK23LodePNGCompressSettings(i8** noundef nonnull %13, i64* noundef nonnull %400, i8* noundef %376, i64 noundef %396, %struct.LodePNGCompressSettings* noundef nonnull %14)
  br label %424

424:                                              ; preds = %420, %422
  %425 = load i8*, i8** %13, align 8, !tbaa !7
  call void @free(i8* noundef %425) #25
  %426 = load i64, i64* %400, align 8, !tbaa !3
  %427 = icmp ult i64 %426, %417
  %428 = select i1 %427, i64 %426, i64 %417
  %429 = zext i1 %427 to i32
  call fastcc void @_ZL14filterScanlinePhPKhS1_mmh(i8* noundef %380, i8* noundef %408, i8* noundef %406, i64 noundef %32, i64 noundef %36, i8 noundef zeroext 2)
  store i64 0, i64* %401, align 16, !tbaa !3
  store i8* null, i8** %13, align 8, !tbaa !7
  %430 = load i32 (i8**, i64*, i8*, i64, %struct.LodePNGCompressSettings*)*, i32 (i8**, i64*, i8*, i64, %struct.LodePNGCompressSettings*)** %371, align 8, !tbaa !658
  %431 = icmp eq i32 (i8**, i64*, i8*, i64, %struct.LodePNGCompressSettings*)* %430, null
  br i1 %431, label %434, label %432

432:                                              ; preds = %424
  %433 = call noundef i32 %430(i8** noundef nonnull %13, i64* noundef nonnull %401, i8* noundef %380, i64 noundef %396, %struct.LodePNGCompressSettings* noundef nonnull %14)
  br label %436

434:                                              ; preds = %424
  %435 = call noundef i32 @_Z21lodepng_zlib_compressPPhPmPKhmPK23LodePNGCompressSettings(i8** noundef nonnull %13, i64* noundef nonnull %401, i8* noundef %380, i64 noundef %396, %struct.LodePNGCompressSettings* noundef nonnull %14)
  br label %436

436:                                              ; preds = %432, %434
  %437 = load i8*, i8** %13, align 8, !tbaa !7
  call void @free(i8* noundef %437) #25
  %438 = load i64, i64* %401, align 16, !tbaa !3
  %439 = icmp ult i64 %438, %428
  %440 = select i1 %439, i64 %438, i64 %428
  %441 = select i1 %439, i32 2, i32 %429
  call fastcc void @_ZL14filterScanlinePhPKhS1_mmh(i8* noundef %384, i8* noundef %408, i8* noundef %406, i64 noundef %32, i64 noundef %36, i8 noundef zeroext 3)
  store i64 0, i64* %402, align 8, !tbaa !3
  store i8* null, i8** %13, align 8, !tbaa !7
  %442 = load i32 (i8**, i64*, i8*, i64, %struct.LodePNGCompressSettings*)*, i32 (i8**, i64*, i8*, i64, %struct.LodePNGCompressSettings*)** %371, align 8, !tbaa !658
  %443 = icmp eq i32 (i8**, i64*, i8*, i64, %struct.LodePNGCompressSettings*)* %442, null
  br i1 %443, label %446, label %444

444:                                              ; preds = %436
  %445 = call noundef i32 %442(i8** noundef nonnull %13, i64* noundef nonnull %402, i8* noundef %384, i64 noundef %396, %struct.LodePNGCompressSettings* noundef nonnull %14)
  br label %448

446:                                              ; preds = %436
  %447 = call noundef i32 @_Z21lodepng_zlib_compressPPhPmPKhmPK23LodePNGCompressSettings(i8** noundef nonnull %13, i64* noundef nonnull %402, i8* noundef %384, i64 noundef %396, %struct.LodePNGCompressSettings* noundef nonnull %14)
  br label %448

448:                                              ; preds = %444, %446
  %449 = load i8*, i8** %13, align 8, !tbaa !7
  call void @free(i8* noundef %449) #25
  %450 = load i64, i64* %402, align 8, !tbaa !3
  %451 = icmp ult i64 %450, %440
  %452 = select i1 %451, i64 %450, i64 %440
  %453 = select i1 %451, i32 3, i32 %441
  call fastcc void @_ZL14filterScanlinePhPKhS1_mmh(i8* noundef %388, i8* noundef %408, i8* noundef %406, i64 noundef %32, i64 noundef %36, i8 noundef zeroext 4)
  store i64 0, i64* %403, align 16, !tbaa !3
  store i8* null, i8** %13, align 8, !tbaa !7
  %454 = load i32 (i8**, i64*, i8*, i64, %struct.LodePNGCompressSettings*)*, i32 (i8**, i64*, i8*, i64, %struct.LodePNGCompressSettings*)** %371, align 8, !tbaa !658
  %455 = icmp eq i32 (i8**, i64*, i8*, i64, %struct.LodePNGCompressSettings*)* %454, null
  br i1 %455, label %458, label %456

456:                                              ; preds = %448
  %457 = call noundef i32 %454(i8** noundef nonnull %13, i64* noundef nonnull %403, i8* noundef %388, i64 noundef %396, %struct.LodePNGCompressSettings* noundef nonnull %14)
  br label %460

458:                                              ; preds = %448
  %459 = call noundef i32 @_Z21lodepng_zlib_compressPPhPmPKhmPK23LodePNGCompressSettings(i8** noundef nonnull %13, i64* noundef nonnull %403, i8* noundef %388, i64 noundef %396, %struct.LodePNGCompressSettings* noundef nonnull %14)
  br label %460

460:                                              ; preds = %456, %458
  %461 = load i8*, i8** %13, align 8, !tbaa !7
  call void @free(i8* noundef %461) #25
  %462 = load i64, i64* %403, align 16, !tbaa !3
  %463 = icmp ult i64 %462, %452
  %464 = select i1 %463, i32 4, i32 %453
  %465 = trunc i32 %464 to i8
  %466 = mul i64 %33, %405
  %467 = getelementptr inbounds i8, i8* %0, i64 %466
  store i8 %465, i8* %467, align 1, !tbaa !14
  br i1 %397, label %482, label %468

468:                                              ; preds = %460
  %469 = zext i32 %464 to i64
  %470 = getelementptr inbounds [5 x i8*], [5 x i8*]* %12, i64 0, i64 %469
  %471 = load i8*, i8** %470, align 8, !tbaa !7
  %472 = add i64 %466, 1
  br label %473

473:                                              ; preds = %468, %473
  %474 = phi i64 [ 0, %468 ], [ %480, %473 ]
  %475 = getelementptr inbounds i8, i8* %471, i64 %474
  %476 = load i8, i8* %475, align 1, !tbaa !14
  %477 = add i64 %472, %474
  %478 = getelementptr inbounds i8, i8* %0, i64 %477
  store i8 %476, i8* %478, align 1, !tbaa !14
  %479 = add nuw nsw i64 %474, 1
  %480 = and i64 %479, 4294967295
  %481 = icmp eq i64 %32, %480
  br i1 %481, label %482, label %473

482:                                              ; preds = %473, %460
  %483 = add nuw nsw i64 %405, 1
  %484 = icmp eq i64 %483, %398
  br i1 %484, label %485, label %404

485:                                              ; preds = %482, %363
  call void @free(i8* noundef %372) #25
  call void @free(i8* noundef %376) #25
  call void @free(i8* noundef %380) #25
  call void @free(i8* noundef %384) #25
  call void @free(i8* noundef %388) #25
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %367) #25
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %366) #25
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %365) #25
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %364) #25
  br label %486

486:                                              ; preds = %349, %58, %70, %52, %48, %348, %485, %218, %69, %46
  %487 = phi i32 [ 31, %46 ], [ 88, %69 ], [ %96, %218 ], [ %241, %348 ], [ %392, %485 ], [ 31, %48 ], [ 0, %52 ], [ 0, %70 ], [ 0, %58 ], [ 0, %349 ]
  ret i32 %487
}

; Function Attrs: nofree nosync nounwind uwtable
define internal fastcc void @_ZL14filterScanlinePhPKhS1_mmh(i8* nocapture noundef writeonly %0, i8* nocapture noundef readonly %1, i8* noundef readonly %2, i64 noundef %3, i64 noundef %4, i8 noundef zeroext %5) unnamed_addr #8 {
  switch i8 %5, label %2038 [
    i8 0, label %133
    i8 1, label %7
    i8 2, label %460
    i8 3, label %772
    i8 4, label %1411
  ]

7:                                                ; preds = %6
  %8 = icmp eq i64 %4, 0
  br i1 %8, label %278, label %9

9:                                                ; preds = %7
  %10 = icmp ult i64 %4, 8
  br i1 %10, label %115, label %11

11:                                               ; preds = %9
  %12 = getelementptr i8, i8* %0, i64 %4
  %13 = getelementptr i8, i8* %1, i64 %4
  %14 = icmp ugt i8* %13, %0
  %15 = icmp ugt i8* %12, %1
  %16 = and i1 %14, %15
  br i1 %16, label %115, label %17

17:                                               ; preds = %11
  %18 = icmp ult i64 %4, 32
  br i1 %18, label %101, label %19

19:                                               ; preds = %17
  %20 = and i64 %4, -32
  %21 = add i64 %20, -32
  %22 = lshr exact i64 %21, 5
  %23 = add nuw nsw i64 %22, 1
  %24 = and i64 %23, 3
  %25 = icmp ult i64 %21, 96
  br i1 %25, label %77, label %26

26:                                               ; preds = %19
  %27 = and i64 %23, 1152921504606846972
  br label %28

28:                                               ; preds = %28, %26
  %29 = phi i64 [ 0, %26 ], [ %74, %28 ]
  %30 = phi i64 [ 0, %26 ], [ %75, %28 ]
  %31 = getelementptr inbounds i8, i8* %1, i64 %29
  %32 = bitcast i8* %31 to <16 x i8>*
  %33 = load <16 x i8>, <16 x i8>* %32, align 1, !tbaa !14, !alias.scope !725
  %34 = getelementptr inbounds i8, i8* %31, i64 16
  %35 = bitcast i8* %34 to <16 x i8>*
  %36 = load <16 x i8>, <16 x i8>* %35, align 1, !tbaa !14, !alias.scope !725
  %37 = getelementptr inbounds i8, i8* %0, i64 %29
  %38 = bitcast i8* %37 to <16 x i8>*
  store <16 x i8> %33, <16 x i8>* %38, align 1, !tbaa !14, !alias.scope !728, !noalias !725
  %39 = getelementptr inbounds i8, i8* %37, i64 16
  %40 = bitcast i8* %39 to <16 x i8>*
  store <16 x i8> %36, <16 x i8>* %40, align 1, !tbaa !14, !alias.scope !728, !noalias !725
  %41 = or i64 %29, 32
  %42 = getelementptr inbounds i8, i8* %1, i64 %41
  %43 = bitcast i8* %42 to <16 x i8>*
  %44 = load <16 x i8>, <16 x i8>* %43, align 1, !tbaa !14, !alias.scope !725
  %45 = getelementptr inbounds i8, i8* %42, i64 16
  %46 = bitcast i8* %45 to <16 x i8>*
  %47 = load <16 x i8>, <16 x i8>* %46, align 1, !tbaa !14, !alias.scope !725
  %48 = getelementptr inbounds i8, i8* %0, i64 %41
  %49 = bitcast i8* %48 to <16 x i8>*
  store <16 x i8> %44, <16 x i8>* %49, align 1, !tbaa !14, !alias.scope !728, !noalias !725
  %50 = getelementptr inbounds i8, i8* %48, i64 16
  %51 = bitcast i8* %50 to <16 x i8>*
  store <16 x i8> %47, <16 x i8>* %51, align 1, !tbaa !14, !alias.scope !728, !noalias !725
  %52 = or i64 %29, 64
  %53 = getelementptr inbounds i8, i8* %1, i64 %52
  %54 = bitcast i8* %53 to <16 x i8>*
  %55 = load <16 x i8>, <16 x i8>* %54, align 1, !tbaa !14, !alias.scope !725
  %56 = getelementptr inbounds i8, i8* %53, i64 16
  %57 = bitcast i8* %56 to <16 x i8>*
  %58 = load <16 x i8>, <16 x i8>* %57, align 1, !tbaa !14, !alias.scope !725
  %59 = getelementptr inbounds i8, i8* %0, i64 %52
  %60 = bitcast i8* %59 to <16 x i8>*
  store <16 x i8> %55, <16 x i8>* %60, align 1, !tbaa !14, !alias.scope !728, !noalias !725
  %61 = getelementptr inbounds i8, i8* %59, i64 16
  %62 = bitcast i8* %61 to <16 x i8>*
  store <16 x i8> %58, <16 x i8>* %62, align 1, !tbaa !14, !alias.scope !728, !noalias !725
  %63 = or i64 %29, 96
  %64 = getelementptr inbounds i8, i8* %1, i64 %63
  %65 = bitcast i8* %64 to <16 x i8>*
  %66 = load <16 x i8>, <16 x i8>* %65, align 1, !tbaa !14, !alias.scope !725
  %67 = getelementptr inbounds i8, i8* %64, i64 16
  %68 = bitcast i8* %67 to <16 x i8>*
  %69 = load <16 x i8>, <16 x i8>* %68, align 1, !tbaa !14, !alias.scope !725
  %70 = getelementptr inbounds i8, i8* %0, i64 %63
  %71 = bitcast i8* %70 to <16 x i8>*
  store <16 x i8> %66, <16 x i8>* %71, align 1, !tbaa !14, !alias.scope !728, !noalias !725
  %72 = getelementptr inbounds i8, i8* %70, i64 16
  %73 = bitcast i8* %72 to <16 x i8>*
  store <16 x i8> %69, <16 x i8>* %73, align 1, !tbaa !14, !alias.scope !728, !noalias !725
  %74 = add nuw i64 %29, 128
  %75 = add i64 %30, 4
  %76 = icmp eq i64 %75, %27
  br i1 %76, label %77, label %28, !llvm.loop !730

77:                                               ; preds = %28, %19
  %78 = phi i64 [ 0, %19 ], [ %74, %28 ]
  %79 = icmp eq i64 %24, 0
  br i1 %79, label %96, label %80

80:                                               ; preds = %77, %80
  %81 = phi i64 [ %93, %80 ], [ %78, %77 ]
  %82 = phi i64 [ %94, %80 ], [ 0, %77 ]
  %83 = getelementptr inbounds i8, i8* %1, i64 %81
  %84 = bitcast i8* %83 to <16 x i8>*
  %85 = load <16 x i8>, <16 x i8>* %84, align 1, !tbaa !14, !alias.scope !725
  %86 = getelementptr inbounds i8, i8* %83, i64 16
  %87 = bitcast i8* %86 to <16 x i8>*
  %88 = load <16 x i8>, <16 x i8>* %87, align 1, !tbaa !14, !alias.scope !725
  %89 = getelementptr inbounds i8, i8* %0, i64 %81
  %90 = bitcast i8* %89 to <16 x i8>*
  store <16 x i8> %85, <16 x i8>* %90, align 1, !tbaa !14, !alias.scope !728, !noalias !725
  %91 = getelementptr inbounds i8, i8* %89, i64 16
  %92 = bitcast i8* %91 to <16 x i8>*
  store <16 x i8> %88, <16 x i8>* %92, align 1, !tbaa !14, !alias.scope !728, !noalias !725
  %93 = add nuw i64 %81, 32
  %94 = add i64 %82, 1
  %95 = icmp eq i64 %94, %24
  br i1 %95, label %96, label %80, !llvm.loop !731

96:                                               ; preds = %80, %77
  %97 = icmp eq i64 %20, %4
  br i1 %97, label %278, label %98

98:                                               ; preds = %96
  %99 = and i64 %4, 24
  %100 = icmp eq i64 %99, 0
  br i1 %100, label %115, label %101

101:                                              ; preds = %17, %98
  %102 = phi i64 [ %20, %98 ], [ 0, %17 ]
  %103 = and i64 %4, -8
  br label %104

104:                                              ; preds = %104, %101
  %105 = phi i64 [ %102, %101 ], [ %111, %104 ]
  %106 = getelementptr inbounds i8, i8* %1, i64 %105
  %107 = bitcast i8* %106 to <8 x i8>*
  %108 = load <8 x i8>, <8 x i8>* %107, align 1, !tbaa !14
  %109 = getelementptr inbounds i8, i8* %0, i64 %105
  %110 = bitcast i8* %109 to <8 x i8>*
  store <8 x i8> %108, <8 x i8>* %110, align 1, !tbaa !14
  %111 = add nuw i64 %105, 8
  %112 = icmp eq i64 %111, %103
  br i1 %112, label %113, label %104, !llvm.loop !732

113:                                              ; preds = %104
  %114 = icmp eq i64 %103, %4
  br i1 %114, label %278, label %115

115:                                              ; preds = %11, %9, %98, %113
  %116 = phi i64 [ 0, %9 ], [ 0, %11 ], [ %20, %98 ], [ %103, %113 ]
  %117 = xor i64 %116, -1
  %118 = add i64 %117, %4
  %119 = and i64 %4, 3
  %120 = icmp eq i64 %119, 0
  br i1 %120, label %130, label %121

121:                                              ; preds = %115, %121
  %122 = phi i64 [ %127, %121 ], [ %116, %115 ]
  %123 = phi i64 [ %128, %121 ], [ 0, %115 ]
  %124 = getelementptr inbounds i8, i8* %1, i64 %122
  %125 = load i8, i8* %124, align 1, !tbaa !14
  %126 = getelementptr inbounds i8, i8* %0, i64 %122
  store i8 %125, i8* %126, align 1, !tbaa !14
  %127 = add nuw i64 %122, 1
  %128 = add i64 %123, 1
  %129 = icmp eq i64 %128, %119
  br i1 %129, label %130, label %121, !llvm.loop !733

130:                                              ; preds = %121, %115
  %131 = phi i64 [ %116, %115 ], [ %127, %121 ]
  %132 = icmp ult i64 %118, 3
  br i1 %132, label %278, label %422

133:                                              ; preds = %6
  %134 = icmp eq i64 %3, 0
  br i1 %134, label %2038, label %135

135:                                              ; preds = %133
  %136 = icmp ult i64 %3, 8
  br i1 %136, label %241, label %137

137:                                              ; preds = %135
  %138 = getelementptr i8, i8* %0, i64 %3
  %139 = getelementptr i8, i8* %1, i64 %3
  %140 = icmp ugt i8* %139, %0
  %141 = icmp ugt i8* %138, %1
  %142 = and i1 %140, %141
  br i1 %142, label %241, label %143

143:                                              ; preds = %137
  %144 = icmp ult i64 %3, 32
  br i1 %144, label %227, label %145

145:                                              ; preds = %143
  %146 = and i64 %3, -32
  %147 = add i64 %146, -32
  %148 = lshr exact i64 %147, 5
  %149 = add nuw nsw i64 %148, 1
  %150 = and i64 %149, 3
  %151 = icmp ult i64 %147, 96
  br i1 %151, label %203, label %152

152:                                              ; preds = %145
  %153 = and i64 %149, 1152921504606846972
  br label %154

154:                                              ; preds = %154, %152
  %155 = phi i64 [ 0, %152 ], [ %200, %154 ]
  %156 = phi i64 [ 0, %152 ], [ %201, %154 ]
  %157 = getelementptr inbounds i8, i8* %1, i64 %155
  %158 = bitcast i8* %157 to <16 x i8>*
  %159 = load <16 x i8>, <16 x i8>* %158, align 1, !tbaa !14, !alias.scope !734
  %160 = getelementptr inbounds i8, i8* %157, i64 16
  %161 = bitcast i8* %160 to <16 x i8>*
  %162 = load <16 x i8>, <16 x i8>* %161, align 1, !tbaa !14, !alias.scope !734
  %163 = getelementptr inbounds i8, i8* %0, i64 %155
  %164 = bitcast i8* %163 to <16 x i8>*
  store <16 x i8> %159, <16 x i8>* %164, align 1, !tbaa !14, !alias.scope !737, !noalias !734
  %165 = getelementptr inbounds i8, i8* %163, i64 16
  %166 = bitcast i8* %165 to <16 x i8>*
  store <16 x i8> %162, <16 x i8>* %166, align 1, !tbaa !14, !alias.scope !737, !noalias !734
  %167 = or i64 %155, 32
  %168 = getelementptr inbounds i8, i8* %1, i64 %167
  %169 = bitcast i8* %168 to <16 x i8>*
  %170 = load <16 x i8>, <16 x i8>* %169, align 1, !tbaa !14, !alias.scope !734
  %171 = getelementptr inbounds i8, i8* %168, i64 16
  %172 = bitcast i8* %171 to <16 x i8>*
  %173 = load <16 x i8>, <16 x i8>* %172, align 1, !tbaa !14, !alias.scope !734
  %174 = getelementptr inbounds i8, i8* %0, i64 %167
  %175 = bitcast i8* %174 to <16 x i8>*
  store <16 x i8> %170, <16 x i8>* %175, align 1, !tbaa !14, !alias.scope !737, !noalias !734
  %176 = getelementptr inbounds i8, i8* %174, i64 16
  %177 = bitcast i8* %176 to <16 x i8>*
  store <16 x i8> %173, <16 x i8>* %177, align 1, !tbaa !14, !alias.scope !737, !noalias !734
  %178 = or i64 %155, 64
  %179 = getelementptr inbounds i8, i8* %1, i64 %178
  %180 = bitcast i8* %179 to <16 x i8>*
  %181 = load <16 x i8>, <16 x i8>* %180, align 1, !tbaa !14, !alias.scope !734
  %182 = getelementptr inbounds i8, i8* %179, i64 16
  %183 = bitcast i8* %182 to <16 x i8>*
  %184 = load <16 x i8>, <16 x i8>* %183, align 1, !tbaa !14, !alias.scope !734
  %185 = getelementptr inbounds i8, i8* %0, i64 %178
  %186 = bitcast i8* %185 to <16 x i8>*
  store <16 x i8> %181, <16 x i8>* %186, align 1, !tbaa !14, !alias.scope !737, !noalias !734
  %187 = getelementptr inbounds i8, i8* %185, i64 16
  %188 = bitcast i8* %187 to <16 x i8>*
  store <16 x i8> %184, <16 x i8>* %188, align 1, !tbaa !14, !alias.scope !737, !noalias !734
  %189 = or i64 %155, 96
  %190 = getelementptr inbounds i8, i8* %1, i64 %189
  %191 = bitcast i8* %190 to <16 x i8>*
  %192 = load <16 x i8>, <16 x i8>* %191, align 1, !tbaa !14, !alias.scope !734
  %193 = getelementptr inbounds i8, i8* %190, i64 16
  %194 = bitcast i8* %193 to <16 x i8>*
  %195 = load <16 x i8>, <16 x i8>* %194, align 1, !tbaa !14, !alias.scope !734
  %196 = getelementptr inbounds i8, i8* %0, i64 %189
  %197 = bitcast i8* %196 to <16 x i8>*
  store <16 x i8> %192, <16 x i8>* %197, align 1, !tbaa !14, !alias.scope !737, !noalias !734
  %198 = getelementptr inbounds i8, i8* %196, i64 16
  %199 = bitcast i8* %198 to <16 x i8>*
  store <16 x i8> %195, <16 x i8>* %199, align 1, !tbaa !14, !alias.scope !737, !noalias !734
  %200 = add nuw i64 %155, 128
  %201 = add i64 %156, 4
  %202 = icmp eq i64 %201, %153
  br i1 %202, label %203, label %154, !llvm.loop !739

203:                                              ; preds = %154, %145
  %204 = phi i64 [ 0, %145 ], [ %200, %154 ]
  %205 = icmp eq i64 %150, 0
  br i1 %205, label %222, label %206

206:                                              ; preds = %203, %206
  %207 = phi i64 [ %219, %206 ], [ %204, %203 ]
  %208 = phi i64 [ %220, %206 ], [ 0, %203 ]
  %209 = getelementptr inbounds i8, i8* %1, i64 %207
  %210 = bitcast i8* %209 to <16 x i8>*
  %211 = load <16 x i8>, <16 x i8>* %210, align 1, !tbaa !14, !alias.scope !734
  %212 = getelementptr inbounds i8, i8* %209, i64 16
  %213 = bitcast i8* %212 to <16 x i8>*
  %214 = load <16 x i8>, <16 x i8>* %213, align 1, !tbaa !14, !alias.scope !734
  %215 = getelementptr inbounds i8, i8* %0, i64 %207
  %216 = bitcast i8* %215 to <16 x i8>*
  store <16 x i8> %211, <16 x i8>* %216, align 1, !tbaa !14, !alias.scope !737, !noalias !734
  %217 = getelementptr inbounds i8, i8* %215, i64 16
  %218 = bitcast i8* %217 to <16 x i8>*
  store <16 x i8> %214, <16 x i8>* %218, align 1, !tbaa !14, !alias.scope !737, !noalias !734
  %219 = add nuw i64 %207, 32
  %220 = add i64 %208, 1
  %221 = icmp eq i64 %220, %150
  br i1 %221, label %222, label %206, !llvm.loop !740

222:                                              ; preds = %206, %203
  %223 = icmp eq i64 %146, %3
  br i1 %223, label %2038, label %224

224:                                              ; preds = %222
  %225 = and i64 %3, 24
  %226 = icmp eq i64 %225, 0
  br i1 %226, label %241, label %227

227:                                              ; preds = %143, %224
  %228 = phi i64 [ %146, %224 ], [ 0, %143 ]
  %229 = and i64 %3, -8
  br label %230

230:                                              ; preds = %230, %227
  %231 = phi i64 [ %228, %227 ], [ %237, %230 ]
  %232 = getelementptr inbounds i8, i8* %1, i64 %231
  %233 = bitcast i8* %232 to <8 x i8>*
  %234 = load <8 x i8>, <8 x i8>* %233, align 1, !tbaa !14
  %235 = getelementptr inbounds i8, i8* %0, i64 %231
  %236 = bitcast i8* %235 to <8 x i8>*
  store <8 x i8> %234, <8 x i8>* %236, align 1, !tbaa !14
  %237 = add nuw i64 %231, 8
  %238 = icmp eq i64 %237, %229
  br i1 %238, label %239, label %230, !llvm.loop !741

239:                                              ; preds = %230
  %240 = icmp eq i64 %229, %3
  br i1 %240, label %2038, label %241

241:                                              ; preds = %137, %135, %224, %239
  %242 = phi i64 [ 0, %135 ], [ 0, %137 ], [ %146, %224 ], [ %229, %239 ]
  %243 = xor i64 %242, -1
  %244 = add i64 %243, %3
  %245 = and i64 %3, 3
  %246 = icmp eq i64 %245, 0
  br i1 %246, label %256, label %247

247:                                              ; preds = %241, %247
  %248 = phi i64 [ %253, %247 ], [ %242, %241 ]
  %249 = phi i64 [ %254, %247 ], [ 0, %241 ]
  %250 = getelementptr inbounds i8, i8* %1, i64 %248
  %251 = load i8, i8* %250, align 1, !tbaa !14
  %252 = getelementptr inbounds i8, i8* %0, i64 %248
  store i8 %251, i8* %252, align 1, !tbaa !14
  %253 = add nuw i64 %248, 1
  %254 = add i64 %249, 1
  %255 = icmp eq i64 %254, %245
  br i1 %255, label %256, label %247, !llvm.loop !742

256:                                              ; preds = %247, %241
  %257 = phi i64 [ %242, %241 ], [ %253, %247 ]
  %258 = icmp ult i64 %244, 3
  br i1 %258, label %2038, label %259

259:                                              ; preds = %256, %259
  %260 = phi i64 [ %276, %259 ], [ %257, %256 ]
  %261 = getelementptr inbounds i8, i8* %1, i64 %260
  %262 = load i8, i8* %261, align 1, !tbaa !14
  %263 = getelementptr inbounds i8, i8* %0, i64 %260
  store i8 %262, i8* %263, align 1, !tbaa !14
  %264 = add nuw i64 %260, 1
  %265 = getelementptr inbounds i8, i8* %1, i64 %264
  %266 = load i8, i8* %265, align 1, !tbaa !14
  %267 = getelementptr inbounds i8, i8* %0, i64 %264
  store i8 %266, i8* %267, align 1, !tbaa !14
  %268 = add nuw i64 %260, 2
  %269 = getelementptr inbounds i8, i8* %1, i64 %268
  %270 = load i8, i8* %269, align 1, !tbaa !14
  %271 = getelementptr inbounds i8, i8* %0, i64 %268
  store i8 %270, i8* %271, align 1, !tbaa !14
  %272 = add nuw i64 %260, 3
  %273 = getelementptr inbounds i8, i8* %1, i64 %272
  %274 = load i8, i8* %273, align 1, !tbaa !14
  %275 = getelementptr inbounds i8, i8* %0, i64 %272
  store i8 %274, i8* %275, align 1, !tbaa !14
  %276 = add nuw i64 %260, 4
  %277 = icmp eq i64 %276, %3
  br i1 %277, label %2038, label %259, !llvm.loop !743

278:                                              ; preds = %130, %422, %96, %113, %7
  %279 = icmp ugt i64 %3, %4
  br i1 %279, label %280, label %2038

280:                                              ; preds = %278
  %281 = sub i64 %3, %4
  %282 = icmp ult i64 %281, 8
  br i1 %282, label %403, label %283

283:                                              ; preds = %280
  %284 = getelementptr i8, i8* %0, i64 %4
  %285 = getelementptr i8, i8* %0, i64 %3
  %286 = sub i64 %3, %4
  %287 = getelementptr i8, i8* %1, i64 %286
  %288 = getelementptr i8, i8* %1, i64 %4
  %289 = getelementptr i8, i8* %1, i64 %3
  %290 = icmp ult i8* %284, %287
  %291 = icmp ugt i8* %285, %1
  %292 = and i1 %290, %291
  %293 = icmp ult i8* %284, %289
  %294 = icmp ult i8* %288, %285
  %295 = and i1 %293, %294
  %296 = or i1 %292, %295
  br i1 %296, label %403, label %297

297:                                              ; preds = %283
  %298 = icmp ult i64 %281, 32
  br i1 %298, label %382, label %299

299:                                              ; preds = %297
  %300 = and i64 %281, -32
  %301 = add i64 %300, -32
  %302 = lshr exact i64 %301, 5
  %303 = add nuw nsw i64 %302, 1
  %304 = and i64 %303, 1
  %305 = icmp eq i64 %301, 0
  br i1 %305, label %353, label %306

306:                                              ; preds = %299
  %307 = and i64 %303, 1152921504606846974
  br label %308

308:                                              ; preds = %308, %306
  %309 = phi i64 [ 0, %306 ], [ %350, %308 ]
  %310 = phi i64 [ 0, %306 ], [ %351, %308 ]
  %311 = add i64 %309, %4
  %312 = getelementptr inbounds i8, i8* %1, i64 %311
  %313 = bitcast i8* %312 to <16 x i8>*
  %314 = load <16 x i8>, <16 x i8>* %313, align 1, !tbaa !14, !alias.scope !744
  %315 = getelementptr inbounds i8, i8* %312, i64 16
  %316 = bitcast i8* %315 to <16 x i8>*
  %317 = load <16 x i8>, <16 x i8>* %316, align 1, !tbaa !14, !alias.scope !744
  %318 = getelementptr inbounds i8, i8* %1, i64 %309
  %319 = bitcast i8* %318 to <16 x i8>*
  %320 = load <16 x i8>, <16 x i8>* %319, align 1, !tbaa !14, !alias.scope !747
  %321 = getelementptr inbounds i8, i8* %318, i64 16
  %322 = bitcast i8* %321 to <16 x i8>*
  %323 = load <16 x i8>, <16 x i8>* %322, align 1, !tbaa !14, !alias.scope !747
  %324 = sub <16 x i8> %314, %320
  %325 = sub <16 x i8> %317, %323
  %326 = getelementptr inbounds i8, i8* %0, i64 %311
  %327 = bitcast i8* %326 to <16 x i8>*
  store <16 x i8> %324, <16 x i8>* %327, align 1, !tbaa !14, !alias.scope !749, !noalias !751
  %328 = getelementptr inbounds i8, i8* %326, i64 16
  %329 = bitcast i8* %328 to <16 x i8>*
  store <16 x i8> %325, <16 x i8>* %329, align 1, !tbaa !14, !alias.scope !749, !noalias !751
  %330 = or i64 %309, 32
  %331 = add i64 %330, %4
  %332 = getelementptr inbounds i8, i8* %1, i64 %331
  %333 = bitcast i8* %332 to <16 x i8>*
  %334 = load <16 x i8>, <16 x i8>* %333, align 1, !tbaa !14, !alias.scope !744
  %335 = getelementptr inbounds i8, i8* %332, i64 16
  %336 = bitcast i8* %335 to <16 x i8>*
  %337 = load <16 x i8>, <16 x i8>* %336, align 1, !tbaa !14, !alias.scope !744
  %338 = getelementptr inbounds i8, i8* %1, i64 %330
  %339 = bitcast i8* %338 to <16 x i8>*
  %340 = load <16 x i8>, <16 x i8>* %339, align 1, !tbaa !14, !alias.scope !747
  %341 = getelementptr inbounds i8, i8* %338, i64 16
  %342 = bitcast i8* %341 to <16 x i8>*
  %343 = load <16 x i8>, <16 x i8>* %342, align 1, !tbaa !14, !alias.scope !747
  %344 = sub <16 x i8> %334, %340
  %345 = sub <16 x i8> %337, %343
  %346 = getelementptr inbounds i8, i8* %0, i64 %331
  %347 = bitcast i8* %346 to <16 x i8>*
  store <16 x i8> %344, <16 x i8>* %347, align 1, !tbaa !14, !alias.scope !749, !noalias !751
  %348 = getelementptr inbounds i8, i8* %346, i64 16
  %349 = bitcast i8* %348 to <16 x i8>*
  store <16 x i8> %345, <16 x i8>* %349, align 1, !tbaa !14, !alias.scope !749, !noalias !751
  %350 = add nuw i64 %309, 64
  %351 = add i64 %310, 2
  %352 = icmp eq i64 %351, %307
  br i1 %352, label %353, label %308, !llvm.loop !752

353:                                              ; preds = %308, %299
  %354 = phi i64 [ 0, %299 ], [ %350, %308 ]
  %355 = icmp eq i64 %304, 0
  br i1 %355, label %376, label %356

356:                                              ; preds = %353
  %357 = add i64 %354, %4
  %358 = getelementptr inbounds i8, i8* %1, i64 %357
  %359 = bitcast i8* %358 to <16 x i8>*
  %360 = load <16 x i8>, <16 x i8>* %359, align 1, !tbaa !14, !alias.scope !744
  %361 = getelementptr inbounds i8, i8* %358, i64 16
  %362 = bitcast i8* %361 to <16 x i8>*
  %363 = load <16 x i8>, <16 x i8>* %362, align 1, !tbaa !14, !alias.scope !744
  %364 = getelementptr inbounds i8, i8* %1, i64 %354
  %365 = bitcast i8* %364 to <16 x i8>*
  %366 = load <16 x i8>, <16 x i8>* %365, align 1, !tbaa !14, !alias.scope !747
  %367 = getelementptr inbounds i8, i8* %364, i64 16
  %368 = bitcast i8* %367 to <16 x i8>*
  %369 = load <16 x i8>, <16 x i8>* %368, align 1, !tbaa !14, !alias.scope !747
  %370 = sub <16 x i8> %360, %366
  %371 = sub <16 x i8> %363, %369
  %372 = getelementptr inbounds i8, i8* %0, i64 %357
  %373 = bitcast i8* %372 to <16 x i8>*
  store <16 x i8> %370, <16 x i8>* %373, align 1, !tbaa !14, !alias.scope !749, !noalias !751
  %374 = getelementptr inbounds i8, i8* %372, i64 16
  %375 = bitcast i8* %374 to <16 x i8>*
  store <16 x i8> %371, <16 x i8>* %375, align 1, !tbaa !14, !alias.scope !749, !noalias !751
  br label %376

376:                                              ; preds = %353, %356
  %377 = icmp eq i64 %281, %300
  br i1 %377, label %2038, label %378

378:                                              ; preds = %376
  %379 = add i64 %300, %4
  %380 = and i64 %281, 24
  %381 = icmp eq i64 %380, 0
  br i1 %381, label %403, label %382

382:                                              ; preds = %297, %378
  %383 = phi i64 [ %300, %378 ], [ 0, %297 ]
  %384 = sub i64 %3, %4
  %385 = and i64 %384, -8
  %386 = add i64 %385, %4
  br label %387

387:                                              ; preds = %387, %382
  %388 = phi i64 [ %383, %382 ], [ %399, %387 ]
  %389 = add i64 %388, %4
  %390 = getelementptr inbounds i8, i8* %1, i64 %389
  %391 = bitcast i8* %390 to <8 x i8>*
  %392 = load <8 x i8>, <8 x i8>* %391, align 1, !tbaa !14
  %393 = getelementptr inbounds i8, i8* %1, i64 %388
  %394 = bitcast i8* %393 to <8 x i8>*
  %395 = load <8 x i8>, <8 x i8>* %394, align 1, !tbaa !14
  %396 = sub <8 x i8> %392, %395
  %397 = getelementptr inbounds i8, i8* %0, i64 %389
  %398 = bitcast i8* %397 to <8 x i8>*
  store <8 x i8> %396, <8 x i8>* %398, align 1, !tbaa !14
  %399 = add nuw i64 %388, 8
  %400 = icmp eq i64 %399, %385
  br i1 %400, label %401, label %387, !llvm.loop !753

401:                                              ; preds = %387
  %402 = icmp eq i64 %384, %385
  br i1 %402, label %2038, label %403

403:                                              ; preds = %283, %280, %378, %401
  %404 = phi i64 [ %4, %280 ], [ %4, %283 ], [ %379, %378 ], [ %386, %401 ]
  %405 = sub i64 %3, %404
  %406 = xor i64 %404, -1
  %407 = and i64 %405, 1
  %408 = icmp eq i64 %407, 0
  br i1 %408, label %418, label %409

409:                                              ; preds = %403
  %410 = getelementptr inbounds i8, i8* %1, i64 %404
  %411 = load i8, i8* %410, align 1, !tbaa !14
  %412 = sub nuw i64 %404, %4
  %413 = getelementptr inbounds i8, i8* %1, i64 %412
  %414 = load i8, i8* %413, align 1, !tbaa !14
  %415 = sub i8 %411, %414
  %416 = getelementptr inbounds i8, i8* %0, i64 %404
  store i8 %415, i8* %416, align 1, !tbaa !14
  %417 = add nuw i64 %404, 1
  br label %418

418:                                              ; preds = %409, %403
  %419 = phi i64 [ %404, %403 ], [ %417, %409 ]
  %420 = sub i64 0, %3
  %421 = icmp eq i64 %406, %420
  br i1 %421, label %2038, label %441

422:                                              ; preds = %130, %422
  %423 = phi i64 [ %439, %422 ], [ %131, %130 ]
  %424 = getelementptr inbounds i8, i8* %1, i64 %423
  %425 = load i8, i8* %424, align 1, !tbaa !14
  %426 = getelementptr inbounds i8, i8* %0, i64 %423
  store i8 %425, i8* %426, align 1, !tbaa !14
  %427 = add nuw i64 %423, 1
  %428 = getelementptr inbounds i8, i8* %1, i64 %427
  %429 = load i8, i8* %428, align 1, !tbaa !14
  %430 = getelementptr inbounds i8, i8* %0, i64 %427
  store i8 %429, i8* %430, align 1, !tbaa !14
  %431 = add nuw i64 %423, 2
  %432 = getelementptr inbounds i8, i8* %1, i64 %431
  %433 = load i8, i8* %432, align 1, !tbaa !14
  %434 = getelementptr inbounds i8, i8* %0, i64 %431
  store i8 %433, i8* %434, align 1, !tbaa !14
  %435 = add nuw i64 %423, 3
  %436 = getelementptr inbounds i8, i8* %1, i64 %435
  %437 = load i8, i8* %436, align 1, !tbaa !14
  %438 = getelementptr inbounds i8, i8* %0, i64 %435
  store i8 %437, i8* %438, align 1, !tbaa !14
  %439 = add nuw i64 %423, 4
  %440 = icmp eq i64 %439, %4
  br i1 %440, label %278, label %422, !llvm.loop !754

441:                                              ; preds = %418, %441
  %442 = phi i64 [ %458, %441 ], [ %419, %418 ]
  %443 = getelementptr inbounds i8, i8* %1, i64 %442
  %444 = load i8, i8* %443, align 1, !tbaa !14
  %445 = sub nuw i64 %442, %4
  %446 = getelementptr inbounds i8, i8* %1, i64 %445
  %447 = load i8, i8* %446, align 1, !tbaa !14
  %448 = sub i8 %444, %447
  %449 = getelementptr inbounds i8, i8* %0, i64 %442
  store i8 %448, i8* %449, align 1, !tbaa !14
  %450 = add nuw i64 %442, 1
  %451 = getelementptr inbounds i8, i8* %1, i64 %450
  %452 = load i8, i8* %451, align 1, !tbaa !14
  %453 = sub nuw i64 %450, %4
  %454 = getelementptr inbounds i8, i8* %1, i64 %453
  %455 = load i8, i8* %454, align 1, !tbaa !14
  %456 = sub i8 %452, %455
  %457 = getelementptr inbounds i8, i8* %0, i64 %450
  store i8 %456, i8* %457, align 1, !tbaa !14
  %458 = add nuw i64 %442, 2
  %459 = icmp eq i64 %458, %3
  br i1 %459, label %2038, label %441, !llvm.loop !755

460:                                              ; preds = %6
  %461 = icmp eq i8* %2, null
  %462 = icmp eq i64 %3, 0
  br i1 %461, label %597, label %463

463:                                              ; preds = %460
  br i1 %462, label %2038, label %464

464:                                              ; preds = %463
  %465 = icmp ult i64 %3, 8
  br i1 %465, label %576, label %466

466:                                              ; preds = %464
  %467 = getelementptr i8, i8* %0, i64 %3
  %468 = getelementptr i8, i8* %1, i64 %3
  %469 = getelementptr i8, i8* %2, i64 %3
  %470 = icmp ugt i8* %468, %0
  %471 = icmp ugt i8* %467, %1
  %472 = and i1 %470, %471
  %473 = icmp ugt i8* %469, %0
  %474 = icmp ugt i8* %467, %2
  %475 = and i1 %473, %474
  %476 = or i1 %472, %475
  br i1 %476, label %576, label %477

477:                                              ; preds = %466
  %478 = icmp ult i64 %3, 32
  br i1 %478, label %558, label %479

479:                                              ; preds = %477
  %480 = and i64 %3, -32
  %481 = add i64 %480, -32
  %482 = lshr exact i64 %481, 5
  %483 = add nuw nsw i64 %482, 1
  %484 = and i64 %483, 1
  %485 = icmp eq i64 %481, 0
  br i1 %485, label %531, label %486

486:                                              ; preds = %479
  %487 = and i64 %483, 1152921504606846974
  br label %488

488:                                              ; preds = %488, %486
  %489 = phi i64 [ 0, %486 ], [ %528, %488 ]
  %490 = phi i64 [ 0, %486 ], [ %529, %488 ]
  %491 = getelementptr inbounds i8, i8* %1, i64 %489
  %492 = bitcast i8* %491 to <16 x i8>*
  %493 = load <16 x i8>, <16 x i8>* %492, align 1, !tbaa !14, !alias.scope !756
  %494 = getelementptr inbounds i8, i8* %491, i64 16
  %495 = bitcast i8* %494 to <16 x i8>*
  %496 = load <16 x i8>, <16 x i8>* %495, align 1, !tbaa !14, !alias.scope !756
  %497 = getelementptr inbounds i8, i8* %2, i64 %489
  %498 = bitcast i8* %497 to <16 x i8>*
  %499 = load <16 x i8>, <16 x i8>* %498, align 1, !tbaa !14, !alias.scope !759
  %500 = getelementptr inbounds i8, i8* %497, i64 16
  %501 = bitcast i8* %500 to <16 x i8>*
  %502 = load <16 x i8>, <16 x i8>* %501, align 1, !tbaa !14, !alias.scope !759
  %503 = sub <16 x i8> %493, %499
  %504 = sub <16 x i8> %496, %502
  %505 = getelementptr inbounds i8, i8* %0, i64 %489
  %506 = bitcast i8* %505 to <16 x i8>*
  store <16 x i8> %503, <16 x i8>* %506, align 1, !tbaa !14, !alias.scope !761, !noalias !763
  %507 = getelementptr inbounds i8, i8* %505, i64 16
  %508 = bitcast i8* %507 to <16 x i8>*
  store <16 x i8> %504, <16 x i8>* %508, align 1, !tbaa !14, !alias.scope !761, !noalias !763
  %509 = or i64 %489, 32
  %510 = getelementptr inbounds i8, i8* %1, i64 %509
  %511 = bitcast i8* %510 to <16 x i8>*
  %512 = load <16 x i8>, <16 x i8>* %511, align 1, !tbaa !14, !alias.scope !756
  %513 = getelementptr inbounds i8, i8* %510, i64 16
  %514 = bitcast i8* %513 to <16 x i8>*
  %515 = load <16 x i8>, <16 x i8>* %514, align 1, !tbaa !14, !alias.scope !756
  %516 = getelementptr inbounds i8, i8* %2, i64 %509
  %517 = bitcast i8* %516 to <16 x i8>*
  %518 = load <16 x i8>, <16 x i8>* %517, align 1, !tbaa !14, !alias.scope !759
  %519 = getelementptr inbounds i8, i8* %516, i64 16
  %520 = bitcast i8* %519 to <16 x i8>*
  %521 = load <16 x i8>, <16 x i8>* %520, align 1, !tbaa !14, !alias.scope !759
  %522 = sub <16 x i8> %512, %518
  %523 = sub <16 x i8> %515, %521
  %524 = getelementptr inbounds i8, i8* %0, i64 %509
  %525 = bitcast i8* %524 to <16 x i8>*
  store <16 x i8> %522, <16 x i8>* %525, align 1, !tbaa !14, !alias.scope !761, !noalias !763
  %526 = getelementptr inbounds i8, i8* %524, i64 16
  %527 = bitcast i8* %526 to <16 x i8>*
  store <16 x i8> %523, <16 x i8>* %527, align 1, !tbaa !14, !alias.scope !761, !noalias !763
  %528 = add nuw i64 %489, 64
  %529 = add i64 %490, 2
  %530 = icmp eq i64 %529, %487
  br i1 %530, label %531, label %488, !llvm.loop !764

531:                                              ; preds = %488, %479
  %532 = phi i64 [ 0, %479 ], [ %528, %488 ]
  %533 = icmp eq i64 %484, 0
  br i1 %533, label %553, label %534

534:                                              ; preds = %531
  %535 = getelementptr inbounds i8, i8* %1, i64 %532
  %536 = bitcast i8* %535 to <16 x i8>*
  %537 = load <16 x i8>, <16 x i8>* %536, align 1, !tbaa !14, !alias.scope !756
  %538 = getelementptr inbounds i8, i8* %535, i64 16
  %539 = bitcast i8* %538 to <16 x i8>*
  %540 = load <16 x i8>, <16 x i8>* %539, align 1, !tbaa !14, !alias.scope !756
  %541 = getelementptr inbounds i8, i8* %2, i64 %532
  %542 = bitcast i8* %541 to <16 x i8>*
  %543 = load <16 x i8>, <16 x i8>* %542, align 1, !tbaa !14, !alias.scope !759
  %544 = getelementptr inbounds i8, i8* %541, i64 16
  %545 = bitcast i8* %544 to <16 x i8>*
  %546 = load <16 x i8>, <16 x i8>* %545, align 1, !tbaa !14, !alias.scope !759
  %547 = sub <16 x i8> %537, %543
  %548 = sub <16 x i8> %540, %546
  %549 = getelementptr inbounds i8, i8* %0, i64 %532
  %550 = bitcast i8* %549 to <16 x i8>*
  store <16 x i8> %547, <16 x i8>* %550, align 1, !tbaa !14, !alias.scope !761, !noalias !763
  %551 = getelementptr inbounds i8, i8* %549, i64 16
  %552 = bitcast i8* %551 to <16 x i8>*
  store <16 x i8> %548, <16 x i8>* %552, align 1, !tbaa !14, !alias.scope !761, !noalias !763
  br label %553

553:                                              ; preds = %531, %534
  %554 = icmp eq i64 %480, %3
  br i1 %554, label %2038, label %555

555:                                              ; preds = %553
  %556 = and i64 %3, 24
  %557 = icmp eq i64 %556, 0
  br i1 %557, label %576, label %558

558:                                              ; preds = %477, %555
  %559 = phi i64 [ %480, %555 ], [ 0, %477 ]
  %560 = and i64 %3, -8
  br label %561

561:                                              ; preds = %561, %558
  %562 = phi i64 [ %559, %558 ], [ %572, %561 ]
  %563 = getelementptr inbounds i8, i8* %1, i64 %562
  %564 = bitcast i8* %563 to <8 x i8>*
  %565 = load <8 x i8>, <8 x i8>* %564, align 1, !tbaa !14
  %566 = getelementptr inbounds i8, i8* %2, i64 %562
  %567 = bitcast i8* %566 to <8 x i8>*
  %568 = load <8 x i8>, <8 x i8>* %567, align 1, !tbaa !14
  %569 = sub <8 x i8> %565, %568
  %570 = getelementptr inbounds i8, i8* %0, i64 %562
  %571 = bitcast i8* %570 to <8 x i8>*
  store <8 x i8> %569, <8 x i8>* %571, align 1, !tbaa !14
  %572 = add nuw i64 %562, 8
  %573 = icmp eq i64 %572, %560
  br i1 %573, label %574, label %561, !llvm.loop !765

574:                                              ; preds = %561
  %575 = icmp eq i64 %560, %3
  br i1 %575, label %2038, label %576

576:                                              ; preds = %466, %464, %555, %574
  %577 = phi i64 [ 0, %464 ], [ 0, %466 ], [ %480, %555 ], [ %560, %574 ]
  %578 = xor i64 %577, -1
  %579 = add i64 %578, %3
  %580 = and i64 %3, 3
  %581 = icmp eq i64 %580, 0
  br i1 %581, label %594, label %582

582:                                              ; preds = %576, %582
  %583 = phi i64 [ %591, %582 ], [ %577, %576 ]
  %584 = phi i64 [ %592, %582 ], [ 0, %576 ]
  %585 = getelementptr inbounds i8, i8* %1, i64 %583
  %586 = load i8, i8* %585, align 1, !tbaa !14
  %587 = getelementptr inbounds i8, i8* %2, i64 %583
  %588 = load i8, i8* %587, align 1, !tbaa !14
  %589 = sub i8 %586, %588
  %590 = getelementptr inbounds i8, i8* %0, i64 %583
  store i8 %589, i8* %590, align 1, !tbaa !14
  %591 = add nuw i64 %583, 1
  %592 = add i64 %584, 1
  %593 = icmp eq i64 %592, %580
  br i1 %593, label %594, label %582, !llvm.loop !766

594:                                              ; preds = %582, %576
  %595 = phi i64 [ %577, %576 ], [ %591, %582 ]
  %596 = icmp ult i64 %579, 3
  br i1 %596, label %2038, label %722

597:                                              ; preds = %460
  br i1 %462, label %2038, label %598

598:                                              ; preds = %597
  %599 = icmp ult i64 %3, 8
  br i1 %599, label %704, label %600

600:                                              ; preds = %598
  %601 = getelementptr i8, i8* %0, i64 %3
  %602 = getelementptr i8, i8* %1, i64 %3
  %603 = icmp ugt i8* %602, %0
  %604 = icmp ugt i8* %601, %1
  %605 = and i1 %603, %604
  br i1 %605, label %704, label %606

606:                                              ; preds = %600
  %607 = icmp ult i64 %3, 32
  br i1 %607, label %690, label %608

608:                                              ; preds = %606
  %609 = and i64 %3, -32
  %610 = add i64 %609, -32
  %611 = lshr exact i64 %610, 5
  %612 = add nuw nsw i64 %611, 1
  %613 = and i64 %612, 3
  %614 = icmp ult i64 %610, 96
  br i1 %614, label %666, label %615

615:                                              ; preds = %608
  %616 = and i64 %612, 1152921504606846972
  br label %617

617:                                              ; preds = %617, %615
  %618 = phi i64 [ 0, %615 ], [ %663, %617 ]
  %619 = phi i64 [ 0, %615 ], [ %664, %617 ]
  %620 = getelementptr inbounds i8, i8* %1, i64 %618
  %621 = bitcast i8* %620 to <16 x i8>*
  %622 = load <16 x i8>, <16 x i8>* %621, align 1, !tbaa !14, !alias.scope !767
  %623 = getelementptr inbounds i8, i8* %620, i64 16
  %624 = bitcast i8* %623 to <16 x i8>*
  %625 = load <16 x i8>, <16 x i8>* %624, align 1, !tbaa !14, !alias.scope !767
  %626 = getelementptr inbounds i8, i8* %0, i64 %618
  %627 = bitcast i8* %626 to <16 x i8>*
  store <16 x i8> %622, <16 x i8>* %627, align 1, !tbaa !14, !alias.scope !770, !noalias !767
  %628 = getelementptr inbounds i8, i8* %626, i64 16
  %629 = bitcast i8* %628 to <16 x i8>*
  store <16 x i8> %625, <16 x i8>* %629, align 1, !tbaa !14, !alias.scope !770, !noalias !767
  %630 = or i64 %618, 32
  %631 = getelementptr inbounds i8, i8* %1, i64 %630
  %632 = bitcast i8* %631 to <16 x i8>*
  %633 = load <16 x i8>, <16 x i8>* %632, align 1, !tbaa !14, !alias.scope !767
  %634 = getelementptr inbounds i8, i8* %631, i64 16
  %635 = bitcast i8* %634 to <16 x i8>*
  %636 = load <16 x i8>, <16 x i8>* %635, align 1, !tbaa !14, !alias.scope !767
  %637 = getelementptr inbounds i8, i8* %0, i64 %630
  %638 = bitcast i8* %637 to <16 x i8>*
  store <16 x i8> %633, <16 x i8>* %638, align 1, !tbaa !14, !alias.scope !770, !noalias !767
  %639 = getelementptr inbounds i8, i8* %637, i64 16
  %640 = bitcast i8* %639 to <16 x i8>*
  store <16 x i8> %636, <16 x i8>* %640, align 1, !tbaa !14, !alias.scope !770, !noalias !767
  %641 = or i64 %618, 64
  %642 = getelementptr inbounds i8, i8* %1, i64 %641
  %643 = bitcast i8* %642 to <16 x i8>*
  %644 = load <16 x i8>, <16 x i8>* %643, align 1, !tbaa !14, !alias.scope !767
  %645 = getelementptr inbounds i8, i8* %642, i64 16
  %646 = bitcast i8* %645 to <16 x i8>*
  %647 = load <16 x i8>, <16 x i8>* %646, align 1, !tbaa !14, !alias.scope !767
  %648 = getelementptr inbounds i8, i8* %0, i64 %641
  %649 = bitcast i8* %648 to <16 x i8>*
  store <16 x i8> %644, <16 x i8>* %649, align 1, !tbaa !14, !alias.scope !770, !noalias !767
  %650 = getelementptr inbounds i8, i8* %648, i64 16
  %651 = bitcast i8* %650 to <16 x i8>*
  store <16 x i8> %647, <16 x i8>* %651, align 1, !tbaa !14, !alias.scope !770, !noalias !767
  %652 = or i64 %618, 96
  %653 = getelementptr inbounds i8, i8* %1, i64 %652
  %654 = bitcast i8* %653 to <16 x i8>*
  %655 = load <16 x i8>, <16 x i8>* %654, align 1, !tbaa !14, !alias.scope !767
  %656 = getelementptr inbounds i8, i8* %653, i64 16
  %657 = bitcast i8* %656 to <16 x i8>*
  %658 = load <16 x i8>, <16 x i8>* %657, align 1, !tbaa !14, !alias.scope !767
  %659 = getelementptr inbounds i8, i8* %0, i64 %652
  %660 = bitcast i8* %659 to <16 x i8>*
  store <16 x i8> %655, <16 x i8>* %660, align 1, !tbaa !14, !alias.scope !770, !noalias !767
  %661 = getelementptr inbounds i8, i8* %659, i64 16
  %662 = bitcast i8* %661 to <16 x i8>*
  store <16 x i8> %658, <16 x i8>* %662, align 1, !tbaa !14, !alias.scope !770, !noalias !767
  %663 = add nuw i64 %618, 128
  %664 = add i64 %619, 4
  %665 = icmp eq i64 %664, %616
  br i1 %665, label %666, label %617, !llvm.loop !772

666:                                              ; preds = %617, %608
  %667 = phi i64 [ 0, %608 ], [ %663, %617 ]
  %668 = icmp eq i64 %613, 0
  br i1 %668, label %685, label %669

669:                                              ; preds = %666, %669
  %670 = phi i64 [ %682, %669 ], [ %667, %666 ]
  %671 = phi i64 [ %683, %669 ], [ 0, %666 ]
  %672 = getelementptr inbounds i8, i8* %1, i64 %670
  %673 = bitcast i8* %672 to <16 x i8>*
  %674 = load <16 x i8>, <16 x i8>* %673, align 1, !tbaa !14, !alias.scope !767
  %675 = getelementptr inbounds i8, i8* %672, i64 16
  %676 = bitcast i8* %675 to <16 x i8>*
  %677 = load <16 x i8>, <16 x i8>* %676, align 1, !tbaa !14, !alias.scope !767
  %678 = getelementptr inbounds i8, i8* %0, i64 %670
  %679 = bitcast i8* %678 to <16 x i8>*
  store <16 x i8> %674, <16 x i8>* %679, align 1, !tbaa !14, !alias.scope !770, !noalias !767
  %680 = getelementptr inbounds i8, i8* %678, i64 16
  %681 = bitcast i8* %680 to <16 x i8>*
  store <16 x i8> %677, <16 x i8>* %681, align 1, !tbaa !14, !alias.scope !770, !noalias !767
  %682 = add nuw i64 %670, 32
  %683 = add i64 %671, 1
  %684 = icmp eq i64 %683, %613
  br i1 %684, label %685, label %669, !llvm.loop !773

685:                                              ; preds = %669, %666
  %686 = icmp eq i64 %609, %3
  br i1 %686, label %2038, label %687

687:                                              ; preds = %685
  %688 = and i64 %3, 24
  %689 = icmp eq i64 %688, 0
  br i1 %689, label %704, label %690

690:                                              ; preds = %606, %687
  %691 = phi i64 [ %609, %687 ], [ 0, %606 ]
  %692 = and i64 %3, -8
  br label %693

693:                                              ; preds = %693, %690
  %694 = phi i64 [ %691, %690 ], [ %700, %693 ]
  %695 = getelementptr inbounds i8, i8* %1, i64 %694
  %696 = bitcast i8* %695 to <8 x i8>*
  %697 = load <8 x i8>, <8 x i8>* %696, align 1, !tbaa !14
  %698 = getelementptr inbounds i8, i8* %0, i64 %694
  %699 = bitcast i8* %698 to <8 x i8>*
  store <8 x i8> %697, <8 x i8>* %699, align 1, !tbaa !14
  %700 = add nuw i64 %694, 8
  %701 = icmp eq i64 %700, %692
  br i1 %701, label %702, label %693, !llvm.loop !774

702:                                              ; preds = %693
  %703 = icmp eq i64 %692, %3
  br i1 %703, label %2038, label %704

704:                                              ; preds = %600, %598, %687, %702
  %705 = phi i64 [ 0, %598 ], [ 0, %600 ], [ %609, %687 ], [ %692, %702 ]
  %706 = xor i64 %705, -1
  %707 = add i64 %706, %3
  %708 = and i64 %3, 3
  %709 = icmp eq i64 %708, 0
  br i1 %709, label %719, label %710

710:                                              ; preds = %704, %710
  %711 = phi i64 [ %716, %710 ], [ %705, %704 ]
  %712 = phi i64 [ %717, %710 ], [ 0, %704 ]
  %713 = getelementptr inbounds i8, i8* %1, i64 %711
  %714 = load i8, i8* %713, align 1, !tbaa !14
  %715 = getelementptr inbounds i8, i8* %0, i64 %711
  store i8 %714, i8* %715, align 1, !tbaa !14
  %716 = add nuw i64 %711, 1
  %717 = add i64 %712, 1
  %718 = icmp eq i64 %717, %708
  br i1 %718, label %719, label %710, !llvm.loop !775

719:                                              ; preds = %710, %704
  %720 = phi i64 [ %705, %704 ], [ %716, %710 ]
  %721 = icmp ult i64 %707, 3
  br i1 %721, label %2038, label %753

722:                                              ; preds = %594, %722
  %723 = phi i64 [ %751, %722 ], [ %595, %594 ]
  %724 = getelementptr inbounds i8, i8* %1, i64 %723
  %725 = load i8, i8* %724, align 1, !tbaa !14
  %726 = getelementptr inbounds i8, i8* %2, i64 %723
  %727 = load i8, i8* %726, align 1, !tbaa !14
  %728 = sub i8 %725, %727
  %729 = getelementptr inbounds i8, i8* %0, i64 %723
  store i8 %728, i8* %729, align 1, !tbaa !14
  %730 = add nuw i64 %723, 1
  %731 = getelementptr inbounds i8, i8* %1, i64 %730
  %732 = load i8, i8* %731, align 1, !tbaa !14
  %733 = getelementptr inbounds i8, i8* %2, i64 %730
  %734 = load i8, i8* %733, align 1, !tbaa !14
  %735 = sub i8 %732, %734
  %736 = getelementptr inbounds i8, i8* %0, i64 %730
  store i8 %735, i8* %736, align 1, !tbaa !14
  %737 = add nuw i64 %723, 2
  %738 = getelementptr inbounds i8, i8* %1, i64 %737
  %739 = load i8, i8* %738, align 1, !tbaa !14
  %740 = getelementptr inbounds i8, i8* %2, i64 %737
  %741 = load i8, i8* %740, align 1, !tbaa !14
  %742 = sub i8 %739, %741
  %743 = getelementptr inbounds i8, i8* %0, i64 %737
  store i8 %742, i8* %743, align 1, !tbaa !14
  %744 = add nuw i64 %723, 3
  %745 = getelementptr inbounds i8, i8* %1, i64 %744
  %746 = load i8, i8* %745, align 1, !tbaa !14
  %747 = getelementptr inbounds i8, i8* %2, i64 %744
  %748 = load i8, i8* %747, align 1, !tbaa !14
  %749 = sub i8 %746, %748
  %750 = getelementptr inbounds i8, i8* %0, i64 %744
  store i8 %749, i8* %750, align 1, !tbaa !14
  %751 = add nuw i64 %723, 4
  %752 = icmp eq i64 %751, %3
  br i1 %752, label %2038, label %722, !llvm.loop !776

753:                                              ; preds = %719, %753
  %754 = phi i64 [ %770, %753 ], [ %720, %719 ]
  %755 = getelementptr inbounds i8, i8* %1, i64 %754
  %756 = load i8, i8* %755, align 1, !tbaa !14
  %757 = getelementptr inbounds i8, i8* %0, i64 %754
  store i8 %756, i8* %757, align 1, !tbaa !14
  %758 = add nuw i64 %754, 1
  %759 = getelementptr inbounds i8, i8* %1, i64 %758
  %760 = load i8, i8* %759, align 1, !tbaa !14
  %761 = getelementptr inbounds i8, i8* %0, i64 %758
  store i8 %760, i8* %761, align 1, !tbaa !14
  %762 = add nuw i64 %754, 2
  %763 = getelementptr inbounds i8, i8* %1, i64 %762
  %764 = load i8, i8* %763, align 1, !tbaa !14
  %765 = getelementptr inbounds i8, i8* %0, i64 %762
  store i8 %764, i8* %765, align 1, !tbaa !14
  %766 = add nuw i64 %754, 3
  %767 = getelementptr inbounds i8, i8* %1, i64 %766
  %768 = load i8, i8* %767, align 1, !tbaa !14
  %769 = getelementptr inbounds i8, i8* %0, i64 %766
  store i8 %768, i8* %769, align 1, !tbaa !14
  %770 = add nuw i64 %754, 4
  %771 = icmp eq i64 %770, %3
  br i1 %771, label %2038, label %753, !llvm.loop !777

772:                                              ; preds = %6
  %773 = icmp eq i8* %2, null
  %774 = icmp eq i64 %4, 0
  br i1 %773, label %913, label %775

775:                                              ; preds = %772
  br i1 %774, label %1038, label %776

776:                                              ; preds = %775
  %777 = icmp ult i64 %4, 8
  br i1 %777, label %895, label %778

778:                                              ; preds = %776
  %779 = getelementptr i8, i8* %0, i64 %4
  %780 = getelementptr i8, i8* %1, i64 %4
  %781 = getelementptr i8, i8* %2, i64 %4
  %782 = icmp ugt i8* %780, %0
  %783 = icmp ugt i8* %779, %1
  %784 = and i1 %782, %783
  %785 = icmp ugt i8* %781, %0
  %786 = icmp ugt i8* %779, %2
  %787 = and i1 %785, %786
  %788 = or i1 %784, %787
  br i1 %788, label %895, label %789

789:                                              ; preds = %778
  %790 = icmp ult i64 %4, 32
  br i1 %790, label %876, label %791

791:                                              ; preds = %789
  %792 = and i64 %4, -32
  %793 = add i64 %792, -32
  %794 = lshr exact i64 %793, 5
  %795 = add nuw nsw i64 %794, 1
  %796 = and i64 %795, 1
  %797 = icmp eq i64 %793, 0
  br i1 %797, label %847, label %798

798:                                              ; preds = %791
  %799 = and i64 %795, 1152921504606846974
  br label %800

800:                                              ; preds = %800, %798
  %801 = phi i64 [ 0, %798 ], [ %844, %800 ]
  %802 = phi i64 [ 0, %798 ], [ %845, %800 ]
  %803 = getelementptr inbounds i8, i8* %1, i64 %801
  %804 = bitcast i8* %803 to <16 x i8>*
  %805 = load <16 x i8>, <16 x i8>* %804, align 1, !tbaa !14, !alias.scope !778
  %806 = getelementptr inbounds i8, i8* %803, i64 16
  %807 = bitcast i8* %806 to <16 x i8>*
  %808 = load <16 x i8>, <16 x i8>* %807, align 1, !tbaa !14, !alias.scope !778
  %809 = getelementptr inbounds i8, i8* %2, i64 %801
  %810 = bitcast i8* %809 to <16 x i8>*
  %811 = load <16 x i8>, <16 x i8>* %810, align 1, !tbaa !14, !alias.scope !781
  %812 = getelementptr inbounds i8, i8* %809, i64 16
  %813 = bitcast i8* %812 to <16 x i8>*
  %814 = load <16 x i8>, <16 x i8>* %813, align 1, !tbaa !14, !alias.scope !781
  %815 = lshr <16 x i8> %811, <i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1>
  %816 = lshr <16 x i8> %814, <i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1>
  %817 = sub <16 x i8> %805, %815
  %818 = sub <16 x i8> %808, %816
  %819 = getelementptr inbounds i8, i8* %0, i64 %801
  %820 = bitcast i8* %819 to <16 x i8>*
  store <16 x i8> %817, <16 x i8>* %820, align 1, !tbaa !14, !alias.scope !783, !noalias !785
  %821 = getelementptr inbounds i8, i8* %819, i64 16
  %822 = bitcast i8* %821 to <16 x i8>*
  store <16 x i8> %818, <16 x i8>* %822, align 1, !tbaa !14, !alias.scope !783, !noalias !785
  %823 = or i64 %801, 32
  %824 = getelementptr inbounds i8, i8* %1, i64 %823
  %825 = bitcast i8* %824 to <16 x i8>*
  %826 = load <16 x i8>, <16 x i8>* %825, align 1, !tbaa !14, !alias.scope !778
  %827 = getelementptr inbounds i8, i8* %824, i64 16
  %828 = bitcast i8* %827 to <16 x i8>*
  %829 = load <16 x i8>, <16 x i8>* %828, align 1, !tbaa !14, !alias.scope !778
  %830 = getelementptr inbounds i8, i8* %2, i64 %823
  %831 = bitcast i8* %830 to <16 x i8>*
  %832 = load <16 x i8>, <16 x i8>* %831, align 1, !tbaa !14, !alias.scope !781
  %833 = getelementptr inbounds i8, i8* %830, i64 16
  %834 = bitcast i8* %833 to <16 x i8>*
  %835 = load <16 x i8>, <16 x i8>* %834, align 1, !tbaa !14, !alias.scope !781
  %836 = lshr <16 x i8> %832, <i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1>
  %837 = lshr <16 x i8> %835, <i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1>
  %838 = sub <16 x i8> %826, %836
  %839 = sub <16 x i8> %829, %837
  %840 = getelementptr inbounds i8, i8* %0, i64 %823
  %841 = bitcast i8* %840 to <16 x i8>*
  store <16 x i8> %838, <16 x i8>* %841, align 1, !tbaa !14, !alias.scope !783, !noalias !785
  %842 = getelementptr inbounds i8, i8* %840, i64 16
  %843 = bitcast i8* %842 to <16 x i8>*
  store <16 x i8> %839, <16 x i8>* %843, align 1, !tbaa !14, !alias.scope !783, !noalias !785
  %844 = add nuw i64 %801, 64
  %845 = add i64 %802, 2
  %846 = icmp eq i64 %845, %799
  br i1 %846, label %847, label %800, !llvm.loop !786

847:                                              ; preds = %800, %791
  %848 = phi i64 [ 0, %791 ], [ %844, %800 ]
  %849 = icmp eq i64 %796, 0
  br i1 %849, label %871, label %850

850:                                              ; preds = %847
  %851 = getelementptr inbounds i8, i8* %1, i64 %848
  %852 = bitcast i8* %851 to <16 x i8>*
  %853 = load <16 x i8>, <16 x i8>* %852, align 1, !tbaa !14, !alias.scope !778
  %854 = getelementptr inbounds i8, i8* %851, i64 16
  %855 = bitcast i8* %854 to <16 x i8>*
  %856 = load <16 x i8>, <16 x i8>* %855, align 1, !tbaa !14, !alias.scope !778
  %857 = getelementptr inbounds i8, i8* %2, i64 %848
  %858 = bitcast i8* %857 to <16 x i8>*
  %859 = load <16 x i8>, <16 x i8>* %858, align 1, !tbaa !14, !alias.scope !781
  %860 = getelementptr inbounds i8, i8* %857, i64 16
  %861 = bitcast i8* %860 to <16 x i8>*
  %862 = load <16 x i8>, <16 x i8>* %861, align 1, !tbaa !14, !alias.scope !781
  %863 = lshr <16 x i8> %859, <i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1>
  %864 = lshr <16 x i8> %862, <i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1>
  %865 = sub <16 x i8> %853, %863
  %866 = sub <16 x i8> %856, %864
  %867 = getelementptr inbounds i8, i8* %0, i64 %848
  %868 = bitcast i8* %867 to <16 x i8>*
  store <16 x i8> %865, <16 x i8>* %868, align 1, !tbaa !14, !alias.scope !783, !noalias !785
  %869 = getelementptr inbounds i8, i8* %867, i64 16
  %870 = bitcast i8* %869 to <16 x i8>*
  store <16 x i8> %866, <16 x i8>* %870, align 1, !tbaa !14, !alias.scope !783, !noalias !785
  br label %871

871:                                              ; preds = %847, %850
  %872 = icmp eq i64 %792, %4
  br i1 %872, label %1038, label %873

873:                                              ; preds = %871
  %874 = and i64 %4, 24
  %875 = icmp eq i64 %874, 0
  br i1 %875, label %895, label %876

876:                                              ; preds = %789, %873
  %877 = phi i64 [ %792, %873 ], [ 0, %789 ]
  %878 = and i64 %4, -8
  br label %879

879:                                              ; preds = %879, %876
  %880 = phi i64 [ %877, %876 ], [ %891, %879 ]
  %881 = getelementptr inbounds i8, i8* %1, i64 %880
  %882 = bitcast i8* %881 to <8 x i8>*
  %883 = load <8 x i8>, <8 x i8>* %882, align 1, !tbaa !14
  %884 = getelementptr inbounds i8, i8* %2, i64 %880
  %885 = bitcast i8* %884 to <8 x i8>*
  %886 = load <8 x i8>, <8 x i8>* %885, align 1, !tbaa !14
  %887 = lshr <8 x i8> %886, <i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1>
  %888 = sub <8 x i8> %883, %887
  %889 = getelementptr inbounds i8, i8* %0, i64 %880
  %890 = bitcast i8* %889 to <8 x i8>*
  store <8 x i8> %888, <8 x i8>* %890, align 1, !tbaa !14
  %891 = add nuw i64 %880, 8
  %892 = icmp eq i64 %891, %878
  br i1 %892, label %893, label %879, !llvm.loop !787

893:                                              ; preds = %879
  %894 = icmp eq i64 %878, %4
  br i1 %894, label %1038, label %895

895:                                              ; preds = %778, %776, %873, %893
  %896 = phi i64 [ 0, %776 ], [ 0, %778 ], [ %792, %873 ], [ %878, %893 ]
  %897 = xor i64 %896, -1
  %898 = and i64 %4, 1
  %899 = icmp eq i64 %898, 0
  br i1 %899, label %909, label %900

900:                                              ; preds = %895
  %901 = getelementptr inbounds i8, i8* %1, i64 %896
  %902 = load i8, i8* %901, align 1, !tbaa !14
  %903 = getelementptr inbounds i8, i8* %2, i64 %896
  %904 = load i8, i8* %903, align 1, !tbaa !14
  %905 = lshr i8 %904, 1
  %906 = sub i8 %902, %905
  %907 = getelementptr inbounds i8, i8* %0, i64 %896
  store i8 %906, i8* %907, align 1, !tbaa !14
  %908 = or i64 %896, 1
  br label %909

909:                                              ; preds = %900, %895
  %910 = phi i64 [ %896, %895 ], [ %908, %900 ]
  %911 = sub i64 0, %4
  %912 = icmp eq i64 %897, %911
  br i1 %912, label %1038, label %1167

913:                                              ; preds = %772
  br i1 %774, label %1219, label %914

914:                                              ; preds = %913
  %915 = icmp ult i64 %4, 8
  br i1 %915, label %1020, label %916

916:                                              ; preds = %914
  %917 = getelementptr i8, i8* %0, i64 %4
  %918 = getelementptr i8, i8* %1, i64 %4
  %919 = icmp ugt i8* %918, %0
  %920 = icmp ugt i8* %917, %1
  %921 = and i1 %919, %920
  br i1 %921, label %1020, label %922

922:                                              ; preds = %916
  %923 = icmp ult i64 %4, 32
  br i1 %923, label %1006, label %924

924:                                              ; preds = %922
  %925 = and i64 %4, -32
  %926 = add i64 %925, -32
  %927 = lshr exact i64 %926, 5
  %928 = add nuw nsw i64 %927, 1
  %929 = and i64 %928, 3
  %930 = icmp ult i64 %926, 96
  br i1 %930, label %982, label %931

931:                                              ; preds = %924
  %932 = and i64 %928, 1152921504606846972
  br label %933

933:                                              ; preds = %933, %931
  %934 = phi i64 [ 0, %931 ], [ %979, %933 ]
  %935 = phi i64 [ 0, %931 ], [ %980, %933 ]
  %936 = getelementptr inbounds i8, i8* %1, i64 %934
  %937 = bitcast i8* %936 to <16 x i8>*
  %938 = load <16 x i8>, <16 x i8>* %937, align 1, !tbaa !14, !alias.scope !788
  %939 = getelementptr inbounds i8, i8* %936, i64 16
  %940 = bitcast i8* %939 to <16 x i8>*
  %941 = load <16 x i8>, <16 x i8>* %940, align 1, !tbaa !14, !alias.scope !788
  %942 = getelementptr inbounds i8, i8* %0, i64 %934
  %943 = bitcast i8* %942 to <16 x i8>*
  store <16 x i8> %938, <16 x i8>* %943, align 1, !tbaa !14, !alias.scope !791, !noalias !788
  %944 = getelementptr inbounds i8, i8* %942, i64 16
  %945 = bitcast i8* %944 to <16 x i8>*
  store <16 x i8> %941, <16 x i8>* %945, align 1, !tbaa !14, !alias.scope !791, !noalias !788
  %946 = or i64 %934, 32
  %947 = getelementptr inbounds i8, i8* %1, i64 %946
  %948 = bitcast i8* %947 to <16 x i8>*
  %949 = load <16 x i8>, <16 x i8>* %948, align 1, !tbaa !14, !alias.scope !788
  %950 = getelementptr inbounds i8, i8* %947, i64 16
  %951 = bitcast i8* %950 to <16 x i8>*
  %952 = load <16 x i8>, <16 x i8>* %951, align 1, !tbaa !14, !alias.scope !788
  %953 = getelementptr inbounds i8, i8* %0, i64 %946
  %954 = bitcast i8* %953 to <16 x i8>*
  store <16 x i8> %949, <16 x i8>* %954, align 1, !tbaa !14, !alias.scope !791, !noalias !788
  %955 = getelementptr inbounds i8, i8* %953, i64 16
  %956 = bitcast i8* %955 to <16 x i8>*
  store <16 x i8> %952, <16 x i8>* %956, align 1, !tbaa !14, !alias.scope !791, !noalias !788
  %957 = or i64 %934, 64
  %958 = getelementptr inbounds i8, i8* %1, i64 %957
  %959 = bitcast i8* %958 to <16 x i8>*
  %960 = load <16 x i8>, <16 x i8>* %959, align 1, !tbaa !14, !alias.scope !788
  %961 = getelementptr inbounds i8, i8* %958, i64 16
  %962 = bitcast i8* %961 to <16 x i8>*
  %963 = load <16 x i8>, <16 x i8>* %962, align 1, !tbaa !14, !alias.scope !788
  %964 = getelementptr inbounds i8, i8* %0, i64 %957
  %965 = bitcast i8* %964 to <16 x i8>*
  store <16 x i8> %960, <16 x i8>* %965, align 1, !tbaa !14, !alias.scope !791, !noalias !788
  %966 = getelementptr inbounds i8, i8* %964, i64 16
  %967 = bitcast i8* %966 to <16 x i8>*
  store <16 x i8> %963, <16 x i8>* %967, align 1, !tbaa !14, !alias.scope !791, !noalias !788
  %968 = or i64 %934, 96
  %969 = getelementptr inbounds i8, i8* %1, i64 %968
  %970 = bitcast i8* %969 to <16 x i8>*
  %971 = load <16 x i8>, <16 x i8>* %970, align 1, !tbaa !14, !alias.scope !788
  %972 = getelementptr inbounds i8, i8* %969, i64 16
  %973 = bitcast i8* %972 to <16 x i8>*
  %974 = load <16 x i8>, <16 x i8>* %973, align 1, !tbaa !14, !alias.scope !788
  %975 = getelementptr inbounds i8, i8* %0, i64 %968
  %976 = bitcast i8* %975 to <16 x i8>*
  store <16 x i8> %971, <16 x i8>* %976, align 1, !tbaa !14, !alias.scope !791, !noalias !788
  %977 = getelementptr inbounds i8, i8* %975, i64 16
  %978 = bitcast i8* %977 to <16 x i8>*
  store <16 x i8> %974, <16 x i8>* %978, align 1, !tbaa !14, !alias.scope !791, !noalias !788
  %979 = add nuw i64 %934, 128
  %980 = add i64 %935, 4
  %981 = icmp eq i64 %980, %932
  br i1 %981, label %982, label %933, !llvm.loop !793

982:                                              ; preds = %933, %924
  %983 = phi i64 [ 0, %924 ], [ %979, %933 ]
  %984 = icmp eq i64 %929, 0
  br i1 %984, label %1001, label %985

985:                                              ; preds = %982, %985
  %986 = phi i64 [ %998, %985 ], [ %983, %982 ]
  %987 = phi i64 [ %999, %985 ], [ 0, %982 ]
  %988 = getelementptr inbounds i8, i8* %1, i64 %986
  %989 = bitcast i8* %988 to <16 x i8>*
  %990 = load <16 x i8>, <16 x i8>* %989, align 1, !tbaa !14, !alias.scope !788
  %991 = getelementptr inbounds i8, i8* %988, i64 16
  %992 = bitcast i8* %991 to <16 x i8>*
  %993 = load <16 x i8>, <16 x i8>* %992, align 1, !tbaa !14, !alias.scope !788
  %994 = getelementptr inbounds i8, i8* %0, i64 %986
  %995 = bitcast i8* %994 to <16 x i8>*
  store <16 x i8> %990, <16 x i8>* %995, align 1, !tbaa !14, !alias.scope !791, !noalias !788
  %996 = getelementptr inbounds i8, i8* %994, i64 16
  %997 = bitcast i8* %996 to <16 x i8>*
  store <16 x i8> %993, <16 x i8>* %997, align 1, !tbaa !14, !alias.scope !791, !noalias !788
  %998 = add nuw i64 %986, 32
  %999 = add i64 %987, 1
  %1000 = icmp eq i64 %999, %929
  br i1 %1000, label %1001, label %985, !llvm.loop !794

1001:                                             ; preds = %985, %982
  %1002 = icmp eq i64 %925, %4
  br i1 %1002, label %1219, label %1003

1003:                                             ; preds = %1001
  %1004 = and i64 %4, 24
  %1005 = icmp eq i64 %1004, 0
  br i1 %1005, label %1020, label %1006

1006:                                             ; preds = %922, %1003
  %1007 = phi i64 [ %925, %1003 ], [ 0, %922 ]
  %1008 = and i64 %4, -8
  br label %1009

1009:                                             ; preds = %1009, %1006
  %1010 = phi i64 [ %1007, %1006 ], [ %1016, %1009 ]
  %1011 = getelementptr inbounds i8, i8* %1, i64 %1010
  %1012 = bitcast i8* %1011 to <8 x i8>*
  %1013 = load <8 x i8>, <8 x i8>* %1012, align 1, !tbaa !14
  %1014 = getelementptr inbounds i8, i8* %0, i64 %1010
  %1015 = bitcast i8* %1014 to <8 x i8>*
  store <8 x i8> %1013, <8 x i8>* %1015, align 1, !tbaa !14
  %1016 = add nuw i64 %1010, 8
  %1017 = icmp eq i64 %1016, %1008
  br i1 %1017, label %1018, label %1009, !llvm.loop !795

1018:                                             ; preds = %1009
  %1019 = icmp eq i64 %1008, %4
  br i1 %1019, label %1219, label %1020

1020:                                             ; preds = %916, %914, %1003, %1018
  %1021 = phi i64 [ 0, %914 ], [ 0, %916 ], [ %925, %1003 ], [ %1008, %1018 ]
  %1022 = xor i64 %1021, -1
  %1023 = add i64 %1022, %4
  %1024 = and i64 %4, 3
  %1025 = icmp eq i64 %1024, 0
  br i1 %1025, label %1035, label %1026

1026:                                             ; preds = %1020, %1026
  %1027 = phi i64 [ %1032, %1026 ], [ %1021, %1020 ]
  %1028 = phi i64 [ %1033, %1026 ], [ 0, %1020 ]
  %1029 = getelementptr inbounds i8, i8* %1, i64 %1027
  %1030 = load i8, i8* %1029, align 1, !tbaa !14
  %1031 = getelementptr inbounds i8, i8* %0, i64 %1027
  store i8 %1030, i8* %1031, align 1, !tbaa !14
  %1032 = add nuw i64 %1027, 1
  %1033 = add i64 %1028, 1
  %1034 = icmp eq i64 %1033, %1024
  br i1 %1034, label %1035, label %1026, !llvm.loop !796

1035:                                             ; preds = %1026, %1020
  %1036 = phi i64 [ %1021, %1020 ], [ %1032, %1026 ]
  %1037 = icmp ult i64 %1023, 3
  br i1 %1037, label %1219, label %1371

1038:                                             ; preds = %909, %1167, %871, %893, %775
  %1039 = icmp ugt i64 %3, %4
  br i1 %1039, label %1040, label %2038

1040:                                             ; preds = %1038
  %1041 = sub i64 %3, %4
  %1042 = icmp ult i64 %1041, 8
  br i1 %1042, label %1141, label %1043

1043:                                             ; preds = %1040
  %1044 = getelementptr i8, i8* %0, i64 %4
  %1045 = getelementptr i8, i8* %0, i64 %3
  %1046 = sub i64 %3, %4
  %1047 = getelementptr i8, i8* %1, i64 %1046
  %1048 = getelementptr i8, i8* %1, i64 %4
  %1049 = getelementptr i8, i8* %1, i64 %3
  %1050 = getelementptr i8, i8* %2, i64 %4
  %1051 = getelementptr i8, i8* %2, i64 %3
  %1052 = icmp ult i8* %1044, %1047
  %1053 = icmp ugt i8* %1045, %1
  %1054 = and i1 %1052, %1053
  %1055 = icmp ult i8* %1044, %1049
  %1056 = icmp ult i8* %1048, %1045
  %1057 = and i1 %1055, %1056
  %1058 = or i1 %1054, %1057
  %1059 = icmp ult i8* %1044, %1051
  %1060 = icmp ult i8* %1050, %1045
  %1061 = and i1 %1059, %1060
  %1062 = or i1 %1058, %1061
  br i1 %1062, label %1141, label %1063

1063:                                             ; preds = %1043
  %1064 = icmp ult i64 %1041, 32
  br i1 %1064, label %1112, label %1065

1065:                                             ; preds = %1063
  %1066 = and i64 %1041, -32
  br label %1067

1067:                                             ; preds = %1067, %1065
  %1068 = phi i64 [ 0, %1065 ], [ %1104, %1067 ]
  %1069 = add i64 %1068, %4
  %1070 = getelementptr inbounds i8, i8* %1, i64 %1069
  %1071 = bitcast i8* %1070 to <16 x i8>*
  %1072 = load <16 x i8>, <16 x i8>* %1071, align 1, !tbaa !14, !alias.scope !797
  %1073 = getelementptr inbounds i8, i8* %1070, i64 16
  %1074 = bitcast i8* %1073 to <16 x i8>*
  %1075 = load <16 x i8>, <16 x i8>* %1074, align 1, !tbaa !14, !alias.scope !797
  %1076 = getelementptr inbounds i8, i8* %1, i64 %1068
  %1077 = bitcast i8* %1076 to <16 x i8>*
  %1078 = load <16 x i8>, <16 x i8>* %1077, align 1, !tbaa !14, !alias.scope !800
  %1079 = getelementptr inbounds i8, i8* %1076, i64 16
  %1080 = bitcast i8* %1079 to <16 x i8>*
  %1081 = load <16 x i8>, <16 x i8>* %1080, align 1, !tbaa !14, !alias.scope !800
  %1082 = zext <16 x i8> %1078 to <16 x i16>
  %1083 = zext <16 x i8> %1081 to <16 x i16>
  %1084 = getelementptr inbounds i8, i8* %2, i64 %1069
  %1085 = bitcast i8* %1084 to <16 x i8>*
  %1086 = load <16 x i8>, <16 x i8>* %1085, align 1, !tbaa !14, !alias.scope !802
  %1087 = getelementptr inbounds i8, i8* %1084, i64 16
  %1088 = bitcast i8* %1087 to <16 x i8>*
  %1089 = load <16 x i8>, <16 x i8>* %1088, align 1, !tbaa !14, !alias.scope !802
  %1090 = zext <16 x i8> %1086 to <16 x i16>
  %1091 = zext <16 x i8> %1089 to <16 x i16>
  %1092 = add nuw nsw <16 x i16> %1090, %1082
  %1093 = add nuw nsw <16 x i16> %1091, %1083
  %1094 = lshr <16 x i16> %1092, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %1095 = lshr <16 x i16> %1093, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %1096 = trunc <16 x i16> %1094 to <16 x i8>
  %1097 = trunc <16 x i16> %1095 to <16 x i8>
  %1098 = sub <16 x i8> %1072, %1096
  %1099 = sub <16 x i8> %1075, %1097
  %1100 = getelementptr inbounds i8, i8* %0, i64 %1069
  %1101 = bitcast i8* %1100 to <16 x i8>*
  store <16 x i8> %1098, <16 x i8>* %1101, align 1, !tbaa !14, !alias.scope !804, !noalias !806
  %1102 = getelementptr inbounds i8, i8* %1100, i64 16
  %1103 = bitcast i8* %1102 to <16 x i8>*
  store <16 x i8> %1099, <16 x i8>* %1103, align 1, !tbaa !14, !alias.scope !804, !noalias !806
  %1104 = add nuw i64 %1068, 32
  %1105 = icmp eq i64 %1104, %1066
  br i1 %1105, label %1106, label %1067, !llvm.loop !807

1106:                                             ; preds = %1067
  %1107 = icmp eq i64 %1041, %1066
  br i1 %1107, label %2038, label %1108

1108:                                             ; preds = %1106
  %1109 = add i64 %1066, %4
  %1110 = and i64 %1041, 24
  %1111 = icmp eq i64 %1110, 0
  br i1 %1111, label %1141, label %1112

1112:                                             ; preds = %1063, %1108
  %1113 = phi i64 [ %1066, %1108 ], [ 0, %1063 ]
  %1114 = sub i64 %3, %4
  %1115 = and i64 %1114, -8
  %1116 = add i64 %1115, %4
  br label %1117

1117:                                             ; preds = %1117, %1112
  %1118 = phi i64 [ %1113, %1112 ], [ %1137, %1117 ]
  %1119 = add i64 %1118, %4
  %1120 = getelementptr inbounds i8, i8* %1, i64 %1119
  %1121 = bitcast i8* %1120 to <8 x i8>*
  %1122 = load <8 x i8>, <8 x i8>* %1121, align 1, !tbaa !14
  %1123 = getelementptr inbounds i8, i8* %1, i64 %1118
  %1124 = bitcast i8* %1123 to <8 x i8>*
  %1125 = load <8 x i8>, <8 x i8>* %1124, align 1, !tbaa !14
  %1126 = zext <8 x i8> %1125 to <8 x i16>
  %1127 = getelementptr inbounds i8, i8* %2, i64 %1119
  %1128 = bitcast i8* %1127 to <8 x i8>*
  %1129 = load <8 x i8>, <8 x i8>* %1128, align 1, !tbaa !14
  %1130 = zext <8 x i8> %1129 to <8 x i16>
  %1131 = add nuw nsw <8 x i16> %1130, %1126
  %1132 = lshr <8 x i16> %1131, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %1133 = trunc <8 x i16> %1132 to <8 x i8>
  %1134 = sub <8 x i8> %1122, %1133
  %1135 = getelementptr inbounds i8, i8* %0, i64 %1119
  %1136 = bitcast i8* %1135 to <8 x i8>*
  store <8 x i8> %1134, <8 x i8>* %1136, align 1, !tbaa !14
  %1137 = add nuw i64 %1118, 8
  %1138 = icmp eq i64 %1137, %1115
  br i1 %1138, label %1139, label %1117, !llvm.loop !808

1139:                                             ; preds = %1117
  %1140 = icmp eq i64 %1114, %1115
  br i1 %1140, label %2038, label %1141

1141:                                             ; preds = %1043, %1040, %1108, %1139
  %1142 = phi i64 [ %4, %1040 ], [ %4, %1043 ], [ %1109, %1108 ], [ %1116, %1139 ]
  %1143 = sub i64 %3, %1142
  %1144 = xor i64 %1142, -1
  %1145 = and i64 %1143, 1
  %1146 = icmp eq i64 %1145, 0
  br i1 %1146, label %1163, label %1147

1147:                                             ; preds = %1141
  %1148 = getelementptr inbounds i8, i8* %1, i64 %1142
  %1149 = load i8, i8* %1148, align 1, !tbaa !14
  %1150 = sub nuw i64 %1142, %4
  %1151 = getelementptr inbounds i8, i8* %1, i64 %1150
  %1152 = load i8, i8* %1151, align 1, !tbaa !14
  %1153 = zext i8 %1152 to i16
  %1154 = getelementptr inbounds i8, i8* %2, i64 %1142
  %1155 = load i8, i8* %1154, align 1, !tbaa !14
  %1156 = zext i8 %1155 to i16
  %1157 = add nuw nsw i16 %1156, %1153
  %1158 = lshr i16 %1157, 1
  %1159 = trunc i16 %1158 to i8
  %1160 = sub i8 %1149, %1159
  %1161 = getelementptr inbounds i8, i8* %0, i64 %1142
  store i8 %1160, i8* %1161, align 1, !tbaa !14
  %1162 = add nuw i64 %1142, 1
  br label %1163

1163:                                             ; preds = %1147, %1141
  %1164 = phi i64 [ %1142, %1141 ], [ %1162, %1147 ]
  %1165 = sub i64 0, %3
  %1166 = icmp eq i64 %1144, %1165
  br i1 %1166, label %2038, label %1186

1167:                                             ; preds = %909, %1167
  %1168 = phi i64 [ %1184, %1167 ], [ %910, %909 ]
  %1169 = getelementptr inbounds i8, i8* %1, i64 %1168
  %1170 = load i8, i8* %1169, align 1, !tbaa !14
  %1171 = getelementptr inbounds i8, i8* %2, i64 %1168
  %1172 = load i8, i8* %1171, align 1, !tbaa !14
  %1173 = lshr i8 %1172, 1
  %1174 = sub i8 %1170, %1173
  %1175 = getelementptr inbounds i8, i8* %0, i64 %1168
  store i8 %1174, i8* %1175, align 1, !tbaa !14
  %1176 = add nuw i64 %1168, 1
  %1177 = getelementptr inbounds i8, i8* %1, i64 %1176
  %1178 = load i8, i8* %1177, align 1, !tbaa !14
  %1179 = getelementptr inbounds i8, i8* %2, i64 %1176
  %1180 = load i8, i8* %1179, align 1, !tbaa !14
  %1181 = lshr i8 %1180, 1
  %1182 = sub i8 %1178, %1181
  %1183 = getelementptr inbounds i8, i8* %0, i64 %1176
  store i8 %1182, i8* %1183, align 1, !tbaa !14
  %1184 = add nuw i64 %1168, 2
  %1185 = icmp eq i64 %1184, %4
  br i1 %1185, label %1038, label %1167, !llvm.loop !809

1186:                                             ; preds = %1163, %1186
  %1187 = phi i64 [ %1217, %1186 ], [ %1164, %1163 ]
  %1188 = getelementptr inbounds i8, i8* %1, i64 %1187
  %1189 = load i8, i8* %1188, align 1, !tbaa !14
  %1190 = sub nuw i64 %1187, %4
  %1191 = getelementptr inbounds i8, i8* %1, i64 %1190
  %1192 = load i8, i8* %1191, align 1, !tbaa !14
  %1193 = zext i8 %1192 to i16
  %1194 = getelementptr inbounds i8, i8* %2, i64 %1187
  %1195 = load i8, i8* %1194, align 1, !tbaa !14
  %1196 = zext i8 %1195 to i16
  %1197 = add nuw nsw i16 %1196, %1193
  %1198 = lshr i16 %1197, 1
  %1199 = trunc i16 %1198 to i8
  %1200 = sub i8 %1189, %1199
  %1201 = getelementptr inbounds i8, i8* %0, i64 %1187
  store i8 %1200, i8* %1201, align 1, !tbaa !14
  %1202 = add nuw i64 %1187, 1
  %1203 = getelementptr inbounds i8, i8* %1, i64 %1202
  %1204 = load i8, i8* %1203, align 1, !tbaa !14
  %1205 = sub nuw i64 %1202, %4
  %1206 = getelementptr inbounds i8, i8* %1, i64 %1205
  %1207 = load i8, i8* %1206, align 1, !tbaa !14
  %1208 = zext i8 %1207 to i16
  %1209 = getelementptr inbounds i8, i8* %2, i64 %1202
  %1210 = load i8, i8* %1209, align 1, !tbaa !14
  %1211 = zext i8 %1210 to i16
  %1212 = add nuw nsw i16 %1211, %1208
  %1213 = lshr i16 %1212, 1
  %1214 = trunc i16 %1213 to i8
  %1215 = sub i8 %1204, %1214
  %1216 = getelementptr inbounds i8, i8* %0, i64 %1202
  store i8 %1215, i8* %1216, align 1, !tbaa !14
  %1217 = add nuw i64 %1187, 2
  %1218 = icmp eq i64 %1217, %3
  br i1 %1218, label %2038, label %1186, !llvm.loop !810

1219:                                             ; preds = %1035, %1371, %1001, %1018, %913
  %1220 = icmp ugt i64 %3, %4
  br i1 %1220, label %1221, label %2038

1221:                                             ; preds = %1219
  %1222 = sub i64 %3, %4
  %1223 = icmp ult i64 %1222, 8
  br i1 %1223, label %1351, label %1224

1224:                                             ; preds = %1221
  %1225 = getelementptr i8, i8* %0, i64 %4
  %1226 = getelementptr i8, i8* %0, i64 %3
  %1227 = sub i64 %3, %4
  %1228 = getelementptr i8, i8* %1, i64 %1227
  %1229 = getelementptr i8, i8* %1, i64 %4
  %1230 = getelementptr i8, i8* %1, i64 %3
  %1231 = icmp ult i8* %1225, %1228
  %1232 = icmp ugt i8* %1226, %1
  %1233 = and i1 %1231, %1232
  %1234 = icmp ult i8* %1225, %1230
  %1235 = icmp ult i8* %1229, %1226
  %1236 = and i1 %1234, %1235
  %1237 = or i1 %1233, %1236
  br i1 %1237, label %1351, label %1238

1238:                                             ; preds = %1224
  %1239 = icmp ult i64 %1222, 32
  br i1 %1239, label %1329, label %1240

1240:                                             ; preds = %1238
  %1241 = and i64 %1222, -32
  %1242 = add i64 %1241, -32
  %1243 = lshr exact i64 %1242, 5
  %1244 = add nuw nsw i64 %1243, 1
  %1245 = and i64 %1244, 1
  %1246 = icmp eq i64 %1242, 0
  br i1 %1246, label %1298, label %1247

1247:                                             ; preds = %1240
  %1248 = and i64 %1244, 1152921504606846974
  br label %1249

1249:                                             ; preds = %1249, %1247
  %1250 = phi i64 [ 0, %1247 ], [ %1295, %1249 ]
  %1251 = phi i64 [ 0, %1247 ], [ %1296, %1249 ]
  %1252 = add i64 %1250, %4
  %1253 = getelementptr inbounds i8, i8* %1, i64 %1252
  %1254 = bitcast i8* %1253 to <16 x i8>*
  %1255 = load <16 x i8>, <16 x i8>* %1254, align 1, !tbaa !14, !alias.scope !811
  %1256 = getelementptr inbounds i8, i8* %1253, i64 16
  %1257 = bitcast i8* %1256 to <16 x i8>*
  %1258 = load <16 x i8>, <16 x i8>* %1257, align 1, !tbaa !14, !alias.scope !811
  %1259 = getelementptr inbounds i8, i8* %1, i64 %1250
  %1260 = bitcast i8* %1259 to <16 x i8>*
  %1261 = load <16 x i8>, <16 x i8>* %1260, align 1, !tbaa !14, !alias.scope !814
  %1262 = getelementptr inbounds i8, i8* %1259, i64 16
  %1263 = bitcast i8* %1262 to <16 x i8>*
  %1264 = load <16 x i8>, <16 x i8>* %1263, align 1, !tbaa !14, !alias.scope !814
  %1265 = lshr <16 x i8> %1261, <i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1>
  %1266 = lshr <16 x i8> %1264, <i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1>
  %1267 = sub <16 x i8> %1255, %1265
  %1268 = sub <16 x i8> %1258, %1266
  %1269 = getelementptr inbounds i8, i8* %0, i64 %1252
  %1270 = bitcast i8* %1269 to <16 x i8>*
  store <16 x i8> %1267, <16 x i8>* %1270, align 1, !tbaa !14, !alias.scope !816, !noalias !818
  %1271 = getelementptr inbounds i8, i8* %1269, i64 16
  %1272 = bitcast i8* %1271 to <16 x i8>*
  store <16 x i8> %1268, <16 x i8>* %1272, align 1, !tbaa !14, !alias.scope !816, !noalias !818
  %1273 = or i64 %1250, 32
  %1274 = add i64 %1273, %4
  %1275 = getelementptr inbounds i8, i8* %1, i64 %1274
  %1276 = bitcast i8* %1275 to <16 x i8>*
  %1277 = load <16 x i8>, <16 x i8>* %1276, align 1, !tbaa !14, !alias.scope !811
  %1278 = getelementptr inbounds i8, i8* %1275, i64 16
  %1279 = bitcast i8* %1278 to <16 x i8>*
  %1280 = load <16 x i8>, <16 x i8>* %1279, align 1, !tbaa !14, !alias.scope !811
  %1281 = getelementptr inbounds i8, i8* %1, i64 %1273
  %1282 = bitcast i8* %1281 to <16 x i8>*
  %1283 = load <16 x i8>, <16 x i8>* %1282, align 1, !tbaa !14, !alias.scope !814
  %1284 = getelementptr inbounds i8, i8* %1281, i64 16
  %1285 = bitcast i8* %1284 to <16 x i8>*
  %1286 = load <16 x i8>, <16 x i8>* %1285, align 1, !tbaa !14, !alias.scope !814
  %1287 = lshr <16 x i8> %1283, <i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1>
  %1288 = lshr <16 x i8> %1286, <i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1>
  %1289 = sub <16 x i8> %1277, %1287
  %1290 = sub <16 x i8> %1280, %1288
  %1291 = getelementptr inbounds i8, i8* %0, i64 %1274
  %1292 = bitcast i8* %1291 to <16 x i8>*
  store <16 x i8> %1289, <16 x i8>* %1292, align 1, !tbaa !14, !alias.scope !816, !noalias !818
  %1293 = getelementptr inbounds i8, i8* %1291, i64 16
  %1294 = bitcast i8* %1293 to <16 x i8>*
  store <16 x i8> %1290, <16 x i8>* %1294, align 1, !tbaa !14, !alias.scope !816, !noalias !818
  %1295 = add nuw i64 %1250, 64
  %1296 = add i64 %1251, 2
  %1297 = icmp eq i64 %1296, %1248
  br i1 %1297, label %1298, label %1249, !llvm.loop !819

1298:                                             ; preds = %1249, %1240
  %1299 = phi i64 [ 0, %1240 ], [ %1295, %1249 ]
  %1300 = icmp eq i64 %1245, 0
  br i1 %1300, label %1323, label %1301

1301:                                             ; preds = %1298
  %1302 = add i64 %1299, %4
  %1303 = getelementptr inbounds i8, i8* %1, i64 %1302
  %1304 = bitcast i8* %1303 to <16 x i8>*
  %1305 = load <16 x i8>, <16 x i8>* %1304, align 1, !tbaa !14, !alias.scope !811
  %1306 = getelementptr inbounds i8, i8* %1303, i64 16
  %1307 = bitcast i8* %1306 to <16 x i8>*
  %1308 = load <16 x i8>, <16 x i8>* %1307, align 1, !tbaa !14, !alias.scope !811
  %1309 = getelementptr inbounds i8, i8* %1, i64 %1299
  %1310 = bitcast i8* %1309 to <16 x i8>*
  %1311 = load <16 x i8>, <16 x i8>* %1310, align 1, !tbaa !14, !alias.scope !814
  %1312 = getelementptr inbounds i8, i8* %1309, i64 16
  %1313 = bitcast i8* %1312 to <16 x i8>*
  %1314 = load <16 x i8>, <16 x i8>* %1313, align 1, !tbaa !14, !alias.scope !814
  %1315 = lshr <16 x i8> %1311, <i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1>
  %1316 = lshr <16 x i8> %1314, <i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1>
  %1317 = sub <16 x i8> %1305, %1315
  %1318 = sub <16 x i8> %1308, %1316
  %1319 = getelementptr inbounds i8, i8* %0, i64 %1302
  %1320 = bitcast i8* %1319 to <16 x i8>*
  store <16 x i8> %1317, <16 x i8>* %1320, align 1, !tbaa !14, !alias.scope !816, !noalias !818
  %1321 = getelementptr inbounds i8, i8* %1319, i64 16
  %1322 = bitcast i8* %1321 to <16 x i8>*
  store <16 x i8> %1318, <16 x i8>* %1322, align 1, !tbaa !14, !alias.scope !816, !noalias !818
  br label %1323

1323:                                             ; preds = %1298, %1301
  %1324 = icmp eq i64 %1222, %1241
  br i1 %1324, label %2038, label %1325

1325:                                             ; preds = %1323
  %1326 = add i64 %1241, %4
  %1327 = and i64 %1222, 24
  %1328 = icmp eq i64 %1327, 0
  br i1 %1328, label %1351, label %1329

1329:                                             ; preds = %1238, %1325
  %1330 = phi i64 [ %1241, %1325 ], [ 0, %1238 ]
  %1331 = sub i64 %3, %4
  %1332 = and i64 %1331, -8
  %1333 = add i64 %1332, %4
  br label %1334

1334:                                             ; preds = %1334, %1329
  %1335 = phi i64 [ %1330, %1329 ], [ %1347, %1334 ]
  %1336 = add i64 %1335, %4
  %1337 = getelementptr inbounds i8, i8* %1, i64 %1336
  %1338 = bitcast i8* %1337 to <8 x i8>*
  %1339 = load <8 x i8>, <8 x i8>* %1338, align 1, !tbaa !14
  %1340 = getelementptr inbounds i8, i8* %1, i64 %1335
  %1341 = bitcast i8* %1340 to <8 x i8>*
  %1342 = load <8 x i8>, <8 x i8>* %1341, align 1, !tbaa !14
  %1343 = lshr <8 x i8> %1342, <i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1>
  %1344 = sub <8 x i8> %1339, %1343
  %1345 = getelementptr inbounds i8, i8* %0, i64 %1336
  %1346 = bitcast i8* %1345 to <8 x i8>*
  store <8 x i8> %1344, <8 x i8>* %1346, align 1, !tbaa !14
  %1347 = add nuw i64 %1335, 8
  %1348 = icmp eq i64 %1347, %1332
  br i1 %1348, label %1349, label %1334, !llvm.loop !820

1349:                                             ; preds = %1334
  %1350 = icmp eq i64 %1331, %1332
  br i1 %1350, label %2038, label %1351

1351:                                             ; preds = %1224, %1221, %1325, %1349
  %1352 = phi i64 [ %4, %1221 ], [ %4, %1224 ], [ %1326, %1325 ], [ %1333, %1349 ]
  %1353 = sub i64 %3, %1352
  %1354 = xor i64 %1352, -1
  %1355 = and i64 %1353, 1
  %1356 = icmp eq i64 %1355, 0
  br i1 %1356, label %1367, label %1357

1357:                                             ; preds = %1351
  %1358 = getelementptr inbounds i8, i8* %1, i64 %1352
  %1359 = load i8, i8* %1358, align 1, !tbaa !14
  %1360 = sub nuw i64 %1352, %4
  %1361 = getelementptr inbounds i8, i8* %1, i64 %1360
  %1362 = load i8, i8* %1361, align 1, !tbaa !14
  %1363 = lshr i8 %1362, 1
  %1364 = sub i8 %1359, %1363
  %1365 = getelementptr inbounds i8, i8* %0, i64 %1352
  store i8 %1364, i8* %1365, align 1, !tbaa !14
  %1366 = add nuw i64 %1352, 1
  br label %1367

1367:                                             ; preds = %1357, %1351
  %1368 = phi i64 [ %1352, %1351 ], [ %1366, %1357 ]
  %1369 = sub i64 0, %3
  %1370 = icmp eq i64 %1354, %1369
  br i1 %1370, label %2038, label %1390

1371:                                             ; preds = %1035, %1371
  %1372 = phi i64 [ %1388, %1371 ], [ %1036, %1035 ]
  %1373 = getelementptr inbounds i8, i8* %1, i64 %1372
  %1374 = load i8, i8* %1373, align 1, !tbaa !14
  %1375 = getelementptr inbounds i8, i8* %0, i64 %1372
  store i8 %1374, i8* %1375, align 1, !tbaa !14
  %1376 = add nuw i64 %1372, 1
  %1377 = getelementptr inbounds i8, i8* %1, i64 %1376
  %1378 = load i8, i8* %1377, align 1, !tbaa !14
  %1379 = getelementptr inbounds i8, i8* %0, i64 %1376
  store i8 %1378, i8* %1379, align 1, !tbaa !14
  %1380 = add nuw i64 %1372, 2
  %1381 = getelementptr inbounds i8, i8* %1, i64 %1380
  %1382 = load i8, i8* %1381, align 1, !tbaa !14
  %1383 = getelementptr inbounds i8, i8* %0, i64 %1380
  store i8 %1382, i8* %1383, align 1, !tbaa !14
  %1384 = add nuw i64 %1372, 3
  %1385 = getelementptr inbounds i8, i8* %1, i64 %1384
  %1386 = load i8, i8* %1385, align 1, !tbaa !14
  %1387 = getelementptr inbounds i8, i8* %0, i64 %1384
  store i8 %1386, i8* %1387, align 1, !tbaa !14
  %1388 = add nuw i64 %1372, 4
  %1389 = icmp eq i64 %1388, %4
  br i1 %1389, label %1219, label %1371, !llvm.loop !821

1390:                                             ; preds = %1367, %1390
  %1391 = phi i64 [ %1409, %1390 ], [ %1368, %1367 ]
  %1392 = getelementptr inbounds i8, i8* %1, i64 %1391
  %1393 = load i8, i8* %1392, align 1, !tbaa !14
  %1394 = sub nuw i64 %1391, %4
  %1395 = getelementptr inbounds i8, i8* %1, i64 %1394
  %1396 = load i8, i8* %1395, align 1, !tbaa !14
  %1397 = lshr i8 %1396, 1
  %1398 = sub i8 %1393, %1397
  %1399 = getelementptr inbounds i8, i8* %0, i64 %1391
  store i8 %1398, i8* %1399, align 1, !tbaa !14
  %1400 = add nuw i64 %1391, 1
  %1401 = getelementptr inbounds i8, i8* %1, i64 %1400
  %1402 = load i8, i8* %1401, align 1, !tbaa !14
  %1403 = sub nuw i64 %1400, %4
  %1404 = getelementptr inbounds i8, i8* %1, i64 %1403
  %1405 = load i8, i8* %1404, align 1, !tbaa !14
  %1406 = lshr i8 %1405, 1
  %1407 = sub i8 %1402, %1406
  %1408 = getelementptr inbounds i8, i8* %0, i64 %1400
  store i8 %1407, i8* %1408, align 1, !tbaa !14
  %1409 = add nuw i64 %1391, 2
  %1410 = icmp eq i64 %1409, %3
  br i1 %1410, label %2038, label %1390, !llvm.loop !822

1411:                                             ; preds = %6
  %1412 = icmp eq i8* %2, null
  %1413 = icmp eq i64 %4, 0
  br i1 %1412, label %1548, label %1414

1414:                                             ; preds = %1411
  br i1 %1413, label %1673, label %1415

1415:                                             ; preds = %1414
  %1416 = icmp ult i64 %4, 8
  br i1 %1416, label %1527, label %1417

1417:                                             ; preds = %1415
  %1418 = getelementptr i8, i8* %0, i64 %4
  %1419 = getelementptr i8, i8* %1, i64 %4
  %1420 = getelementptr i8, i8* %2, i64 %4
  %1421 = icmp ugt i8* %1419, %0
  %1422 = icmp ugt i8* %1418, %1
  %1423 = and i1 %1421, %1422
  %1424 = icmp ugt i8* %1420, %0
  %1425 = icmp ugt i8* %1418, %2
  %1426 = and i1 %1424, %1425
  %1427 = or i1 %1423, %1426
  br i1 %1427, label %1527, label %1428

1428:                                             ; preds = %1417
  %1429 = icmp ult i64 %4, 32
  br i1 %1429, label %1509, label %1430

1430:                                             ; preds = %1428
  %1431 = and i64 %4, -32
  %1432 = add i64 %1431, -32
  %1433 = lshr exact i64 %1432, 5
  %1434 = add nuw nsw i64 %1433, 1
  %1435 = and i64 %1434, 1
  %1436 = icmp eq i64 %1432, 0
  br i1 %1436, label %1482, label %1437

1437:                                             ; preds = %1430
  %1438 = and i64 %1434, 1152921504606846974
  br label %1439

1439:                                             ; preds = %1439, %1437
  %1440 = phi i64 [ 0, %1437 ], [ %1479, %1439 ]
  %1441 = phi i64 [ 0, %1437 ], [ %1480, %1439 ]
  %1442 = getelementptr inbounds i8, i8* %1, i64 %1440
  %1443 = bitcast i8* %1442 to <16 x i8>*
  %1444 = load <16 x i8>, <16 x i8>* %1443, align 1, !tbaa !14, !alias.scope !823
  %1445 = getelementptr inbounds i8, i8* %1442, i64 16
  %1446 = bitcast i8* %1445 to <16 x i8>*
  %1447 = load <16 x i8>, <16 x i8>* %1446, align 1, !tbaa !14, !alias.scope !823
  %1448 = getelementptr inbounds i8, i8* %2, i64 %1440
  %1449 = bitcast i8* %1448 to <16 x i8>*
  %1450 = load <16 x i8>, <16 x i8>* %1449, align 1, !tbaa !14, !alias.scope !826
  %1451 = getelementptr inbounds i8, i8* %1448, i64 16
  %1452 = bitcast i8* %1451 to <16 x i8>*
  %1453 = load <16 x i8>, <16 x i8>* %1452, align 1, !tbaa !14, !alias.scope !826
  %1454 = sub <16 x i8> %1444, %1450
  %1455 = sub <16 x i8> %1447, %1453
  %1456 = getelementptr inbounds i8, i8* %0, i64 %1440
  %1457 = bitcast i8* %1456 to <16 x i8>*
  store <16 x i8> %1454, <16 x i8>* %1457, align 1, !tbaa !14, !alias.scope !828, !noalias !830
  %1458 = getelementptr inbounds i8, i8* %1456, i64 16
  %1459 = bitcast i8* %1458 to <16 x i8>*
  store <16 x i8> %1455, <16 x i8>* %1459, align 1, !tbaa !14, !alias.scope !828, !noalias !830
  %1460 = or i64 %1440, 32
  %1461 = getelementptr inbounds i8, i8* %1, i64 %1460
  %1462 = bitcast i8* %1461 to <16 x i8>*
  %1463 = load <16 x i8>, <16 x i8>* %1462, align 1, !tbaa !14, !alias.scope !823
  %1464 = getelementptr inbounds i8, i8* %1461, i64 16
  %1465 = bitcast i8* %1464 to <16 x i8>*
  %1466 = load <16 x i8>, <16 x i8>* %1465, align 1, !tbaa !14, !alias.scope !823
  %1467 = getelementptr inbounds i8, i8* %2, i64 %1460
  %1468 = bitcast i8* %1467 to <16 x i8>*
  %1469 = load <16 x i8>, <16 x i8>* %1468, align 1, !tbaa !14, !alias.scope !826
  %1470 = getelementptr inbounds i8, i8* %1467, i64 16
  %1471 = bitcast i8* %1470 to <16 x i8>*
  %1472 = load <16 x i8>, <16 x i8>* %1471, align 1, !tbaa !14, !alias.scope !826
  %1473 = sub <16 x i8> %1463, %1469
  %1474 = sub <16 x i8> %1466, %1472
  %1475 = getelementptr inbounds i8, i8* %0, i64 %1460
  %1476 = bitcast i8* %1475 to <16 x i8>*
  store <16 x i8> %1473, <16 x i8>* %1476, align 1, !tbaa !14, !alias.scope !828, !noalias !830
  %1477 = getelementptr inbounds i8, i8* %1475, i64 16
  %1478 = bitcast i8* %1477 to <16 x i8>*
  store <16 x i8> %1474, <16 x i8>* %1478, align 1, !tbaa !14, !alias.scope !828, !noalias !830
  %1479 = add nuw i64 %1440, 64
  %1480 = add i64 %1441, 2
  %1481 = icmp eq i64 %1480, %1438
  br i1 %1481, label %1482, label %1439, !llvm.loop !831

1482:                                             ; preds = %1439, %1430
  %1483 = phi i64 [ 0, %1430 ], [ %1479, %1439 ]
  %1484 = icmp eq i64 %1435, 0
  br i1 %1484, label %1504, label %1485

1485:                                             ; preds = %1482
  %1486 = getelementptr inbounds i8, i8* %1, i64 %1483
  %1487 = bitcast i8* %1486 to <16 x i8>*
  %1488 = load <16 x i8>, <16 x i8>* %1487, align 1, !tbaa !14, !alias.scope !823
  %1489 = getelementptr inbounds i8, i8* %1486, i64 16
  %1490 = bitcast i8* %1489 to <16 x i8>*
  %1491 = load <16 x i8>, <16 x i8>* %1490, align 1, !tbaa !14, !alias.scope !823
  %1492 = getelementptr inbounds i8, i8* %2, i64 %1483
  %1493 = bitcast i8* %1492 to <16 x i8>*
  %1494 = load <16 x i8>, <16 x i8>* %1493, align 1, !tbaa !14, !alias.scope !826
  %1495 = getelementptr inbounds i8, i8* %1492, i64 16
  %1496 = bitcast i8* %1495 to <16 x i8>*
  %1497 = load <16 x i8>, <16 x i8>* %1496, align 1, !tbaa !14, !alias.scope !826
  %1498 = sub <16 x i8> %1488, %1494
  %1499 = sub <16 x i8> %1491, %1497
  %1500 = getelementptr inbounds i8, i8* %0, i64 %1483
  %1501 = bitcast i8* %1500 to <16 x i8>*
  store <16 x i8> %1498, <16 x i8>* %1501, align 1, !tbaa !14, !alias.scope !828, !noalias !830
  %1502 = getelementptr inbounds i8, i8* %1500, i64 16
  %1503 = bitcast i8* %1502 to <16 x i8>*
  store <16 x i8> %1499, <16 x i8>* %1503, align 1, !tbaa !14, !alias.scope !828, !noalias !830
  br label %1504

1504:                                             ; preds = %1482, %1485
  %1505 = icmp eq i64 %1431, %4
  br i1 %1505, label %1673, label %1506

1506:                                             ; preds = %1504
  %1507 = and i64 %4, 24
  %1508 = icmp eq i64 %1507, 0
  br i1 %1508, label %1527, label %1509

1509:                                             ; preds = %1428, %1506
  %1510 = phi i64 [ %1431, %1506 ], [ 0, %1428 ]
  %1511 = and i64 %4, -8
  br label %1512

1512:                                             ; preds = %1512, %1509
  %1513 = phi i64 [ %1510, %1509 ], [ %1523, %1512 ]
  %1514 = getelementptr inbounds i8, i8* %1, i64 %1513
  %1515 = bitcast i8* %1514 to <8 x i8>*
  %1516 = load <8 x i8>, <8 x i8>* %1515, align 1, !tbaa !14
  %1517 = getelementptr inbounds i8, i8* %2, i64 %1513
  %1518 = bitcast i8* %1517 to <8 x i8>*
  %1519 = load <8 x i8>, <8 x i8>* %1518, align 1, !tbaa !14
  %1520 = sub <8 x i8> %1516, %1519
  %1521 = getelementptr inbounds i8, i8* %0, i64 %1513
  %1522 = bitcast i8* %1521 to <8 x i8>*
  store <8 x i8> %1520, <8 x i8>* %1522, align 1, !tbaa !14
  %1523 = add nuw i64 %1513, 8
  %1524 = icmp eq i64 %1523, %1511
  br i1 %1524, label %1525, label %1512, !llvm.loop !832

1525:                                             ; preds = %1512
  %1526 = icmp eq i64 %1511, %4
  br i1 %1526, label %1673, label %1527

1527:                                             ; preds = %1417, %1415, %1506, %1525
  %1528 = phi i64 [ 0, %1415 ], [ 0, %1417 ], [ %1431, %1506 ], [ %1511, %1525 ]
  %1529 = xor i64 %1528, -1
  %1530 = add i64 %1529, %4
  %1531 = and i64 %4, 3
  %1532 = icmp eq i64 %1531, 0
  br i1 %1532, label %1545, label %1533

1533:                                             ; preds = %1527, %1533
  %1534 = phi i64 [ %1542, %1533 ], [ %1528, %1527 ]
  %1535 = phi i64 [ %1543, %1533 ], [ 0, %1527 ]
  %1536 = getelementptr inbounds i8, i8* %1, i64 %1534
  %1537 = load i8, i8* %1536, align 1, !tbaa !14
  %1538 = getelementptr inbounds i8, i8* %2, i64 %1534
  %1539 = load i8, i8* %1538, align 1, !tbaa !14
  %1540 = sub i8 %1537, %1539
  %1541 = getelementptr inbounds i8, i8* %0, i64 %1534
  store i8 %1540, i8* %1541, align 1, !tbaa !14
  %1542 = add nuw i64 %1534, 1
  %1543 = add i64 %1535, 1
  %1544 = icmp eq i64 %1543, %1531
  br i1 %1544, label %1545, label %1533, !llvm.loop !833

1545:                                             ; preds = %1533, %1527
  %1546 = phi i64 [ %1528, %1527 ], [ %1542, %1533 ]
  %1547 = icmp ult i64 %1530, 3
  br i1 %1547, label %1673, label %1794

1548:                                             ; preds = %1411
  br i1 %1413, label %1856, label %1549

1549:                                             ; preds = %1548
  %1550 = icmp ult i64 %4, 8
  br i1 %1550, label %1655, label %1551

1551:                                             ; preds = %1549
  %1552 = getelementptr i8, i8* %0, i64 %4
  %1553 = getelementptr i8, i8* %1, i64 %4
  %1554 = icmp ugt i8* %1553, %0
  %1555 = icmp ugt i8* %1552, %1
  %1556 = and i1 %1554, %1555
  br i1 %1556, label %1655, label %1557

1557:                                             ; preds = %1551
  %1558 = icmp ult i64 %4, 32
  br i1 %1558, label %1641, label %1559

1559:                                             ; preds = %1557
  %1560 = and i64 %4, -32
  %1561 = add i64 %1560, -32
  %1562 = lshr exact i64 %1561, 5
  %1563 = add nuw nsw i64 %1562, 1
  %1564 = and i64 %1563, 3
  %1565 = icmp ult i64 %1561, 96
  br i1 %1565, label %1617, label %1566

1566:                                             ; preds = %1559
  %1567 = and i64 %1563, 1152921504606846972
  br label %1568

1568:                                             ; preds = %1568, %1566
  %1569 = phi i64 [ 0, %1566 ], [ %1614, %1568 ]
  %1570 = phi i64 [ 0, %1566 ], [ %1615, %1568 ]
  %1571 = getelementptr inbounds i8, i8* %1, i64 %1569
  %1572 = bitcast i8* %1571 to <16 x i8>*
  %1573 = load <16 x i8>, <16 x i8>* %1572, align 1, !tbaa !14, !alias.scope !834
  %1574 = getelementptr inbounds i8, i8* %1571, i64 16
  %1575 = bitcast i8* %1574 to <16 x i8>*
  %1576 = load <16 x i8>, <16 x i8>* %1575, align 1, !tbaa !14, !alias.scope !834
  %1577 = getelementptr inbounds i8, i8* %0, i64 %1569
  %1578 = bitcast i8* %1577 to <16 x i8>*
  store <16 x i8> %1573, <16 x i8>* %1578, align 1, !tbaa !14, !alias.scope !837, !noalias !834
  %1579 = getelementptr inbounds i8, i8* %1577, i64 16
  %1580 = bitcast i8* %1579 to <16 x i8>*
  store <16 x i8> %1576, <16 x i8>* %1580, align 1, !tbaa !14, !alias.scope !837, !noalias !834
  %1581 = or i64 %1569, 32
  %1582 = getelementptr inbounds i8, i8* %1, i64 %1581
  %1583 = bitcast i8* %1582 to <16 x i8>*
  %1584 = load <16 x i8>, <16 x i8>* %1583, align 1, !tbaa !14, !alias.scope !834
  %1585 = getelementptr inbounds i8, i8* %1582, i64 16
  %1586 = bitcast i8* %1585 to <16 x i8>*
  %1587 = load <16 x i8>, <16 x i8>* %1586, align 1, !tbaa !14, !alias.scope !834
  %1588 = getelementptr inbounds i8, i8* %0, i64 %1581
  %1589 = bitcast i8* %1588 to <16 x i8>*
  store <16 x i8> %1584, <16 x i8>* %1589, align 1, !tbaa !14, !alias.scope !837, !noalias !834
  %1590 = getelementptr inbounds i8, i8* %1588, i64 16
  %1591 = bitcast i8* %1590 to <16 x i8>*
  store <16 x i8> %1587, <16 x i8>* %1591, align 1, !tbaa !14, !alias.scope !837, !noalias !834
  %1592 = or i64 %1569, 64
  %1593 = getelementptr inbounds i8, i8* %1, i64 %1592
  %1594 = bitcast i8* %1593 to <16 x i8>*
  %1595 = load <16 x i8>, <16 x i8>* %1594, align 1, !tbaa !14, !alias.scope !834
  %1596 = getelementptr inbounds i8, i8* %1593, i64 16
  %1597 = bitcast i8* %1596 to <16 x i8>*
  %1598 = load <16 x i8>, <16 x i8>* %1597, align 1, !tbaa !14, !alias.scope !834
  %1599 = getelementptr inbounds i8, i8* %0, i64 %1592
  %1600 = bitcast i8* %1599 to <16 x i8>*
  store <16 x i8> %1595, <16 x i8>* %1600, align 1, !tbaa !14, !alias.scope !837, !noalias !834
  %1601 = getelementptr inbounds i8, i8* %1599, i64 16
  %1602 = bitcast i8* %1601 to <16 x i8>*
  store <16 x i8> %1598, <16 x i8>* %1602, align 1, !tbaa !14, !alias.scope !837, !noalias !834
  %1603 = or i64 %1569, 96
  %1604 = getelementptr inbounds i8, i8* %1, i64 %1603
  %1605 = bitcast i8* %1604 to <16 x i8>*
  %1606 = load <16 x i8>, <16 x i8>* %1605, align 1, !tbaa !14, !alias.scope !834
  %1607 = getelementptr inbounds i8, i8* %1604, i64 16
  %1608 = bitcast i8* %1607 to <16 x i8>*
  %1609 = load <16 x i8>, <16 x i8>* %1608, align 1, !tbaa !14, !alias.scope !834
  %1610 = getelementptr inbounds i8, i8* %0, i64 %1603
  %1611 = bitcast i8* %1610 to <16 x i8>*
  store <16 x i8> %1606, <16 x i8>* %1611, align 1, !tbaa !14, !alias.scope !837, !noalias !834
  %1612 = getelementptr inbounds i8, i8* %1610, i64 16
  %1613 = bitcast i8* %1612 to <16 x i8>*
  store <16 x i8> %1609, <16 x i8>* %1613, align 1, !tbaa !14, !alias.scope !837, !noalias !834
  %1614 = add nuw i64 %1569, 128
  %1615 = add i64 %1570, 4
  %1616 = icmp eq i64 %1615, %1567
  br i1 %1616, label %1617, label %1568, !llvm.loop !839

1617:                                             ; preds = %1568, %1559
  %1618 = phi i64 [ 0, %1559 ], [ %1614, %1568 ]
  %1619 = icmp eq i64 %1564, 0
  br i1 %1619, label %1636, label %1620

1620:                                             ; preds = %1617, %1620
  %1621 = phi i64 [ %1633, %1620 ], [ %1618, %1617 ]
  %1622 = phi i64 [ %1634, %1620 ], [ 0, %1617 ]
  %1623 = getelementptr inbounds i8, i8* %1, i64 %1621
  %1624 = bitcast i8* %1623 to <16 x i8>*
  %1625 = load <16 x i8>, <16 x i8>* %1624, align 1, !tbaa !14, !alias.scope !834
  %1626 = getelementptr inbounds i8, i8* %1623, i64 16
  %1627 = bitcast i8* %1626 to <16 x i8>*
  %1628 = load <16 x i8>, <16 x i8>* %1627, align 1, !tbaa !14, !alias.scope !834
  %1629 = getelementptr inbounds i8, i8* %0, i64 %1621
  %1630 = bitcast i8* %1629 to <16 x i8>*
  store <16 x i8> %1625, <16 x i8>* %1630, align 1, !tbaa !14, !alias.scope !837, !noalias !834
  %1631 = getelementptr inbounds i8, i8* %1629, i64 16
  %1632 = bitcast i8* %1631 to <16 x i8>*
  store <16 x i8> %1628, <16 x i8>* %1632, align 1, !tbaa !14, !alias.scope !837, !noalias !834
  %1633 = add nuw i64 %1621, 32
  %1634 = add i64 %1622, 1
  %1635 = icmp eq i64 %1634, %1564
  br i1 %1635, label %1636, label %1620, !llvm.loop !840

1636:                                             ; preds = %1620, %1617
  %1637 = icmp eq i64 %1560, %4
  br i1 %1637, label %1856, label %1638

1638:                                             ; preds = %1636
  %1639 = and i64 %4, 24
  %1640 = icmp eq i64 %1639, 0
  br i1 %1640, label %1655, label %1641

1641:                                             ; preds = %1557, %1638
  %1642 = phi i64 [ %1560, %1638 ], [ 0, %1557 ]
  %1643 = and i64 %4, -8
  br label %1644

1644:                                             ; preds = %1644, %1641
  %1645 = phi i64 [ %1642, %1641 ], [ %1651, %1644 ]
  %1646 = getelementptr inbounds i8, i8* %1, i64 %1645
  %1647 = bitcast i8* %1646 to <8 x i8>*
  %1648 = load <8 x i8>, <8 x i8>* %1647, align 1, !tbaa !14
  %1649 = getelementptr inbounds i8, i8* %0, i64 %1645
  %1650 = bitcast i8* %1649 to <8 x i8>*
  store <8 x i8> %1648, <8 x i8>* %1650, align 1, !tbaa !14
  %1651 = add nuw i64 %1645, 8
  %1652 = icmp eq i64 %1651, %1643
  br i1 %1652, label %1653, label %1644, !llvm.loop !841

1653:                                             ; preds = %1644
  %1654 = icmp eq i64 %1643, %4
  br i1 %1654, label %1856, label %1655

1655:                                             ; preds = %1551, %1549, %1638, %1653
  %1656 = phi i64 [ 0, %1549 ], [ 0, %1551 ], [ %1560, %1638 ], [ %1643, %1653 ]
  %1657 = xor i64 %1656, -1
  %1658 = add i64 %1657, %4
  %1659 = and i64 %4, 3
  %1660 = icmp eq i64 %1659, 0
  br i1 %1660, label %1670, label %1661

1661:                                             ; preds = %1655, %1661
  %1662 = phi i64 [ %1667, %1661 ], [ %1656, %1655 ]
  %1663 = phi i64 [ %1668, %1661 ], [ 0, %1655 ]
  %1664 = getelementptr inbounds i8, i8* %1, i64 %1662
  %1665 = load i8, i8* %1664, align 1, !tbaa !14
  %1666 = getelementptr inbounds i8, i8* %0, i64 %1662
  store i8 %1665, i8* %1666, align 1, !tbaa !14
  %1667 = add nuw i64 %1662, 1
  %1668 = add i64 %1663, 1
  %1669 = icmp eq i64 %1668, %1659
  br i1 %1669, label %1670, label %1661, !llvm.loop !842

1670:                                             ; preds = %1661, %1655
  %1671 = phi i64 [ %1656, %1655 ], [ %1667, %1661 ]
  %1672 = icmp ult i64 %1658, 3
  br i1 %1672, label %1856, label %2000

1673:                                             ; preds = %1545, %1794, %1504, %1525, %1414
  %1674 = icmp ugt i64 %3, %4
  br i1 %1674, label %1675, label %2038

1675:                                             ; preds = %1673
  %1676 = sub i64 %3, %4
  %1677 = icmp ult i64 %1676, 8
  br i1 %1677, label %1792, label %1678

1678:                                             ; preds = %1675
  %1679 = getelementptr i8, i8* %0, i64 %4
  %1680 = getelementptr i8, i8* %0, i64 %3
  %1681 = sub i64 %3, %4
  %1682 = getelementptr i8, i8* %1, i64 %1681
  %1683 = getelementptr i8, i8* %1, i64 %4
  %1684 = getelementptr i8, i8* %1, i64 %3
  %1685 = getelementptr i8, i8* %2, i64 %1681
  %1686 = getelementptr i8, i8* %2, i64 %4
  %1687 = getelementptr i8, i8* %2, i64 %3
  %1688 = icmp ult i8* %1679, %1682
  %1689 = icmp ugt i8* %1680, %1
  %1690 = and i1 %1688, %1689
  %1691 = icmp ult i8* %1679, %1684
  %1692 = icmp ult i8* %1683, %1680
  %1693 = and i1 %1691, %1692
  %1694 = or i1 %1690, %1693
  %1695 = icmp ult i8* %1679, %1685
  %1696 = icmp ugt i8* %1680, %2
  %1697 = and i1 %1695, %1696
  %1698 = or i1 %1694, %1697
  %1699 = icmp ult i8* %1679, %1687
  %1700 = icmp ult i8* %1686, %1680
  %1701 = and i1 %1699, %1700
  %1702 = or i1 %1698, %1701
  br i1 %1702, label %1792, label %1703

1703:                                             ; preds = %1678
  %1704 = icmp ult i64 %1676, 16
  br i1 %1704, label %1749, label %1705

1705:                                             ; preds = %1703
  %1706 = and i64 %1676, -16
  br label %1707

1707:                                             ; preds = %1707, %1705
  %1708 = phi i64 [ 0, %1705 ], [ %1741, %1707 ]
  %1709 = add i64 %1708, %4
  %1710 = getelementptr inbounds i8, i8* %1, i64 %1709
  %1711 = bitcast i8* %1710 to <16 x i8>*
  %1712 = load <16 x i8>, <16 x i8>* %1711, align 1, !tbaa !14, !alias.scope !843
  %1713 = getelementptr inbounds i8, i8* %1, i64 %1708
  %1714 = bitcast i8* %1713 to <16 x i8>*
  %1715 = load <16 x i8>, <16 x i8>* %1714, align 1, !tbaa !14, !alias.scope !846
  %1716 = getelementptr inbounds i8, i8* %2, i64 %1709
  %1717 = bitcast i8* %1716 to <16 x i8>*
  %1718 = load <16 x i8>, <16 x i8>* %1717, align 1, !tbaa !14, !alias.scope !848
  %1719 = getelementptr inbounds i8, i8* %2, i64 %1708
  %1720 = bitcast i8* %1719 to <16 x i8>*
  %1721 = load <16 x i8>, <16 x i8>* %1720, align 1, !tbaa !14, !alias.scope !850
  %1722 = zext <16 x i8> %1718 to <16 x i32>
  %1723 = zext <16 x i8> %1721 to <16 x i32>
  %1724 = sub nsw <16 x i32> %1722, %1723
  %1725 = call <16 x i32> @llvm.abs.v16i32(<16 x i32> %1724, i1 true)
  %1726 = zext <16 x i8> %1715 to <16 x i32>
  %1727 = sub nsw <16 x i32> %1726, %1723
  %1728 = call <16 x i32> @llvm.abs.v16i32(<16 x i32> %1727, i1 true)
  %1729 = add nuw nsw <16 x i32> %1722, %1726
  %1730 = mul nsw <16 x i32> %1723, <i32 -2, i32 -2, i32 -2, i32 -2, i32 -2, i32 -2, i32 -2, i32 -2, i32 -2, i32 -2, i32 -2, i32 -2, i32 -2, i32 -2, i32 -2, i32 -2>
  %1731 = add nsw <16 x i32> %1729, %1730
  %1732 = call <16 x i32> @llvm.abs.v16i32(<16 x i32> %1731, i1 true)
  %1733 = icmp ult <16 x i32> %1728, %1725
  %1734 = select <16 x i1> %1733, <16 x i32> %1728, <16 x i32> %1725
  %1735 = select <16 x i1> %1733, <16 x i8> %1718, <16 x i8> %1715
  %1736 = icmp ult <16 x i32> %1732, %1734
  %1737 = select <16 x i1> %1736, <16 x i8> %1721, <16 x i8> %1735
  %1738 = sub <16 x i8> %1712, %1737
  %1739 = getelementptr inbounds i8, i8* %0, i64 %1709
  %1740 = bitcast i8* %1739 to <16 x i8>*
  store <16 x i8> %1738, <16 x i8>* %1740, align 1, !tbaa !14, !alias.scope !852, !noalias !854
  %1741 = add nuw i64 %1708, 16
  %1742 = icmp eq i64 %1741, %1706
  br i1 %1742, label %1743, label %1707, !llvm.loop !855

1743:                                             ; preds = %1707
  %1744 = icmp eq i64 %1676, %1706
  br i1 %1744, label %2038, label %1745

1745:                                             ; preds = %1743
  %1746 = add i64 %1706, %4
  %1747 = and i64 %1676, 8
  %1748 = icmp eq i64 %1747, 0
  br i1 %1748, label %1792, label %1749

1749:                                             ; preds = %1703, %1745
  %1750 = phi i64 [ %1706, %1745 ], [ 0, %1703 ]
  %1751 = sub i64 %3, %4
  %1752 = and i64 %1751, -8
  %1753 = add i64 %1752, %4
  br label %1754

1754:                                             ; preds = %1754, %1749
  %1755 = phi i64 [ %1750, %1749 ], [ %1788, %1754 ]
  %1756 = add i64 %1755, %4
  %1757 = getelementptr inbounds i8, i8* %1, i64 %1756
  %1758 = bitcast i8* %1757 to <8 x i8>*
  %1759 = load <8 x i8>, <8 x i8>* %1758, align 1, !tbaa !14
  %1760 = getelementptr inbounds i8, i8* %1, i64 %1755
  %1761 = bitcast i8* %1760 to <8 x i8>*
  %1762 = load <8 x i8>, <8 x i8>* %1761, align 1, !tbaa !14
  %1763 = getelementptr inbounds i8, i8* %2, i64 %1756
  %1764 = bitcast i8* %1763 to <8 x i8>*
  %1765 = load <8 x i8>, <8 x i8>* %1764, align 1, !tbaa !14
  %1766 = getelementptr inbounds i8, i8* %2, i64 %1755
  %1767 = bitcast i8* %1766 to <8 x i8>*
  %1768 = load <8 x i8>, <8 x i8>* %1767, align 1, !tbaa !14
  %1769 = zext <8 x i8> %1765 to <8 x i32>
  %1770 = zext <8 x i8> %1768 to <8 x i32>
  %1771 = sub nsw <8 x i32> %1769, %1770
  %1772 = call <8 x i32> @llvm.abs.v8i32(<8 x i32> %1771, i1 true)
  %1773 = zext <8 x i8> %1762 to <8 x i32>
  %1774 = sub nsw <8 x i32> %1773, %1770
  %1775 = call <8 x i32> @llvm.abs.v8i32(<8 x i32> %1774, i1 true)
  %1776 = add nuw nsw <8 x i32> %1769, %1773
  %1777 = mul nsw <8 x i32> %1770, <i32 -2, i32 -2, i32 -2, i32 -2, i32 -2, i32 -2, i32 -2, i32 -2>
  %1778 = add nsw <8 x i32> %1776, %1777
  %1779 = call <8 x i32> @llvm.abs.v8i32(<8 x i32> %1778, i1 true)
  %1780 = icmp ult <8 x i32> %1775, %1772
  %1781 = select <8 x i1> %1780, <8 x i32> %1775, <8 x i32> %1772
  %1782 = select <8 x i1> %1780, <8 x i8> %1765, <8 x i8> %1762
  %1783 = icmp ult <8 x i32> %1779, %1781
  %1784 = select <8 x i1> %1783, <8 x i8> %1768, <8 x i8> %1782
  %1785 = sub <8 x i8> %1759, %1784
  %1786 = getelementptr inbounds i8, i8* %0, i64 %1756
  %1787 = bitcast i8* %1786 to <8 x i8>*
  store <8 x i8> %1785, <8 x i8>* %1787, align 1, !tbaa !14
  %1788 = add nuw i64 %1755, 8
  %1789 = icmp eq i64 %1788, %1752
  br i1 %1789, label %1790, label %1754, !llvm.loop !856

1790:                                             ; preds = %1754
  %1791 = icmp eq i64 %1751, %1752
  br i1 %1791, label %2038, label %1792

1792:                                             ; preds = %1678, %1675, %1745, %1790
  %1793 = phi i64 [ %4, %1675 ], [ %4, %1678 ], [ %1746, %1745 ], [ %1753, %1790 ]
  br label %1825

1794:                                             ; preds = %1545, %1794
  %1795 = phi i64 [ %1823, %1794 ], [ %1546, %1545 ]
  %1796 = getelementptr inbounds i8, i8* %1, i64 %1795
  %1797 = load i8, i8* %1796, align 1, !tbaa !14
  %1798 = getelementptr inbounds i8, i8* %2, i64 %1795
  %1799 = load i8, i8* %1798, align 1, !tbaa !14
  %1800 = sub i8 %1797, %1799
  %1801 = getelementptr inbounds i8, i8* %0, i64 %1795
  store i8 %1800, i8* %1801, align 1, !tbaa !14
  %1802 = add nuw i64 %1795, 1
  %1803 = getelementptr inbounds i8, i8* %1, i64 %1802
  %1804 = load i8, i8* %1803, align 1, !tbaa !14
  %1805 = getelementptr inbounds i8, i8* %2, i64 %1802
  %1806 = load i8, i8* %1805, align 1, !tbaa !14
  %1807 = sub i8 %1804, %1806
  %1808 = getelementptr inbounds i8, i8* %0, i64 %1802
  store i8 %1807, i8* %1808, align 1, !tbaa !14
  %1809 = add nuw i64 %1795, 2
  %1810 = getelementptr inbounds i8, i8* %1, i64 %1809
  %1811 = load i8, i8* %1810, align 1, !tbaa !14
  %1812 = getelementptr inbounds i8, i8* %2, i64 %1809
  %1813 = load i8, i8* %1812, align 1, !tbaa !14
  %1814 = sub i8 %1811, %1813
  %1815 = getelementptr inbounds i8, i8* %0, i64 %1809
  store i8 %1814, i8* %1815, align 1, !tbaa !14
  %1816 = add nuw i64 %1795, 3
  %1817 = getelementptr inbounds i8, i8* %1, i64 %1816
  %1818 = load i8, i8* %1817, align 1, !tbaa !14
  %1819 = getelementptr inbounds i8, i8* %2, i64 %1816
  %1820 = load i8, i8* %1819, align 1, !tbaa !14
  %1821 = sub i8 %1818, %1820
  %1822 = getelementptr inbounds i8, i8* %0, i64 %1816
  store i8 %1821, i8* %1822, align 1, !tbaa !14
  %1823 = add nuw i64 %1795, 4
  %1824 = icmp eq i64 %1823, %4
  br i1 %1824, label %1673, label %1794, !llvm.loop !857

1825:                                             ; preds = %1792, %1825
  %1826 = phi i64 [ %1854, %1825 ], [ %1793, %1792 ]
  %1827 = getelementptr inbounds i8, i8* %1, i64 %1826
  %1828 = load i8, i8* %1827, align 1, !tbaa !14
  %1829 = sub nuw i64 %1826, %4
  %1830 = getelementptr inbounds i8, i8* %1, i64 %1829
  %1831 = load i8, i8* %1830, align 1, !tbaa !14
  %1832 = getelementptr inbounds i8, i8* %2, i64 %1826
  %1833 = load i8, i8* %1832, align 1, !tbaa !14
  %1834 = getelementptr inbounds i8, i8* %2, i64 %1829
  %1835 = load i8, i8* %1834, align 1, !tbaa !14
  %1836 = zext i8 %1833 to i32
  %1837 = zext i8 %1835 to i32
  %1838 = sub nsw i32 %1836, %1837
  %1839 = tail call i32 @llvm.abs.i32(i32 %1838, i1 true) #25
  %1840 = zext i8 %1831 to i32
  %1841 = sub nsw i32 %1840, %1837
  %1842 = tail call i32 @llvm.abs.i32(i32 %1841, i1 true) #25
  %1843 = add nuw nsw i32 %1836, %1840
  %1844 = mul nsw i32 %1837, -2
  %1845 = add nsw i32 %1843, %1844
  %1846 = tail call i32 @llvm.abs.i32(i32 %1845, i1 true) #25
  %1847 = icmp ult i32 %1842, %1839
  %1848 = select i1 %1847, i32 %1842, i32 %1839
  %1849 = select i1 %1847, i8 %1833, i8 %1831
  %1850 = icmp ult i32 %1846, %1848
  %1851 = select i1 %1850, i8 %1835, i8 %1849
  %1852 = sub i8 %1828, %1851
  %1853 = getelementptr inbounds i8, i8* %0, i64 %1826
  store i8 %1852, i8* %1853, align 1, !tbaa !14
  %1854 = add nuw i64 %1826, 1
  %1855 = icmp eq i64 %1854, %3
  br i1 %1855, label %2038, label %1825, !llvm.loop !858

1856:                                             ; preds = %1670, %2000, %1636, %1653, %1548
  %1857 = icmp ugt i64 %3, %4
  br i1 %1857, label %1858, label %2038

1858:                                             ; preds = %1856
  %1859 = sub i64 %3, %4
  %1860 = icmp ult i64 %1859, 8
  br i1 %1860, label %1981, label %1861

1861:                                             ; preds = %1858
  %1862 = getelementptr i8, i8* %0, i64 %4
  %1863 = getelementptr i8, i8* %0, i64 %3
  %1864 = sub i64 %3, %4
  %1865 = getelementptr i8, i8* %1, i64 %1864
  %1866 = getelementptr i8, i8* %1, i64 %4
  %1867 = getelementptr i8, i8* %1, i64 %3
  %1868 = icmp ult i8* %1862, %1865
  %1869 = icmp ugt i8* %1863, %1
  %1870 = and i1 %1868, %1869
  %1871 = icmp ult i8* %1862, %1867
  %1872 = icmp ult i8* %1866, %1863
  %1873 = and i1 %1871, %1872
  %1874 = or i1 %1870, %1873
  br i1 %1874, label %1981, label %1875

1875:                                             ; preds = %1861
  %1876 = icmp ult i64 %1859, 32
  br i1 %1876, label %1960, label %1877

1877:                                             ; preds = %1875
  %1878 = and i64 %1859, -32
  %1879 = add i64 %1878, -32
  %1880 = lshr exact i64 %1879, 5
  %1881 = add nuw nsw i64 %1880, 1
  %1882 = and i64 %1881, 1
  %1883 = icmp eq i64 %1879, 0
  br i1 %1883, label %1931, label %1884

1884:                                             ; preds = %1877
  %1885 = and i64 %1881, 1152921504606846974
  br label %1886

1886:                                             ; preds = %1886, %1884
  %1887 = phi i64 [ 0, %1884 ], [ %1928, %1886 ]
  %1888 = phi i64 [ 0, %1884 ], [ %1929, %1886 ]
  %1889 = add i64 %1887, %4
  %1890 = getelementptr inbounds i8, i8* %1, i64 %1889
  %1891 = bitcast i8* %1890 to <16 x i8>*
  %1892 = load <16 x i8>, <16 x i8>* %1891, align 1, !tbaa !14, !alias.scope !859
  %1893 = getelementptr inbounds i8, i8* %1890, i64 16
  %1894 = bitcast i8* %1893 to <16 x i8>*
  %1895 = load <16 x i8>, <16 x i8>* %1894, align 1, !tbaa !14, !alias.scope !859
  %1896 = getelementptr inbounds i8, i8* %1, i64 %1887
  %1897 = bitcast i8* %1896 to <16 x i8>*
  %1898 = load <16 x i8>, <16 x i8>* %1897, align 1, !tbaa !14, !alias.scope !862
  %1899 = getelementptr inbounds i8, i8* %1896, i64 16
  %1900 = bitcast i8* %1899 to <16 x i8>*
  %1901 = load <16 x i8>, <16 x i8>* %1900, align 1, !tbaa !14, !alias.scope !862
  %1902 = sub <16 x i8> %1892, %1898
  %1903 = sub <16 x i8> %1895, %1901
  %1904 = getelementptr inbounds i8, i8* %0, i64 %1889
  %1905 = bitcast i8* %1904 to <16 x i8>*
  store <16 x i8> %1902, <16 x i8>* %1905, align 1, !tbaa !14, !alias.scope !864, !noalias !866
  %1906 = getelementptr inbounds i8, i8* %1904, i64 16
  %1907 = bitcast i8* %1906 to <16 x i8>*
  store <16 x i8> %1903, <16 x i8>* %1907, align 1, !tbaa !14, !alias.scope !864, !noalias !866
  %1908 = or i64 %1887, 32
  %1909 = add i64 %1908, %4
  %1910 = getelementptr inbounds i8, i8* %1, i64 %1909
  %1911 = bitcast i8* %1910 to <16 x i8>*
  %1912 = load <16 x i8>, <16 x i8>* %1911, align 1, !tbaa !14, !alias.scope !859
  %1913 = getelementptr inbounds i8, i8* %1910, i64 16
  %1914 = bitcast i8* %1913 to <16 x i8>*
  %1915 = load <16 x i8>, <16 x i8>* %1914, align 1, !tbaa !14, !alias.scope !859
  %1916 = getelementptr inbounds i8, i8* %1, i64 %1908
  %1917 = bitcast i8* %1916 to <16 x i8>*
  %1918 = load <16 x i8>, <16 x i8>* %1917, align 1, !tbaa !14, !alias.scope !862
  %1919 = getelementptr inbounds i8, i8* %1916, i64 16
  %1920 = bitcast i8* %1919 to <16 x i8>*
  %1921 = load <16 x i8>, <16 x i8>* %1920, align 1, !tbaa !14, !alias.scope !862
  %1922 = sub <16 x i8> %1912, %1918
  %1923 = sub <16 x i8> %1915, %1921
  %1924 = getelementptr inbounds i8, i8* %0, i64 %1909
  %1925 = bitcast i8* %1924 to <16 x i8>*
  store <16 x i8> %1922, <16 x i8>* %1925, align 1, !tbaa !14, !alias.scope !864, !noalias !866
  %1926 = getelementptr inbounds i8, i8* %1924, i64 16
  %1927 = bitcast i8* %1926 to <16 x i8>*
  store <16 x i8> %1923, <16 x i8>* %1927, align 1, !tbaa !14, !alias.scope !864, !noalias !866
  %1928 = add nuw i64 %1887, 64
  %1929 = add i64 %1888, 2
  %1930 = icmp eq i64 %1929, %1885
  br i1 %1930, label %1931, label %1886, !llvm.loop !867

1931:                                             ; preds = %1886, %1877
  %1932 = phi i64 [ 0, %1877 ], [ %1928, %1886 ]
  %1933 = icmp eq i64 %1882, 0
  br i1 %1933, label %1954, label %1934

1934:                                             ; preds = %1931
  %1935 = add i64 %1932, %4
  %1936 = getelementptr inbounds i8, i8* %1, i64 %1935
  %1937 = bitcast i8* %1936 to <16 x i8>*
  %1938 = load <16 x i8>, <16 x i8>* %1937, align 1, !tbaa !14, !alias.scope !859
  %1939 = getelementptr inbounds i8, i8* %1936, i64 16
  %1940 = bitcast i8* %1939 to <16 x i8>*
  %1941 = load <16 x i8>, <16 x i8>* %1940, align 1, !tbaa !14, !alias.scope !859
  %1942 = getelementptr inbounds i8, i8* %1, i64 %1932
  %1943 = bitcast i8* %1942 to <16 x i8>*
  %1944 = load <16 x i8>, <16 x i8>* %1943, align 1, !tbaa !14, !alias.scope !862
  %1945 = getelementptr inbounds i8, i8* %1942, i64 16
  %1946 = bitcast i8* %1945 to <16 x i8>*
  %1947 = load <16 x i8>, <16 x i8>* %1946, align 1, !tbaa !14, !alias.scope !862
  %1948 = sub <16 x i8> %1938, %1944
  %1949 = sub <16 x i8> %1941, %1947
  %1950 = getelementptr inbounds i8, i8* %0, i64 %1935
  %1951 = bitcast i8* %1950 to <16 x i8>*
  store <16 x i8> %1948, <16 x i8>* %1951, align 1, !tbaa !14, !alias.scope !864, !noalias !866
  %1952 = getelementptr inbounds i8, i8* %1950, i64 16
  %1953 = bitcast i8* %1952 to <16 x i8>*
  store <16 x i8> %1949, <16 x i8>* %1953, align 1, !tbaa !14, !alias.scope !864, !noalias !866
  br label %1954

1954:                                             ; preds = %1931, %1934
  %1955 = icmp eq i64 %1859, %1878
  br i1 %1955, label %2038, label %1956

1956:                                             ; preds = %1954
  %1957 = add i64 %1878, %4
  %1958 = and i64 %1859, 24
  %1959 = icmp eq i64 %1958, 0
  br i1 %1959, label %1981, label %1960

1960:                                             ; preds = %1875, %1956
  %1961 = phi i64 [ %1878, %1956 ], [ 0, %1875 ]
  %1962 = sub i64 %3, %4
  %1963 = and i64 %1962, -8
  %1964 = add i64 %1963, %4
  br label %1965

1965:                                             ; preds = %1965, %1960
  %1966 = phi i64 [ %1961, %1960 ], [ %1977, %1965 ]
  %1967 = add i64 %1966, %4
  %1968 = getelementptr inbounds i8, i8* %1, i64 %1967
  %1969 = bitcast i8* %1968 to <8 x i8>*
  %1970 = load <8 x i8>, <8 x i8>* %1969, align 1, !tbaa !14
  %1971 = getelementptr inbounds i8, i8* %1, i64 %1966
  %1972 = bitcast i8* %1971 to <8 x i8>*
  %1973 = load <8 x i8>, <8 x i8>* %1972, align 1, !tbaa !14
  %1974 = sub <8 x i8> %1970, %1973
  %1975 = getelementptr inbounds i8, i8* %0, i64 %1967
  %1976 = bitcast i8* %1975 to <8 x i8>*
  store <8 x i8> %1974, <8 x i8>* %1976, align 1, !tbaa !14
  %1977 = add nuw i64 %1966, 8
  %1978 = icmp eq i64 %1977, %1963
  br i1 %1978, label %1979, label %1965, !llvm.loop !868

1979:                                             ; preds = %1965
  %1980 = icmp eq i64 %1962, %1963
  br i1 %1980, label %2038, label %1981

1981:                                             ; preds = %1861, %1858, %1956, %1979
  %1982 = phi i64 [ %4, %1858 ], [ %4, %1861 ], [ %1957, %1956 ], [ %1964, %1979 ]
  %1983 = sub i64 %3, %1982
  %1984 = xor i64 %1982, -1
  %1985 = and i64 %1983, 1
  %1986 = icmp eq i64 %1985, 0
  br i1 %1986, label %1996, label %1987

1987:                                             ; preds = %1981
  %1988 = getelementptr inbounds i8, i8* %1, i64 %1982
  %1989 = load i8, i8* %1988, align 1, !tbaa !14
  %1990 = sub nuw i64 %1982, %4
  %1991 = getelementptr inbounds i8, i8* %1, i64 %1990
  %1992 = load i8, i8* %1991, align 1, !tbaa !14
  %1993 = sub i8 %1989, %1992
  %1994 = getelementptr inbounds i8, i8* %0, i64 %1982
  store i8 %1993, i8* %1994, align 1, !tbaa !14
  %1995 = add nuw i64 %1982, 1
  br label %1996

1996:                                             ; preds = %1987, %1981
  %1997 = phi i64 [ %1982, %1981 ], [ %1995, %1987 ]
  %1998 = sub i64 0, %3
  %1999 = icmp eq i64 %1984, %1998
  br i1 %1999, label %2038, label %2019

2000:                                             ; preds = %1670, %2000
  %2001 = phi i64 [ %2017, %2000 ], [ %1671, %1670 ]
  %2002 = getelementptr inbounds i8, i8* %1, i64 %2001
  %2003 = load i8, i8* %2002, align 1, !tbaa !14
  %2004 = getelementptr inbounds i8, i8* %0, i64 %2001
  store i8 %2003, i8* %2004, align 1, !tbaa !14
  %2005 = add nuw i64 %2001, 1
  %2006 = getelementptr inbounds i8, i8* %1, i64 %2005
  %2007 = load i8, i8* %2006, align 1, !tbaa !14
  %2008 = getelementptr inbounds i8, i8* %0, i64 %2005
  store i8 %2007, i8* %2008, align 1, !tbaa !14
  %2009 = add nuw i64 %2001, 2
  %2010 = getelementptr inbounds i8, i8* %1, i64 %2009
  %2011 = load i8, i8* %2010, align 1, !tbaa !14
  %2012 = getelementptr inbounds i8, i8* %0, i64 %2009
  store i8 %2011, i8* %2012, align 1, !tbaa !14
  %2013 = add nuw i64 %2001, 3
  %2014 = getelementptr inbounds i8, i8* %1, i64 %2013
  %2015 = load i8, i8* %2014, align 1, !tbaa !14
  %2016 = getelementptr inbounds i8, i8* %0, i64 %2013
  store i8 %2015, i8* %2016, align 1, !tbaa !14
  %2017 = add nuw i64 %2001, 4
  %2018 = icmp eq i64 %2017, %4
  br i1 %2018, label %1856, label %2000, !llvm.loop !869

2019:                                             ; preds = %1996, %2019
  %2020 = phi i64 [ %2036, %2019 ], [ %1997, %1996 ]
  %2021 = getelementptr inbounds i8, i8* %1, i64 %2020
  %2022 = load i8, i8* %2021, align 1, !tbaa !14
  %2023 = sub nuw i64 %2020, %4
  %2024 = getelementptr inbounds i8, i8* %1, i64 %2023
  %2025 = load i8, i8* %2024, align 1, !tbaa !14
  %2026 = sub i8 %2022, %2025
  %2027 = getelementptr inbounds i8, i8* %0, i64 %2020
  store i8 %2026, i8* %2027, align 1, !tbaa !14
  %2028 = add nuw i64 %2020, 1
  %2029 = getelementptr inbounds i8, i8* %1, i64 %2028
  %2030 = load i8, i8* %2029, align 1, !tbaa !14
  %2031 = sub nuw i64 %2028, %4
  %2032 = getelementptr inbounds i8, i8* %1, i64 %2031
  %2033 = load i8, i8* %2032, align 1, !tbaa !14
  %2034 = sub i8 %2030, %2033
  %2035 = getelementptr inbounds i8, i8* %0, i64 %2028
  store i8 %2034, i8* %2035, align 1, !tbaa !14
  %2036 = add nuw i64 %2020, 2
  %2037 = icmp eq i64 %2036, %3
  br i1 %2037, label %2038, label %2019, !llvm.loop !870

2038:                                             ; preds = %1825, %1996, %2019, %1163, %1186, %1367, %1390, %594, %722, %719, %753, %418, %441, %256, %259, %1743, %1790, %1954, %1979, %1106, %1139, %1323, %1349, %553, %574, %685, %702, %376, %401, %222, %239, %1673, %1856, %1038, %1219, %463, %597, %278, %133, %6
  ret void
}

; Function Attrs: uwtable
define dso_local noundef i32 @_Z21lodepng_encode_memoryPPhPmPKhjj16LodePNGColorTypej(i8** nocapture noundef writeonly %0, i64* nocapture noundef writeonly %1, i8* noundef %2, i32 noundef %3, i32 noundef %4, i32 noundef %5, i32 noundef %6) local_unnamed_addr #12 {
  %8 = alloca %struct.LodePNGState, align 8
  %9 = bitcast %struct.LodePNGState* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 544, i8* nonnull %9) #25
  %10 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %8, i64 0, i32 0, i32 4
  store i32 1, i32* %10, align 4, !tbaa !619
  %11 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %8, i64 0, i32 0, i32 5
  store i32 1, i32* %11, align 8, !tbaa !625
  %12 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %8, i64 0, i32 0, i32 6
  store i32 0, i32* %12, align 4, !tbaa !626
  %13 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %8, i64 0, i32 0, i32 7
  %14 = bitcast i64* %13 to <2 x i64>*
  store <2 x i64> <i64 16777216, i64 16777216>, <2 x i64>* %14, align 8, !tbaa !3
  call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(52) %9, i8 0, i64 52, i1 false) #25
  %15 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %8, i64 0, i32 1, i32 0, i32 0
  %16 = bitcast i32* %15 to <4 x i32>*
  store <4 x i32> <i32 2, i32 1, i32 2048, i32 3>, <4 x i32>* %16, align 8, !tbaa !9
  %17 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %8, i64 0, i32 1, i32 0, i32 4
  store i32 128, i32* %17, align 8, !tbaa !109
  %18 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %8, i64 0, i32 1, i32 0, i32 5
  store i32 1, i32* %18, align 4, !tbaa !110
  %19 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %8, i64 0, i32 1, i32 0, i32 6
  %20 = bitcast {}** %19 to i8*
  call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(24) %20, i8 0, i64 24, i1 false) #25
  %21 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %8, i64 0, i32 1, i32 2
  store i32 1, i32* %21, align 4, !tbaa !620
  %22 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %8, i64 0, i32 1, i32 3
  store i32 5, i32* %22, align 8, !tbaa !621
  %23 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %8, i64 0, i32 1, i32 1
  store i32 1, i32* %23, align 8, !tbaa !622
  %24 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %8, i64 0, i32 1, i32 4
  %25 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %8, i64 0, i32 1, i32 7
  %26 = bitcast i8** %24 to i8*
  call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(16) %26, i8 0, i64 16, i1 false) #25
  store i32 1, i32* %25, align 8, !tbaa !623
  %27 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %8, i64 0, i32 2, i32 4
  %28 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %8, i64 0, i32 2, i32 0
  %29 = bitcast i32* %27 to i8*
  call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(16) %29, i8 0, i64 16, i1 false) #25
  %30 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %8, i64 0, i32 2, i32 1
  %31 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %8, i64 0, i32 2, i32 2
  %32 = bitcast i8** %31 to i8*
  call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(16) %32, i8 0, i64 16, i1 false) #25
  %33 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %8, i64 0, i32 3, i32 3, i32 4
  %34 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %8, i64 0, i32 3, i32 3, i32 0
  %35 = bitcast i32* %33 to i8*
  call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(16) %35, i8 0, i64 16, i1 false) #25
  %36 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %8, i64 0, i32 3, i32 3, i32 1
  %37 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %8, i64 0, i32 3, i32 3, i32 2
  %38 = bitcast i8** %37 to i8*
  call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(16) %38, i8 0, i64 16, i1 false) #25
  %39 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %8, i64 0, i32 3, i32 2
  store i32 0, i32* %39, align 8, !tbaa !208
  %40 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %8, i64 0, i32 3, i32 0
  store i32 0, i32* %40, align 8, !tbaa !209
  %41 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %8, i64 0, i32 3, i32 1
  store i32 0, i32* %41, align 4, !tbaa !210
  %42 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %8, i64 0, i32 3, i32 4
  %43 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %8, i64 0, i32 3, i32 18
  store i32 0, i32* %43, align 4, !tbaa !211
  %44 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %8, i64 0, i32 3, i32 22
  store i32 0, i32* %44, align 4, !tbaa !212
  %45 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %8, i64 0, i32 3, i32 24
  store i32 0, i32* %45, align 4, !tbaa !213
  %46 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %8, i64 0, i32 3, i32 33
  store i32 0, i32* %46, align 8, !tbaa !214
  %47 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %8, i64 0, i32 3, i32 35
  store i32 0, i32* %47, align 8, !tbaa !199
  %48 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %8, i64 0, i32 3, i32 36
  %49 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %8, i64 0, i32 3, i32 39
  %50 = bitcast i32* %42 to i8*
  call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(84) %50, i8 0, i64 84, i1 false) #25
  %51 = bitcast i8** %48 to i8*
  call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(16) %51, i8 0, i64 16, i1 false) #25
  %52 = bitcast i32* %49 to i8*
  call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 4 dereferenceable(68) %52, i8 0, i64 68, i1 false) #25
  %53 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %8, i64 0, i32 4
  store i32 1, i32* %53, align 8, !tbaa !304
  store i32 %5, i32* %28, align 8, !tbaa !624
  store i32 %6, i32* %30, align 4, !tbaa !472
  store i32 %5, i32* %34, align 8, !tbaa !394
  store i32 %6, i32* %36, align 4, !tbaa !871
  %54 = call noundef i32 @_Z14lodepng_encodePPhPmPKhjjP12LodePNGState(i8** noundef %0, i64* noundef %1, i8* noundef %2, i32 noundef %3, i32 noundef %4, %struct.LodePNGState* noundef nonnull %8)
  %55 = load i32, i32* %53, align 8, !tbaa !304
  %56 = load i8*, i8** %31, align 8, !tbaa !151
  %57 = icmp eq i8* %56, null
  br i1 %57, label %59, label %58

58:                                               ; preds = %7
  call void @free(i8* noundef nonnull %56) #25
  br label %59

59:                                               ; preds = %7, %58
  call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(16) %32, i8 0, i64 16, i1 false) #25
  %60 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %8, i64 0, i32 3
  call void @_Z20lodepng_info_cleanupP11LodePNGInfo(%struct.LodePNGInfo* noundef nonnull %60) #25
  call void @llvm.lifetime.end.p0i8(i64 544, i8* nonnull %9) #25
  ret i32 %55
}

; Function Attrs: uwtable
define dso_local noundef i32 @_Z16lodepng_encode32PPhPmPKhjj(i8** nocapture noundef writeonly %0, i64* nocapture noundef writeonly %1, i8* noundef %2, i32 noundef %3, i32 noundef %4) local_unnamed_addr #12 {
  %6 = tail call noundef i32 @_Z21lodepng_encode_memoryPPhPmPKhjj16LodePNGColorTypej(i8** noundef %0, i64* noundef %1, i8* noundef %2, i32 noundef %3, i32 noundef %4, i32 noundef 6, i32 noundef 8)
  ret i32 %6
}

; Function Attrs: uwtable
define dso_local noundef i32 @_Z16lodepng_encode24PPhPmPKhjj(i8** nocapture noundef writeonly %0, i64* nocapture noundef writeonly %1, i8* noundef %2, i32 noundef %3, i32 noundef %4) local_unnamed_addr #12 {
  %6 = tail call noundef i32 @_Z21lodepng_encode_memoryPPhPmPKhjj16LodePNGColorTypej(i8** noundef %0, i64* noundef %1, i8* noundef %2, i32 noundef %3, i32 noundef %4, i32 noundef 2, i32 noundef 8)
  ret i32 %6
}

; Function Attrs: uwtable
define dso_local noundef i32 @_Z19lodepng_encode_filePKcPKhjj16LodePNGColorTypej(i8* nocapture noundef readonly %0, i8* noundef %1, i32 noundef %2, i32 noundef %3, i32 noundef %4, i32 noundef %5) local_unnamed_addr #12 {
  %7 = alloca i8*, align 8
  %8 = alloca i64, align 8
  %9 = bitcast i8** %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %9) #25
  %10 = bitcast i64* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %10) #25
  %11 = call noundef i32 @_Z21lodepng_encode_memoryPPhPmPKhjj16LodePNGColorTypej(i8** noundef nonnull %7, i64* noundef nonnull %8, i8* noundef %1, i32 noundef %2, i32 noundef %3, i32 noundef %4, i32 noundef %5)
  %12 = icmp eq i32 %11, 0
  %13 = load i8*, i8** %7, align 8, !tbaa !7
  br i1 %12, label %14, label %21

14:                                               ; preds = %6
  %15 = load i64, i64* %8, align 8, !tbaa !3
  %16 = tail call noalias %struct._IO_FILE* @fopen(i8* noundef %0, i8* noundef getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0)) #25
  %17 = icmp eq %struct._IO_FILE* %16, null
  br i1 %17, label %21, label %18

18:                                               ; preds = %14
  %19 = tail call i64 @fwrite(i8* noundef %13, i64 noundef 1, i64 noundef %15, %struct._IO_FILE* noundef nonnull %16) #25
  %20 = tail call i32 @fclose(%struct._IO_FILE* noundef nonnull %16) #25
  br label %21

21:                                               ; preds = %6, %18, %14
  %22 = phi i32 [ 0, %18 ], [ 79, %14 ], [ %11, %6 ]
  tail call void @free(i8* noundef %13) #25
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %10) #25
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %9) #25
  ret i32 %22
}

; Function Attrs: uwtable
define dso_local noundef i32 @_Z21lodepng_encode32_filePKcPKhjj(i8* nocapture noundef readonly %0, i8* noundef %1, i32 noundef %2, i32 noundef %3) local_unnamed_addr #12 {
  %5 = alloca i8*, align 8
  %6 = alloca i64, align 8
  %7 = bitcast i8** %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %7) #25
  %8 = bitcast i64* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %8) #25
  %9 = call noundef i32 @_Z21lodepng_encode_memoryPPhPmPKhjj16LodePNGColorTypej(i8** noundef nonnull %5, i64* noundef nonnull %6, i8* noundef %1, i32 noundef %2, i32 noundef %3, i32 noundef 6, i32 noundef 8)
  %10 = icmp eq i32 %9, 0
  %11 = load i8*, i8** %5, align 8, !tbaa !7
  br i1 %10, label %12, label %19

12:                                               ; preds = %4
  %13 = load i64, i64* %6, align 8, !tbaa !3
  %14 = tail call noalias %struct._IO_FILE* @fopen(i8* noundef %0, i8* noundef getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0)) #25
  %15 = icmp eq %struct._IO_FILE* %14, null
  br i1 %15, label %19, label %16

16:                                               ; preds = %12
  %17 = tail call i64 @fwrite(i8* noundef %11, i64 noundef 1, i64 noundef %13, %struct._IO_FILE* noundef nonnull %14) #25
  %18 = tail call i32 @fclose(%struct._IO_FILE* noundef nonnull %14) #25
  br label %19

19:                                               ; preds = %4, %12, %16
  %20 = phi i32 [ 0, %16 ], [ 79, %12 ], [ %9, %4 ]
  tail call void @free(i8* noundef %11) #25
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %8) #25
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7) #25
  ret i32 %20
}

; Function Attrs: uwtable
define dso_local noundef i32 @_Z21lodepng_encode24_filePKcPKhjj(i8* nocapture noundef readonly %0, i8* noundef %1, i32 noundef %2, i32 noundef %3) local_unnamed_addr #12 {
  %5 = alloca i8*, align 8
  %6 = alloca i64, align 8
  %7 = bitcast i8** %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %7) #25
  %8 = bitcast i64* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %8) #25
  %9 = call noundef i32 @_Z21lodepng_encode_memoryPPhPmPKhjj16LodePNGColorTypej(i8** noundef nonnull %5, i64* noundef nonnull %6, i8* noundef %1, i32 noundef %2, i32 noundef %3, i32 noundef 2, i32 noundef 8)
  %10 = icmp eq i32 %9, 0
  %11 = load i8*, i8** %5, align 8, !tbaa !7
  br i1 %10, label %12, label %19

12:                                               ; preds = %4
  %13 = load i64, i64* %6, align 8, !tbaa !3
  %14 = tail call noalias %struct._IO_FILE* @fopen(i8* noundef %0, i8* noundef getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0)) #25
  %15 = icmp eq %struct._IO_FILE* %14, null
  br i1 %15, label %19, label %16

16:                                               ; preds = %12
  %17 = tail call i64 @fwrite(i8* noundef %11, i64 noundef 1, i64 noundef %13, %struct._IO_FILE* noundef nonnull %14) #25
  %18 = tail call i32 @fclose(%struct._IO_FILE* noundef nonnull %14) #25
  br label %19

19:                                               ; preds = %4, %12, %16
  %20 = phi i32 [ 0, %16 ], [ 79, %12 ], [ %9, %4 ]
  tail call void @free(i8* noundef %11) #25
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %8) #25
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7) #25
  ret i32 %20
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind readnone uwtable willreturn
define dso_local noundef i8* @_Z18lodepng_error_textj(i32 noundef %0) local_unnamed_addr #17 {
  %2 = icmp ult i32 %0, 116
  br i1 %2, label %3, label %7

3:                                                ; preds = %1
  %4 = sext i32 %0 to i64
  %5 = getelementptr inbounds [116 x i8*], [116 x i8*]* @switch.table._Z18lodepng_error_textj, i64 0, i64 %4
  %6 = load i8*, i8** %5, align 8
  br label %7

7:                                                ; preds = %1, %3
  %8 = phi i8* [ %6, %3 ], [ getelementptr inbounds ([19 x i8], [19 x i8]* @.str.114, i64 0, i64 0), %1 ]
  ret i8* %8
}

; Function Attrs: uwtable
define dso_local noundef i32 @_ZN7lodepng9load_fileERSt6vectorIhSaIhEERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE(%"class.std::vector"* noundef nonnull align 8 dereferenceable(24) %0, %"class.std::__cxx11::basic_string"* nocapture noundef nonnull readonly align 8 dereferenceable(32) %1) local_unnamed_addr #12 {
  %3 = alloca i8, align 1
  %4 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %1, i64 0, i32 0, i32 0
  %5 = load i8*, i8** %4, align 8, !tbaa !872
  %6 = tail call noalias %struct._IO_FILE* @fopen(i8* noundef %5, i8* noundef getelementptr inbounds ([3 x i8], [3 x i8]* @.str.115, i64 0, i64 0)) #25
  %7 = icmp eq %struct._IO_FILE* %6, null
  br i1 %7, label %49, label %8

8:                                                ; preds = %2
  %9 = tail call i32 @fseek(%struct._IO_FILE* noundef nonnull %6, i64 noundef 0, i32 noundef 2) #25
  %10 = icmp eq i32 %9, 0
  br i1 %10, label %11, label %14

11:                                               ; preds = %8
  %12 = tail call i64 @ftell(%struct._IO_FILE* noundef nonnull %6) #25
  %13 = icmp eq i64 %12, 9223372036854775807
  br i1 %13, label %14, label %16

14:                                               ; preds = %8, %11
  %15 = tail call i32 @fclose(%struct._IO_FILE* noundef nonnull %6) #25
  br label %49

16:                                               ; preds = %11
  %17 = tail call i32 @fclose(%struct._IO_FILE* noundef nonnull %6) #25
  %18 = icmp slt i64 %12, 0
  br i1 %18, label %49, label %19

19:                                               ; preds = %16
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %3)
  store i8 0, i8* %3, align 1, !tbaa !14
  %20 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %0, i64 0, i32 0, i32 0, i32 0, i32 1
  %21 = load i8*, i8** %20, align 8, !tbaa !875
  %22 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %23 = load i8*, i8** %22, align 8, !tbaa !877
  %24 = ptrtoint i8* %21 to i64
  %25 = ptrtoint i8* %23 to i64
  %26 = sub i64 %24, %25
  %27 = icmp ugt i64 %12, %26
  br i1 %27, label %28, label %31

28:                                               ; preds = %19
  %29 = sub i64 %12, %26
  call void @_ZNSt6vectorIhSaIhEE14_M_fill_insertEN9__gnu_cxx17__normal_iteratorIPhS1_EEmRKh(%"class.std::vector"* noundef nonnull align 8 dereferenceable(24) %0, i8* %21, i64 noundef %29, i8* noundef nonnull align 1 dereferenceable(1) %3)
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %3)
  %30 = load i8*, i8** %22, align 8, !tbaa !877
  br label %39

31:                                               ; preds = %19
  %32 = icmp ult i64 %12, %26
  br i1 %32, label %33, label %37

33:                                               ; preds = %31
  %34 = getelementptr inbounds i8, i8* %23, i64 %12
  %35 = icmp eq i8* %21, %34
  br i1 %35, label %37, label %36

36:                                               ; preds = %33
  store i8* %34, i8** %20, align 8, !tbaa !875
  br label %37

37:                                               ; preds = %31, %33, %36
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %3)
  %38 = icmp eq i64 %12, 0
  br i1 %38, label %49, label %39

39:                                               ; preds = %28, %37
  %40 = phi i8* [ %30, %28 ], [ %23, %37 ]
  %41 = load i8*, i8** %4, align 8, !tbaa !872
  %42 = call noalias %struct._IO_FILE* @fopen(i8* noundef %41, i8* noundef getelementptr inbounds ([3 x i8], [3 x i8]* @.str.115, i64 0, i64 0)) #25
  %43 = icmp eq %struct._IO_FILE* %42, null
  br i1 %43, label %49, label %44

44:                                               ; preds = %39
  %45 = call i64 @fread(i8* noundef %40, i64 noundef 1, i64 noundef %12, %struct._IO_FILE* noundef nonnull %42) #25
  %46 = call i32 @fclose(%struct._IO_FILE* noundef nonnull %42) #25
  %47 = icmp eq i64 %45, %12
  %48 = select i1 %47, i32 0, i32 78
  br label %49

49:                                               ; preds = %2, %44, %39, %14, %37, %16
  %50 = phi i32 [ 78, %16 ], [ 0, %37 ], [ 78, %14 ], [ 78, %39 ], [ %48, %44 ], [ 78, %2 ]
  ret i32 %50
}

; Function Attrs: uwtable
define linkonce_odr dso_local void @_ZNSt6vectorIhSaIhEE14_M_fill_insertEN9__gnu_cxx17__normal_iteratorIPhS1_EEmRKh(%"class.std::vector"* noundef nonnull align 8 dereferenceable(24) %0, i8* %1, i64 noundef %2, i8* noundef nonnull align 1 dereferenceable(1) %3) local_unnamed_addr #12 comdat align 2 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
  %5 = icmp eq i64 %2, 0
  br i1 %5, label %89, label %6

6:                                                ; preds = %4
  %7 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %0, i64 0, i32 0, i32 0, i32 0, i32 2
  %8 = load i8*, i8** %7, align 8, !tbaa !878
  %9 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %0, i64 0, i32 0, i32 0, i32 0, i32 1
  %10 = load i8*, i8** %9, align 8, !tbaa !875
  %11 = ptrtoint i8* %8 to i64
  %12 = ptrtoint i8* %10 to i64
  %13 = sub i64 %11, %12
  %14 = icmp ult i64 %13, %2
  br i1 %14, label %43, label %15

15:                                               ; preds = %6
  %16 = load i8, i8* %3, align 1, !tbaa !14
  %17 = ptrtoint i8* %1 to i64
  %18 = sub i64 %12, %17
  %19 = icmp ugt i64 %18, %2
  br i1 %19, label %20, label %32

20:                                               ; preds = %15
  %21 = sub i64 0, %2
  %22 = getelementptr inbounds i8, i8* %10, i64 %21
  %23 = ptrtoint i8* %22 to i64
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 1 %10, i8* align 1 %22, i64 %2, i1 false) #25
  %24 = load i8*, i8** %9, align 8, !tbaa !875
  %25 = getelementptr inbounds i8, i8* %24, i64 %2
  store i8* %25, i8** %9, align 8, !tbaa !875
  %26 = sub i64 %23, %17
  %27 = icmp eq i64 %26, 0
  br i1 %27, label %31, label %28

28:                                               ; preds = %20
  %29 = sub i64 0, %26
  %30 = getelementptr inbounds i8, i8* %10, i64 %29
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 1 %30, i8* align 1 %1, i64 %26, i1 false) #25
  br label %31

31:                                               ; preds = %28, %20
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %1, i8 %16, i64 %2, i1 false) #25
  br label %89

32:                                               ; preds = %15
  %33 = sub i64 %2, %18
  %34 = icmp eq i64 %33, 0
  br i1 %34, label %37, label %35

35:                                               ; preds = %32
  %36 = getelementptr inbounds i8, i8* %10, i64 %33
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %10, i8 %16, i64 %33, i1 false) #25
  br label %37

37:                                               ; preds = %32, %35
  %38 = phi i8* [ %10, %32 ], [ %36, %35 ]
  store i8* %38, i8** %9, align 8, !tbaa !875
  %39 = icmp eq i64 %18, 0
  br i1 %39, label %89, label %40

40:                                               ; preds = %37
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 1 %38, i8* align 1 %1, i64 %18, i1 false) #25
  %41 = load i8*, i8** %9, align 8, !tbaa !875
  %42 = getelementptr inbounds i8, i8* %41, i64 %18
  store i8* %42, i8** %9, align 8, !tbaa !875
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %1, i8 %16, i64 %18, i1 false) #25
  br label %89

43:                                               ; preds = %6
  %44 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %45 = load i8*, i8** %44, align 8, !tbaa !877
  %46 = ptrtoint i8* %45 to i64
  %47 = sub i64 %12, %46
  %48 = sub i64 9223372036854775807, %47
  %49 = icmp ult i64 %48, %2
  br i1 %49, label %50, label %51

50:                                               ; preds = %43
  tail call void @_ZSt20__throw_length_errorPKc(i8* noundef getelementptr inbounds ([23 x i8], [23 x i8]* @.str.118, i64 0, i64 0)) #26
  unreachable

51:                                               ; preds = %43
  %52 = icmp ult i64 %47, %2
  %53 = select i1 %52, i64 %2, i64 %47
  %54 = add i64 %53, %47
  %55 = icmp ult i64 %54, %47
  %56 = icmp slt i64 %54, 0
  %57 = or i1 %55, %56
  %58 = select i1 %57, i64 9223372036854775807, i64 %54
  %59 = ptrtoint i8* %1 to i64
  %60 = sub i64 %59, %46
  %61 = icmp eq i64 %58, 0
  br i1 %61, label %67, label %62

62:                                               ; preds = %51
  %63 = tail call noalias noundef nonnull i8* @_Znwm(i64 noundef %58) #27
  %64 = load i8*, i8** %44, align 8, !tbaa !877
  %65 = ptrtoint i8* %64 to i64
  %66 = sub i64 %59, %65
  br label %67

67:                                               ; preds = %62, %51
  %68 = phi i64 [ %66, %62 ], [ %60, %51 ]
  %69 = phi i8* [ %64, %62 ], [ %45, %51 ]
  %70 = phi i8* [ %63, %62 ], [ null, %51 ]
  %71 = getelementptr inbounds i8, i8* %70, i64 %60
  %72 = load i8, i8* %3, align 1, !tbaa !14
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %71, i8 %72, i64 %2, i1 false) #25
  %73 = icmp eq i64 %68, 0
  br i1 %73, label %75, label %74

74:                                               ; preds = %67
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 1 %70, i8* align 1 %69, i64 %68, i1 false) #25
  br label %75

75:                                               ; preds = %74, %67
  %76 = getelementptr inbounds i8, i8* %70, i64 %68
  %77 = getelementptr inbounds i8, i8* %76, i64 %2
  %78 = load i8*, i8** %9, align 8, !tbaa !875
  %79 = ptrtoint i8* %78 to i64
  %80 = sub i64 %79, %59
  %81 = icmp eq i64 %80, 0
  br i1 %81, label %83, label %82

82:                                               ; preds = %75
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* nonnull align 1 %77, i8* align 1 %1, i64 %80, i1 false) #25
  br label %83

83:                                               ; preds = %82, %75
  %84 = getelementptr inbounds i8, i8* %77, i64 %80
  %85 = icmp eq i8* %69, null
  br i1 %85, label %87, label %86

86:                                               ; preds = %83
  tail call void @_ZdlPv(i8* noundef nonnull %69) #25
  br label %87

87:                                               ; preds = %83, %86
  store i8* %70, i8** %44, align 8, !tbaa !877
  store i8* %84, i8** %9, align 8, !tbaa !875
  %88 = getelementptr inbounds i8, i8* %70, i64 %58
  store i8* %88, i8** %7, align 8, !tbaa !878
  br label %89

89:                                               ; preds = %37, %31, %40, %87, %4
  ret void
}

declare dso_local i32 @__gxx_personality_v0(...)

; Function Attrs: argmemonly nofree nounwind willreturn
declare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #6

; Function Attrs: noreturn
declare dso_local void @_ZSt20__throw_length_errorPKc(i8* noundef) local_unnamed_addr #22

; Function Attrs: nobuiltin allocsize(0)
declare dso_local noundef nonnull i8* @_Znwm(i64 noundef) local_unnamed_addr #23

; Function Attrs: nobuiltin nounwind
declare dso_local void @_ZdlPv(i8* noundef) local_unnamed_addr #24

; Function Attrs: nofree nounwind uwtable
define dso_local noundef i32 @_ZN7lodepng9save_fileERKSt6vectorIhSaIhEERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE(%"class.std::vector"* nocapture noundef nonnull readonly align 8 dereferenceable(24) %0, %"class.std::__cxx11::basic_string"* nocapture noundef nonnull readonly align 8 dereferenceable(32) %1) local_unnamed_addr #0 {
  %3 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %4 = load i8*, i8** %3, align 8, !tbaa !7
  %5 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %0, i64 0, i32 0, i32 0, i32 0, i32 1
  %6 = load i8*, i8** %5, align 8, !tbaa !7
  %7 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %1, i64 0, i32 0, i32 0
  %8 = load i8*, i8** %7, align 8, !tbaa !872
  %9 = tail call noalias %struct._IO_FILE* @fopen(i8* noundef %8, i8* noundef getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0)) #25
  %10 = icmp eq %struct._IO_FILE* %9, null
  br i1 %10, label %19, label %11

11:                                               ; preds = %2
  %12 = ptrtoint i8* %6 to i64
  %13 = ptrtoint i8* %4 to i64
  %14 = sub i64 %12, %13
  %15 = icmp eq i8* %4, %6
  %16 = select i1 %15, i8* null, i8* %4
  %17 = tail call i64 @fwrite(i8* noundef %16, i64 noundef 1, i64 noundef %14, %struct._IO_FILE* noundef nonnull %9) #25
  %18 = tail call i32 @fclose(%struct._IO_FILE* noundef nonnull %9) #25
  br label %19

19:                                               ; preds = %2, %11
  %20 = phi i32 [ 0, %11 ], [ 79, %2 ]
  ret i32 %20
}

; Function Attrs: uwtable
define dso_local noundef i32 @_ZN7lodepng10decompressERSt6vectorIhSaIhEEPKhmRK25LodePNGDecompressSettings(%"class.std::vector"* noundef nonnull align 8 dereferenceable(24) %0, i8* noundef %1, i64 noundef %2, %struct.LodePNGDecompressSettings* noundef nonnull align 8 dereferenceable(40) %3) local_unnamed_addr #12 {
  %5 = alloca %struct.ucvector, align 8
  %6 = alloca i8*, align 8
  %7 = alloca i64, align 8
  %8 = bitcast i8** %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %8) #25
  store i8* null, i8** %6, align 8, !tbaa !7
  %9 = bitcast i64* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %9) #25
  store i64 0, i64* %7, align 8, !tbaa !3
  %10 = getelementptr inbounds %struct.LodePNGDecompressSettings, %struct.LodePNGDecompressSettings* %3, i64 0, i32 3
  %11 = bitcast {}** %10 to i32 (i8**, i64*, i8*, i64, %struct.LodePNGDecompressSettings*)**
  %12 = load i32 (i8**, i64*, i8*, i64, %struct.LodePNGDecompressSettings*)*, i32 (i8**, i64*, i8*, i64, %struct.LodePNGDecompressSettings*)** %11, align 8, !tbaa !342
  %13 = icmp eq i32 (i8**, i64*, i8*, i64, %struct.LodePNGDecompressSettings*)* %12, null
  br i1 %13, label %25, label %14

14:                                               ; preds = %4
  %15 = call noundef i32 %12(i8** noundef nonnull %6, i64* noundef nonnull %7, i8* noundef %1, i64 noundef %2, %struct.LodePNGDecompressSettings* noundef nonnull %3)
  %16 = icmp eq i32 %15, 0
  br i1 %16, label %33, label %17

17:                                               ; preds = %14
  %18 = getelementptr inbounds %struct.LodePNGDecompressSettings, %struct.LodePNGDecompressSettings* %3, i64 0, i32 2
  %19 = load i64, i64* %18, align 8, !tbaa !52
  %20 = icmp eq i64 %19, 0
  br i1 %20, label %33, label %21

21:                                               ; preds = %17
  %22 = load i64, i64* %7, align 8, !tbaa !3
  %23 = icmp ugt i64 %22, %19
  %24 = select i1 %23, i32 109, i32 110
  br label %33

25:                                               ; preds = %4
  %26 = bitcast %struct.ucvector* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %26) #25
  %27 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %5, i64 0, i32 0
  %28 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %5, i64 0, i32 1
  %29 = bitcast %struct.ucvector* %5 to i8*
  call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(24) %29, i8 0, i64 24, i1 false)
  %30 = call fastcc noundef i32 @_ZL24lodepng_zlib_decompressvP8ucvectorPKhmPK25LodePNGDecompressSettings(%struct.ucvector* noundef nonnull %5, i8* noundef %1, i64 noundef %2, %struct.LodePNGDecompressSettings* noundef nonnull %3)
  %31 = load i8*, i8** %27, align 8, !tbaa !39
  store i8* %31, i8** %6, align 8, !tbaa !7
  %32 = load i64, i64* %28, align 8, !tbaa !44
  store i64 %32, i64* %7, align 8, !tbaa !3
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %26) #25
  br label %36

33:                                               ; preds = %21, %17, %14
  %34 = phi i32 [ %24, %21 ], [ 0, %14 ], [ 110, %17 ]
  %35 = load i8*, i8** %6, align 8, !tbaa !7
  br label %36

36:                                               ; preds = %33, %25
  %37 = phi i8* [ %35, %33 ], [ %31, %25 ]
  %38 = phi i32 [ %34, %33 ], [ %30, %25 ]
  %39 = icmp eq i8* %37, null
  br i1 %39, label %46, label %40

40:                                               ; preds = %36
  %41 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %0, i64 0, i32 0, i32 0, i32 0, i32 1
  %42 = load i8*, i8** %41, align 8, !tbaa !7
  %43 = load i64, i64* %7, align 8, !tbaa !3
  %44 = getelementptr inbounds i8, i8* %37, i64 %43
  call void @_ZNSt6vectorIhSaIhEE15_M_range_insertIPhEEvN9__gnu_cxx17__normal_iteratorIS3_S1_EET_S7_St20forward_iterator_tag(%"class.std::vector"* noundef nonnull align 8 dereferenceable(24) %0, i8* %42, i8* noundef nonnull %37, i8* noundef nonnull %44)
  %45 = load i8*, i8** %6, align 8, !tbaa !7
  call void @free(i8* noundef %45) #25
  br label %46

46:                                               ; preds = %40, %36
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %9) #25
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %8) #25
  ret i32 %38
}

; Function Attrs: uwtable
define linkonce_odr dso_local void @_ZNSt6vectorIhSaIhEE15_M_range_insertIPhEEvN9__gnu_cxx17__normal_iteratorIS3_S1_EET_S7_St20forward_iterator_tag(%"class.std::vector"* noundef nonnull align 8 dereferenceable(24) %0, i8* %1, i8* noundef %2, i8* noundef %3) local_unnamed_addr #12 comdat align 2 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
  %5 = icmp eq i8* %2, %3
  br i1 %5, label %101, label %6

6:                                                ; preds = %4
  %7 = ptrtoint i8* %3 to i64
  %8 = ptrtoint i8* %2 to i64
  %9 = sub i64 %7, %8
  %10 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %0, i64 0, i32 0, i32 0, i32 0, i32 2
  %11 = load i8*, i8** %10, align 8, !tbaa !878
  %12 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %0, i64 0, i32 0, i32 0, i32 0, i32 1
  %13 = load i8*, i8** %12, align 8, !tbaa !875
  %14 = ptrtoint i8* %11 to i64
  %15 = ptrtoint i8* %13 to i64
  %16 = sub i64 %14, %15
  %17 = icmp ult i64 %16, %9
  br i1 %17, label %58, label %18

18:                                               ; preds = %6
  %19 = ptrtoint i8* %1 to i64
  %20 = sub i64 %15, %19
  %21 = icmp ult i64 %9, %20
  br i1 %21, label %22, label %39

22:                                               ; preds = %18
  %23 = sub i64 0, %9
  %24 = getelementptr inbounds i8, i8* %13, i64 %23
  %25 = ptrtoint i8* %24 to i64
  %26 = icmp eq i64 %9, 0
  br i1 %26, label %29, label %27

27:                                               ; preds = %22
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 1 %13, i8* align 1 %24, i64 %9, i1 false) #25
  %28 = load i8*, i8** %12, align 8, !tbaa !875
  br label %29

29:                                               ; preds = %22, %27
  %30 = phi i8* [ %13, %22 ], [ %28, %27 ]
  %31 = getelementptr inbounds i8, i8* %30, i64 %9
  store i8* %31, i8** %12, align 8, !tbaa !875
  %32 = sub i64 %25, %19
  %33 = icmp eq i64 %32, 0
  br i1 %33, label %37, label %34

34:                                               ; preds = %29
  %35 = sub i64 0, %32
  %36 = getelementptr inbounds i8, i8* %13, i64 %35
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 1 %36, i8* align 1 %1, i64 %32, i1 false) #25
  br label %37

37:                                               ; preds = %29, %34
  br i1 %26, label %101, label %38

38:                                               ; preds = %37
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 1 %1, i8* align 1 %2, i64 %9, i1 false) #25
  br label %101

39:                                               ; preds = %18
  %40 = getelementptr inbounds i8, i8* %2, i64 %20
  %41 = ptrtoint i8* %40 to i64
  %42 = sub i64 %7, %41
  %43 = icmp eq i64 %42, 0
  br i1 %43, label %46, label %44

44:                                               ; preds = %39
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 1 %13, i8* align 1 %40, i64 %42, i1 false) #25
  %45 = load i8*, i8** %12, align 8, !tbaa !875
  br label %46

46:                                               ; preds = %39, %44
  %47 = phi i8* [ %13, %39 ], [ %45, %44 ]
  %48 = sub i64 %9, %20
  %49 = getelementptr inbounds i8, i8* %47, i64 %48
  store i8* %49, i8** %12, align 8, !tbaa !875
  %50 = icmp eq i64 %20, 0
  br i1 %50, label %53, label %51

51:                                               ; preds = %46
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 1 %49, i8* align 1 %1, i64 %20, i1 false) #25
  %52 = load i8*, i8** %12, align 8, !tbaa !875
  br label %53

53:                                               ; preds = %46, %51
  %54 = phi i8* [ %49, %46 ], [ %52, %51 ]
  %55 = getelementptr inbounds i8, i8* %54, i64 %20
  store i8* %55, i8** %12, align 8, !tbaa !875
  %56 = icmp eq i64 %20, 0
  br i1 %56, label %101, label %57

57:                                               ; preds = %53
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 1 %1, i8* align 1 %2, i64 %20, i1 false) #25
  br label %101

58:                                               ; preds = %6
  %59 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %60 = load i8*, i8** %59, align 8, !tbaa !877
  %61 = ptrtoint i8* %60 to i64
  %62 = sub i64 %15, %61
  %63 = sub i64 9223372036854775807, %62
  %64 = icmp ult i64 %63, %9
  br i1 %64, label %65, label %66

65:                                               ; preds = %58
  tail call void @_ZSt20__throw_length_errorPKc(i8* noundef getelementptr inbounds ([24 x i8], [24 x i8]* @.str.119, i64 0, i64 0)) #26
  unreachable

66:                                               ; preds = %58
  %67 = icmp ult i64 %62, %9
  %68 = select i1 %67, i64 %9, i64 %62
  %69 = add i64 %68, %62
  %70 = icmp ult i64 %69, %62
  %71 = icmp slt i64 %69, 0
  %72 = or i1 %70, %71
  %73 = select i1 %72, i64 9223372036854775807, i64 %69
  %74 = icmp eq i64 %73, 0
  br i1 %74, label %79, label %75

75:                                               ; preds = %66
  %76 = tail call noalias noundef nonnull i8* @_Znwm(i64 noundef %73) #27
  %77 = load i8*, i8** %59, align 8, !tbaa !877
  %78 = ptrtoint i8* %77 to i64
  br label %79

79:                                               ; preds = %66, %75
  %80 = phi i64 [ %61, %66 ], [ %78, %75 ]
  %81 = phi i8* [ %60, %66 ], [ %77, %75 ]
  %82 = phi i8* [ null, %66 ], [ %76, %75 ]
  %83 = ptrtoint i8* %1 to i64
  %84 = sub i64 %83, %80
  %85 = icmp eq i64 %84, 0
  br i1 %85, label %87, label %86

86:                                               ; preds = %79
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 1 %82, i8* align 1 %81, i64 %84, i1 false) #25
  br label %87

87:                                               ; preds = %79, %86
  %88 = getelementptr inbounds i8, i8* %82, i64 %84
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 1 %88, i8* align 1 %2, i64 %9, i1 false) #25
  %89 = getelementptr inbounds i8, i8* %88, i64 %9
  %90 = load i8*, i8** %12, align 8, !tbaa !875
  %91 = ptrtoint i8* %90 to i64
  %92 = sub i64 %91, %83
  %93 = icmp eq i64 %92, 0
  br i1 %93, label %95, label %94

94:                                               ; preds = %87
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* nonnull align 1 %89, i8* align 1 %1, i64 %92, i1 false) #25
  br label %95

95:                                               ; preds = %94, %87
  %96 = getelementptr inbounds i8, i8* %89, i64 %92
  %97 = icmp eq i8* %81, null
  br i1 %97, label %99, label %98

98:                                               ; preds = %95
  tail call void @_ZdlPv(i8* noundef nonnull %81) #25
  br label %99

99:                                               ; preds = %95, %98
  store i8* %82, i8** %59, align 8, !tbaa !877
  store i8* %96, i8** %12, align 8, !tbaa !875
  %100 = getelementptr inbounds i8, i8* %82, i64 %73
  store i8* %100, i8** %10, align 8, !tbaa !878
  br label %101

101:                                              ; preds = %57, %53, %38, %37, %99, %4
  ret void
}

; Function Attrs: uwtable
define dso_local noundef i32 @_ZN7lodepng10decompressERSt6vectorIhSaIhEERKS2_RK25LodePNGDecompressSettings(%"class.std::vector"* noundef nonnull align 8 dereferenceable(24) %0, %"class.std::vector"* nocapture noundef nonnull readonly align 8 dereferenceable(24) %1, %struct.LodePNGDecompressSettings* noundef nonnull align 8 dereferenceable(40) %2) local_unnamed_addr #12 {
  %4 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %1, i64 0, i32 0, i32 0, i32 0, i32 0
  %5 = load i8*, i8** %4, align 8, !tbaa !7
  %6 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %1, i64 0, i32 0, i32 0, i32 0, i32 1
  %7 = load i8*, i8** %6, align 8, !tbaa !7
  %8 = icmp eq i8* %5, %7
  %9 = select i1 %8, i8* null, i8* %5
  %10 = ptrtoint i8* %7 to i64
  %11 = ptrtoint i8* %5 to i64
  %12 = sub i64 %10, %11
  %13 = tail call noundef i32 @_ZN7lodepng10decompressERSt6vectorIhSaIhEEPKhmRK25LodePNGDecompressSettings(%"class.std::vector"* noundef nonnull align 8 dereferenceable(24) %0, i8* noundef %9, i64 noundef %12, %struct.LodePNGDecompressSettings* noundef nonnull align 8 dereferenceable(40) %2)
  ret i32 %13
}

; Function Attrs: uwtable
define dso_local noundef i32 @_ZN7lodepng8compressERSt6vectorIhSaIhEEPKhmRK23LodePNGCompressSettings(%"class.std::vector"* noundef nonnull align 8 dereferenceable(24) %0, i8* noundef %1, i64 noundef %2, %struct.LodePNGCompressSettings* noundef nonnull align 8 dereferenceable(48) %3) local_unnamed_addr #12 {
  %5 = alloca i8*, align 8
  %6 = alloca i64, align 8
  %7 = bitcast i8** %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %7) #25
  store i8* null, i8** %5, align 8, !tbaa !7
  %8 = bitcast i64* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %8) #25
  store i64 0, i64* %6, align 8, !tbaa !3
  %9 = getelementptr inbounds %struct.LodePNGCompressSettings, %struct.LodePNGCompressSettings* %3, i64 0, i32 6
  %10 = bitcast {}** %9 to i32 (i8**, i64*, i8*, i64, %struct.LodePNGCompressSettings*)**
  %11 = load i32 (i8**, i64*, i8*, i64, %struct.LodePNGCompressSettings*)*, i32 (i8**, i64*, i8*, i64, %struct.LodePNGCompressSettings*)** %10, align 8, !tbaa !658
  %12 = icmp eq i32 (i8**, i64*, i8*, i64, %struct.LodePNGCompressSettings*)* %11, null
  br i1 %12, label %17, label %13

13:                                               ; preds = %4
  %14 = call noundef i32 %11(i8** noundef nonnull %5, i64* noundef nonnull %6, i8* noundef %1, i64 noundef %2, %struct.LodePNGCompressSettings* noundef nonnull %3)
  %15 = icmp eq i32 %14, 0
  %16 = select i1 %15, i32 0, i32 111
  br label %19

17:                                               ; preds = %4
  %18 = call noundef i32 @_Z21lodepng_zlib_compressPPhPmPKhmPK23LodePNGCompressSettings(i8** noundef nonnull %5, i64* noundef nonnull %6, i8* noundef %1, i64 noundef %2, %struct.LodePNGCompressSettings* noundef nonnull %3)
  br label %19

19:                                               ; preds = %13, %17
  %20 = phi i32 [ %16, %13 ], [ %18, %17 ]
  %21 = load i8*, i8** %5, align 8, !tbaa !7
  %22 = icmp eq i8* %21, null
  br i1 %22, label %29, label %23

23:                                               ; preds = %19
  %24 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %0, i64 0, i32 0, i32 0, i32 0, i32 1
  %25 = load i8*, i8** %24, align 8, !tbaa !7
  %26 = load i64, i64* %6, align 8, !tbaa !3
  %27 = getelementptr inbounds i8, i8* %21, i64 %26
  call void @_ZNSt6vectorIhSaIhEE15_M_range_insertIPhEEvN9__gnu_cxx17__normal_iteratorIS3_S1_EET_S7_St20forward_iterator_tag(%"class.std::vector"* noundef nonnull align 8 dereferenceable(24) %0, i8* %25, i8* noundef nonnull %21, i8* noundef nonnull %27)
  %28 = load i8*, i8** %5, align 8, !tbaa !7
  call void @free(i8* noundef %28) #25
  br label %29

29:                                               ; preds = %23, %19
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %8) #25
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7) #25
  ret i32 %20
}

; Function Attrs: uwtable
define dso_local noundef i32 @_ZN7lodepng8compressERSt6vectorIhSaIhEERKS2_RK23LodePNGCompressSettings(%"class.std::vector"* noundef nonnull align 8 dereferenceable(24) %0, %"class.std::vector"* nocapture noundef nonnull readonly align 8 dereferenceable(24) %1, %struct.LodePNGCompressSettings* noundef nonnull align 8 dereferenceable(48) %2) local_unnamed_addr #12 {
  %4 = alloca i8*, align 8
  %5 = alloca i64, align 8
  %6 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %1, i64 0, i32 0, i32 0, i32 0, i32 0
  %7 = load i8*, i8** %6, align 8, !tbaa !7
  %8 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %1, i64 0, i32 0, i32 0, i32 0, i32 1
  %9 = load i8*, i8** %8, align 8, !tbaa !7
  %10 = icmp eq i8* %7, %9
  %11 = select i1 %10, i8* null, i8* %7
  %12 = ptrtoint i8* %9 to i64
  %13 = ptrtoint i8* %7 to i64
  %14 = sub i64 %12, %13
  %15 = bitcast i8** %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %15) #25
  store i8* null, i8** %4, align 8, !tbaa !7
  %16 = bitcast i64* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %16) #25
  store i64 0, i64* %5, align 8, !tbaa !3
  %17 = getelementptr inbounds %struct.LodePNGCompressSettings, %struct.LodePNGCompressSettings* %2, i64 0, i32 6
  %18 = bitcast {}** %17 to i32 (i8**, i64*, i8*, i64, %struct.LodePNGCompressSettings*)**
  %19 = load i32 (i8**, i64*, i8*, i64, %struct.LodePNGCompressSettings*)*, i32 (i8**, i64*, i8*, i64, %struct.LodePNGCompressSettings*)** %18, align 8, !tbaa !658
  %20 = icmp eq i32 (i8**, i64*, i8*, i64, %struct.LodePNGCompressSettings*)* %19, null
  br i1 %20, label %25, label %21

21:                                               ; preds = %3
  %22 = call noundef i32 %19(i8** noundef nonnull %4, i64* noundef nonnull %5, i8* noundef %11, i64 noundef %14, %struct.LodePNGCompressSettings* noundef nonnull %2)
  %23 = icmp eq i32 %22, 0
  %24 = select i1 %23, i32 0, i32 111
  br label %27

25:                                               ; preds = %3
  %26 = call noundef i32 @_Z21lodepng_zlib_compressPPhPmPKhmPK23LodePNGCompressSettings(i8** noundef nonnull %4, i64* noundef nonnull %5, i8* noundef %11, i64 noundef %14, %struct.LodePNGCompressSettings* noundef nonnull %2)
  br label %27

27:                                               ; preds = %25, %21
  %28 = phi i32 [ %24, %21 ], [ %26, %25 ]
  %29 = load i8*, i8** %4, align 8, !tbaa !7
  %30 = icmp eq i8* %29, null
  br i1 %30, label %37, label %31

31:                                               ; preds = %27
  %32 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %0, i64 0, i32 0, i32 0, i32 0, i32 1
  %33 = load i8*, i8** %32, align 8, !tbaa !7
  %34 = load i64, i64* %5, align 8, !tbaa !3
  %35 = getelementptr inbounds i8, i8* %29, i64 %34
  call void @_ZNSt6vectorIhSaIhEE15_M_range_insertIPhEEvN9__gnu_cxx17__normal_iteratorIS3_S1_EET_S7_St20forward_iterator_tag(%"class.std::vector"* noundef nonnull align 8 dereferenceable(24) %0, i8* %33, i8* noundef nonnull %29, i8* noundef nonnull %35)
  %36 = load i8*, i8** %4, align 8, !tbaa !7
  call void @free(i8* noundef %36) #25
  br label %37

37:                                               ; preds = %27, %31
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %16) #25
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %15) #25
  ret i32 %28
}

; Function Attrs: mustprogress nofree nosync nounwind uwtable willreturn writeonly
define dso_local void @_ZN7lodepng5StateC2Ev(%"class.lodepng::State"* noundef nonnull writeonly align 8 dereferenceable(544) %0) unnamed_addr #20 align 2 {
  %2 = getelementptr inbounds %"class.lodepng::State", %"class.lodepng::State"* %0, i64 0, i32 0, i32 0, i32 4
  store i32 1, i32* %2, align 4, !tbaa !619
  %3 = getelementptr inbounds %"class.lodepng::State", %"class.lodepng::State"* %0, i64 0, i32 0, i32 0, i32 5
  store i32 1, i32* %3, align 8, !tbaa !625
  %4 = getelementptr inbounds %"class.lodepng::State", %"class.lodepng::State"* %0, i64 0, i32 0, i32 0, i32 6
  store i32 0, i32* %4, align 4, !tbaa !626
  %5 = getelementptr inbounds %"class.lodepng::State", %"class.lodepng::State"* %0, i64 0, i32 0, i32 0, i32 7
  %6 = bitcast i64* %5 to <2 x i64>*
  store <2 x i64> <i64 16777216, i64 16777216>, <2 x i64>* %6, align 8, !tbaa !3
  %7 = bitcast %"class.lodepng::State"* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(52) %7, i8 0, i64 52, i1 false) #25
  %8 = getelementptr inbounds %"class.lodepng::State", %"class.lodepng::State"* %0, i64 0, i32 0, i32 1, i32 0, i32 0
  %9 = bitcast i32* %8 to <4 x i32>*
  store <4 x i32> <i32 2, i32 1, i32 2048, i32 3>, <4 x i32>* %9, align 8, !tbaa !9
  %10 = getelementptr inbounds %"class.lodepng::State", %"class.lodepng::State"* %0, i64 0, i32 0, i32 1, i32 0, i32 4
  store i32 128, i32* %10, align 8, !tbaa !109
  %11 = getelementptr inbounds %"class.lodepng::State", %"class.lodepng::State"* %0, i64 0, i32 0, i32 1, i32 0, i32 5
  store i32 1, i32* %11, align 4, !tbaa !110
  %12 = getelementptr inbounds %"class.lodepng::State", %"class.lodepng::State"* %0, i64 0, i32 0, i32 1, i32 0, i32 6
  %13 = bitcast {}** %12 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(24) %13, i8 0, i64 24, i1 false) #25
  %14 = getelementptr inbounds %"class.lodepng::State", %"class.lodepng::State"* %0, i64 0, i32 0, i32 1, i32 2
  store i32 1, i32* %14, align 4, !tbaa !620
  %15 = getelementptr inbounds %"class.lodepng::State", %"class.lodepng::State"* %0, i64 0, i32 0, i32 1, i32 3
  store i32 5, i32* %15, align 8, !tbaa !621
  %16 = getelementptr inbounds %"class.lodepng::State", %"class.lodepng::State"* %0, i64 0, i32 0, i32 1, i32 1
  store i32 1, i32* %16, align 8, !tbaa !622
  %17 = getelementptr inbounds %"class.lodepng::State", %"class.lodepng::State"* %0, i64 0, i32 0, i32 1, i32 4
  %18 = getelementptr inbounds %"class.lodepng::State", %"class.lodepng::State"* %0, i64 0, i32 0, i32 1, i32 7
  %19 = bitcast i8** %17 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(16) %19, i8 0, i64 16, i1 false) #25
  store i32 1, i32* %18, align 8, !tbaa !623
  %20 = getelementptr inbounds %"class.lodepng::State", %"class.lodepng::State"* %0, i64 0, i32 0, i32 2, i32 4
  %21 = getelementptr inbounds %"class.lodepng::State", %"class.lodepng::State"* %0, i64 0, i32 0, i32 2, i32 0
  %22 = bitcast i32* %20 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(16) %22, i8 0, i64 16, i1 false) #25
  store i32 6, i32* %21, align 8, !tbaa !147
  %23 = getelementptr inbounds %"class.lodepng::State", %"class.lodepng::State"* %0, i64 0, i32 0, i32 2, i32 1
  store i32 8, i32* %23, align 4, !tbaa !150
  %24 = getelementptr inbounds %"class.lodepng::State", %"class.lodepng::State"* %0, i64 0, i32 0, i32 2, i32 2
  %25 = bitcast i8** %24 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(16) %25, i8 0, i64 16, i1 false) #25
  %26 = getelementptr inbounds %"class.lodepng::State", %"class.lodepng::State"* %0, i64 0, i32 0, i32 3, i32 3, i32 4
  %27 = getelementptr inbounds %"class.lodepng::State", %"class.lodepng::State"* %0, i64 0, i32 0, i32 3, i32 3, i32 0
  %28 = bitcast i32* %26 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(16) %28, i8 0, i64 16, i1 false) #25
  store i32 6, i32* %27, align 8, !tbaa !147
  %29 = getelementptr inbounds %"class.lodepng::State", %"class.lodepng::State"* %0, i64 0, i32 0, i32 3, i32 3, i32 1
  store i32 8, i32* %29, align 4, !tbaa !150
  %30 = getelementptr inbounds %"class.lodepng::State", %"class.lodepng::State"* %0, i64 0, i32 0, i32 3, i32 3, i32 2
  %31 = bitcast i8** %30 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(16) %31, i8 0, i64 16, i1 false) #25
  %32 = getelementptr inbounds %"class.lodepng::State", %"class.lodepng::State"* %0, i64 0, i32 0, i32 3, i32 2
  store i32 0, i32* %32, align 8, !tbaa !208
  %33 = getelementptr inbounds %"class.lodepng::State", %"class.lodepng::State"* %0, i64 0, i32 0, i32 3, i32 0
  store i32 0, i32* %33, align 8, !tbaa !209
  %34 = getelementptr inbounds %"class.lodepng::State", %"class.lodepng::State"* %0, i64 0, i32 0, i32 3, i32 1
  store i32 0, i32* %34, align 4, !tbaa !210
  %35 = getelementptr inbounds %"class.lodepng::State", %"class.lodepng::State"* %0, i64 0, i32 0, i32 3, i32 4
  %36 = getelementptr inbounds %"class.lodepng::State", %"class.lodepng::State"* %0, i64 0, i32 0, i32 3, i32 18
  store i32 0, i32* %36, align 4, !tbaa !211
  %37 = getelementptr inbounds %"class.lodepng::State", %"class.lodepng::State"* %0, i64 0, i32 0, i32 3, i32 22
  store i32 0, i32* %37, align 4, !tbaa !212
  %38 = getelementptr inbounds %"class.lodepng::State", %"class.lodepng::State"* %0, i64 0, i32 0, i32 3, i32 24
  store i32 0, i32* %38, align 4, !tbaa !213
  %39 = getelementptr inbounds %"class.lodepng::State", %"class.lodepng::State"* %0, i64 0, i32 0, i32 3, i32 33
  store i32 0, i32* %39, align 8, !tbaa !214
  %40 = getelementptr inbounds %"class.lodepng::State", %"class.lodepng::State"* %0, i64 0, i32 0, i32 3, i32 35
  store i32 0, i32* %40, align 8, !tbaa !199
  %41 = getelementptr inbounds %"class.lodepng::State", %"class.lodepng::State"* %0, i64 0, i32 0, i32 3, i32 36
  %42 = getelementptr inbounds %"class.lodepng::State", %"class.lodepng::State"* %0, i64 0, i32 0, i32 3, i32 39
  %43 = bitcast i32* %35 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(84) %43, i8 0, i64 84, i1 false) #25
  %44 = bitcast i8** %41 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(16) %44, i8 0, i64 16, i1 false) #25
  %45 = bitcast i32* %42 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 4 dereferenceable(68) %45, i8 0, i64 68, i1 false) #25
  %46 = getelementptr inbounds %"class.lodepng::State", %"class.lodepng::State"* %0, i64 0, i32 0, i32 4
  store i32 1, i32* %46, align 8, !tbaa !304
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local void @_ZN7lodepng5StateC2ERKS0_(%"class.lodepng::State"* noundef nonnull align 8 dereferenceable(544) %0, %"class.lodepng::State"* nocapture noundef nonnull readonly align 8 dereferenceable(544) %1) unnamed_addr #3 align 2 {
  %3 = getelementptr inbounds %"class.lodepng::State", %"class.lodepng::State"* %0, i64 0, i32 0
  %4 = getelementptr inbounds %"class.lodepng::State", %"class.lodepng::State"* %0, i64 0, i32 0, i32 0, i32 4
  store i32 1, i32* %4, align 4, !tbaa !619
  %5 = getelementptr inbounds %"class.lodepng::State", %"class.lodepng::State"* %0, i64 0, i32 0, i32 0, i32 5
  store i32 1, i32* %5, align 8, !tbaa !625
  %6 = getelementptr inbounds %"class.lodepng::State", %"class.lodepng::State"* %0, i64 0, i32 0, i32 0, i32 6
  store i32 0, i32* %6, align 4, !tbaa !626
  %7 = getelementptr inbounds %"class.lodepng::State", %"class.lodepng::State"* %0, i64 0, i32 0, i32 0, i32 7
  %8 = bitcast i64* %7 to <2 x i64>*
  store <2 x i64> <i64 16777216, i64 16777216>, <2 x i64>* %8, align 8, !tbaa !3
  %9 = bitcast %"class.lodepng::State"* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(52) %9, i8 0, i64 52, i1 false) #25
  %10 = getelementptr inbounds %"class.lodepng::State", %"class.lodepng::State"* %0, i64 0, i32 0, i32 1, i32 0, i32 0
  %11 = bitcast i32* %10 to <4 x i32>*
  store <4 x i32> <i32 2, i32 1, i32 2048, i32 3>, <4 x i32>* %11, align 8, !tbaa !9
  %12 = getelementptr inbounds %"class.lodepng::State", %"class.lodepng::State"* %0, i64 0, i32 0, i32 1, i32 0, i32 4
  store i32 128, i32* %12, align 8, !tbaa !109
  %13 = getelementptr inbounds %"class.lodepng::State", %"class.lodepng::State"* %0, i64 0, i32 0, i32 1, i32 0, i32 5
  store i32 1, i32* %13, align 4, !tbaa !110
  %14 = getelementptr inbounds %"class.lodepng::State", %"class.lodepng::State"* %0, i64 0, i32 0, i32 1, i32 0, i32 6
  %15 = bitcast {}** %14 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(24) %15, i8 0, i64 24, i1 false) #25
  %16 = getelementptr inbounds %"class.lodepng::State", %"class.lodepng::State"* %0, i64 0, i32 0, i32 1, i32 2
  store i32 1, i32* %16, align 4, !tbaa !620
  %17 = getelementptr inbounds %"class.lodepng::State", %"class.lodepng::State"* %0, i64 0, i32 0, i32 1, i32 3
  store i32 5, i32* %17, align 8, !tbaa !621
  %18 = getelementptr inbounds %"class.lodepng::State", %"class.lodepng::State"* %0, i64 0, i32 0, i32 1, i32 1
  store i32 1, i32* %18, align 8, !tbaa !622
  %19 = getelementptr inbounds %"class.lodepng::State", %"class.lodepng::State"* %0, i64 0, i32 0, i32 1, i32 4
  %20 = getelementptr inbounds %"class.lodepng::State", %"class.lodepng::State"* %0, i64 0, i32 0, i32 1, i32 7
  %21 = bitcast i8** %19 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(16) %21, i8 0, i64 16, i1 false) #25
  store i32 1, i32* %20, align 8, !tbaa !623
  %22 = getelementptr inbounds %"class.lodepng::State", %"class.lodepng::State"* %0, i64 0, i32 0, i32 2, i32 4
  %23 = getelementptr inbounds %"class.lodepng::State", %"class.lodepng::State"* %0, i64 0, i32 0, i32 2, i32 0
  %24 = bitcast i32* %22 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(16) %24, i8 0, i64 16, i1 false) #25
  store i32 6, i32* %23, align 8, !tbaa !147
  %25 = getelementptr inbounds %"class.lodepng::State", %"class.lodepng::State"* %0, i64 0, i32 0, i32 2, i32 1
  store i32 8, i32* %25, align 4, !tbaa !150
  %26 = getelementptr inbounds %"class.lodepng::State", %"class.lodepng::State"* %0, i64 0, i32 0, i32 2, i32 2
  %27 = bitcast i8** %26 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(16) %27, i8 0, i64 16, i1 false) #25
  %28 = getelementptr inbounds %"class.lodepng::State", %"class.lodepng::State"* %0, i64 0, i32 0, i32 3, i32 3, i32 4
  %29 = getelementptr inbounds %"class.lodepng::State", %"class.lodepng::State"* %0, i64 0, i32 0, i32 3, i32 3, i32 0
  %30 = bitcast i32* %28 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(16) %30, i8 0, i64 16, i1 false) #25
  store i32 6, i32* %29, align 8, !tbaa !147
  %31 = getelementptr inbounds %"class.lodepng::State", %"class.lodepng::State"* %0, i64 0, i32 0, i32 3, i32 3, i32 1
  store i32 8, i32* %31, align 4, !tbaa !150
  %32 = getelementptr inbounds %"class.lodepng::State", %"class.lodepng::State"* %0, i64 0, i32 0, i32 3, i32 3, i32 2
  %33 = bitcast i8** %32 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(16) %33, i8 0, i64 16, i1 false) #25
  %34 = getelementptr inbounds %"class.lodepng::State", %"class.lodepng::State"* %0, i64 0, i32 0, i32 3, i32 2
  store i32 0, i32* %34, align 8, !tbaa !208
  %35 = getelementptr inbounds %"class.lodepng::State", %"class.lodepng::State"* %0, i64 0, i32 0, i32 3, i32 0
  store i32 0, i32* %35, align 8, !tbaa !209
  %36 = getelementptr inbounds %"class.lodepng::State", %"class.lodepng::State"* %0, i64 0, i32 0, i32 3, i32 1
  store i32 0, i32* %36, align 4, !tbaa !210
  %37 = getelementptr inbounds %"class.lodepng::State", %"class.lodepng::State"* %0, i64 0, i32 0, i32 3, i32 4
  %38 = getelementptr inbounds %"class.lodepng::State", %"class.lodepng::State"* %0, i64 0, i32 0, i32 3, i32 18
  store i32 0, i32* %38, align 4, !tbaa !211
  %39 = getelementptr inbounds %"class.lodepng::State", %"class.lodepng::State"* %0, i64 0, i32 0, i32 3, i32 22
  store i32 0, i32* %39, align 4, !tbaa !212
  %40 = getelementptr inbounds %"class.lodepng::State", %"class.lodepng::State"* %0, i64 0, i32 0, i32 3, i32 24
  store i32 0, i32* %40, align 4, !tbaa !213
  %41 = getelementptr inbounds %"class.lodepng::State", %"class.lodepng::State"* %0, i64 0, i32 0, i32 3, i32 33
  store i32 0, i32* %41, align 8, !tbaa !214
  %42 = getelementptr inbounds %"class.lodepng::State", %"class.lodepng::State"* %0, i64 0, i32 0, i32 3, i32 35
  store i32 0, i32* %42, align 8, !tbaa !199
  %43 = getelementptr inbounds %"class.lodepng::State", %"class.lodepng::State"* %0, i64 0, i32 0, i32 3, i32 36
  %44 = getelementptr inbounds %"class.lodepng::State", %"class.lodepng::State"* %0, i64 0, i32 0, i32 3, i32 39
  %45 = bitcast i32* %37 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(84) %45, i8 0, i64 84, i1 false) #25
  %46 = bitcast i8** %43 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(16) %46, i8 0, i64 16, i1 false) #25
  %47 = bitcast i32* %44 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 4 dereferenceable(68) %47, i8 0, i64 68, i1 false) #25
  %48 = getelementptr inbounds %"class.lodepng::State", %"class.lodepng::State"* %0, i64 0, i32 0, i32 4
  store i32 1, i32* %48, align 8, !tbaa !304
  %49 = getelementptr inbounds %"class.lodepng::State", %"class.lodepng::State"* %1, i64 0, i32 0
  tail call void @_Z18lodepng_state_copyP12LodePNGStatePKS_(%struct.LodePNGState* noundef nonnull %3, %struct.LodePNGState* noundef nonnull %49)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local void @_ZN7lodepng5StateD2Ev(%"class.lodepng::State"* nocapture noundef nonnull align 8 dereferenceable(544) %0) unnamed_addr #3 align 2 {
  %2 = getelementptr inbounds %"class.lodepng::State", %"class.lodepng::State"* %0, i64 0, i32 0, i32 2, i32 2
  %3 = load i8*, i8** %2, align 8, !tbaa !151
  %4 = icmp eq i8* %3, null
  br i1 %4, label %6, label %5

5:                                                ; preds = %1
  tail call void @free(i8* noundef nonnull %3) #25
  br label %6

6:                                                ; preds = %1, %5
  %7 = bitcast i8** %2 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(16) %7, i8 0, i64 16, i1 false) #25
  %8 = getelementptr inbounds %"class.lodepng::State", %"class.lodepng::State"* %0, i64 0, i32 0, i32 3
  tail call void @_Z20lodepng_info_cleanupP11LodePNGInfo(%struct.LodePNGInfo* noundef nonnull %8) #25
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local noundef nonnull align 8 dereferenceable(544) %"class.lodepng::State"* @_ZN7lodepng5StateaSERKS0_(%"class.lodepng::State"* noundef nonnull returned align 8 dereferenceable(544) %0, %"class.lodepng::State"* nocapture noundef nonnull readonly align 8 dereferenceable(544) %1) local_unnamed_addr #3 align 2 {
  %3 = getelementptr inbounds %"class.lodepng::State", %"class.lodepng::State"* %0, i64 0, i32 0
  %4 = getelementptr inbounds %"class.lodepng::State", %"class.lodepng::State"* %1, i64 0, i32 0
  tail call void @_Z18lodepng_state_copyP12LodePNGStatePKS_(%struct.LodePNGState* noundef nonnull %3, %struct.LodePNGState* noundef nonnull %4)
  ret %"class.lodepng::State"* %0
}

; Function Attrs: uwtable
define dso_local noundef i32 @_ZN7lodepng6decodeERSt6vectorIhSaIhEERjS4_PKhm16LodePNGColorTypej(%"class.std::vector"* noundef nonnull align 8 dereferenceable(24) %0, i32* noundef nonnull align 4 dereferenceable(4) %1, i32* noundef nonnull align 4 dereferenceable(4) %2, i8* noundef %3, i64 noundef %4, i32 noundef %5, i32 noundef %6) local_unnamed_addr #12 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
  %8 = alloca i8*, align 8
  %9 = alloca %"class.lodepng::State", align 8
  %10 = bitcast i8** %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %10) #25
  store i8* null, i8** %8, align 8, !tbaa !7
  %11 = call noundef i32 @_Z21lodepng_decode_memoryPPhPjS1_PKhm16LodePNGColorTypej(i8** noundef nonnull %8, i32* noundef nonnull %1, i32* noundef nonnull %2, i8* noundef %3, i64 noundef %4, i32 noundef %5, i32 noundef %6)
  %12 = load i8*, i8** %8, align 8, !tbaa !7
  %13 = icmp eq i8* %12, null
  %14 = icmp ne i32 %11, 0
  %15 = or i1 %14, %13
  br i1 %15, label %94, label %16

16:                                               ; preds = %7
  %17 = bitcast %"class.lodepng::State"* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 544, i8* nonnull %17) #25
  %18 = getelementptr inbounds %"class.lodepng::State", %"class.lodepng::State"* %9, i64 0, i32 0, i32 0, i32 4
  store i32 1, i32* %18, align 4, !tbaa !619
  %19 = getelementptr inbounds %"class.lodepng::State", %"class.lodepng::State"* %9, i64 0, i32 0, i32 0, i32 5
  store i32 1, i32* %19, align 8, !tbaa !625
  %20 = getelementptr inbounds %"class.lodepng::State", %"class.lodepng::State"* %9, i64 0, i32 0, i32 0, i32 6
  store i32 0, i32* %20, align 4, !tbaa !626
  %21 = getelementptr inbounds %"class.lodepng::State", %"class.lodepng::State"* %9, i64 0, i32 0, i32 0, i32 7
  %22 = bitcast i64* %21 to <2 x i64>*
  store <2 x i64> <i64 16777216, i64 16777216>, <2 x i64>* %22, align 8, !tbaa !3
  call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(52) %17, i8 0, i64 52, i1 false) #25
  %23 = getelementptr inbounds %"class.lodepng::State", %"class.lodepng::State"* %9, i64 0, i32 0, i32 1, i32 0, i32 0
  %24 = bitcast i32* %23 to <4 x i32>*
  store <4 x i32> <i32 2, i32 1, i32 2048, i32 3>, <4 x i32>* %24, align 8, !tbaa !9
  %25 = getelementptr inbounds %"class.lodepng::State", %"class.lodepng::State"* %9, i64 0, i32 0, i32 1, i32 0, i32 4
  store i32 128, i32* %25, align 8, !tbaa !109
  %26 = getelementptr inbounds %"class.lodepng::State", %"class.lodepng::State"* %9, i64 0, i32 0, i32 1, i32 0, i32 5
  store i32 1, i32* %26, align 4, !tbaa !110
  %27 = getelementptr inbounds %"class.lodepng::State", %"class.lodepng::State"* %9, i64 0, i32 0, i32 1, i32 0, i32 6
  %28 = bitcast {}** %27 to i8*
  call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(24) %28, i8 0, i64 24, i1 false) #25
  %29 = getelementptr inbounds %"class.lodepng::State", %"class.lodepng::State"* %9, i64 0, i32 0, i32 1, i32 2
  store i32 1, i32* %29, align 4, !tbaa !620
  %30 = getelementptr inbounds %"class.lodepng::State", %"class.lodepng::State"* %9, i64 0, i32 0, i32 1, i32 3
  store i32 5, i32* %30, align 8, !tbaa !621
  %31 = getelementptr inbounds %"class.lodepng::State", %"class.lodepng::State"* %9, i64 0, i32 0, i32 1, i32 1
  store i32 1, i32* %31, align 8, !tbaa !622
  %32 = getelementptr inbounds %"class.lodepng::State", %"class.lodepng::State"* %9, i64 0, i32 0, i32 1, i32 4
  %33 = getelementptr inbounds %"class.lodepng::State", %"class.lodepng::State"* %9, i64 0, i32 0, i32 1, i32 7
  %34 = bitcast i8** %32 to i8*
  call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(16) %34, i8 0, i64 16, i1 false) #25
  store i32 1, i32* %33, align 8, !tbaa !623
  %35 = getelementptr inbounds %"class.lodepng::State", %"class.lodepng::State"* %9, i64 0, i32 0, i32 2, i32 4
  %36 = getelementptr inbounds %"class.lodepng::State", %"class.lodepng::State"* %9, i64 0, i32 0, i32 2, i32 0
  %37 = bitcast i32* %35 to i8*
  call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(16) %37, i8 0, i64 16, i1 false) #25
  %38 = getelementptr inbounds %"class.lodepng::State", %"class.lodepng::State"* %9, i64 0, i32 0, i32 2, i32 1
  %39 = getelementptr inbounds %"class.lodepng::State", %"class.lodepng::State"* %9, i64 0, i32 0, i32 2, i32 2
  %40 = bitcast i8** %39 to i8*
  call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(16) %40, i8 0, i64 16, i1 false) #25
  %41 = getelementptr inbounds %"class.lodepng::State", %"class.lodepng::State"* %9, i64 0, i32 0, i32 3, i32 3, i32 4
  %42 = getelementptr inbounds %"class.lodepng::State", %"class.lodepng::State"* %9, i64 0, i32 0, i32 3, i32 3, i32 0
  %43 = bitcast i32* %41 to i8*
  call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(16) %43, i8 0, i64 16, i1 false) #25
  store i32 6, i32* %42, align 8, !tbaa !147
  %44 = getelementptr inbounds %"class.lodepng::State", %"class.lodepng::State"* %9, i64 0, i32 0, i32 3, i32 3, i32 1
  store i32 8, i32* %44, align 4, !tbaa !150
  %45 = getelementptr inbounds %"class.lodepng::State", %"class.lodepng::State"* %9, i64 0, i32 0, i32 3, i32 3, i32 2
  %46 = bitcast i8** %45 to i8*
  call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(16) %46, i8 0, i64 16, i1 false) #25
  %47 = getelementptr inbounds %"class.lodepng::State", %"class.lodepng::State"* %9, i64 0, i32 0, i32 3, i32 2
  store i32 0, i32* %47, align 8, !tbaa !208
  %48 = getelementptr inbounds %"class.lodepng::State", %"class.lodepng::State"* %9, i64 0, i32 0, i32 3, i32 0
  store i32 0, i32* %48, align 8, !tbaa !209
  %49 = getelementptr inbounds %"class.lodepng::State", %"class.lodepng::State"* %9, i64 0, i32 0, i32 3, i32 1
  store i32 0, i32* %49, align 4, !tbaa !210
  %50 = getelementptr inbounds %"class.lodepng::State", %"class.lodepng::State"* %9, i64 0, i32 0, i32 3, i32 4
  %51 = getelementptr inbounds %"class.lodepng::State", %"class.lodepng::State"* %9, i64 0, i32 0, i32 3, i32 18
  store i32 0, i32* %51, align 4, !tbaa !211
  %52 = getelementptr inbounds %"class.lodepng::State", %"class.lodepng::State"* %9, i64 0, i32 0, i32 3, i32 22
  store i32 0, i32* %52, align 4, !tbaa !212
  %53 = getelementptr inbounds %"class.lodepng::State", %"class.lodepng::State"* %9, i64 0, i32 0, i32 3, i32 24
  store i32 0, i32* %53, align 4, !tbaa !213
  %54 = getelementptr inbounds %"class.lodepng::State", %"class.lodepng::State"* %9, i64 0, i32 0, i32 3, i32 33
  store i32 0, i32* %54, align 8, !tbaa !214
  %55 = getelementptr inbounds %"class.lodepng::State", %"class.lodepng::State"* %9, i64 0, i32 0, i32 3, i32 35
  store i32 0, i32* %55, align 8, !tbaa !199
  %56 = getelementptr inbounds %"class.lodepng::State", %"class.lodepng::State"* %9, i64 0, i32 0, i32 3, i32 36
  %57 = getelementptr inbounds %"class.lodepng::State", %"class.lodepng::State"* %9, i64 0, i32 0, i32 3, i32 39
  %58 = bitcast i32* %50 to i8*
  call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(84) %58, i8 0, i64 84, i1 false) #25
  %59 = bitcast i8** %56 to i8*
  call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(16) %59, i8 0, i64 16, i1 false) #25
  %60 = bitcast i32* %57 to i8*
  call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 4 dereferenceable(68) %60, i8 0, i64 68, i1 false) #25
  %61 = getelementptr inbounds %"class.lodepng::State", %"class.lodepng::State"* %9, i64 0, i32 0, i32 4
  store i32 1, i32* %61, align 8, !tbaa !304
  store i32 %5, i32* %36, align 8, !tbaa !624
  store i32 %6, i32* %38, align 4, !tbaa !472
  %62 = load i32, i32* %1, align 4, !tbaa !9
  %63 = load i32, i32* %2, align 4, !tbaa !9
  switch i32 %5, label %68 [
    i32 0, label %69
    i32 2, label %64
    i32 3, label %69
    i32 4, label %65
    i32 6, label %66
    i32 255, label %67
  ]

64:                                               ; preds = %16
  br label %69

65:                                               ; preds = %16
  br label %69

66:                                               ; preds = %16
  br label %69

67:                                               ; preds = %16
  br label %69

68:                                               ; preds = %16
  br label %69

69:                                               ; preds = %16, %16, %64, %65, %66, %67, %68
  %70 = phi i32 [ 0, %68 ], [ 0, %67 ], [ 4, %66 ], [ 2, %65 ], [ 3, %64 ], [ 1, %16 ], [ 1, %16 ]
  %71 = mul i32 %70, %6
  %72 = zext i32 %71 to i64
  %73 = zext i32 %62 to i64
  %74 = zext i32 %63 to i64
  %75 = mul nuw i64 %74, %73
  %76 = lshr i64 %75, 3
  %77 = mul i64 %76, %72
  %78 = and i64 %75, 7
  %79 = mul nuw nsw i64 %78, %72
  %80 = add nuw nsw i64 %79, 7
  %81 = lshr i64 %80, 3
  %82 = add i64 %81, %77
  %83 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %0, i64 0, i32 0, i32 0, i32 0, i32 1
  %84 = load i8*, i8** %83, align 8, !tbaa !7
  %85 = getelementptr inbounds i8, i8* %12, i64 %82
  invoke void @_ZNSt6vectorIhSaIhEE15_M_range_insertIPhEEvN9__gnu_cxx17__normal_iteratorIS3_S1_EET_S7_St20forward_iterator_tag(%"class.std::vector"* noundef nonnull align 8 dereferenceable(24) %0, i8* %84, i8* noundef nonnull %12, i8* noundef %85)
          to label %86 unwind label %92

86:                                               ; preds = %69
  %87 = load i8*, i8** %39, align 8, !tbaa !151
  %88 = icmp eq i8* %87, null
  br i1 %88, label %90, label %89

89:                                               ; preds = %86
  tail call void @free(i8* noundef nonnull %87) #25
  br label %90

90:                                               ; preds = %86, %89
  call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(16) %40, i8 0, i64 16, i1 false) #25
  %91 = getelementptr inbounds %"class.lodepng::State", %"class.lodepng::State"* %9, i64 0, i32 0, i32 3
  call void @_Z20lodepng_info_cleanupP11LodePNGInfo(%struct.LodePNGInfo* noundef nonnull %91) #25
  call void @llvm.lifetime.end.p0i8(i64 544, i8* nonnull %17) #25
  br label %94

92:                                               ; preds = %69
  %93 = landingpad { i8*, i32 }
          cleanup
  call void @_ZN7lodepng5StateD2Ev(%"class.lodepng::State"* noundef nonnull align 8 dereferenceable(544) %9)
  call void @llvm.lifetime.end.p0i8(i64 544, i8* nonnull %17) #25
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %10) #25
  resume { i8*, i32 } %93

94:                                               ; preds = %90, %7
  tail call void @free(i8* noundef %12) #25
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %10) #25
  ret i32 %11
}

; Function Attrs: uwtable
define dso_local noundef i32 @_ZN7lodepng6decodeERSt6vectorIhSaIhEERjS4_RKS2_16LodePNGColorTypej(%"class.std::vector"* noundef nonnull align 8 dereferenceable(24) %0, i32* noundef nonnull align 4 dereferenceable(4) %1, i32* noundef nonnull align 4 dereferenceable(4) %2, %"class.std::vector"* nocapture noundef nonnull readonly align 8 dereferenceable(24) %3, i32 noundef %4, i32 noundef %5) local_unnamed_addr #12 {
  %7 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %3, i64 0, i32 0, i32 0, i32 0, i32 0
  %8 = load i8*, i8** %7, align 8, !tbaa !7
  %9 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %3, i64 0, i32 0, i32 0, i32 0, i32 1
  %10 = load i8*, i8** %9, align 8, !tbaa !7
  %11 = icmp eq i8* %8, %10
  %12 = select i1 %11, i8* null, i8* %8
  %13 = ptrtoint i8* %10 to i64
  %14 = ptrtoint i8* %8 to i64
  %15 = sub i64 %13, %14
  %16 = and i64 %15, 4294967295
  %17 = tail call noundef i32 @_ZN7lodepng6decodeERSt6vectorIhSaIhEERjS4_PKhm16LodePNGColorTypej(%"class.std::vector"* noundef nonnull align 8 dereferenceable(24) %0, i32* noundef nonnull align 4 dereferenceable(4) %1, i32* noundef nonnull align 4 dereferenceable(4) %2, i8* noundef %12, i64 noundef %16, i32 noundef %4, i32 noundef %5)
  ret i32 %17
}

; Function Attrs: uwtable
define dso_local noundef i32 @_ZN7lodepng6decodeERSt6vectorIhSaIhEERjS4_RNS_5StateEPKhm(%"class.std::vector"* noundef nonnull align 8 dereferenceable(24) %0, i32* noundef nonnull align 4 dereferenceable(4) %1, i32* noundef nonnull align 4 dereferenceable(4) %2, %"class.lodepng::State"* noundef nonnull align 8 dereferenceable(544) %3, i8* noundef %4, i64 noundef %5) local_unnamed_addr #12 {
  %7 = alloca i8*, align 8
  %8 = bitcast i8** %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %8) #25
  store i8* null, i8** %7, align 8, !tbaa !7
  %9 = getelementptr inbounds %"class.lodepng::State", %"class.lodepng::State"* %3, i64 0, i32 0
  %10 = call noundef i32 @_Z14lodepng_decodePPhPjS1_P12LodePNGStatePKhm(i8** noundef nonnull %7, i32* noundef nonnull %1, i32* noundef nonnull %2, %struct.LodePNGState* noundef nonnull %9, i8* noundef %4, i64 noundef %5)
  %11 = load i8*, i8** %7, align 8, !tbaa !7
  %12 = icmp eq i8* %11, null
  %13 = icmp ne i32 %10, 0
  %14 = or i1 %13, %12
  br i1 %14, label %44, label %15

15:                                               ; preds = %6
  %16 = load i32, i32* %1, align 4, !tbaa !9
  %17 = load i32, i32* %2, align 4, !tbaa !9
  %18 = getelementptr inbounds %"class.lodepng::State", %"class.lodepng::State"* %3, i64 0, i32 0, i32 2, i32 0
  %19 = load i32, i32* %18, align 8, !tbaa !147
  %20 = getelementptr inbounds %"class.lodepng::State", %"class.lodepng::State"* %3, i64 0, i32 0, i32 2, i32 1
  %21 = load i32, i32* %20, align 4, !tbaa !150
  switch i32 %19, label %26 [
    i32 0, label %27
    i32 2, label %22
    i32 3, label %27
    i32 4, label %23
    i32 6, label %24
    i32 255, label %25
  ]

22:                                               ; preds = %15
  br label %27

23:                                               ; preds = %15
  br label %27

24:                                               ; preds = %15
  br label %27

25:                                               ; preds = %15
  br label %27

26:                                               ; preds = %15
  br label %27

27:                                               ; preds = %15, %15, %22, %23, %24, %25, %26
  %28 = phi i32 [ 0, %26 ], [ 0, %25 ], [ 4, %24 ], [ 2, %23 ], [ 3, %22 ], [ 1, %15 ], [ 1, %15 ]
  %29 = mul i32 %28, %21
  %30 = zext i32 %29 to i64
  %31 = zext i32 %16 to i64
  %32 = zext i32 %17 to i64
  %33 = mul nuw i64 %32, %31
  %34 = lshr i64 %33, 3
  %35 = mul i64 %34, %30
  %36 = and i64 %33, 7
  %37 = mul nuw nsw i64 %36, %30
  %38 = add nuw nsw i64 %37, 7
  %39 = lshr i64 %38, 3
  %40 = add i64 %39, %35
  %41 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %0, i64 0, i32 0, i32 0, i32 0, i32 1
  %42 = load i8*, i8** %41, align 8, !tbaa !7
  %43 = getelementptr inbounds i8, i8* %11, i64 %40
  tail call void @_ZNSt6vectorIhSaIhEE15_M_range_insertIPhEEvN9__gnu_cxx17__normal_iteratorIS3_S1_EET_S7_St20forward_iterator_tag(%"class.std::vector"* noundef nonnull align 8 dereferenceable(24) %0, i8* %42, i8* noundef nonnull %11, i8* noundef %43)
  br label %44

44:                                               ; preds = %27, %6
  tail call void @free(i8* noundef %11) #25
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %8) #25
  ret i32 %10
}

; Function Attrs: uwtable
define dso_local noundef i32 @_ZN7lodepng6decodeERSt6vectorIhSaIhEERjS4_RNS_5StateERKS2_(%"class.std::vector"* noundef nonnull align 8 dereferenceable(24) %0, i32* noundef nonnull align 4 dereferenceable(4) %1, i32* noundef nonnull align 4 dereferenceable(4) %2, %"class.lodepng::State"* noundef nonnull align 8 dereferenceable(544) %3, %"class.std::vector"* nocapture noundef nonnull readonly align 8 dereferenceable(24) %4) local_unnamed_addr #12 {
  %6 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %4, i64 0, i32 0, i32 0, i32 0, i32 0
  %7 = load i8*, i8** %6, align 8, !tbaa !7
  %8 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %4, i64 0, i32 0, i32 0, i32 0, i32 1
  %9 = load i8*, i8** %8, align 8, !tbaa !7
  %10 = icmp eq i8* %7, %9
  %11 = select i1 %10, i8* null, i8* %7
  %12 = ptrtoint i8* %9 to i64
  %13 = ptrtoint i8* %7 to i64
  %14 = sub i64 %12, %13
  %15 = tail call noundef i32 @_ZN7lodepng6decodeERSt6vectorIhSaIhEERjS4_RNS_5StateEPKhm(%"class.std::vector"* noundef nonnull align 8 dereferenceable(24) %0, i32* noundef nonnull align 4 dereferenceable(4) %1, i32* noundef nonnull align 4 dereferenceable(4) %2, %"class.lodepng::State"* noundef nonnull align 8 dereferenceable(544) %3, i8* noundef %11, i64 noundef %14)
  ret i32 %15
}

; Function Attrs: uwtable
define dso_local noundef i32 @_ZN7lodepng6decodeERSt6vectorIhSaIhEERjS4_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE16LodePNGColorTypej(%"class.std::vector"* noundef nonnull align 8 dereferenceable(24) %0, i32* noundef nonnull align 4 dereferenceable(4) %1, i32* noundef nonnull align 4 dereferenceable(4) %2, %"class.std::__cxx11::basic_string"* nocapture noundef nonnull readonly align 8 dereferenceable(32) %3, i32 noundef %4, i32 noundef %5) local_unnamed_addr #12 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
  %7 = alloca %"class.std::vector", align 8
  %8 = bitcast %"class.std::vector"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %8) #25
  call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(24) %8, i8 0, i64 24, i1 false) #25
  store i32 0, i32* %2, align 4, !tbaa !9
  store i32 0, i32* %1, align 4, !tbaa !9
  %9 = invoke noundef i32 @_ZN7lodepng9load_fileERSt6vectorIhSaIhEERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE(%"class.std::vector"* noundef nonnull align 8 dereferenceable(24) %7, %"class.std::__cxx11::basic_string"* noundef nonnull align 8 dereferenceable(32) %3)
          to label %10 unwind label %12, !range !879

10:                                               ; preds = %6
  %11 = icmp eq i32 %9, 0
  br i1 %11, label %18, label %30

12:                                               ; preds = %18, %6
  %13 = landingpad { i8*, i32 }
          cleanup
  %14 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %7, i64 0, i32 0, i32 0, i32 0, i32 0
  %15 = load i8*, i8** %14, align 8, !tbaa !877
  %16 = icmp eq i8* %15, null
  br i1 %16, label %37, label %17

17:                                               ; preds = %12
  call void @_ZdlPv(i8* noundef nonnull %15) #25
  br label %37

18:                                               ; preds = %10
  %19 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %7, i64 0, i32 0, i32 0, i32 0, i32 0
  %20 = load i8*, i8** %19, align 8, !tbaa !7
  %21 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %7, i64 0, i32 0, i32 0, i32 0, i32 1
  %22 = load i8*, i8** %21, align 8, !tbaa !7
  %23 = icmp eq i8* %20, %22
  %24 = select i1 %23, i8* null, i8* %20
  %25 = ptrtoint i8* %22 to i64
  %26 = ptrtoint i8* %20 to i64
  %27 = sub i64 %25, %26
  %28 = and i64 %27, 4294967295
  %29 = invoke noundef i32 @_ZN7lodepng6decodeERSt6vectorIhSaIhEERjS4_PKhm16LodePNGColorTypej(%"class.std::vector"* noundef nonnull align 8 dereferenceable(24) %0, i32* noundef nonnull align 4 dereferenceable(4) %1, i32* noundef nonnull align 4 dereferenceable(4) %2, i8* noundef %24, i64 noundef %28, i32 noundef %4, i32 noundef %5)
          to label %30 unwind label %12

30:                                               ; preds = %18, %10
  %31 = phi i32 [ %9, %10 ], [ %29, %18 ]
  %32 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %7, i64 0, i32 0, i32 0, i32 0, i32 0
  %33 = load i8*, i8** %32, align 8, !tbaa !877
  %34 = icmp eq i8* %33, null
  br i1 %34, label %36, label %35

35:                                               ; preds = %30
  call void @_ZdlPv(i8* noundef nonnull %33) #25
  br label %36

36:                                               ; preds = %30, %35
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %8) #25
  ret i32 %31

37:                                               ; preds = %17, %12
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %8) #25
  resume { i8*, i32 } %13
}

; Function Attrs: uwtable
define dso_local noundef i32 @_ZN7lodepng6encodeERSt6vectorIhSaIhEEPKhjj16LodePNGColorTypej(%"class.std::vector"* noundef nonnull align 8 dereferenceable(24) %0, i8* noundef %1, i32 noundef %2, i32 noundef %3, i32 noundef %4, i32 noundef %5) local_unnamed_addr #12 {
  %7 = alloca i8*, align 8
  %8 = alloca i64, align 8
  %9 = bitcast i8** %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %9) #25
  %10 = bitcast i64* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %10) #25
  %11 = call noundef i32 @_Z21lodepng_encode_memoryPPhPmPKhjj16LodePNGColorTypej(i8** noundef nonnull %7, i64* noundef nonnull %8, i8* noundef %1, i32 noundef %2, i32 noundef %3, i32 noundef %4, i32 noundef %5)
  %12 = load i8*, i8** %7, align 8, !tbaa !7
  %13 = icmp eq i8* %12, null
  br i1 %13, label %19, label %14

14:                                               ; preds = %6
  %15 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %0, i64 0, i32 0, i32 0, i32 0, i32 1
  %16 = load i8*, i8** %15, align 8, !tbaa !7
  %17 = load i64, i64* %8, align 8, !tbaa !3
  %18 = getelementptr inbounds i8, i8* %12, i64 %17
  tail call void @_ZNSt6vectorIhSaIhEE15_M_range_insertIPhEEvN9__gnu_cxx17__normal_iteratorIS3_S1_EET_S7_St20forward_iterator_tag(%"class.std::vector"* noundef nonnull align 8 dereferenceable(24) %0, i8* %16, i8* noundef nonnull %12, i8* noundef nonnull %18)
  tail call void @free(i8* noundef nonnull %12) #25
  br label %19

19:                                               ; preds = %14, %6
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %10) #25
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %9) #25
  ret i32 %11
}

; Function Attrs: uwtable
define dso_local noundef i32 @_ZN7lodepng6encodeERSt6vectorIhSaIhEERKS2_jj16LodePNGColorTypej(%"class.std::vector"* noundef nonnull align 8 dereferenceable(24) %0, %"class.std::vector"* nocapture noundef nonnull readonly align 8 dereferenceable(24) %1, i32 noundef %2, i32 noundef %3, i32 noundef %4, i32 noundef %5) local_unnamed_addr #12 {
  %7 = alloca i8*, align 8
  %8 = alloca i64, align 8
  switch i32 %4, label %13 [
    i32 0, label %14
    i32 2, label %9
    i32 3, label %14
    i32 4, label %10
    i32 6, label %11
    i32 255, label %12
  ]

9:                                                ; preds = %6
  br label %14

10:                                               ; preds = %6
  br label %14

11:                                               ; preds = %6
  br label %14

12:                                               ; preds = %6
  br label %14

13:                                               ; preds = %6
  br label %14

14:                                               ; preds = %6, %6, %9, %10, %11, %12, %13
  %15 = phi i32 [ 0, %13 ], [ 0, %12 ], [ 4, %11 ], [ 2, %10 ], [ 3, %9 ], [ 1, %6 ], [ 1, %6 ]
  %16 = mul i32 %15, %5
  %17 = zext i32 %16 to i64
  %18 = zext i32 %2 to i64
  %19 = zext i32 %3 to i64
  %20 = mul nuw i64 %19, %18
  %21 = lshr i64 %20, 3
  %22 = mul i64 %21, %17
  %23 = and i64 %20, 7
  %24 = mul nuw nsw i64 %23, %17
  %25 = add nuw nsw i64 %24, 7
  %26 = lshr i64 %25, 3
  %27 = add i64 %26, %22
  %28 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %1, i64 0, i32 0, i32 0, i32 0, i32 1
  %29 = load i8*, i8** %28, align 8, !tbaa !875
  %30 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %1, i64 0, i32 0, i32 0, i32 0, i32 0
  %31 = load i8*, i8** %30, align 8, !tbaa !877
  %32 = ptrtoint i8* %29 to i64
  %33 = ptrtoint i8* %31 to i64
  %34 = sub i64 %32, %33
  %35 = icmp ugt i64 %27, %34
  br i1 %35, label %50, label %36

36:                                               ; preds = %14
  %37 = icmp eq i8* %31, %29
  %38 = select i1 %37, i8* null, i8* %31
  %39 = bitcast i8** %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %39) #25
  %40 = bitcast i64* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %40) #25
  %41 = call noundef i32 @_Z21lodepng_encode_memoryPPhPmPKhjj16LodePNGColorTypej(i8** noundef nonnull %7, i64* noundef nonnull %8, i8* noundef %38, i32 noundef %2, i32 noundef %3, i32 noundef %4, i32 noundef %5)
  %42 = load i8*, i8** %7, align 8, !tbaa !7
  %43 = icmp eq i8* %42, null
  br i1 %43, label %49, label %44

44:                                               ; preds = %36
  %45 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %0, i64 0, i32 0, i32 0, i32 0, i32 1
  %46 = load i8*, i8** %45, align 8, !tbaa !7
  %47 = load i64, i64* %8, align 8, !tbaa !3
  %48 = getelementptr inbounds i8, i8* %42, i64 %47
  tail call void @_ZNSt6vectorIhSaIhEE15_M_range_insertIPhEEvN9__gnu_cxx17__normal_iteratorIS3_S1_EET_S7_St20forward_iterator_tag(%"class.std::vector"* noundef nonnull align 8 dereferenceable(24) %0, i8* %46, i8* noundef nonnull %42, i8* noundef nonnull %48)
  tail call void @free(i8* noundef nonnull %42) #25
  br label %49

49:                                               ; preds = %36, %44
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %40) #25
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %39) #25
  br label %50

50:                                               ; preds = %14, %49
  %51 = phi i32 [ %41, %49 ], [ 84, %14 ]
  ret i32 %51
}

; Function Attrs: uwtable
define dso_local noundef i32 @_ZN7lodepng6encodeERSt6vectorIhSaIhEEPKhjjRNS_5StateE(%"class.std::vector"* noundef nonnull align 8 dereferenceable(24) %0, i8* noundef %1, i32 noundef %2, i32 noundef %3, %"class.lodepng::State"* noundef nonnull align 8 dereferenceable(544) %4) local_unnamed_addr #12 {
  %6 = alloca i8*, align 8
  %7 = alloca i64, align 8
  %8 = bitcast i8** %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %8) #25
  %9 = bitcast i64* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %9) #25
  %10 = getelementptr inbounds %"class.lodepng::State", %"class.lodepng::State"* %4, i64 0, i32 0
  %11 = call noundef i32 @_Z14lodepng_encodePPhPmPKhjjP12LodePNGState(i8** noundef nonnull %6, i64* noundef nonnull %7, i8* noundef %1, i32 noundef %2, i32 noundef %3, %struct.LodePNGState* noundef nonnull %10)
  %12 = load i8*, i8** %6, align 8, !tbaa !7
  %13 = icmp eq i8* %12, null
  br i1 %13, label %19, label %14

14:                                               ; preds = %5
  %15 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %0, i64 0, i32 0, i32 0, i32 0, i32 1
  %16 = load i8*, i8** %15, align 8, !tbaa !7
  %17 = load i64, i64* %7, align 8, !tbaa !3
  %18 = getelementptr inbounds i8, i8* %12, i64 %17
  tail call void @_ZNSt6vectorIhSaIhEE15_M_range_insertIPhEEvN9__gnu_cxx17__normal_iteratorIS3_S1_EET_S7_St20forward_iterator_tag(%"class.std::vector"* noundef nonnull align 8 dereferenceable(24) %0, i8* %16, i8* noundef nonnull %12, i8* noundef nonnull %18)
  tail call void @free(i8* noundef nonnull %12) #25
  br label %19

19:                                               ; preds = %14, %5
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %9) #25
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %8) #25
  ret i32 %11
}

; Function Attrs: uwtable
define dso_local noundef i32 @_ZN7lodepng6encodeERSt6vectorIhSaIhEERKS2_jjRNS_5StateE(%"class.std::vector"* noundef nonnull align 8 dereferenceable(24) %0, %"class.std::vector"* nocapture noundef nonnull readonly align 8 dereferenceable(24) %1, i32 noundef %2, i32 noundef %3, %"class.lodepng::State"* noundef nonnull align 8 dereferenceable(544) %4) local_unnamed_addr #12 {
  %6 = alloca i8*, align 8
  %7 = alloca i64, align 8
  %8 = getelementptr inbounds %"class.lodepng::State", %"class.lodepng::State"* %4, i64 0, i32 0, i32 2, i32 0
  %9 = load i32, i32* %8, align 8, !tbaa !147
  %10 = getelementptr inbounds %"class.lodepng::State", %"class.lodepng::State"* %4, i64 0, i32 0, i32 2, i32 1
  %11 = load i32, i32* %10, align 4, !tbaa !150
  switch i32 %9, label %16 [
    i32 0, label %17
    i32 2, label %12
    i32 3, label %17
    i32 4, label %13
    i32 6, label %14
    i32 255, label %15
  ]

12:                                               ; preds = %5
  br label %17

13:                                               ; preds = %5
  br label %17

14:                                               ; preds = %5
  br label %17

15:                                               ; preds = %5
  br label %17

16:                                               ; preds = %5
  br label %17

17:                                               ; preds = %5, %5, %12, %13, %14, %15, %16
  %18 = phi i32 [ 0, %16 ], [ 0, %15 ], [ 4, %14 ], [ 2, %13 ], [ 3, %12 ], [ 1, %5 ], [ 1, %5 ]
  %19 = mul i32 %18, %11
  %20 = zext i32 %19 to i64
  %21 = zext i32 %2 to i64
  %22 = zext i32 %3 to i64
  %23 = mul nuw i64 %22, %21
  %24 = lshr i64 %23, 3
  %25 = mul i64 %24, %20
  %26 = and i64 %23, 7
  %27 = mul nuw nsw i64 %26, %20
  %28 = add nuw nsw i64 %27, 7
  %29 = lshr i64 %28, 3
  %30 = add i64 %29, %25
  %31 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %1, i64 0, i32 0, i32 0, i32 0, i32 1
  %32 = load i8*, i8** %31, align 8, !tbaa !875
  %33 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %1, i64 0, i32 0, i32 0, i32 0, i32 0
  %34 = load i8*, i8** %33, align 8, !tbaa !877
  %35 = ptrtoint i8* %32 to i64
  %36 = ptrtoint i8* %34 to i64
  %37 = sub i64 %35, %36
  %38 = icmp ugt i64 %30, %37
  br i1 %38, label %54, label %39

39:                                               ; preds = %17
  %40 = icmp eq i8* %34, %32
  %41 = select i1 %40, i8* null, i8* %34
  %42 = bitcast i8** %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %42) #25
  %43 = bitcast i64* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %43) #25
  %44 = getelementptr inbounds %"class.lodepng::State", %"class.lodepng::State"* %4, i64 0, i32 0
  %45 = call noundef i32 @_Z14lodepng_encodePPhPmPKhjjP12LodePNGState(i8** noundef nonnull %6, i64* noundef nonnull %7, i8* noundef %41, i32 noundef %2, i32 noundef %3, %struct.LodePNGState* noundef nonnull %44)
  %46 = load i8*, i8** %6, align 8, !tbaa !7
  %47 = icmp eq i8* %46, null
  br i1 %47, label %53, label %48

48:                                               ; preds = %39
  %49 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %0, i64 0, i32 0, i32 0, i32 0, i32 1
  %50 = load i8*, i8** %49, align 8, !tbaa !7
  %51 = load i64, i64* %7, align 8, !tbaa !3
  %52 = getelementptr inbounds i8, i8* %46, i64 %51
  tail call void @_ZNSt6vectorIhSaIhEE15_M_range_insertIPhEEvN9__gnu_cxx17__normal_iteratorIS3_S1_EET_S7_St20forward_iterator_tag(%"class.std::vector"* noundef nonnull align 8 dereferenceable(24) %0, i8* %50, i8* noundef nonnull %46, i8* noundef nonnull %52)
  tail call void @free(i8* noundef nonnull %46) #25
  br label %53

53:                                               ; preds = %39, %48
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %43) #25
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %42) #25
  br label %54

54:                                               ; preds = %17, %53
  %55 = phi i32 [ %45, %53 ], [ 84, %17 ]
  ret i32 %55
}

; Function Attrs: uwtable
define dso_local noundef i32 @_ZN7lodepng6encodeERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPKhjj16LodePNGColorTypej(%"class.std::__cxx11::basic_string"* nocapture noundef nonnull readonly align 8 dereferenceable(32) %0, i8* noundef %1, i32 noundef %2, i32 noundef %3, i32 noundef %4, i32 noundef %5) local_unnamed_addr #12 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
  %7 = alloca i8*, align 8
  %8 = alloca i64, align 8
  %9 = alloca %"class.std::vector", align 8
  %10 = bitcast %"class.std::vector"* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %10) #25
  call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(24) %10, i8 0, i64 24, i1 false) #25
  %11 = bitcast i8** %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %11) #25
  %12 = bitcast i64* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %12) #25
  %13 = invoke noundef i32 @_Z21lodepng_encode_memoryPPhPmPKhjj16LodePNGColorTypej(i8** noundef nonnull %7, i64* noundef nonnull %8, i8* noundef %1, i32 noundef %2, i32 noundef %3, i32 noundef %4, i32 noundef %5)
          to label %14 unwind label %40

14:                                               ; preds = %6
  %15 = load i8*, i8** %7, align 8, !tbaa !7
  %16 = icmp eq i8* %15, null
  br i1 %16, label %21, label %17

17:                                               ; preds = %14
  %18 = load i64, i64* %8, align 8, !tbaa !3
  %19 = getelementptr inbounds i8, i8* %15, i64 %18
  invoke void @_ZNSt6vectorIhSaIhEE15_M_range_insertIPhEEvN9__gnu_cxx17__normal_iteratorIS3_S1_EET_S7_St20forward_iterator_tag(%"class.std::vector"* noundef nonnull align 8 dereferenceable(24) %9, i8* null, i8* noundef nonnull %15, i8* noundef nonnull %19)
          to label %20 unwind label %40

20:                                               ; preds = %17
  call void @free(i8* noundef nonnull %15) #25
  br label %21

21:                                               ; preds = %20, %14
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %12) #25
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %11) #25
  %22 = icmp eq i32 %13, 0
  br i1 %22, label %23, label %46

23:                                               ; preds = %21
  %24 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %9, i64 0, i32 0, i32 0, i32 0, i32 0
  %25 = load i8*, i8** %24, align 8, !tbaa !7
  %26 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %9, i64 0, i32 0, i32 0, i32 0, i32 1
  %27 = load i8*, i8** %26, align 8, !tbaa !7
  %28 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %0, i64 0, i32 0, i32 0
  %29 = load i8*, i8** %28, align 8, !tbaa !872
  %30 = call noalias %struct._IO_FILE* @fopen(i8* noundef %29, i8* noundef getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0)) #25
  %31 = icmp eq %struct._IO_FILE* %30, null
  br i1 %31, label %46, label %32

32:                                               ; preds = %23
  %33 = ptrtoint i8* %27 to i64
  %34 = ptrtoint i8* %25 to i64
  %35 = sub i64 %33, %34
  %36 = icmp eq i8* %25, %27
  %37 = select i1 %36, i8* null, i8* %25
  %38 = call i64 @fwrite(i8* noundef %37, i64 noundef 1, i64 noundef %35, %struct._IO_FILE* noundef nonnull %30) #25
  %39 = call i32 @fclose(%struct._IO_FILE* noundef nonnull %30) #25
  br label %46

40:                                               ; preds = %17, %6
  %41 = landingpad { i8*, i32 }
          cleanup
  %42 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %9, i64 0, i32 0, i32 0, i32 0, i32 0
  %43 = load i8*, i8** %42, align 8, !tbaa !877
  %44 = icmp eq i8* %43, null
  br i1 %44, label %53, label %45

45:                                               ; preds = %40
  call void @_ZdlPv(i8* noundef nonnull %43) #25
  br label %53

46:                                               ; preds = %32, %23, %21
  %47 = phi i32 [ %13, %21 ], [ 0, %32 ], [ 79, %23 ]
  %48 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %9, i64 0, i32 0, i32 0, i32 0, i32 0
  %49 = load i8*, i8** %48, align 8, !tbaa !877
  %50 = icmp eq i8* %49, null
  br i1 %50, label %52, label %51

51:                                               ; preds = %46
  call void @_ZdlPv(i8* noundef nonnull %49) #25
  br label %52

52:                                               ; preds = %46, %51
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %10) #25
  ret i32 %47

53:                                               ; preds = %45, %40
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %10) #25
  resume { i8*, i32 } %41
}

; Function Attrs: uwtable
define dso_local noundef i32 @_ZN7lodepng6encodeERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKSt6vectorIhSaIhEEjj16LodePNGColorTypej(%"class.std::__cxx11::basic_string"* nocapture noundef nonnull readonly align 8 dereferenceable(32) %0, %"class.std::vector"* nocapture noundef nonnull readonly align 8 dereferenceable(24) %1, i32 noundef %2, i32 noundef %3, i32 noundef %4, i32 noundef %5) local_unnamed_addr #12 {
  switch i32 %4, label %11 [
    i32 0, label %12
    i32 2, label %7
    i32 3, label %12
    i32 4, label %8
    i32 6, label %9
    i32 255, label %10
  ]

7:                                                ; preds = %6
  br label %12

8:                                                ; preds = %6
  br label %12

9:                                                ; preds = %6
  br label %12

10:                                               ; preds = %6
  br label %12

11:                                               ; preds = %6
  br label %12

12:                                               ; preds = %6, %6, %7, %8, %9, %10, %11
  %13 = phi i32 [ 0, %11 ], [ 0, %10 ], [ 4, %9 ], [ 2, %8 ], [ 3, %7 ], [ 1, %6 ], [ 1, %6 ]
  %14 = mul i32 %13, %5
  %15 = zext i32 %14 to i64
  %16 = zext i32 %2 to i64
  %17 = zext i32 %3 to i64
  %18 = mul nuw i64 %17, %16
  %19 = lshr i64 %18, 3
  %20 = mul i64 %19, %15
  %21 = and i64 %18, 7
  %22 = mul nuw nsw i64 %21, %15
  %23 = add nuw nsw i64 %22, 7
  %24 = lshr i64 %23, 3
  %25 = add i64 %24, %20
  %26 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %1, i64 0, i32 0, i32 0, i32 0, i32 1
  %27 = load i8*, i8** %26, align 8, !tbaa !875
  %28 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %1, i64 0, i32 0, i32 0, i32 0, i32 0
  %29 = load i8*, i8** %28, align 8, !tbaa !877
  %30 = ptrtoint i8* %27 to i64
  %31 = ptrtoint i8* %29 to i64
  %32 = sub i64 %30, %31
  %33 = icmp ugt i64 %25, %32
  br i1 %33, label %38, label %34

34:                                               ; preds = %12
  %35 = icmp eq i8* %29, %27
  %36 = select i1 %35, i8* null, i8* %29
  %37 = tail call noundef i32 @_ZN7lodepng6encodeERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPKhjj16LodePNGColorTypej(%"class.std::__cxx11::basic_string"* noundef nonnull align 8 dereferenceable(32) %0, i8* noundef %36, i32 noundef %2, i32 noundef %3, i32 noundef %4, i32 noundef %5)
  br label %38

38:                                               ; preds = %12, %34
  %39 = phi i32 [ %37, %34 ], [ 84, %12 ]
  ret i32 %39
}

attributes #0 = { nofree nounwind uwtable "frame-pointer"="none" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { nofree nounwind "frame-pointer"="none" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #2 = { inaccessiblememonly mustprogress nofree nounwind willreturn "frame-pointer"="none" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #3 = { nounwind uwtable "frame-pointer"="none" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #4 = { argmemonly nofree nounwind willreturn writeonly }
attributes #5 = { argmemonly nofree nosync nounwind willreturn }
attributes #6 = { argmemonly nofree nounwind willreturn }
attributes #7 = { inaccessiblemem_or_argmemonly mustprogress nounwind willreturn "frame-pointer"="none" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #8 = { nofree nosync nounwind uwtable "frame-pointer"="none" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #9 = { nofree nosync nounwind readnone speculatable willreturn }
attributes #10 = { inaccessiblememonly nofree nounwind willreturn }
attributes #11 = { nofree nosync nounwind readnone willreturn }
attributes #12 = { uwtable "frame-pointer"="none" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #13 = { nofree norecurse nosync nounwind readonly uwtable "frame-pointer"="none" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #14 = { mustprogress nofree norecurse nosync nounwind uwtable willreturn writeonly "frame-pointer"="none" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #15 = { mustprogress nofree norecurse nosync nounwind readonly uwtable willreturn "frame-pointer"="none" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #16 = { nofree norecurse nosync nounwind uwtable "frame-pointer"="none" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #17 = { mustprogress nofree norecurse nosync nounwind readnone uwtable willreturn "frame-pointer"="none" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #18 = { mustprogress nofree nosync nounwind readonly uwtable willreturn "frame-pointer"="none" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #19 = { mustprogress nounwind uwtable willreturn "frame-pointer"="none" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #20 = { mustprogress nofree nosync nounwind uwtable willreturn writeonly "frame-pointer"="none" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #21 = { mustprogress nofree norecurse nosync nounwind uwtable willreturn "frame-pointer"="none" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #22 = { noreturn "frame-pointer"="none" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #23 = { nobuiltin allocsize(0) "frame-pointer"="none" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #24 = { nobuiltin nounwind "frame-pointer"="none" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #25 = { nounwind }
attributes #26 = { noreturn }
attributes #27 = { allocsize(0) }

!llvm.ident = !{!0}
!llvm.module.flags = !{!1, !2}

!0 = !{!"clang version 14.0.0"}
!1 = !{i32 1, !"wchar_size", i32 4}
!2 = !{i32 7, !"uwtable", i32 1}
!3 = !{!4, !4, i64 0}
!4 = !{!"long", !5, i64 0}
!5 = !{!"omnipotent char", !6, i64 0}
!6 = !{!"Simple C++ TBAA"}
!7 = !{!8, !8, i64 0}
!8 = !{!"any pointer", !5, i64 0}
!9 = !{!10, !10, i64 0}
!10 = !{!"int", !5, i64 0}
!11 = !{!12, !10, i64 0}
!12 = !{!"_ZTS7BPMNode", !10, i64 0, !10, i64 4, !8, i64 8, !10, i64 16}
!13 = !{!12, !10, i64 4}
!14 = !{!5, !5, i64 0}
!15 = !{!16}
!16 = distinct !{!16, !17, !"_ZL14lodepng_memsetPvim: argument 0"}
!17 = distinct !{!17, !"_ZL14lodepng_memsetPvim"}
!18 = !{!19, !21}
!19 = distinct !{!19, !20, !"_ZL14lodepng_memcpyPvPKvm: argument 0"}
!20 = distinct !{!20, !"_ZL14lodepng_memcpyPvPKvm"}
!21 = distinct !{!21, !20, !"_ZL14lodepng_memcpyPvPKvm: argument 1"}
!22 = !{!23, !10, i64 32}
!23 = !{!"_ZTS8BPMLists", !10, i64 0, !8, i64 8, !10, i64 16, !10, i64 20, !8, i64 24, !10, i64 32, !8, i64 40, !8, i64 48}
!24 = !{!23, !10, i64 0}
!25 = !{!23, !10, i64 20}
!26 = !{!23, !10, i64 16}
!27 = !{!23, !8, i64 8}
!28 = !{!23, !8, i64 24}
!29 = !{!23, !8, i64 40}
!30 = !{!23, !8, i64 48}
!31 = distinct !{!31, !32}
!32 = !{!"llvm.loop.unroll.disable"}
!33 = !{!12, !10, i64 16}
!34 = !{!12, !8, i64 8}
!35 = distinct !{!35, !32}
!36 = distinct !{!36, !32}
!37 = distinct !{!37, !32}
!38 = distinct !{!38, !32}
!39 = !{!40, !8, i64 0}
!40 = !{!"_ZTS8ucvector", !8, i64 0, !4, i64 8, !4, i64 16}
!41 = !{!42}
!42 = distinct !{!42, !43, !"_ZL13ucvector_initPhm: argument 0"}
!43 = distinct !{!43, !"_ZL13ucvector_initPhm"}
!44 = !{!40, !4, i64 8}
!45 = !{!40, !4, i64 16}
!46 = !{!47, !10, i64 4}
!47 = !{!"_ZTS25LodePNGDecompressSettings", !10, i64 0, !10, i64 4, !4, i64 8, !8, i64 16, !8, i64 24, !8, i64 32}
!48 = !{!49, !51}
!49 = distinct !{!49, !50, !"_ZL14lodepng_memcpyPvPKvm: argument 0"}
!50 = distinct !{!50, !"_ZL14lodepng_memcpyPvPKvm"}
!51 = distinct !{!51, !50, !"_ZL14lodepng_memcpyPvPKvm: argument 1"}
!52 = !{!47, !4, i64 8}
!53 = !{!54, !8, i64 8}
!54 = !{!"_ZTS11HuffmanTree", !8, i64 0, !8, i64 8, !10, i64 16, !10, i64 20, !8, i64 24, !8, i64 32}
!55 = !{!54, !10, i64 20}
!56 = !{!54, !10, i64 16}
!57 = distinct !{!57, !32}
!58 = !{!59}
!59 = distinct !{!59, !60, !"_ZL14lodepng_memsetPvim: argument 0"}
!60 = distinct !{!60, !"_ZL14lodepng_memsetPvim"}
!61 = !{!62}
!62 = distinct !{!62, !63, !"_ZL14lodepng_memsetPvim: argument 0"}
!63 = distinct !{!63, !"_ZL14lodepng_memsetPvim"}
!64 = !{!54, !8, i64 24}
!65 = !{!54, !8, i64 32}
!66 = !{!67, !67, i64 0}
!67 = !{!"short", !5, i64 0}
!68 = !{!54, !8, i64 0}
!69 = !{!70, !72}
!70 = distinct !{!70, !71, !"_ZL14lodepng_memcpyPvPKvm: argument 0"}
!71 = distinct !{!71, !"_ZL14lodepng_memcpyPvPKvm"}
!72 = distinct !{!72, !71, !"_ZL14lodepng_memcpyPvPKvm: argument 1"}
!73 = !{!74, !76}
!74 = distinct !{!74, !75, !"_ZL14lodepng_memcpyPvPKvm: argument 0"}
!75 = distinct !{!75, !"_ZL14lodepng_memcpyPvPKvm"}
!76 = distinct !{!76, !75, !"_ZL14lodepng_memcpyPvPKvm: argument 1"}
!77 = distinct !{!77, !32}
!78 = distinct !{!78, !32}
!79 = !{!80}
!80 = distinct !{!80, !81, !"_ZL13ucvector_initPhm: argument 0"}
!81 = distinct !{!81, !"_ZL13ucvector_initPhm"}
!82 = !{!83, !8, i64 0}
!83 = !{!"_ZTS16LodePNGBitWriter", !8, i64 0, !5, i64 8}
!84 = !{!83, !5, i64 8}
!85 = !{!86, !10, i64 0}
!86 = !{!"_ZTS23LodePNGCompressSettings", !10, i64 0, !10, i64 4, !10, i64 8, !10, i64 12, !10, i64 16, !10, i64 20, !8, i64 24, !8, i64 32, !8, i64 40}
!87 = !{!88, !90}
!88 = distinct !{!88, !89, !"_ZL14lodepng_memcpyPvPKvm: argument 0"}
!89 = distinct !{!89, !"_ZL14lodepng_memcpyPvPKvm"}
!90 = distinct !{!90, !89, !"_ZL14lodepng_memcpyPvPKvm: argument 1"}
!91 = !{!86, !10, i64 8}
!92 = !{!93, !8, i64 0}
!93 = !{!"_ZTS4Hash", !8, i64 0, !8, i64 8, !8, i64 16, !8, i64 24, !8, i64 32, !8, i64 40}
!94 = !{!93, !8, i64 16}
!95 = !{!93, !8, i64 8}
!96 = !{!93, !8, i64 40}
!97 = !{!93, !8, i64 24}
!98 = !{!93, !8, i64 32}
!99 = distinct !{!99, !100}
!100 = !{!"llvm.loop.isvectorized", i32 1}
!101 = distinct !{!101, !32}
!102 = distinct !{!102, !100}
!103 = distinct !{!103, !32}
!104 = distinct !{!104, !105, !100}
!105 = !{!"llvm.loop.unroll.runtime.disable"}
!106 = distinct !{!106, !105, !100}
!107 = !{!86, !10, i64 4}
!108 = !{!86, !10, i64 12}
!109 = !{!86, !10, i64 16}
!110 = !{!86, !10, i64 20}
!111 = !{i32 0, i32 91}
!112 = !{!113, !8, i64 0}
!113 = !{!"_ZTS8uivector", !8, i64 0, !4, i64 8, !4, i64 16}
!114 = !{!115}
!115 = distinct !{!115, !116, !"_ZL14lodepng_memsetPvim: argument 0"}
!116 = distinct !{!116, !"_ZL14lodepng_memsetPvim"}
!117 = !{!118}
!118 = distinct !{!118, !119, !"_ZL14lodepng_memsetPvim: argument 0"}
!119 = distinct !{!119, !"_ZL14lodepng_memsetPvim"}
!120 = !{!121}
!121 = distinct !{!121, !122, !"_ZL14lodepng_memsetPvim: argument 0"}
!122 = distinct !{!122, !"_ZL14lodepng_memsetPvim"}
!123 = !{!113, !4, i64 8}
!124 = !{!113, !4, i64 16}
!125 = distinct !{!125, !100}
!126 = distinct !{!126, !105, !100}
!127 = !{i32 0, i32 84}
!128 = distinct !{!128, !100}
!129 = distinct !{!129, !100}
!130 = !{i32 0, i32 33}
!131 = distinct !{!131, !100}
!132 = distinct !{!132, !105, !100}
!133 = distinct !{!133, !100}
!134 = distinct !{!134, !105, !100}
!135 = !{!136}
!136 = distinct !{!136, !137, !"_ZL13ucvector_initPhm: argument 0"}
!137 = distinct !{!137, !"_ZL13ucvector_initPhm"}
!138 = !{!47, !8, i64 24}
!139 = !{!47, !10, i64 0}
!140 = distinct !{!140, !32}
!141 = !{!86, !8, i64 32}
!142 = distinct !{!142, !32}
!143 = !{!144, !146}
!144 = distinct !{!144, !145, !"_ZL14lodepng_memcpyPvPKvm: argument 0"}
!145 = distinct !{!145, !"_ZL14lodepng_memcpyPvPKvm"}
!146 = distinct !{!146, !145, !"_ZL14lodepng_memcpyPvPKvm: argument 1"}
!147 = !{!148, !149, i64 0}
!148 = !{!"_ZTS16LodePNGColorMode", !149, i64 0, !10, i64 4, !8, i64 8, !4, i64 16, !10, i64 24, !10, i64 28, !10, i64 32, !10, i64 36}
!149 = !{!"_ZTS16LodePNGColorType", !5, i64 0}
!150 = !{!148, !10, i64 4}
!151 = !{!148, !8, i64 8}
!152 = !{!153, !155}
!153 = distinct !{!153, !154, !"_ZL14lodepng_memcpyPvPKvm: argument 0"}
!154 = distinct !{!154, !"_ZL14lodepng_memcpyPvPKvm"}
!155 = distinct !{!155, !154, !"_ZL14lodepng_memcpyPvPKvm: argument 1"}
!156 = !{!148, !4, i64 16}
!157 = !{!158, !160}
!158 = distinct !{!158, !159, !"_ZL14lodepng_memcpyPvPKvm: argument 0"}
!159 = distinct !{!159, !"_ZL14lodepng_memcpyPvPKvm"}
!160 = distinct !{!160, !159, !"_ZL14lodepng_memcpyPvPKvm: argument 1"}
!161 = !{!148, !10, i64 24}
!162 = !{!163, !8, i64 80}
!163 = !{!"_ZTS11LodePNGInfo", !10, i64 0, !10, i64 4, !10, i64 8, !148, i64 16, !10, i64 56, !10, i64 60, !10, i64 64, !10, i64 68, !4, i64 72, !8, i64 80, !8, i64 88, !4, i64 96, !8, i64 104, !8, i64 112, !8, i64 120, !8, i64 128, !10, i64 136, !164, i64 140, !10, i64 164, !10, i64 168, !10, i64 172, !10, i64 176, !10, i64 180, !10, i64 184, !10, i64 188, !10, i64 192, !10, i64 196, !10, i64 200, !10, i64 204, !10, i64 208, !10, i64 212, !10, i64 216, !10, i64 220, !10, i64 224, !10, i64 228, !10, i64 232, !8, i64 240, !8, i64 248, !10, i64 256, !10, i64 260, !10, i64 264, !10, i64 268, !10, i64 272, !10, i64 276, !5, i64 280, !5, i64 304}
!164 = !{!"_ZTS11LodePNGTime", !10, i64 0, !10, i64 4, !10, i64 8, !10, i64 12, !10, i64 16, !10, i64 20}
!165 = !{!163, !4, i64 72}
!166 = !{!163, !8, i64 88}
!167 = !{!168, !170}
!168 = distinct !{!168, !169, !"_ZL14lodepng_memcpyPvPKvm: argument 0"}
!169 = distinct !{!169, !"_ZL14lodepng_memcpyPvPKvm"}
!170 = distinct !{!170, !169, !"_ZL14lodepng_memcpyPvPKvm: argument 1"}
!171 = !{!172, !174}
!172 = distinct !{!172, !173, !"_ZL14lodepng_memcpyPvPKvm: argument 0"}
!173 = distinct !{!173, !"_ZL14lodepng_memcpyPvPKvm"}
!174 = distinct !{!174, !173, !"_ZL14lodepng_memcpyPvPKvm: argument 1"}
!175 = !{!163, !4, i64 96}
!176 = !{!163, !8, i64 104}
!177 = !{!163, !8, i64 112}
!178 = !{!163, !8, i64 120}
!179 = !{!163, !8, i64 128}
!180 = !{!181, !183}
!181 = distinct !{!181, !182, !"_ZL14lodepng_memcpyPvPKvm: argument 0"}
!182 = distinct !{!182, !"_ZL14lodepng_memcpyPvPKvm"}
!183 = distinct !{!183, !182, !"_ZL14lodepng_memcpyPvPKvm: argument 1"}
!184 = !{!185, !187}
!185 = distinct !{!185, !186, !"_ZL14lodepng_memcpyPvPKvm: argument 0"}
!186 = distinct !{!186, !"_ZL14lodepng_memcpyPvPKvm"}
!187 = distinct !{!187, !186, !"_ZL14lodepng_memcpyPvPKvm: argument 1"}
!188 = !{!189, !191}
!189 = distinct !{!189, !190, !"_ZL14lodepng_memcpyPvPKvm: argument 0"}
!190 = distinct !{!190, !"_ZL14lodepng_memcpyPvPKvm"}
!191 = distinct !{!191, !190, !"_ZL14lodepng_memcpyPvPKvm: argument 1"}
!192 = !{!193, !195}
!193 = distinct !{!193, !194, !"_ZL14lodepng_memcpyPvPKvm: argument 0"}
!194 = distinct !{!194, !"_ZL14lodepng_memcpyPvPKvm"}
!195 = distinct !{!195, !194, !"_ZL14lodepng_memcpyPvPKvm: argument 1"}
!196 = !{!163, !8, i64 240}
!197 = !{!163, !8, i64 248}
!198 = !{!163, !10, i64 256}
!199 = !{!163, !10, i64 232}
!200 = !{!201, !203}
!201 = distinct !{!201, !202, !"_ZL14lodepng_memcpyPvPKvm: argument 0"}
!202 = distinct !{!202, !"_ZL14lodepng_memcpyPvPKvm"}
!203 = distinct !{!203, !202, !"_ZL14lodepng_memcpyPvPKvm: argument 1"}
!204 = !{!205, !207}
!205 = distinct !{!205, !206, !"_ZL14lodepng_memcpyPvPKvm: argument 0"}
!206 = distinct !{!206, !"_ZL14lodepng_memcpyPvPKvm"}
!207 = distinct !{!207, !206, !"_ZL14lodepng_memcpyPvPKvm: argument 1"}
!208 = !{!163, !10, i64 8}
!209 = !{!163, !10, i64 0}
!210 = !{!163, !10, i64 4}
!211 = !{!163, !10, i64 164}
!212 = !{!163, !10, i64 180}
!213 = !{!163, !10, i64 188}
!214 = !{!163, !10, i64 224}
!215 = !{!216, !218}
!216 = distinct !{!216, !217, !"_ZL14lodepng_memcpyPvPKvm: argument 0"}
!217 = distinct !{!217, !"_ZL14lodepng_memcpyPvPKvm"}
!218 = distinct !{!218, !217, !"_ZL14lodepng_memcpyPvPKvm: argument 1"}
!219 = !{!220, !222}
!220 = distinct !{!220, !221, !"_ZL14lodepng_memcpyPvPKvm: argument 0"}
!221 = distinct !{!221, !"_ZL14lodepng_memcpyPvPKvm"}
!222 = distinct !{!222, !221, !"_ZL14lodepng_memcpyPvPKvm: argument 1"}
!223 = !{!224, !226}
!224 = distinct !{!224, !225, !"_ZL14lodepng_memcpyPvPKvm: argument 0"}
!225 = distinct !{!225, !"_ZL14lodepng_memcpyPvPKvm"}
!226 = distinct !{!226, !225, !"_ZL14lodepng_memcpyPvPKvm: argument 1"}
!227 = !{!228, !230}
!228 = distinct !{!228, !229, !"_ZL14lodepng_memcpyPvPKvm: argument 0"}
!229 = distinct !{!229, !"_ZL14lodepng_memcpyPvPKvm"}
!230 = distinct !{!230, !229, !"_ZL14lodepng_memcpyPvPKvm: argument 1"}
!231 = !{!232, !234}
!232 = distinct !{!232, !233, !"_ZL14lodepng_memcpyPvPKvm: argument 0"}
!233 = distinct !{!233, !"_ZL14lodepng_memcpyPvPKvm"}
!234 = distinct !{!234, !233, !"_ZL14lodepng_memcpyPvPKvm: argument 1"}
!235 = !{!148, !10, i64 28}
!236 = !{!148, !10, i64 32}
!237 = !{!148, !10, i64 36}
!238 = !{!239, !241}
!239 = distinct !{!239, !240, !"_ZL14lodepng_memcpyPvPKvm: argument 0"}
!240 = distinct !{!240, !"_ZL14lodepng_memcpyPvPKvm"}
!241 = distinct !{!241, !240, !"_ZL14lodepng_memcpyPvPKvm: argument 1"}
!242 = !{!243, !245}
!243 = distinct !{!243, !244, !"_ZL14lodepng_memcpyPvPKvm: argument 0"}
!244 = distinct !{!244, !"_ZL14lodepng_memcpyPvPKvm"}
!245 = distinct !{!245, !244, !"_ZL14lodepng_memcpyPvPKvm: argument 1"}
!246 = !{!247}
!247 = distinct !{!247, !248, !"_ZL14lodepng_memsetPvim: argument 0"}
!248 = distinct !{!248, !"_ZL14lodepng_memsetPvim"}
!249 = !{!250, !10, i64 128}
!250 = !{!"_ZTS9ColorTree", !5, i64 0, !10, i64 128}
!251 = !{!252}
!252 = distinct !{!252, !253, !"_ZL14lodepng_memsetPvim: argument 0"}
!253 = distinct !{!253, !"_ZL14lodepng_memsetPvim"}
!254 = distinct !{!254, !32}
!255 = !{!256, !258}
!256 = distinct !{!256, !257, !"_ZL14lodepng_memcpyPvPKvm: argument 0"}
!257 = distinct !{!257, !"_ZL14lodepng_memcpyPvPKvm"}
!258 = distinct !{!258, !257, !"_ZL14lodepng_memcpyPvPKvm: argument 1"}
!259 = distinct !{!259, !100}
!260 = distinct !{!260, !32}
!261 = distinct !{!261, !105, !100}
!262 = !{!263, !265}
!263 = distinct !{!263, !264, !"_ZL14lodepng_memcpyPvPKvm: argument 0"}
!264 = distinct !{!264, !"_ZL14lodepng_memcpyPvPKvm"}
!265 = distinct !{!265, !264, !"_ZL14lodepng_memcpyPvPKvm: argument 1"}
!266 = distinct !{!266, !32}
!267 = !{!268, !270}
!268 = distinct !{!268, !269, !"_ZL14lodepng_memcpyPvPKvm: argument 0"}
!269 = distinct !{!269, !"_ZL14lodepng_memcpyPvPKvm"}
!270 = distinct !{!270, !269, !"_ZL14lodepng_memcpyPvPKvm: argument 1"}
!271 = !{!272, !274}
!272 = distinct !{!272, !273, !"_ZL14lodepng_memcpyPvPKvm: argument 0"}
!273 = distinct !{!273, !"_ZL14lodepng_memcpyPvPKvm"}
!274 = distinct !{!274, !273, !"_ZL14lodepng_memcpyPvPKvm: argument 1"}
!275 = !{!276, !278}
!276 = distinct !{!276, !277, !"_ZL14lodepng_memcpyPvPKvm: argument 0"}
!277 = distinct !{!277, !"_ZL14lodepng_memcpyPvPKvm"}
!278 = distinct !{!278, !277, !"_ZL14lodepng_memcpyPvPKvm: argument 1"}
!279 = !{!280, !282}
!280 = distinct !{!280, !281, !"_ZL14lodepng_memcpyPvPKvm: argument 0"}
!281 = distinct !{!281, !"_ZL14lodepng_memcpyPvPKvm"}
!282 = distinct !{!282, !281, !"_ZL14lodepng_memcpyPvPKvm: argument 1"}
!283 = distinct !{!283, !32}
!284 = distinct !{!284, !32}
!285 = distinct !{!285, !32}
!286 = distinct !{!286, !32}
!287 = distinct !{!287, !32}
!288 = distinct !{!288, !32}
!289 = !{!290, !10, i64 16}
!290 = !{!"_ZTS17LodePNGColorStats", !10, i64 0, !10, i64 4, !67, i64 8, !67, i64 10, !67, i64 12, !10, i64 16, !10, i64 20, !5, i64 24, !10, i64 1048, !4, i64 1056, !10, i64 1064, !10, i64 1068}
!291 = !{!290, !10, i64 20}
!292 = !{!290, !10, i64 1048}
!293 = !{!290, !4, i64 1056}
!294 = !{!290, !10, i64 1064}
!295 = !{!290, !10, i64 1068}
!296 = !{!297}
!297 = distinct !{!297, !298, !"_ZL14lodepng_memsetPvim: argument 0"}
!298 = distinct !{!298, !"_ZL14lodepng_memsetPvim"}
!299 = !{!290, !10, i64 0}
!300 = !{!290, !67, i64 8}
!301 = !{!290, !67, i64 10}
!302 = !{!290, !67, i64 12}
!303 = !{!290, !10, i64 4}
!304 = !{!305, !10, i64 536}
!305 = !{!"_ZTS12LodePNGState", !306, i64 0, !307, i64 80, !148, i64 168, !163, i64 208, !10, i64 536}
!306 = !{!"_ZTS22LodePNGDecoderSettings", !47, i64 0, !10, i64 40, !10, i64 44, !10, i64 48, !10, i64 52, !10, i64 56, !10, i64 60, !4, i64 64, !4, i64 72}
!307 = !{!"_ZTS22LodePNGEncoderSettings", !86, i64 0, !10, i64 48, !10, i64 52, !308, i64 56, !8, i64 64, !10, i64 72, !10, i64 76, !10, i64 80}
!308 = !{!"_ZTS21LodePNGFilterStrategy", !5, i64 0}
!309 = !{i8 0, i8 2}
!310 = !{!163, !10, i64 20}
!311 = !{!163, !149, i64 16}
!312 = !{i32 0, i32 38}
!313 = !{!305, !10, i64 40}
!314 = !{i32 0, i32 104}
!315 = !{i32 0, i32 90}
!316 = !{i32 0, i32 74}
!317 = !{i32 0, i32 75}
!318 = !{!163, !10, i64 184}
!319 = !{i32 0, i32 98}
!320 = !{!163, !10, i64 228}
!321 = !{i32 0, i32 116}
!322 = !{i32 0, i32 2}
!323 = !{!163, !4, i64 32}
!324 = !{!163, !10, i64 56}
!325 = !{!163, !10, i64 68}
!326 = !{!163, !10, i64 64}
!327 = !{!163, !10, i64 60}
!328 = !{!329, !331}
!329 = distinct !{!329, !330, !"_ZL14lodepng_memcpyPvPKvm: argument 0"}
!330 = distinct !{!330, !"_ZL14lodepng_memcpyPvPKvm"}
!331 = distinct !{!331, !330, !"_ZL14lodepng_memcpyPvPKvm: argument 1"}
!332 = !{!333, !335}
!333 = distinct !{!333, !334, !"_ZL14lodepng_memcpyPvPKvm: argument 0"}
!334 = distinct !{!334, !"_ZL14lodepng_memcpyPvPKvm"}
!335 = distinct !{!335, !334, !"_ZL14lodepng_memcpyPvPKvm: argument 1"}
!336 = !{i64 0, i64 4, !9, i64 4, i64 4, !9, i64 8, i64 8, !3, i64 16, i64 8, !7, i64 24, i64 8, !7, i64 32, i64 8, !7}
!337 = !{!338, !340}
!338 = distinct !{!338, !339, !"_ZL14lodepng_memcpyPvPKvm: argument 0"}
!339 = distinct !{!339, !"_ZL14lodepng_memcpyPvPKvm"}
!340 = distinct !{!340, !339, !"_ZL14lodepng_memcpyPvPKvm: argument 1"}
!341 = !{!306, !4, i64 64}
!342 = !{!47, !8, i64 16}
!343 = !{!344, !346}
!344 = distinct !{!344, !345, !"_ZL14lodepng_memcpyPvPKvm: argument 0"}
!345 = distinct !{!345, !"_ZL14lodepng_memcpyPvPKvm"}
!346 = distinct !{!346, !345, !"_ZL14lodepng_memcpyPvPKvm: argument 1"}
!347 = !{!348, !350}
!348 = distinct !{!348, !349, !"_ZL14lodepng_memcpyPvPKvm: argument 0"}
!349 = distinct !{!349, !"_ZL14lodepng_memcpyPvPKvm"}
!350 = distinct !{!350, !349, !"_ZL14lodepng_memcpyPvPKvm: argument 1"}
!351 = !{!352, !354}
!352 = distinct !{!352, !353, !"_ZL14lodepng_memcpyPvPKvm: argument 0"}
!353 = distinct !{!353, !"_ZL14lodepng_memcpyPvPKvm"}
!354 = distinct !{!354, !353, !"_ZL14lodepng_memcpyPvPKvm: argument 1"}
!355 = !{!163, !10, i64 136}
!356 = !{!163, !10, i64 140}
!357 = !{!163, !10, i64 144}
!358 = !{!163, !10, i64 148}
!359 = !{!163, !10, i64 152}
!360 = !{!163, !10, i64 156}
!361 = !{!163, !10, i64 160}
!362 = !{!163, !10, i64 168}
!363 = !{!163, !10, i64 172}
!364 = !{!163, !10, i64 176}
!365 = !{!163, !10, i64 192}
!366 = !{!163, !10, i64 196}
!367 = !{!163, !10, i64 200}
!368 = !{!163, !10, i64 204}
!369 = !{!163, !10, i64 208}
!370 = !{!163, !10, i64 212}
!371 = !{!163, !10, i64 216}
!372 = !{!163, !10, i64 220}
!373 = distinct !{!373, !32}
!374 = !{!306, !4, i64 72}
!375 = !{!376}
!376 = distinct !{!376, !377, !"_ZL13ucvector_initPhm: argument 0"}
!377 = distinct !{!377, !"_ZL13ucvector_initPhm"}
!378 = !{!163, !10, i64 260}
!379 = !{!163, !10, i64 272}
!380 = !{!163, !10, i64 268}
!381 = !{!163, !10, i64 264}
!382 = !{!163, !10, i64 276}
!383 = !{!384}
!384 = distinct !{!384, !385, !"_ZL13ucvector_initPhm: argument 0"}
!385 = distinct !{!385, !"_ZL13ucvector_initPhm"}
!386 = !{!305, !10, i64 48}
!387 = !{!388, !390}
!388 = distinct !{!388, !389, !"_ZL14lodepng_memcpyPvPKvm: argument 0"}
!389 = distinct !{!389, !"_ZL14lodepng_memcpyPvPKvm"}
!390 = distinct !{!390, !389, !"_ZL14lodepng_memcpyPvPKvm: argument 1"}
!391 = !{!305, !10, i64 56}
!392 = !{!305, !10, i64 44}
!393 = !{!305, !10, i64 60}
!394 = !{!305, !149, i64 224}
!395 = !{!305, !8, i64 232}
!396 = !{!305, !10, i64 216}
!397 = !{!398}
!398 = distinct !{!398, !399, !"_ZL14lodepng_memsetPvim: argument 0"}
!399 = distinct !{!399, !"_ZL14lodepng_memsetPvim"}
!400 = !{!401}
!401 = distinct !{!401, !402}
!402 = distinct !{!402, !"LVerDomain"}
!403 = !{!404}
!404 = distinct !{!404, !402}
!405 = distinct !{!405, !100}
!406 = distinct !{!406, !100, !105}
!407 = distinct !{!407, !32}
!408 = distinct !{!408, !100}
!409 = !{!410}
!410 = distinct !{!410, !411}
!411 = distinct !{!411, !"LVerDomain"}
!412 = !{!413}
!413 = distinct !{!413, !411}
!414 = distinct !{!414, !100}
!415 = distinct !{!415, !100, !105}
!416 = distinct !{!416, !32}
!417 = distinct !{!417, !100}
!418 = !{!419}
!419 = distinct !{!419, !420}
!420 = distinct !{!420, !"LVerDomain"}
!421 = !{!422}
!422 = distinct !{!422, !420}
!423 = distinct !{!423, !100}
!424 = distinct !{!424, !100, !105}
!425 = distinct !{!425, !32}
!426 = distinct !{!426, !100}
!427 = !{!428}
!428 = distinct !{!428, !429}
!429 = distinct !{!429, !"LVerDomain"}
!430 = !{!431}
!431 = distinct !{!431, !429}
!432 = distinct !{!432, !100}
!433 = distinct !{!433, !100, !105}
!434 = distinct !{!434, !32}
!435 = distinct !{!435, !100}
!436 = !{!437}
!437 = distinct !{!437, !438}
!438 = distinct !{!438, !"LVerDomain"}
!439 = !{!440}
!440 = distinct !{!440, !438}
!441 = distinct !{!441, !100}
!442 = distinct !{!442, !100, !105}
!443 = distinct !{!443, !32}
!444 = distinct !{!444, !100}
!445 = !{!446}
!446 = distinct !{!446, !447}
!447 = distinct !{!447, !"LVerDomain"}
!448 = !{!449}
!449 = distinct !{!449, !447}
!450 = distinct !{!450, !100}
!451 = distinct !{!451, !100, !105}
!452 = distinct !{!452, !32}
!453 = distinct !{!453, !100}
!454 = !{!455}
!455 = distinct !{!455, !456}
!456 = distinct !{!456, !"LVerDomain"}
!457 = !{!458}
!458 = distinct !{!458, !456}
!459 = distinct !{!459, !100}
!460 = distinct !{!460, !100, !105}
!461 = distinct !{!461, !32}
!462 = distinct !{!462, !100}
!463 = !{!305, !10, i64 52}
!464 = !{!465, !467}
!465 = distinct !{!465, !466, !"_ZL14lodepng_memcpyPvPKvm: argument 0"}
!466 = distinct !{!466, !"_ZL14lodepng_memcpyPvPKvm"}
!467 = distinct !{!467, !466, !"_ZL14lodepng_memcpyPvPKvm: argument 1"}
!468 = !{!469, !471}
!469 = distinct !{!469, !470, !"_ZL14lodepng_memcpyPvPKvm: argument 0"}
!470 = distinct !{!470, !"_ZL14lodepng_memcpyPvPKvm"}
!471 = distinct !{!471, !470, !"_ZL14lodepng_memcpyPvPKvm: argument 1"}
!472 = !{!305, !10, i64 172}
!473 = !{!474}
!474 = distinct !{!474, !475}
!475 = distinct !{!475, !"LVerDomain"}
!476 = !{!477}
!477 = distinct !{!477, !475}
!478 = distinct !{!478, !100}
!479 = distinct !{!479, !32}
!480 = distinct !{!480, !100, !105}
!481 = distinct !{!481, !32}
!482 = !{!483}
!483 = distinct !{!483, !484}
!484 = distinct !{!484, !"LVerDomain"}
!485 = !{!486}
!486 = distinct !{!486, !484}
!487 = distinct !{!487, !100}
!488 = distinct !{!488, !32}
!489 = distinct !{!489, !100, !105}
!490 = distinct !{!490, !32}
!491 = distinct !{!491, !100}
!492 = !{!493}
!493 = distinct !{!493, !494}
!494 = distinct !{!494, !"LVerDomain"}
!495 = !{!496}
!496 = distinct !{!496, !494}
!497 = !{!498}
!498 = distinct !{!498, !494}
!499 = !{!493, !496}
!500 = distinct !{!500, !100}
!501 = distinct !{!501, !100, !105}
!502 = distinct !{!502, !100}
!503 = distinct !{!503, !100}
!504 = !{!505}
!505 = distinct !{!505, !506}
!506 = distinct !{!506, !"LVerDomain"}
!507 = !{!508}
!508 = distinct !{!508, !506}
!509 = !{!510}
!510 = distinct !{!510, !506}
!511 = !{!505, !508}
!512 = distinct !{!512, !100}
!513 = distinct !{!513, !100, !105}
!514 = distinct !{!514, !32}
!515 = !{!516}
!516 = distinct !{!516, !517}
!517 = distinct !{!517, !"LVerDomain"}
!518 = !{!519}
!519 = distinct !{!519, !517}
!520 = distinct !{!520, !100}
!521 = distinct !{!521, !32}
!522 = distinct !{!522, !100, !105}
!523 = distinct !{!523, !32}
!524 = distinct !{!524, !100}
!525 = distinct !{!525, !100}
!526 = !{!527}
!527 = distinct !{!527, !528}
!528 = distinct !{!528, !"LVerDomain"}
!529 = !{!530}
!530 = distinct !{!530, !528}
!531 = !{!532}
!532 = distinct !{!532, !528}
!533 = !{!527, !530}
!534 = distinct !{!534, !100}
!535 = distinct !{!535, !100, !105}
!536 = !{!537}
!537 = distinct !{!537, !538}
!538 = distinct !{!538, !"LVerDomain"}
!539 = !{!540}
!540 = distinct !{!540, !538}
!541 = distinct !{!541, !100}
!542 = distinct !{!542, !32}
!543 = distinct !{!543, !100, !105}
!544 = distinct !{!544, !32}
!545 = distinct !{!545, !100}
!546 = !{!547}
!547 = distinct !{!547, !548}
!548 = distinct !{!548, !"LVerDomain"}
!549 = !{!550}
!550 = distinct !{!550, !548}
!551 = !{!552}
!552 = distinct !{!552, !548}
!553 = !{!554}
!554 = distinct !{!554, !548}
!555 = !{!547, !550, !552}
!556 = distinct !{!556, !100}
!557 = distinct !{!557, !100, !105}
!558 = distinct !{!558, !100}
!559 = !{!560}
!560 = distinct !{!560, !561}
!561 = distinct !{!561, !"LVerDomain"}
!562 = !{!563}
!563 = distinct !{!563, !561}
!564 = !{!565}
!565 = distinct !{!565, !561}
!566 = !{!560, !563}
!567 = distinct !{!567, !100}
!568 = distinct !{!568, !100, !105}
!569 = distinct !{!569, !100}
!570 = distinct !{!570, !100}
!571 = !{!572}
!572 = distinct !{!572, !573}
!573 = distinct !{!573, !"LVerDomain"}
!574 = !{!575}
!575 = distinct !{!575, !573}
!576 = distinct !{!576, !100}
!577 = distinct !{!577, !32}
!578 = distinct !{!578, !100, !105}
!579 = distinct !{!579, !32}
!580 = !{!581}
!581 = distinct !{!581, !582}
!582 = distinct !{!582, !"LVerDomain"}
!583 = !{!584}
!584 = distinct !{!584, !582}
!585 = !{!586}
!586 = distinct !{!586, !582}
!587 = !{!581, !584}
!588 = distinct !{!588, !100}
!589 = distinct !{!589, !100, !105}
!590 = distinct !{!590, !32}
!591 = distinct !{!591, !100}
!592 = !{!593}
!593 = distinct !{!593, !594}
!594 = distinct !{!594, !"LVerDomain"}
!595 = !{!596}
!596 = distinct !{!596, !594}
!597 = !{!598}
!598 = distinct !{!598, !594}
!599 = !{!600}
!600 = distinct !{!600, !594}
!601 = !{!602}
!602 = distinct !{!602, !594}
!603 = !{!593, !596, !598, !600}
!604 = distinct !{!604, !100}
!605 = distinct !{!605, !100, !105}
!606 = distinct !{!606, !100}
!607 = !{!608}
!608 = distinct !{!608, !609}
!609 = distinct !{!609, !"LVerDomain"}
!610 = !{!611}
!611 = distinct !{!611, !609}
!612 = !{!613}
!613 = distinct !{!613, !609}
!614 = !{!608, !611}
!615 = distinct !{!615, !100}
!616 = distinct !{!616, !100, !105}
!617 = distinct !{!617, !100}
!618 = distinct !{!618, !100}
!619 = !{!306, !10, i64 52}
!620 = !{!307, !10, i64 52}
!621 = !{!307, !308, i64 56}
!622 = !{!307, !10, i64 48}
!623 = !{!307, !10, i64 80}
!624 = !{!305, !149, i64 168}
!625 = !{!306, !10, i64 56}
!626 = !{!306, !10, i64 60}
!627 = !{i64 0, i64 4, !9, i64 4, i64 4, !9, i64 8, i64 8, !3, i64 16, i64 8, !7, i64 24, i64 8, !7, i64 32, i64 8, !7, i64 40, i64 4, !9, i64 44, i64 4, !9, i64 48, i64 4, !9, i64 52, i64 4, !9, i64 56, i64 4, !9, i64 60, i64 4, !9, i64 64, i64 8, !3, i64 72, i64 8, !3, i64 80, i64 4, !9, i64 84, i64 4, !9, i64 88, i64 4, !9, i64 92, i64 4, !9, i64 96, i64 4, !9, i64 100, i64 4, !9, i64 104, i64 8, !7, i64 112, i64 8, !7, i64 120, i64 8, !7, i64 128, i64 4, !9, i64 132, i64 4, !9, i64 136, i64 4, !628, i64 144, i64 8, !7, i64 152, i64 4, !9, i64 156, i64 4, !9, i64 160, i64 4, !9, i64 168, i64 4, !629, i64 172, i64 4, !9, i64 176, i64 8, !7, i64 184, i64 8, !3, i64 192, i64 4, !9, i64 196, i64 4, !9, i64 200, i64 4, !9, i64 204, i64 4, !9, i64 208, i64 4, !9, i64 212, i64 4, !9, i64 216, i64 4, !9, i64 224, i64 4, !629, i64 228, i64 4, !9, i64 232, i64 8, !7, i64 240, i64 8, !3, i64 248, i64 4, !9, i64 252, i64 4, !9, i64 256, i64 4, !9, i64 260, i64 4, !9, i64 264, i64 4, !9, i64 268, i64 4, !9, i64 272, i64 4, !9, i64 276, i64 4, !9, i64 280, i64 8, !3, i64 288, i64 8, !7, i64 296, i64 8, !7, i64 304, i64 8, !3, i64 312, i64 8, !7, i64 320, i64 8, !7, i64 328, i64 8, !7, i64 336, i64 8, !7, i64 344, i64 4, !9, i64 348, i64 4, !9, i64 352, i64 4, !9, i64 356, i64 4, !9, i64 360, i64 4, !9, i64 364, i64 4, !9, i64 368, i64 4, !9, i64 372, i64 4, !9, i64 376, i64 4, !9, i64 380, i64 4, !9, i64 384, i64 4, !9, i64 388, i64 4, !9, i64 392, i64 4, !9, i64 396, i64 4, !9, i64 400, i64 4, !9, i64 404, i64 4, !9, i64 408, i64 4, !9, i64 412, i64 4, !9, i64 416, i64 4, !9, i64 420, i64 4, !9, i64 424, i64 4, !9, i64 428, i64 4, !9, i64 432, i64 4, !9, i64 436, i64 4, !9, i64 440, i64 4, !9, i64 448, i64 8, !7, i64 456, i64 8, !7, i64 464, i64 4, !9, i64 468, i64 4, !9, i64 472, i64 4, !9, i64 476, i64 4, !9, i64 480, i64 4, !9, i64 484, i64 4, !9, i64 488, i64 24, !14, i64 512, i64 24, !14, i64 536, i64 4, !9}
!628 = !{!308, !308, i64 0}
!629 = !{!149, !149, i64 0}
!630 = !{!631, !633}
!631 = distinct !{!631, !632, !"_ZL14lodepng_memcpyPvPKvm: argument 0"}
!632 = distinct !{!632, !"_ZL14lodepng_memcpyPvPKvm"}
!633 = distinct !{!633, !632, !"_ZL14lodepng_memcpyPvPKvm: argument 1"}
!634 = !{!635, !637}
!635 = distinct !{!635, !636, !"_ZL14lodepng_memcpyPvPKvm: argument 0"}
!636 = distinct !{!636, !"_ZL14lodepng_memcpyPvPKvm"}
!637 = distinct !{!637, !636, !"_ZL14lodepng_memcpyPvPKvm: argument 1"}
!638 = !{!305, !10, i64 152}
!639 = !{!305, !10, i64 80}
!640 = !{!305, !10, i64 128}
!641 = !{!642}
!642 = distinct !{!642, !643, !"_Z23lodepng_color_mode_make16LodePNGColorTypej: argument 0"}
!643 = distinct !{!643, !"_Z23lodepng_color_mode_make16LodePNGColorTypej"}
!644 = !{!305, !10, i64 160}
!645 = !{!305, !10, i64 156}
!646 = !{!647, !649}
!647 = distinct !{!647, !648, !"_ZL14lodepng_memcpyPvPKvm: argument 0"}
!648 = distinct !{!648, !"_ZL14lodepng_memcpyPvPKvm"}
!649 = distinct !{!649, !648, !"_ZL14lodepng_memcpyPvPKvm: argument 1"}
!650 = !{!651, !653}
!651 = distinct !{!651, !652, !"_ZL14lodepng_memcpyPvPKvm: argument 0"}
!652 = distinct !{!652, !"_ZL14lodepng_memcpyPvPKvm"}
!653 = distinct !{!653, !652, !"_ZL14lodepng_memcpyPvPKvm: argument 1"}
!654 = !{!655, !657}
!655 = distinct !{!655, !656, !"_ZL14lodepng_memcpyPvPKvm: argument 0"}
!656 = distinct !{!656, !"_ZL14lodepng_memcpyPvPKvm"}
!657 = distinct !{!657, !656, !"_ZL14lodepng_memcpyPvPKvm: argument 1"}
!658 = !{!86, !8, i64 24}
!659 = !{!660, !662}
!660 = distinct !{!660, !661, !"_ZL14lodepng_memcpyPvPKvm: argument 0"}
!661 = distinct !{!661, !"_ZL14lodepng_memcpyPvPKvm"}
!662 = distinct !{!662, !661, !"_ZL14lodepng_memcpyPvPKvm: argument 1"}
!663 = !{!664, !666}
!664 = distinct !{!664, !665, !"_ZL14lodepng_memcpyPvPKvm: argument 0"}
!665 = distinct !{!665, !"_ZL14lodepng_memcpyPvPKvm"}
!666 = distinct !{!666, !665, !"_ZL14lodepng_memcpyPvPKvm: argument 1"}
!667 = !{!668, !670}
!668 = distinct !{!668, !669, !"_ZL14lodepng_memcpyPvPKvm: argument 0"}
!669 = distinct !{!669, !"_ZL14lodepng_memcpyPvPKvm"}
!670 = distinct !{!670, !669, !"_ZL14lodepng_memcpyPvPKvm: argument 1"}
!671 = !{!672, !674}
!672 = distinct !{!672, !673, !"_ZL14lodepng_memcpyPvPKvm: argument 0"}
!673 = distinct !{!673, !"_ZL14lodepng_memcpyPvPKvm"}
!674 = distinct !{!674, !673, !"_ZL14lodepng_memcpyPvPKvm: argument 1"}
!675 = !{!164, !10, i64 0}
!676 = !{!164, !10, i64 4}
!677 = !{!164, !10, i64 8}
!678 = !{!164, !10, i64 12}
!679 = !{!164, !10, i64 16}
!680 = !{!164, !10, i64 20}
!681 = !{!682, !684}
!682 = distinct !{!682, !683, !"_ZL14lodepng_memcpyPvPKvm: argument 0"}
!683 = distinct !{!683, !"_ZL14lodepng_memcpyPvPKvm"}
!684 = distinct !{!684, !683, !"_ZL14lodepng_memcpyPvPKvm: argument 1"}
!685 = !{!686, !688}
!686 = distinct !{!686, !687, !"_ZL14lodepng_memcpyPvPKvm: argument 0"}
!687 = distinct !{!687, !"_ZL14lodepng_memcpyPvPKvm"}
!688 = distinct !{!688, !687, !"_ZL14lodepng_memcpyPvPKvm: argument 1"}
!689 = !{!690, !692}
!690 = distinct !{!690, !691, !"_ZL14lodepng_memcpyPvPKvm: argument 0"}
!691 = distinct !{!691, !"_ZL14lodepng_memcpyPvPKvm"}
!692 = distinct !{!692, !691, !"_ZL14lodepng_memcpyPvPKvm: argument 1"}
!693 = !{!694, !696}
!694 = distinct !{!694, !695, !"_ZL14lodepng_memcpyPvPKvm: argument 0"}
!695 = distinct !{!695, !"_ZL14lodepng_memcpyPvPKvm"}
!696 = distinct !{!696, !695, !"_ZL14lodepng_memcpyPvPKvm: argument 1"}
!697 = !{!698, !700}
!698 = distinct !{!698, !699, !"_ZL14lodepng_memcpyPvPKvm: argument 0"}
!699 = distinct !{!699, !"_ZL14lodepng_memcpyPvPKvm"}
!700 = distinct !{!700, !699, !"_ZL14lodepng_memcpyPvPKvm: argument 1"}
!701 = !{!702, !704}
!702 = distinct !{!702, !703, !"_ZL14lodepng_memcpyPvPKvm: argument 0"}
!703 = distinct !{!703, !"_ZL14lodepng_memcpyPvPKvm"}
!704 = distinct !{!704, !703, !"_ZL14lodepng_memcpyPvPKvm: argument 1"}
!705 = !{!706, !708}
!706 = distinct !{!706, !707, !"_ZL14lodepng_memcpyPvPKvm: argument 0"}
!707 = distinct !{!707, !"_ZL14lodepng_memcpyPvPKvm"}
!708 = distinct !{!708, !707, !"_ZL14lodepng_memcpyPvPKvm: argument 1"}
!709 = !{!710, !712}
!710 = distinct !{!710, !711, !"_ZL14lodepng_memcpyPvPKvm: argument 0"}
!711 = distinct !{!711, !"_ZL14lodepng_memcpyPvPKvm"}
!712 = distinct !{!712, !711, !"_ZL14lodepng_memcpyPvPKvm: argument 1"}
!713 = !{!714, !716}
!714 = distinct !{!714, !715, !"_ZL14lodepng_memcpyPvPKvm: argument 0"}
!715 = distinct !{!715, !"_ZL14lodepng_memcpyPvPKvm"}
!716 = distinct !{!716, !715, !"_ZL14lodepng_memcpyPvPKvm: argument 1"}
!717 = !{!718}
!718 = distinct !{!718, !719, !"_ZL14lodepng_memsetPvim: argument 0"}
!719 = distinct !{!719, !"_ZL14lodepng_memsetPvim"}
!720 = !{!307, !8, i64 64}
!721 = !{!722, !724}
!722 = distinct !{!722, !723, !"_ZL14lodepng_memcpyPvPKvm: argument 0"}
!723 = distinct !{!723, !"_ZL14lodepng_memcpyPvPKvm"}
!724 = distinct !{!724, !723, !"_ZL14lodepng_memcpyPvPKvm: argument 1"}
!725 = !{!726}
!726 = distinct !{!726, !727}
!727 = distinct !{!727, !"LVerDomain"}
!728 = !{!729}
!729 = distinct !{!729, !727}
!730 = distinct !{!730, !100}
!731 = distinct !{!731, !32}
!732 = distinct !{!732, !100, !105}
!733 = distinct !{!733, !32}
!734 = !{!735}
!735 = distinct !{!735, !736}
!736 = distinct !{!736, !"LVerDomain"}
!737 = !{!738}
!738 = distinct !{!738, !736}
!739 = distinct !{!739, !100}
!740 = distinct !{!740, !32}
!741 = distinct !{!741, !100, !105}
!742 = distinct !{!742, !32}
!743 = distinct !{!743, !100}
!744 = !{!745}
!745 = distinct !{!745, !746}
!746 = distinct !{!746, !"LVerDomain"}
!747 = !{!748}
!748 = distinct !{!748, !746}
!749 = !{!750}
!750 = distinct !{!750, !746}
!751 = !{!748, !745}
!752 = distinct !{!752, !100}
!753 = distinct !{!753, !100, !105}
!754 = distinct !{!754, !100}
!755 = distinct !{!755, !100}
!756 = !{!757}
!757 = distinct !{!757, !758}
!758 = distinct !{!758, !"LVerDomain"}
!759 = !{!760}
!760 = distinct !{!760, !758}
!761 = !{!762}
!762 = distinct !{!762, !758}
!763 = !{!757, !760}
!764 = distinct !{!764, !100}
!765 = distinct !{!765, !100, !105}
!766 = distinct !{!766, !32}
!767 = !{!768}
!768 = distinct !{!768, !769}
!769 = distinct !{!769, !"LVerDomain"}
!770 = !{!771}
!771 = distinct !{!771, !769}
!772 = distinct !{!772, !100}
!773 = distinct !{!773, !32}
!774 = distinct !{!774, !100, !105}
!775 = distinct !{!775, !32}
!776 = distinct !{!776, !100}
!777 = distinct !{!777, !100}
!778 = !{!779}
!779 = distinct !{!779, !780}
!780 = distinct !{!780, !"LVerDomain"}
!781 = !{!782}
!782 = distinct !{!782, !780}
!783 = !{!784}
!784 = distinct !{!784, !780}
!785 = !{!779, !782}
!786 = distinct !{!786, !100}
!787 = distinct !{!787, !100, !105}
!788 = !{!789}
!789 = distinct !{!789, !790}
!790 = distinct !{!790, !"LVerDomain"}
!791 = !{!792}
!792 = distinct !{!792, !790}
!793 = distinct !{!793, !100}
!794 = distinct !{!794, !32}
!795 = distinct !{!795, !100, !105}
!796 = distinct !{!796, !32}
!797 = !{!798}
!798 = distinct !{!798, !799}
!799 = distinct !{!799, !"LVerDomain"}
!800 = !{!801}
!801 = distinct !{!801, !799}
!802 = !{!803}
!803 = distinct !{!803, !799}
!804 = !{!805}
!805 = distinct !{!805, !799}
!806 = !{!801, !798, !803}
!807 = distinct !{!807, !100}
!808 = distinct !{!808, !100, !105}
!809 = distinct !{!809, !100}
!810 = distinct !{!810, !100}
!811 = !{!812}
!812 = distinct !{!812, !813}
!813 = distinct !{!813, !"LVerDomain"}
!814 = !{!815}
!815 = distinct !{!815, !813}
!816 = !{!817}
!817 = distinct !{!817, !813}
!818 = !{!815, !812}
!819 = distinct !{!819, !100}
!820 = distinct !{!820, !100, !105}
!821 = distinct !{!821, !100}
!822 = distinct !{!822, !100}
!823 = !{!824}
!824 = distinct !{!824, !825}
!825 = distinct !{!825, !"LVerDomain"}
!826 = !{!827}
!827 = distinct !{!827, !825}
!828 = !{!829}
!829 = distinct !{!829, !825}
!830 = !{!824, !827}
!831 = distinct !{!831, !100}
!832 = distinct !{!832, !100, !105}
!833 = distinct !{!833, !32}
!834 = !{!835}
!835 = distinct !{!835, !836}
!836 = distinct !{!836, !"LVerDomain"}
!837 = !{!838}
!838 = distinct !{!838, !836}
!839 = distinct !{!839, !100}
!840 = distinct !{!840, !32}
!841 = distinct !{!841, !100, !105}
!842 = distinct !{!842, !32}
!843 = !{!844}
!844 = distinct !{!844, !845}
!845 = distinct !{!845, !"LVerDomain"}
!846 = !{!847}
!847 = distinct !{!847, !845}
!848 = !{!849}
!849 = distinct !{!849, !845}
!850 = !{!851}
!851 = distinct !{!851, !845}
!852 = !{!853}
!853 = distinct !{!853, !845}
!854 = !{!847, !844, !851, !849}
!855 = distinct !{!855, !100}
!856 = distinct !{!856, !100, !105}
!857 = distinct !{!857, !100}
!858 = distinct !{!858, !100}
!859 = !{!860}
!860 = distinct !{!860, !861}
!861 = distinct !{!861, !"LVerDomain"}
!862 = !{!863}
!863 = distinct !{!863, !861}
!864 = !{!865}
!865 = distinct !{!865, !861}
!866 = !{!863, !860}
!867 = distinct !{!867, !100}
!868 = distinct !{!868, !100, !105}
!869 = distinct !{!869, !100}
!870 = distinct !{!870, !100}
!871 = !{!305, !10, i64 228}
!872 = !{!873, !8, i64 0}
!873 = !{!"_ZTSNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE", !874, i64 0, !4, i64 8, !5, i64 16}
!874 = !{!"_ZTSNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderE", !8, i64 0}
!875 = !{!876, !8, i64 8}
!876 = !{!"_ZTSNSt12_Vector_baseIhSaIhEE17_Vector_impl_dataE", !8, i64 0, !8, i64 8, !8, i64 16}
!877 = !{!876, !8, i64 0}
!878 = !{!876, !8, i64 16}
!879 = !{i32 0, i32 79}
